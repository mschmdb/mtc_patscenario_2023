globalThis.global = globalThis;
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key2, value2) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key2] = value2;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key2 of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key2) && key2 !== except)
        __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __publicField = (obj, key2, value2) => {
  __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value2);
  return value2;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value2) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value2);
};
var __privateSet = (obj, member, value2, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value2) : member.set(obj, value2);
  return value2;
};

// .svelte-kit/output/server/chunks/index.js
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function safe_not_equal(a2, b) {
  return a2 != a2 ? b == b : a2 !== b || (a2 && typeof a2 === "object" || typeof a2 === "function");
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function compute_rest_props(props, keys2) {
  const rest = {};
  keys2 = new Set(keys2);
  for (const k in props)
    if (!keys2.has(k) && k[0] !== "$")
      rest[k] = props[k];
  return rest;
}
function compute_slots(slots) {
  const result = {};
  for (const key2 in slots) {
    result[key2] = true;
  }
  return result;
}
function set_store_value(store, ret, value2) {
  store.set(value2);
  return ret;
}
function custom_event(type2, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type2, bubbles, cancelable, detail);
  return e;
}
function set_current_component(component4) {
  current_component = component4;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function createEventDispatcher() {
  const component4 = get_current_component();
  return (type2, detail, { cancelable = false } = {}) => {
    const callbacks = component4.$$.callbacks[type2];
    if (callbacks) {
      const event = custom_event(type2, detail, { cancelable });
      callbacks.slice().forEach((fn) => {
        fn.call(component4, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key2, context) {
  get_current_component().$$.context.set(key2, context);
  return context;
}
function getContext(key2) {
  return get_current_component().$$.context.get(key2);
}
function spread(args, attrs_to_add) {
  const attributes = Object.assign({}, ...args);
  if (attrs_to_add) {
    const classes_to_add = attrs_to_add.classes;
    const styles_to_add = attrs_to_add.styles;
    if (classes_to_add) {
      if (attributes.class == null) {
        attributes.class = classes_to_add;
      } else {
        attributes.class += " " + classes_to_add;
      }
    }
    if (styles_to_add) {
      if (attributes.style == null) {
        attributes.style = style_object_to_string(styles_to_add);
      } else {
        attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));
      }
    }
  }
  let str = "";
  Object.keys(attributes).forEach((name) => {
    if (invalid_attribute_name_character.test(name))
      return;
    const value2 = attributes[name];
    if (value2 === true)
      str += " " + name;
    else if (boolean_attributes.has(name.toLowerCase())) {
      if (value2)
        str += " " + name;
    } else if (value2 != null) {
      str += ` ${name}="${value2}"`;
    }
  });
  return str;
}
function merge_ssr_styles(style_attribute, style_directive) {
  const style_object = {};
  for (const individual_style of style_attribute.split(";")) {
    const colon_index = individual_style.indexOf(":");
    const name = individual_style.slice(0, colon_index).trim();
    const value2 = individual_style.slice(colon_index + 1).trim();
    if (!name)
      continue;
    style_object[name] = value2;
  }
  for (const name in style_directive) {
    const value2 = style_directive[name];
    if (value2) {
      style_object[name] = value2;
    } else {
      delete style_object[name];
    }
  }
  return style_object;
}
function escape(value2, is_attr = false) {
  const str = String(value2);
  const pattern2 = is_attr ? ATTR_REGEX : CONTENT_REGEX;
  pattern2.lastIndex = 0;
  let escaped2 = "";
  let last2 = 0;
  while (pattern2.test(str)) {
    const i = pattern2.lastIndex - 1;
    const ch = str[i];
    escaped2 += str.substring(last2, i) + (ch === "&" ? "&amp;" : ch === '"' ? "&quot;" : "&lt;");
    last2 = i + 1;
  }
  return escaped2 + str.substring(last2);
}
function escape_attribute_value(value2) {
  const should_escape = typeof value2 === "string" || value2 && typeof value2 === "object";
  return should_escape ? escape(value2, true) : value2;
}
function escape_object(obj) {
  const result = {};
  for (const key2 in obj) {
    result[key2] = escape_attribute_value(obj[key2]);
  }
  return result;
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
function validate_component(component4, name) {
  if (!component4 || !component4.$$render) {
    if (name === "svelte:component")
      name += " this={...}";
    throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);
  }
  return component4;
}
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(context || (parent_component ? parent_component.$$.context : [])),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({ $$ });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, { $$slots = {}, context = /* @__PURE__ */ new Map() } = {}) => {
      on_destroy = [];
      const result = { title: "", head: "", css: /* @__PURE__ */ new Set() };
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css) => css.code).join("\n"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name, value2, boolean) {
  if (value2 == null || boolean && !value2)
    return "";
  const assignment = boolean && value2 === true ? "" : `="${escape(value2, true)}"`;
  return ` ${name}${assignment}`;
}
function add_classes(classes) {
  return classes ? ` class="${classes}"` : "";
}
function style_object_to_string(style_object) {
  return Object.keys(style_object).filter((key2) => style_object[key2]).map((key2) => `${key2}: ${escape_attribute_value(style_object[key2])};`).join(" ");
}
var current_component, boolean_attributes, invalid_attribute_name_character, ATTR_REGEX, CONTENT_REGEX, missing_component, on_destroy;
var init_chunks = __esm({
  ".svelte-kit/output/server/chunks/index.js"() {
    Promise.resolve();
    boolean_attributes = /* @__PURE__ */ new Set([
      "allowfullscreen",
      "allowpaymentrequest",
      "async",
      "autofocus",
      "autoplay",
      "checked",
      "controls",
      "default",
      "defer",
      "disabled",
      "formnovalidate",
      "hidden",
      "inert",
      "ismap",
      "itemscope",
      "loop",
      "multiple",
      "muted",
      "nomodule",
      "novalidate",
      "open",
      "playsinline",
      "readonly",
      "required",
      "reversed",
      "selected"
    ]);
    invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
    ATTR_REGEX = /[&"]/g;
    CONTENT_REGEX = /[&<]/g;
    missing_component = {
      $$render: () => ""
    };
  }
});

// .svelte-kit/output/server/chunks/index3.js
function readable(value2, start2) {
  return {
    subscribe: writable(value2, start2).subscribe
  };
}
function writable(value2, start2 = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set3(new_value) {
    if (safe_not_equal(value2, new_value)) {
      value2 = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value2);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set3(fn(value2));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start2(set3) || noop;
    }
    run2(value2);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set: set3, update, subscribe: subscribe2 };
}
var subscriber_queue;
var init_index3 = __esm({
  ".svelte-kit/output/server/chunks/index3.js"() {
    init_chunks();
    subscriber_queue = [];
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports3) {
    "use strict";
    exports3.parse = parse3;
    exports3.serialize = serialize2;
    var __toString = Object.prototype.toString;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse3(str, options2) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options2 || {};
      var dec = opt.decode || decode;
      var index5 = 0;
      while (index5 < str.length) {
        var eqIdx = str.indexOf("=", index5);
        if (eqIdx === -1) {
          break;
        }
        var endIdx = str.indexOf(";", index5);
        if (endIdx === -1) {
          endIdx = str.length;
        } else if (endIdx < eqIdx) {
          index5 = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        var key2 = str.slice(index5, eqIdx).trim();
        if (void 0 === obj[key2]) {
          var val = str.slice(eqIdx + 1, endIdx).trim();
          if (val.charCodeAt(0) === 34) {
            val = val.slice(1, -1);
          }
          obj[key2] = tryDecode(val, dec);
        }
        index5 = endIdx + 1;
      }
      return obj;
    }
    function serialize2(name, val, options2) {
      var opt = options2 || {};
      var enc = opt.encode || encode2;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value2 = enc(val);
      if (value2 && !fieldContentRegExp.test(value2)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value2;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        var expires = opt.expires;
        if (!isDate(expires) || isNaN(expires.valueOf())) {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.priority) {
        var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError("option priority is invalid");
        }
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function decode(str) {
      return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
    }
    function encode2(val) {
      return encodeURIComponent(val);
    }
    function isDate(val) {
      return __toString.call(val) === "[object Date]" || val instanceof Date;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports3, module2) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: true,
      map: false,
      silent: false
    };
    function isNonEmptyString(str) {
      return typeof str === "string" && !!str.trim();
    }
    function parseString2(setCookieValue, options2) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString);
      var nameValuePairStr = parts.shift();
      var parsed = parseNameValuePair(nameValuePairStr);
      var name = parsed.name;
      var value2 = parsed.value;
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      try {
        value2 = options2.decodeValues ? decodeURIComponent(value2) : value2;
      } catch (e) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value2 + "'. Set options.decodeValues to false to disable this feature.",
          e
        );
      }
      var cookie = {
        name,
        value: value2
      };
      parts.forEach(function(part) {
        var sides = part.split("=");
        var key2 = sides.shift().trimLeft().toLowerCase();
        var value3 = sides.join("=");
        if (key2 === "expires") {
          cookie.expires = new Date(value3);
        } else if (key2 === "max-age") {
          cookie.maxAge = parseInt(value3, 10);
        } else if (key2 === "secure") {
          cookie.secure = true;
        } else if (key2 === "httponly") {
          cookie.httpOnly = true;
        } else if (key2 === "samesite") {
          cookie.sameSite = value3;
        } else {
          cookie[key2] = value3;
        }
      });
      return cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "";
      var value2 = "";
      var nameValueArr = nameValuePairStr.split("=");
      if (nameValueArr.length > 1) {
        name = nameValueArr.shift();
        value2 = nameValueArr.join("=");
      } else {
        value2 = nameValuePairStr;
      }
      return { name, value: value2 };
    }
    function parse3(input, options2) {
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      if (!input) {
        if (!options2.map) {
          return [];
        } else {
          return {};
        }
      }
      if (input.headers && input.headers["set-cookie"]) {
        input = input.headers["set-cookie"];
      } else if (input.headers) {
        var sch = input.headers[Object.keys(input.headers).find(function(key2) {
          return key2.toLowerCase() === "set-cookie";
        })];
        if (!sch && input.headers.cookie && !options2.silent) {
          console.warn(
            "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
          );
        }
        input = sch;
      }
      if (!Array.isArray(input)) {
        input = [input];
      }
      options2 = options2 ? Object.assign({}, defaultParseOptions, options2) : defaultParseOptions;
      if (!options2.map) {
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString2(str, options2);
        });
      } else {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString2(str, options2);
          cookies2[cookie.name] = cookie;
          return cookies2;
        }, cookies);
      }
    }
    function splitCookiesString2(cookiesString) {
      if (Array.isArray(cookiesString)) {
        return cookiesString;
      }
      if (typeof cookiesString !== "string") {
        return [];
      }
      var cookiesStrings = [];
      var pos = 0;
      var start2;
      var ch;
      var lastComma;
      var nextStart;
      var cookiesSeparatorFound;
      function skipWhitespace() {
        while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
          pos += 1;
        }
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        ch = cookiesString.charAt(pos);
        return ch !== "=" && ch !== ";" && ch !== ",";
      }
      while (pos < cookiesString.length) {
        start2 = pos;
        cookiesSeparatorFound = false;
        while (skipWhitespace()) {
          ch = cookiesString.charAt(pos);
          if (ch === ",") {
            lastComma = pos;
            pos += 1;
            skipWhitespace();
            nextStart = pos;
            while (pos < cookiesString.length && notSpecialChar()) {
              pos += 1;
            }
            if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
              cookiesSeparatorFound = true;
              pos = nextStart;
              cookiesStrings.push(cookiesString.substring(start2, lastComma));
              start2 = pos;
            } else {
              pos = lastComma + 1;
            }
          } else {
            pos += 1;
          }
        }
        if (!cookiesSeparatorFound || pos >= cookiesString.length) {
          cookiesStrings.push(cookiesString.substring(start2, cookiesString.length));
        }
      }
      return cookiesStrings;
    }
    module2.exports = parse3;
    module2.exports.parse = parse3;
    module2.exports.parseString = parseString2;
    module2.exports.splitCookiesString = splitCookiesString2;
  }
});

// .svelte-kit/output/server/chunks/hooks.js
var hooks_exports = {};
var init_hooks = __esm({
  ".svelte-kit/output/server/chunks/hooks.js"() {
  }
});

// .svelte-kit/output/server/chunks/Close.js
var ChevronDown, ChevronDown$1, Close, Close$1;
var init_Close = __esm({
  ".svelte-kit/output/server/chunks/Close.js"() {
    init_chunks();
    ChevronDown = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path d="${"M16 22L6 12 7.4 10.6 16 19.2 24.6 10.6 26 12z"}"></path></svg>`;
    });
    ChevronDown$1 = ChevronDown;
    Close = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path d="${"M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z"}"></path></svg>`;
    });
    Close$1 = Close;
  }
});

// .svelte-kit/output/server/entries/pages/_layout.svelte.js
var layout_svelte_exports = {};
__export(layout_svelte_exports, {
  default: () => Layout
});
var Grid, Grid$1, Row, Row$1, Column, Column$1, Menu, Menu$1, shouldRenderHamburgerMenu, isSideNavCollapsed, isSideNavRail, HamburgerMenu, HamburgerMenu$1, Header, Header$1, SideNav, SideNav$1, SideNavItems, SideNavItems$1, SideNavLink, SideNavLink$1, SideNavMenu, SideNavMenu$1, SideNavMenuItem, SideNavMenuItem$1, Content, Content$1, SkipToContent, SkipToContent$1, SideNavDivider, SideNavDivider$1, Layout;
var init_layout_svelte = __esm({
  ".svelte-kit/output/server/entries/pages/_layout.svelte.js"() {
    init_chunks();
    init_Close();
    init_index3();
    Grid = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let props;
      let $$restProps = compute_rest_props($$props, [
        "as",
        "condensed",
        "narrow",
        "fullWidth",
        "noGutter",
        "noGutterLeft",
        "noGutterRight",
        "padding"
      ]);
      let { as = false } = $$props;
      let { condensed = false } = $$props;
      let { narrow = false } = $$props;
      let { fullWidth = false } = $$props;
      let { noGutter = false } = $$props;
      let { noGutterLeft = false } = $$props;
      let { noGutterRight = false } = $$props;
      let { padding = false } = $$props;
      if ($$props.as === void 0 && $$bindings.as && as !== void 0)
        $$bindings.as(as);
      if ($$props.condensed === void 0 && $$bindings.condensed && condensed !== void 0)
        $$bindings.condensed(condensed);
      if ($$props.narrow === void 0 && $$bindings.narrow && narrow !== void 0)
        $$bindings.narrow(narrow);
      if ($$props.fullWidth === void 0 && $$bindings.fullWidth && fullWidth !== void 0)
        $$bindings.fullWidth(fullWidth);
      if ($$props.noGutter === void 0 && $$bindings.noGutter && noGutter !== void 0)
        $$bindings.noGutter(noGutter);
      if ($$props.noGutterLeft === void 0 && $$bindings.noGutterLeft && noGutterLeft !== void 0)
        $$bindings.noGutterLeft(noGutterLeft);
      if ($$props.noGutterRight === void 0 && $$bindings.noGutterRight && noGutterRight !== void 0)
        $$bindings.noGutterRight(noGutterRight);
      if ($$props.padding === void 0 && $$bindings.padding && padding !== void 0)
        $$bindings.padding(padding);
      props = {
        ...$$restProps,
        class: [
          $$restProps.class,
          "bx--grid",
          condensed && "bx--grid--condensed",
          narrow && "bx--grid--narrow",
          fullWidth && "bx--grid--full-width",
          noGutter && "bx--no-gutter",
          noGutterLeft && "bx--no-gutter--left",
          noGutterRight && "bx--no-gutter--right",
          padding && "bx--row-padding"
        ].filter(Boolean).join(" ")
      };
      return `${as ? `${slots.default ? slots.default({ props }) : ``}` : `<div${spread([escape_object(props)], {})}>${slots.default ? slots.default({}) : ``}</div>`}`;
    });
    Grid$1 = Grid;
    Row = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let props;
      let $$restProps = compute_rest_props($$props, ["as", "condensed", "narrow", "noGutter", "noGutterLeft", "noGutterRight", "padding"]);
      let { as = false } = $$props;
      let { condensed = false } = $$props;
      let { narrow = false } = $$props;
      let { noGutter = false } = $$props;
      let { noGutterLeft = false } = $$props;
      let { noGutterRight = false } = $$props;
      let { padding = false } = $$props;
      if ($$props.as === void 0 && $$bindings.as && as !== void 0)
        $$bindings.as(as);
      if ($$props.condensed === void 0 && $$bindings.condensed && condensed !== void 0)
        $$bindings.condensed(condensed);
      if ($$props.narrow === void 0 && $$bindings.narrow && narrow !== void 0)
        $$bindings.narrow(narrow);
      if ($$props.noGutter === void 0 && $$bindings.noGutter && noGutter !== void 0)
        $$bindings.noGutter(noGutter);
      if ($$props.noGutterLeft === void 0 && $$bindings.noGutterLeft && noGutterLeft !== void 0)
        $$bindings.noGutterLeft(noGutterLeft);
      if ($$props.noGutterRight === void 0 && $$bindings.noGutterRight && noGutterRight !== void 0)
        $$bindings.noGutterRight(noGutterRight);
      if ($$props.padding === void 0 && $$bindings.padding && padding !== void 0)
        $$bindings.padding(padding);
      props = {
        ...$$restProps,
        class: [
          $$restProps.class,
          "bx--row",
          condensed && "bx--row--condensed",
          narrow && "bx--row--narrow",
          noGutter && "bx--no-gutter",
          noGutterLeft && "bx--no-gutter--left",
          noGutterRight && "bx--no-gutter--right",
          padding && "bx--row-padding"
        ].filter(Boolean).join(" ")
      };
      return `${as ? `${slots.default ? slots.default({ props }) : ``}` : `<div${spread([escape_object(props)], {})}>${slots.default ? slots.default({}) : ``}</div>`}`;
    });
    Row$1 = Row;
    Column = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let columnClass;
      let props;
      let $$restProps = compute_rest_props($$props, [
        "as",
        "noGutter",
        "noGutterLeft",
        "noGutterRight",
        "padding",
        "aspectRatio",
        "sm",
        "md",
        "lg",
        "xlg",
        "max"
      ]);
      let { as = false } = $$props;
      let { noGutter = false } = $$props;
      let { noGutterLeft = false } = $$props;
      let { noGutterRight = false } = $$props;
      let { padding = false } = $$props;
      let { aspectRatio = void 0 } = $$props;
      let { sm = void 0 } = $$props;
      let { md = void 0 } = $$props;
      let { lg = void 0 } = $$props;
      let { xlg = void 0 } = $$props;
      let { max: max5 = void 0 } = $$props;
      const breakpoints = ["sm", "md", "lg", "xlg", "max"];
      if ($$props.as === void 0 && $$bindings.as && as !== void 0)
        $$bindings.as(as);
      if ($$props.noGutter === void 0 && $$bindings.noGutter && noGutter !== void 0)
        $$bindings.noGutter(noGutter);
      if ($$props.noGutterLeft === void 0 && $$bindings.noGutterLeft && noGutterLeft !== void 0)
        $$bindings.noGutterLeft(noGutterLeft);
      if ($$props.noGutterRight === void 0 && $$bindings.noGutterRight && noGutterRight !== void 0)
        $$bindings.noGutterRight(noGutterRight);
      if ($$props.padding === void 0 && $$bindings.padding && padding !== void 0)
        $$bindings.padding(padding);
      if ($$props.aspectRatio === void 0 && $$bindings.aspectRatio && aspectRatio !== void 0)
        $$bindings.aspectRatio(aspectRatio);
      if ($$props.sm === void 0 && $$bindings.sm && sm !== void 0)
        $$bindings.sm(sm);
      if ($$props.md === void 0 && $$bindings.md && md !== void 0)
        $$bindings.md(md);
      if ($$props.lg === void 0 && $$bindings.lg && lg !== void 0)
        $$bindings.lg(lg);
      if ($$props.xlg === void 0 && $$bindings.xlg && xlg !== void 0)
        $$bindings.xlg(xlg);
      if ($$props.max === void 0 && $$bindings.max && max5 !== void 0)
        $$bindings.max(max5);
      columnClass = [sm, md, lg, xlg, max5].map((breakpoint, i) => {
        const name = breakpoints[i];
        if (breakpoint === true) {
          return `bx--col-${name}`;
        } else if (typeof breakpoint === "number") {
          return `bx--col-${name}-${breakpoint}`;
        } else if (typeof breakpoint === "object") {
          let bp = [];
          if (typeof breakpoint.span === "number") {
            bp = [...bp, `bx--col-${name}-${breakpoint.span}`];
          } else if (breakpoint.span === true) {
            bp = [...bp, `bx--col-${name}`];
          }
          if (typeof breakpoint.offset === "number") {
            bp = [...bp, `bx--offset-${name}-${breakpoint.offset}`];
          }
          return bp.join(" ");
        }
      }).filter(Boolean).join(" ");
      props = {
        ...$$restProps,
        class: [
          $$restProps.class,
          columnClass,
          !columnClass && "bx--col",
          noGutter && "bx--no-gutter",
          noGutterLeft && "bx--no-gutter--left",
          noGutterRight && "bx--no-gutter--right",
          aspectRatio && `bx--aspect-ratio bx--aspect-ratio--${aspectRatio}`,
          padding && "bx--col-padding"
        ].filter(Boolean).join(" ")
      };
      return `${as ? `${slots.default ? slots.default({ props }) : ``}` : `<div${spread([escape_object(props)], {})}>${slots.default ? slots.default({}) : ``}</div>`}`;
    });
    Column$1 = Column;
    Menu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path d="${"M4 6H28V8H4zM4 24H28V26H4zM4 12H28V14H4zM4 18H28V20H4z"}"></path></svg>`;
    });
    Menu$1 = Menu;
    shouldRenderHamburgerMenu = writable(false);
    isSideNavCollapsed = writable(false);
    isSideNavRail = writable(false);
    HamburgerMenu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["ariaLabel", "isOpen", "iconMenu", "iconClose", "ref"]);
      let { ariaLabel = void 0 } = $$props;
      let { isOpen = false } = $$props;
      let { iconMenu = Menu$1 } = $$props;
      let { iconClose = Close$1 } = $$props;
      let { ref = null } = $$props;
      if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0)
        $$bindings.ariaLabel(ariaLabel);
      if ($$props.isOpen === void 0 && $$bindings.isOpen && isOpen !== void 0)
        $$bindings.isOpen(isOpen);
      if ($$props.iconMenu === void 0 && $$bindings.iconMenu && iconMenu !== void 0)
        $$bindings.iconMenu(iconMenu);
      if ($$props.iconClose === void 0 && $$bindings.iconClose && iconClose !== void 0)
        $$bindings.iconClose(iconClose);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      return `<button${spread(
        [
          { type: "button" },
          { title: escape_attribute_value(ariaLabel) },
          {
            "aria-label": escape_attribute_value(ariaLabel)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--header__action bx--header__menu-trigger bx--header__menu-toggle"
        }
      )}${add_attribute("this", ref, 0)}>${validate_component((isOpen ? iconClose : iconMenu) || missing_component, "svelte:component").$$render($$result, { size: 20 }, {}, {})}</button>`;
    });
    HamburgerMenu$1 = HamburgerMenu;
    Header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let ariaLabel;
      let $$restProps = compute_rest_props($$props, [
        "expandedByDefault",
        "isSideNavOpen",
        "uiShellAriaLabel",
        "href",
        "company",
        "platformName",
        "persistentHamburgerMenu",
        "expansionBreakpoint",
        "ref",
        "iconMenu",
        "iconClose"
      ]);
      let $shouldRenderHamburgerMenu, $$unsubscribe_shouldRenderHamburgerMenu;
      $$unsubscribe_shouldRenderHamburgerMenu = subscribe(shouldRenderHamburgerMenu, (value2) => $shouldRenderHamburgerMenu = value2);
      let { expandedByDefault = true } = $$props;
      let { isSideNavOpen = false } = $$props;
      let { uiShellAriaLabel = void 0 } = $$props;
      let { href = void 0 } = $$props;
      let { company = void 0 } = $$props;
      let { platformName = "" } = $$props;
      let { persistentHamburgerMenu = false } = $$props;
      let { expansionBreakpoint = 1056 } = $$props;
      let { ref = null } = $$props;
      let { iconMenu = Menu$1 } = $$props;
      let { iconClose = Close$1 } = $$props;
      let winWidth = void 0;
      if ($$props.expandedByDefault === void 0 && $$bindings.expandedByDefault && expandedByDefault !== void 0)
        $$bindings.expandedByDefault(expandedByDefault);
      if ($$props.isSideNavOpen === void 0 && $$bindings.isSideNavOpen && isSideNavOpen !== void 0)
        $$bindings.isSideNavOpen(isSideNavOpen);
      if ($$props.uiShellAriaLabel === void 0 && $$bindings.uiShellAriaLabel && uiShellAriaLabel !== void 0)
        $$bindings.uiShellAriaLabel(uiShellAriaLabel);
      if ($$props.href === void 0 && $$bindings.href && href !== void 0)
        $$bindings.href(href);
      if ($$props.company === void 0 && $$bindings.company && company !== void 0)
        $$bindings.company(company);
      if ($$props.platformName === void 0 && $$bindings.platformName && platformName !== void 0)
        $$bindings.platformName(platformName);
      if ($$props.persistentHamburgerMenu === void 0 && $$bindings.persistentHamburgerMenu && persistentHamburgerMenu !== void 0)
        $$bindings.persistentHamburgerMenu(persistentHamburgerMenu);
      if ($$props.expansionBreakpoint === void 0 && $$bindings.expansionBreakpoint && expansionBreakpoint !== void 0)
        $$bindings.expansionBreakpoint(expansionBreakpoint);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      if ($$props.iconMenu === void 0 && $$bindings.iconMenu && iconMenu !== void 0)
        $$bindings.iconMenu(iconMenu);
      if ($$props.iconClose === void 0 && $$bindings.iconClose && iconClose !== void 0)
        $$bindings.iconClose(iconClose);
      let $$settled;
      let $$rendered;
      do {
        $$settled = true;
        isSideNavOpen = expandedByDefault && winWidth >= expansionBreakpoint && !persistentHamburgerMenu;
        ariaLabel = company ? `${company} ` : "" + (uiShellAriaLabel || $$props["aria-label"] || platformName);
        $$rendered = `

<header${add_attribute("aria-label", ariaLabel, 0)}${add_classes("bx--header".trim())}>${slots["skip-to-content"] ? slots["skip-to-content"]({}) : ``}
  ${$shouldRenderHamburgerMenu && winWidth < expansionBreakpoint || persistentHamburgerMenu ? `${validate_component(HamburgerMenu$1, "HamburgerMenu").$$render(
          $$result,
          {
            iconClose,
            iconMenu,
            isOpen: isSideNavOpen
          },
          {
            isOpen: ($$value) => {
              isSideNavOpen = $$value;
              $$settled = false;
            }
          },
          {}
        )}` : ``}
  <a${spread([{ href: escape_attribute_value(href) }, escape_object($$restProps)], { classes: "bx--header__name" })}${add_attribute("this", ref, 0)}>${company ? `<span${add_classes("bx--header__name--prefix".trim())}>${escape(company)}\xA0</span>` : ``}
    ${slots.platform ? slots.platform({}) : `${escape(platformName)}`}</a>
  ${slots.default ? slots.default({}) : ``}</header>`;
      } while (!$$settled);
      $$unsubscribe_shouldRenderHamburgerMenu();
      return $$rendered;
    });
    Header$1 = Header;
    SideNav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["fixed", "rail", "ariaLabel", "isOpen", "expansionBreakpoint"]);
      let $isSideNavRail, $$unsubscribe_isSideNavRail;
      let $isSideNavCollapsed, $$unsubscribe_isSideNavCollapsed;
      $$unsubscribe_isSideNavRail = subscribe(isSideNavRail, (value2) => $isSideNavRail = value2);
      $$unsubscribe_isSideNavCollapsed = subscribe(isSideNavCollapsed, (value2) => $isSideNavCollapsed = value2);
      let { fixed = false } = $$props;
      let { rail = false } = $$props;
      let { ariaLabel = void 0 } = $$props;
      let { isOpen = false } = $$props;
      let { expansionBreakpoint = 1056 } = $$props;
      const dispatch2 = createEventDispatcher();
      let winWidth = void 0;
      if ($$props.fixed === void 0 && $$bindings.fixed && fixed !== void 0)
        $$bindings.fixed(fixed);
      if ($$props.rail === void 0 && $$bindings.rail && rail !== void 0)
        $$bindings.rail(rail);
      if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0)
        $$bindings.ariaLabel(ariaLabel);
      if ($$props.isOpen === void 0 && $$bindings.isOpen && isOpen !== void 0)
        $$bindings.isOpen(isOpen);
      if ($$props.expansionBreakpoint === void 0 && $$bindings.expansionBreakpoint && expansionBreakpoint !== void 0)
        $$bindings.expansionBreakpoint(expansionBreakpoint);
      {
        dispatch2(isOpen ? "open" : "close");
      }
      set_store_value(isSideNavCollapsed, $isSideNavCollapsed = !isOpen, $isSideNavCollapsed);
      set_store_value(isSideNavRail, $isSideNavRail = rail, $isSideNavRail);
      $$unsubscribe_isSideNavRail();
      $$unsubscribe_isSideNavCollapsed();
      return `

${!fixed ? `
  <div${add_attribute("style", isOpen && "z-index: 6000", 0)}${add_classes(("bx--side-nav__overlay " + (isOpen ? "bx--side-nav__overlay-active" : "")).trim())}></div>` : ``}
<nav${spread(
        [
          {
            "aria-hidden": escape_attribute_value(!isOpen)
          },
          {
            "aria-label": escape_attribute_value(ariaLabel)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--side-nav__navigation bx--side-nav bx--side-nav--ux " + ((rail && winWidth >= expansionBreakpoint ? false : isOpen) ? "bx--side-nav--expanded" : "") + " " + (!isOpen && !rail ? "bx--side-nav--collapsed" : "") + " " + (rail ? "bx--side-nav--rail" : "")
        }
      )}>${slots.default ? slots.default({}) : ``}</nav>`;
    });
    SideNav$1 = SideNav;
    SideNavItems = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      return `<ul${add_classes("bx--side-nav__items".trim())}>${slots.default ? slots.default({}) : ``}</ul>`;
    });
    SideNavItems$1 = SideNavItems;
    SideNavLink = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["isSelected", "href", "text", "icon", "ref"]);
      let $$slots = compute_slots(slots);
      let { isSelected = false } = $$props;
      let { href = void 0 } = $$props;
      let { text = void 0 } = $$props;
      let { icon = void 0 } = $$props;
      let { ref = null } = $$props;
      if ($$props.isSelected === void 0 && $$bindings.isSelected && isSelected !== void 0)
        $$bindings.isSelected(isSelected);
      if ($$props.href === void 0 && $$bindings.href && href !== void 0)
        $$bindings.href(href);
      if ($$props.text === void 0 && $$bindings.text && text !== void 0)
        $$bindings.text(text);
      if ($$props.icon === void 0 && $$bindings.icon && icon !== void 0)
        $$bindings.icon(icon);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      return `<li${add_classes("bx--side-nav__item".trim())}><a${spread(
        [
          {
            "aria-current": escape_attribute_value(isSelected ? "page" : void 0)
          },
          { href: escape_attribute_value(href) },
          {
            rel: escape_attribute_value($$restProps.target === "_blank" ? "noopener noreferrer" : void 0)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--side-nav__link " + (isSelected ? "bx--side-nav__link--current" : "")
        }
      )}${add_attribute("this", ref, 0)}>${$$slots.icon || icon ? `<div${add_classes("bx--side-nav__icon bx--side-nav__icon--small".trim())}>${slots.icon ? slots.icon({}) : `
          ${validate_component(icon || missing_component, "svelte:component").$$render($$result, {}, {}, {})}
        `}</div>` : ``}
    <span${add_classes("bx--side-nav__link-text".trim())}>${slots.default ? slots.default({}) : `
        ${escape(text)}
      `}</span></a></li>`;
    });
    SideNavLink$1 = SideNavLink;
    SideNavMenu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["expanded", "text", "icon", "ref"]);
      let $$slots = compute_slots(slots);
      let { expanded = false } = $$props;
      let { text = void 0 } = $$props;
      let { icon = void 0 } = $$props;
      let { ref = null } = $$props;
      if ($$props.expanded === void 0 && $$bindings.expanded && expanded !== void 0)
        $$bindings.expanded(expanded);
      if ($$props.text === void 0 && $$bindings.text && text !== void 0)
        $$bindings.text(text);
      if ($$props.icon === void 0 && $$bindings.icon && icon !== void 0)
        $$bindings.icon(icon);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      return `<li${add_classes(("bx--side-nav__item " + (icon ? "bx--side-nav__item--icon" : "")).trim())}><button${spread(
        [
          { type: "button" },
          {
            "aria-expanded": escape_attribute_value(expanded)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--side-nav__submenu"
        }
      )}${add_attribute("this", ref, 0)}>${$$slots.icon || icon ? `<div${add_classes("bx--side-nav__icon".trim())}>${slots.icon ? slots.icon({}) : `
          ${validate_component(icon || missing_component, "svelte:component").$$render($$result, {}, {}, {})}
        `}</div>` : ``}
    <span${add_classes("bx--side-nav__submenu-title".trim())}>${escape(text)}</span>
    <div${add_classes("bx--side-nav__icon bx--side-nav__icon--small bx--side-nav__submenu-chevron".trim())}>${validate_component(ChevronDown$1, "ChevronDown").$$render($$result, {}, {}, {})}</div></button>
  <ul role="${"menu"}"${add_attribute("style", expanded && "max-height: none", 0)}${add_classes("bx--side-nav__menu".trim())}>${slots.default ? slots.default({}) : ``}</ul></li>`;
    });
    SideNavMenu$1 = SideNavMenu;
    SideNavMenuItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["isSelected", "href", "text", "ref"]);
      let { isSelected = false } = $$props;
      let { href = void 0 } = $$props;
      let { text = void 0 } = $$props;
      let { ref = null } = $$props;
      if ($$props.isSelected === void 0 && $$bindings.isSelected && isSelected !== void 0)
        $$bindings.isSelected(isSelected);
      if ($$props.href === void 0 && $$bindings.href && href !== void 0)
        $$bindings.href(href);
      if ($$props.text === void 0 && $$bindings.text && text !== void 0)
        $$bindings.text(text);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      return `<li${add_classes("bx--side-nav__menu-item".trim())}><a${spread(
        [
          {
            "aria-current": escape_attribute_value(isSelected ? "page" : void 0)
          },
          { href: escape_attribute_value(href) },
          escape_object($$restProps)
        ],
        {
          classes: "bx--side-nav__link"
        }
      )}${add_attribute("this", ref, 0)}><span${add_classes("bx--side-nav__link-text".trim())}>${slots.default ? slots.default({}) : `${escape(text)}`}</span></a></li>`;
    });
    SideNavMenuItem$1 = SideNavMenuItem;
    Content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let unsetLeftMargin;
      let $$restProps = compute_rest_props($$props, ["id"]);
      let $isSideNavRail, $$unsubscribe_isSideNavRail;
      let $isSideNavCollapsed, $$unsubscribe_isSideNavCollapsed;
      $$unsubscribe_isSideNavRail = subscribe(isSideNavRail, (value2) => $isSideNavRail = value2);
      $$unsubscribe_isSideNavCollapsed = subscribe(isSideNavCollapsed, (value2) => $isSideNavCollapsed = value2);
      let { id: id2 = "main-content" } = $$props;
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      unsetLeftMargin = $isSideNavCollapsed && !$isSideNavRail;
      $$unsubscribe_isSideNavRail();
      $$unsubscribe_isSideNavCollapsed();
      return `<main${spread(
        [
          { id: escape_attribute_value(id2) },
          escape_object($$restProps),
          {
            style: escape(unsetLeftMargin ? "margin-left: 0;" : "", true) + " " + escape($$restProps.style, true)
          }
        ],
        { classes: "bx--content" }
      )}>${slots.default ? slots.default({}) : ``}</main>`;
    });
    Content$1 = Content;
    SkipToContent = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["href", "tabindex"]);
      let { href = "#main-content" } = $$props;
      let { tabindex = "0" } = $$props;
      if ($$props.href === void 0 && $$bindings.href && href !== void 0)
        $$bindings.href(href);
      if ($$props.tabindex === void 0 && $$bindings.tabindex && tabindex !== void 0)
        $$bindings.tabindex(tabindex);
      return `<a${spread(
        [
          { href: escape_attribute_value(href) },
          {
            tabindex: escape_attribute_value(tabindex)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--skip-to-content"
        }
      )}>${slots.default ? slots.default({}) : `Skip to main content`}</a>`;
    });
    SkipToContent$1 = SkipToContent;
    SideNavDivider = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, []);
      return `<li${spread([{ role: "separator" }, escape_object($$restProps)], {
        classes: "bx--side-nav__divider"
      })}></li>`;
    });
    SideNavDivider$1 = SideNavDivider;
    Layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let isSideNavOpen = false;
      let $$settled;
      let $$rendered;
      do {
        $$settled = true;
        $$rendered = `${validate_component(Header$1, "Header").$$render(
          $$result,
          {
            company: "mtc",
            platformName: "patscenario",
            style: "background-color=#fff",
            persistentHamburgerMenu: true,
            isSideNavOpen
          },
          {
            isSideNavOpen: ($$value) => {
              isSideNavOpen = $$value;
              $$settled = false;
            }
          },
          {
            "skip-to-content": () => {
              return `${validate_component(SkipToContent$1, "SkipToContent").$$render($$result, {}, {}, {})}
    `;
            }
          }
        )}
  
  ${validate_component(SideNav$1, "SideNav").$$render(
          $$result,
          { isOpen: isSideNavOpen },
          {
            isOpen: ($$value) => {
              isSideNavOpen = $$value;
              $$settled = false;
            }
          },
          {
            default: () => {
              return `${validate_component(SideNavItems$1, "SideNavItems").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(SideNavLink$1, "SideNavLink").$$render($$result, { href: "/", text: "Link 1" }, {}, {})}
      ${validate_component(SideNavLink$1, "SideNavLink").$$render($$result, { text: "Link 2" }, {}, {})}
      ${validate_component(SideNavLink$1, "SideNavLink").$$render($$result, { text: "Link 3" }, {}, {})}
      ${validate_component(SideNavMenu$1, "SideNavMenu").$$render($$result, { text: "Menu" }, {}, {
                    default: () => {
                      return `${validate_component(SideNavMenuItem$1, "SideNavMenuItem").$$render($$result, { href: "/", text: "Link 1" }, {}, {})}
        ${validate_component(SideNavMenuItem$1, "SideNavMenuItem").$$render($$result, { href: "/", text: "Link 2" }, {}, {})}
        ${validate_component(SideNavMenuItem$1, "SideNavMenuItem").$$render($$result, { href: "/", text: "Link 3" }, {}, {})}`;
                    }
                  })}
      ${validate_component(SideNavDivider$1, "SideNavDivider").$$render($$result, {}, {}, {})}
      ${validate_component(SideNavLink$1, "SideNavLink").$$render($$result, { text: "Link 4" }, {}, {})}`;
                }
              })}`;
            }
          }
        )}
  
  ${validate_component(Content$1, "Content").$$render($$result, {}, {}, {
          default: () => {
            return `${validate_component(Grid$1, "Grid").$$render($$result, {}, {}, {
              default: () => {
                return `${validate_component(Row$1, "Row").$$render($$result, {}, {}, {
                  default: () => {
                    return `${validate_component(Column$1, "Column").$$render($$result, {}, {}, {
                      default: () => {
                        return `${slots.default ? slots.default({}) : ``}`;
                      }
                    })}`;
                  }
                })}`;
              }
            })}`;
          }
        })}`;
      } while (!$$settled);
      return $$rendered;
    });
  }
});

// .svelte-kit/output/server/nodes/0.js
var __exports = {};
__export(__exports, {
  component: () => component,
  file: () => file,
  fonts: () => fonts,
  imports: () => imports,
  index: () => index,
  stylesheets: () => stylesheets
});
var index, component, file, imports, stylesheets, fonts;
var init__ = __esm({
  ".svelte-kit/output/server/nodes/0.js"() {
    index = 0;
    component = async () => (await Promise.resolve().then(() => (init_layout_svelte(), layout_svelte_exports))).default;
    file = "_app/immutable/components/pages/_layout.svelte-07483bfc.js";
    imports = ["_app/immutable/components/pages/_layout.svelte-07483bfc.js", "_app/immutable/chunks/index-58901655.js", "_app/immutable/chunks/Close-b5e78796.js", "_app/immutable/chunks/index-3832014f.js"];
    stylesheets = ["_app/immutable/assets/_layout-c85685cd.css", "_app/immutable/assets/styles-fed8fea8.css"];
    fonts = [];
  }
});

// .svelte-kit/output/server/entries/fallbacks/error.svelte.js
var error_svelte_exports = {};
__export(error_svelte_exports, {
  default: () => Error$1
});
var getStores, page, Error$1;
var init_error_svelte = __esm({
  ".svelte-kit/output/server/entries/fallbacks/error.svelte.js"() {
    init_chunks();
    getStores = () => {
      const stores = getContext("__svelte__");
      return {
        page: {
          subscribe: stores.page.subscribe
        },
        navigating: {
          subscribe: stores.navigating.subscribe
        },
        updated: stores.updated
      };
    };
    page = {
      subscribe(fn) {
        const store = getStores().page;
        return store.subscribe(fn);
      }
    };
    Error$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $page, $$unsubscribe_page;
      $$unsubscribe_page = subscribe(page, (value2) => $page = value2);
      $$unsubscribe_page();
      return `<h1>${escape($page.status)}</h1>
<p>${escape($page.error?.message)}</p>`;
    });
  }
});

// .svelte-kit/output/server/nodes/1.js
var __exports2 = {};
__export(__exports2, {
  component: () => component2,
  file: () => file2,
  fonts: () => fonts2,
  imports: () => imports2,
  index: () => index2,
  stylesheets: () => stylesheets2
});
var index2, component2, file2, imports2, stylesheets2, fonts2;
var init__2 = __esm({
  ".svelte-kit/output/server/nodes/1.js"() {
    index2 = 1;
    component2 = async () => (await Promise.resolve().then(() => (init_error_svelte(), error_svelte_exports))).default;
    file2 = "_app/immutable/components/error.svelte-2ad8cede.js";
    imports2 = ["_app/immutable/components/error.svelte-2ad8cede.js", "_app/immutable/chunks/index-58901655.js", "_app/immutable/chunks/singletons-ccc596e8.js", "_app/immutable/chunks/index-3832014f.js"];
    stylesheets2 = [];
    fonts2 = [];
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports3, module2) {
    var global2 = typeof self !== "undefined" ? self : exports3;
    var __self__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = global2.DOMException;
      }
      F.prototype = global2;
      return new F();
    }();
    (function(self2) {
      var irrelevant = function(exports4) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value2) {
          if (typeof value2 !== "string") {
            value2 = String(value2);
          }
          return value2;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value2 = items.shift();
              return { done: value2 === void 0, value: value2 };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value2, name) {
              this.append(name, value2);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name, value2) {
          name = normalizeName(name);
          value2 = normalizeValue(value2);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value2 : value2;
        };
        Headers2.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers2.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers2.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers2.prototype.set = function(name, value2) {
          this.map[normalizeName(name)] = normalizeValue(value2);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value2, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value2) {
            items.push(value2);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value2, name) {
            items.push([name, value2]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars3 = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars3[i] = String.fromCharCode(view[i]);
          }
          return chars3.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options2) {
          options2 = options2 || {};
          var body = options2.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options2.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options2.credentials || this.credentials || "same-origin";
          if (options2.headers || !this.headers) {
            this.headers = new Headers2(options2.headers);
          }
          this.method = normalizeMethod(options2.method || this.method || "GET");
          this.mode = options2.mode || this.mode || null;
          this.signal = options2.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value2 = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value2));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key2 = parts.shift().trim();
            if (key2) {
              var value2 = parts.join(":").trim();
              headers.append(key2, value2);
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options2) {
          if (!options2) {
            options2 = {};
          }
          this.type = "default";
          this.status = options2.status === void 0 ? 200 : options2.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options2 ? options2.statusText : "OK";
          this.headers = new Headers2(options2.headers);
          this.url = options2.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports4.DOMException = self2.DOMException;
        try {
          new exports4.DOMException();
        } catch (err) {
          exports4.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error2 = Error(message);
            this.stack = error2.stack;
          };
          exports4.DOMException.prototype = Object.create(Error.prototype);
          exports4.DOMException.prototype.constructor = exports4.DOMException;
        }
        function fetch2(input, init3) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init3);
            if (request.signal && request.signal.aborted) {
              return reject(new exports4.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options2 = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options2.url = "responseURL" in xhr ? xhr.responseURL : options2.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response2(body, options2));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports4.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value2, name) {
              xhr.setRequestHeader(name, value2);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers2;
          self2.Request = Request2;
          self2.Response = Response2;
        }
        exports4.Headers = Headers2;
        exports4.Request = Request2;
        exports4.Response = Response2;
        exports4.fetch = fetch2;
        Object.defineProperty(exports4, "__esModule", { value: true });
        return exports4;
      }({});
    })(__self__);
    __self__.fetch.ponyfill = true;
    delete __self__.fetch.polyfill;
    var ctx = __self__;
    exports3 = ctx.fetch;
    exports3.default = ctx.fetch;
    exports3.fetch = ctx.fetch;
    exports3.Headers = ctx.Headers;
    exports3.Request = ctx.Request;
    exports3.Response = ctx.Response;
    module2.exports = exports3;
  }
});

// node_modules/@supabase/functions-js/dist/module/helper.js
var __awaiter, resolveFetch;
var init_helper = __esm({
  "node_modules/@supabase/functions-js/dist/module/helper.js"() {
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    resolveFetch = (customFetch) => {
      let _fetch;
      if (customFetch) {
        _fetch = customFetch;
      } else if (typeof fetch === "undefined") {
        _fetch = (...args) => __awaiter(void 0, void 0, void 0, function* () {
          return yield (yield Promise.resolve().then(() => __toESM(require_browser_ponyfill()))).fetch(...args);
        });
      } else {
        _fetch = fetch;
      }
      return (...args) => _fetch(...args);
    };
  }
});

// node_modules/@supabase/functions-js/dist/module/types.js
var FunctionsError, FunctionsFetchError, FunctionsRelayError, FunctionsHttpError;
var init_types = __esm({
  "node_modules/@supabase/functions-js/dist/module/types.js"() {
    FunctionsError = class extends Error {
      constructor(message, name = "FunctionsError", context) {
        super(message);
        super.name = name;
        this.context = context;
      }
    };
    FunctionsFetchError = class extends FunctionsError {
      constructor(context) {
        super("Failed to send a request to the Edge Function", "FunctionsFetchError", context);
      }
    };
    FunctionsRelayError = class extends FunctionsError {
      constructor(context) {
        super("Relay Error invoking the Edge Function", "FunctionsRelayError", context);
      }
    };
    FunctionsHttpError = class extends FunctionsError {
      constructor(context) {
        super("Edge Function returned a non-2xx status code", "FunctionsHttpError", context);
      }
    };
  }
});

// node_modules/@supabase/functions-js/dist/module/FunctionsClient.js
var __awaiter2, FunctionsClient;
var init_FunctionsClient = __esm({
  "node_modules/@supabase/functions-js/dist/module/FunctionsClient.js"() {
    init_helper();
    init_types();
    __awaiter2 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    FunctionsClient = class {
      constructor(url, { headers = {}, customFetch } = {}) {
        this.url = url;
        this.headers = headers;
        this.fetch = resolveFetch(customFetch);
      }
      setAuth(token) {
        this.headers.Authorization = `Bearer ${token}`;
      }
      invoke(functionName, invokeOptions = {}) {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          try {
            const { headers, body: functionArgs } = invokeOptions;
            let _headers = {};
            let body;
            if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers)) {
              if (typeof Blob !== "undefined" && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {
                _headers["Content-Type"] = "application/octet-stream";
                body = functionArgs;
              } else if (typeof functionArgs === "string") {
                _headers["Content-Type"] = "text/plain";
                body = functionArgs;
              } else if (typeof FormData !== "undefined" && functionArgs instanceof FormData) {
                body = functionArgs;
              } else {
                _headers["Content-Type"] = "application/json";
                body = JSON.stringify(functionArgs);
              }
            }
            const response = yield this.fetch(`${this.url}/${functionName}`, {
              method: "POST",
              headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),
              body
            }).catch((fetchError) => {
              throw new FunctionsFetchError(fetchError);
            });
            const isRelayError = response.headers.get("x-relay-error");
            if (isRelayError && isRelayError === "true") {
              throw new FunctionsRelayError(response);
            }
            if (!response.ok) {
              throw new FunctionsHttpError(response);
            }
            let responseType = ((_a3 = response.headers.get("Content-Type")) !== null && _a3 !== void 0 ? _a3 : "text/plain").split(";")[0].trim();
            let data;
            if (responseType === "application/json") {
              data = yield response.json();
            } else if (responseType === "application/octet-stream") {
              data = yield response.blob();
            } else if (responseType === "multipart/form-data") {
              data = yield response.formData();
            } else {
              data = yield response.text();
            }
            return { data, error: null };
          } catch (error2) {
            return { data: null, error: error2 };
          }
        });
      }
    };
  }
});

// node_modules/@supabase/functions-js/dist/module/index.js
var init_module = __esm({
  "node_modules/@supabase/functions-js/dist/module/index.js"() {
    init_FunctionsClient();
  }
});

// node_modules/@supabase/postgrest-js/dist/module/PostgrestBuilder.js
var import_cross_fetch, __awaiter3, PostgrestBuilder;
var init_PostgrestBuilder = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/PostgrestBuilder.js"() {
    import_cross_fetch = __toESM(require_browser_ponyfill());
    __awaiter3 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    PostgrestBuilder = class {
      constructor(builder) {
        this.shouldThrowOnError = false;
        this.method = builder.method;
        this.url = builder.url;
        this.headers = builder.headers;
        this.schema = builder.schema;
        this.body = builder.body;
        this.shouldThrowOnError = builder.shouldThrowOnError;
        this.signal = builder.signal;
        this.allowEmpty = builder.allowEmpty;
        if (builder.fetch) {
          this.fetch = builder.fetch;
        } else if (typeof fetch === "undefined") {
          this.fetch = import_cross_fetch.default;
        } else {
          this.fetch = fetch;
        }
      }
      throwOnError() {
        this.shouldThrowOnError = true;
        return this;
      }
      then(onfulfilled, onrejected) {
        if (this.schema === void 0) {
        } else if (["GET", "HEAD"].includes(this.method)) {
          this.headers["Accept-Profile"] = this.schema;
        } else {
          this.headers["Content-Profile"] = this.schema;
        }
        if (this.method !== "GET" && this.method !== "HEAD") {
          this.headers["Content-Type"] = "application/json";
        }
        const _fetch = this.fetch;
        let res = _fetch(this.url.toString(), {
          method: this.method,
          headers: this.headers,
          body: JSON.stringify(this.body),
          signal: this.signal
        }).then((res2) => __awaiter3(this, void 0, void 0, function* () {
          var _a3, _b, _c;
          let error2 = null;
          let data = null;
          let count3 = null;
          let status = res2.status;
          let statusText = res2.statusText;
          if (res2.ok) {
            if (this.method !== "HEAD") {
              const body = yield res2.text();
              if (body === "") {
              } else if (this.headers["Accept"] === "text/csv") {
                data = body;
              } else if (this.headers["Accept"] && this.headers["Accept"].includes("application/vnd.pgrst.plan+text")) {
                data = body;
              } else {
                data = JSON.parse(body);
              }
            }
            const countHeader = (_a3 = this.headers["Prefer"]) === null || _a3 === void 0 ? void 0 : _a3.match(/count=(exact|planned|estimated)/);
            const contentRange = (_b = res2.headers.get("content-range")) === null || _b === void 0 ? void 0 : _b.split("/");
            if (countHeader && contentRange && contentRange.length > 1) {
              count3 = parseInt(contentRange[1]);
            }
          } else {
            const body = yield res2.text();
            try {
              error2 = JSON.parse(body);
              if (Array.isArray(error2) && res2.status === 404) {
                data = [];
                error2 = null;
                status = 200;
                statusText = "OK";
              }
            } catch (_d) {
              if (res2.status === 404 && body === "") {
                status = 204;
                statusText = "No Content";
              } else {
                error2 = {
                  message: body
                };
              }
            }
            if (error2 && this.allowEmpty && ((_c = error2 === null || error2 === void 0 ? void 0 : error2.details) === null || _c === void 0 ? void 0 : _c.includes("Results contain 0 rows"))) {
              error2 = null;
              status = 200;
              statusText = "OK";
            }
            if (error2 && this.shouldThrowOnError) {
              throw error2;
            }
          }
          const postgrestResponse = {
            error: error2,
            data,
            count: count3,
            status,
            statusText
          };
          return postgrestResponse;
        }));
        if (!this.shouldThrowOnError) {
          res = res.catch((fetchError) => ({
            error: {
              message: `FetchError: ${fetchError.message}`,
              details: "",
              hint: "",
              code: fetchError.code || ""
            },
            data: null,
            count: null,
            status: 0,
            statusText: ""
          }));
        }
        return res.then(onfulfilled, onrejected);
      }
    };
  }
});

// node_modules/@supabase/postgrest-js/dist/module/PostgrestTransformBuilder.js
var PostgrestTransformBuilder;
var init_PostgrestTransformBuilder = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/PostgrestTransformBuilder.js"() {
    init_PostgrestBuilder();
    PostgrestTransformBuilder = class extends PostgrestBuilder {
      select(columns) {
        let quoted2 = false;
        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c2) => {
          if (/\s/.test(c2) && !quoted2) {
            return "";
          }
          if (c2 === '"') {
            quoted2 = !quoted2;
          }
          return c2;
        }).join("");
        this.url.searchParams.set("select", cleanedColumns);
        if (this.headers["Prefer"]) {
          this.headers["Prefer"] += ",";
        }
        this.headers["Prefer"] += "return=representation";
        return this;
      }
      order(column, { ascending: ascending3 = true, nullsFirst, foreignTable } = {}) {
        const key2 = foreignTable ? `${foreignTable}.order` : "order";
        const existingOrder = this.url.searchParams.get(key2);
        this.url.searchParams.set(key2, `${existingOrder ? `${existingOrder},` : ""}${column}.${ascending3 ? "asc" : "desc"}${nullsFirst === void 0 ? "" : nullsFirst ? ".nullsfirst" : ".nullslast"}`);
        return this;
      }
      limit(count3, { foreignTable } = {}) {
        const key2 = typeof foreignTable === "undefined" ? "limit" : `${foreignTable}.limit`;
        this.url.searchParams.set(key2, `${count3}`);
        return this;
      }
      range(from, to, { foreignTable } = {}) {
        const keyOffset = typeof foreignTable === "undefined" ? "offset" : `${foreignTable}.offset`;
        const keyLimit = typeof foreignTable === "undefined" ? "limit" : `${foreignTable}.limit`;
        this.url.searchParams.set(keyOffset, `${from}`);
        this.url.searchParams.set(keyLimit, `${to - from + 1}`);
        return this;
      }
      abortSignal(signal) {
        this.signal = signal;
        return this;
      }
      single() {
        this.headers["Accept"] = "application/vnd.pgrst.object+json";
        return this;
      }
      maybeSingle() {
        this.headers["Accept"] = "application/vnd.pgrst.object+json";
        this.allowEmpty = true;
        return this;
      }
      csv() {
        this.headers["Accept"] = "text/csv";
        return this;
      }
      geojson() {
        this.headers["Accept"] = "application/geo+json";
        return this;
      }
      explain({ analyze = false, verbose = false, settings: settings2 = false, buffers = false, wal = false, format: format3 = "text" } = {}) {
        const options2 = [
          analyze ? "analyze" : null,
          verbose ? "verbose" : null,
          settings2 ? "settings" : null,
          buffers ? "buffers" : null,
          wal ? "wal" : null
        ].filter(Boolean).join("|");
        const forMediatype = this.headers["Accept"];
        this.headers["Accept"] = `application/vnd.pgrst.plan+${format3}; for="${forMediatype}"; options=${options2};`;
        if (format3 === "json")
          return this;
        else
          return this;
      }
      rollback() {
        var _a3;
        if (((_a3 = this.headers["Prefer"]) !== null && _a3 !== void 0 ? _a3 : "").trim().length > 0) {
          this.headers["Prefer"] += ",tx=rollback";
        } else {
          this.headers["Prefer"] = "tx=rollback";
        }
        return this;
      }
      returns() {
        return this;
      }
    };
  }
});

// node_modules/@supabase/postgrest-js/dist/module/PostgrestFilterBuilder.js
var PostgrestFilterBuilder;
var init_PostgrestFilterBuilder = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/PostgrestFilterBuilder.js"() {
    init_PostgrestTransformBuilder();
    PostgrestFilterBuilder = class extends PostgrestTransformBuilder {
      eq(column, value2) {
        this.url.searchParams.append(column, `eq.${value2}`);
        return this;
      }
      neq(column, value2) {
        this.url.searchParams.append(column, `neq.${value2}`);
        return this;
      }
      gt(column, value2) {
        this.url.searchParams.append(column, `gt.${value2}`);
        return this;
      }
      gte(column, value2) {
        this.url.searchParams.append(column, `gte.${value2}`);
        return this;
      }
      lt(column, value2) {
        this.url.searchParams.append(column, `lt.${value2}`);
        return this;
      }
      lte(column, value2) {
        this.url.searchParams.append(column, `lte.${value2}`);
        return this;
      }
      like(column, pattern2) {
        this.url.searchParams.append(column, `like.${pattern2}`);
        return this;
      }
      ilike(column, pattern2) {
        this.url.searchParams.append(column, `ilike.${pattern2}`);
        return this;
      }
      is(column, value2) {
        this.url.searchParams.append(column, `is.${value2}`);
        return this;
      }
      in(column, values) {
        const cleanedValues = values.map((s2) => {
          if (typeof s2 === "string" && new RegExp("[,()]").test(s2))
            return `"${s2}"`;
          else
            return `${s2}`;
        }).join(",");
        this.url.searchParams.append(column, `in.(${cleanedValues})`);
        return this;
      }
      contains(column, value2) {
        if (typeof value2 === "string") {
          this.url.searchParams.append(column, `cs.${value2}`);
        } else if (Array.isArray(value2)) {
          this.url.searchParams.append(column, `cs.{${value2.join(",")}}`);
        } else {
          this.url.searchParams.append(column, `cs.${JSON.stringify(value2)}`);
        }
        return this;
      }
      containedBy(column, value2) {
        if (typeof value2 === "string") {
          this.url.searchParams.append(column, `cd.${value2}`);
        } else if (Array.isArray(value2)) {
          this.url.searchParams.append(column, `cd.{${value2.join(",")}}`);
        } else {
          this.url.searchParams.append(column, `cd.${JSON.stringify(value2)}`);
        }
        return this;
      }
      rangeGt(column, range2) {
        this.url.searchParams.append(column, `sr.${range2}`);
        return this;
      }
      rangeGte(column, range2) {
        this.url.searchParams.append(column, `nxl.${range2}`);
        return this;
      }
      rangeLt(column, range2) {
        this.url.searchParams.append(column, `sl.${range2}`);
        return this;
      }
      rangeLte(column, range2) {
        this.url.searchParams.append(column, `nxr.${range2}`);
        return this;
      }
      rangeAdjacent(column, range2) {
        this.url.searchParams.append(column, `adj.${range2}`);
        return this;
      }
      overlaps(column, value2) {
        if (typeof value2 === "string") {
          this.url.searchParams.append(column, `ov.${value2}`);
        } else {
          this.url.searchParams.append(column, `ov.{${value2.join(",")}}`);
        }
        return this;
      }
      textSearch(column, query, { config, type: type2 } = {}) {
        let typePart = "";
        if (type2 === "plain") {
          typePart = "pl";
        } else if (type2 === "phrase") {
          typePart = "ph";
        } else if (type2 === "websearch") {
          typePart = "w";
        }
        const configPart = config === void 0 ? "" : `(${config})`;
        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
        return this;
      }
      match(query) {
        Object.entries(query).forEach(([column, value2]) => {
          this.url.searchParams.append(column, `eq.${value2}`);
        });
        return this;
      }
      not(column, operator, value2) {
        this.url.searchParams.append(column, `not.${operator}.${value2}`);
        return this;
      }
      or(filters, { foreignTable } = {}) {
        const key2 = foreignTable ? `${foreignTable}.or` : "or";
        this.url.searchParams.append(key2, `(${filters})`);
        return this;
      }
      filter(column, operator, value2) {
        this.url.searchParams.append(column, `${operator}.${value2}`);
        return this;
      }
    };
  }
});

// node_modules/@supabase/postgrest-js/dist/module/PostgrestQueryBuilder.js
var PostgrestQueryBuilder;
var init_PostgrestQueryBuilder = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/PostgrestQueryBuilder.js"() {
    init_PostgrestFilterBuilder();
    PostgrestQueryBuilder = class {
      constructor(url, { headers = {}, schema, fetch: fetch2 }) {
        this.url = url;
        this.headers = headers;
        this.schema = schema;
        this.fetch = fetch2;
      }
      select(columns, { head = false, count: count3 } = {}) {
        const method = head ? "HEAD" : "GET";
        let quoted2 = false;
        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c2) => {
          if (/\s/.test(c2) && !quoted2) {
            return "";
          }
          if (c2 === '"') {
            quoted2 = !quoted2;
          }
          return c2;
        }).join("");
        this.url.searchParams.set("select", cleanedColumns);
        if (count3) {
          this.headers["Prefer"] = `count=${count3}`;
        }
        return new PostgrestFilterBuilder({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      insert(values, { count: count3 } = {}) {
        const method = "POST";
        const prefersHeaders = [];
        const body = values;
        if (count3) {
          prefersHeaders.push(`count=${count3}`);
        }
        if (this.headers["Prefer"]) {
          prefersHeaders.unshift(this.headers["Prefer"]);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        if (Array.isArray(values)) {
          const columns = values.reduce((acc, x3) => acc.concat(Object.keys(x3)), []);
          if (columns.length > 0) {
            const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
            this.url.searchParams.set("columns", uniqueColumns.join(","));
          }
        }
        return new PostgrestFilterBuilder({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      upsert(values, { onConflict, ignoreDuplicates = false, count: count3 } = {}) {
        const method = "POST";
        const prefersHeaders = [`resolution=${ignoreDuplicates ? "ignore" : "merge"}-duplicates`];
        if (onConflict !== void 0)
          this.url.searchParams.set("on_conflict", onConflict);
        const body = values;
        if (count3) {
          prefersHeaders.push(`count=${count3}`);
        }
        if (this.headers["Prefer"]) {
          prefersHeaders.unshift(this.headers["Prefer"]);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        return new PostgrestFilterBuilder({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      update(values, { count: count3 } = {}) {
        const method = "PATCH";
        const prefersHeaders = [];
        const body = values;
        if (count3) {
          prefersHeaders.push(`count=${count3}`);
        }
        if (this.headers["Prefer"]) {
          prefersHeaders.unshift(this.headers["Prefer"]);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        return new PostgrestFilterBuilder({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      delete({ count: count3 } = {}) {
        const method = "DELETE";
        const prefersHeaders = [];
        if (count3) {
          prefersHeaders.push(`count=${count3}`);
        }
        if (this.headers["Prefer"]) {
          prefersHeaders.unshift(this.headers["Prefer"]);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        return new PostgrestFilterBuilder({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
    };
  }
});

// node_modules/@supabase/postgrest-js/dist/module/version.js
var version;
var init_version = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/version.js"() {
    version = "1.1.1";
  }
});

// node_modules/@supabase/postgrest-js/dist/module/constants.js
var DEFAULT_HEADERS;
var init_constants = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/constants.js"() {
    init_version();
    DEFAULT_HEADERS = { "X-Client-Info": `postgrest-js/${version}` };
  }
});

// node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js
var PostgrestClient;
var init_PostgrestClient = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js"() {
    init_PostgrestQueryBuilder();
    init_PostgrestFilterBuilder();
    init_constants();
    PostgrestClient = class {
      constructor(url, { headers = {}, schema, fetch: fetch2 } = {}) {
        this.url = url;
        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);
        this.schema = schema;
        this.fetch = fetch2;
      }
      from(relation) {
        const url = new URL(`${this.url}/${relation}`);
        return new PostgrestQueryBuilder(url, {
          headers: Object.assign({}, this.headers),
          schema: this.schema,
          fetch: this.fetch
        });
      }
      rpc(fn, args = {}, { head = false, count: count3 } = {}) {
        let method;
        const url = new URL(`${this.url}/rpc/${fn}`);
        let body;
        if (head) {
          method = "HEAD";
          Object.entries(args).forEach(([name, value2]) => {
            url.searchParams.append(name, `${value2}`);
          });
        } else {
          method = "POST";
          body = args;
        }
        const headers = Object.assign({}, this.headers);
        if (count3) {
          headers["Prefer"] = `count=${count3}`;
        }
        return new PostgrestFilterBuilder({
          method,
          url,
          headers,
          schema: this.schema,
          body,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
    };
  }
});

// node_modules/@supabase/postgrest-js/dist/module/index.js
var init_module2 = __esm({
  "node_modules/@supabase/postgrest-js/dist/module/index.js"() {
    init_PostgrestClient();
    init_PostgrestQueryBuilder();
    init_PostgrestFilterBuilder();
    init_PostgrestTransformBuilder();
    init_PostgrestBuilder();
  }
});

// node_modules/es5-ext/global.js
var require_global = __commonJS({
  "node_modules/es5-ext/global.js"(exports3, module2) {
    var naiveFallback = function() {
      if (typeof self === "object" && self)
        return self;
      if (typeof window === "object" && window)
        return window;
      throw new Error("Unable to resolve global `this`");
    };
    module2.exports = function() {
      if (this)
        return this;
      if (typeof globalThis === "object" && globalThis)
        return globalThis;
      try {
        Object.defineProperty(Object.prototype, "__global__", {
          get: function() {
            return this;
          },
          configurable: true
        });
      } catch (error2) {
        return naiveFallback();
      }
      try {
        if (!__global__)
          return naiveFallback();
        return __global__;
      } finally {
        delete Object.prototype.__global__;
      }
    }();
  }
});

// node_modules/websocket/package.json
var require_package = __commonJS({
  "node_modules/websocket/package.json"(exports3, module2) {
    module2.exports = {
      name: "websocket",
      description: "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
      keywords: [
        "websocket",
        "websockets",
        "socket",
        "networking",
        "comet",
        "push",
        "RFC-6455",
        "realtime",
        "server",
        "client"
      ],
      author: "Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)",
      contributors: [
        "I\xF1aki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"
      ],
      version: "1.0.34",
      repository: {
        type: "git",
        url: "https://github.com/theturtle32/WebSocket-Node.git"
      },
      homepage: "https://github.com/theturtle32/WebSocket-Node",
      engines: {
        node: ">=4.0.0"
      },
      dependencies: {
        bufferutil: "^4.0.1",
        debug: "^2.2.0",
        "es5-ext": "^0.10.50",
        "typedarray-to-buffer": "^3.1.5",
        "utf-8-validate": "^5.0.2",
        yaeti: "^0.0.6"
      },
      devDependencies: {
        "buffer-equal": "^1.0.0",
        gulp: "^4.0.2",
        "gulp-jshint": "^2.0.4",
        "jshint-stylish": "^2.2.1",
        jshint: "^2.0.0",
        tape: "^4.9.1"
      },
      config: {
        verbose: false
      },
      scripts: {
        test: "tape test/unit/*.js",
        gulp: "gulp"
      },
      main: "index",
      directories: {
        lib: "./lib"
      },
      browser: "lib/browser.js",
      license: "Apache-2.0"
    };
  }
});

// node_modules/websocket/lib/version.js
var require_version = __commonJS({
  "node_modules/websocket/lib/version.js"(exports3, module2) {
    module2.exports = require_package().version;
  }
});

// node_modules/websocket/lib/browser.js
var require_browser = __commonJS({
  "node_modules/websocket/lib/browser.js"(exports3, module2) {
    var _globalThis;
    if (typeof globalThis === "object") {
      _globalThis = globalThis;
    } else {
      try {
        _globalThis = require_global();
      } catch (error2) {
      } finally {
        if (!_globalThis && typeof window !== "undefined") {
          _globalThis = window;
        }
        if (!_globalThis) {
          throw new Error("Could not determine global this");
        }
      }
    }
    var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
    var websocket_version = require_version();
    function W3CWebSocket(uri, protocols) {
      var native_instance;
      if (protocols) {
        native_instance = new NativeWebSocket(uri, protocols);
      } else {
        native_instance = new NativeWebSocket(uri);
      }
      return native_instance;
    }
    if (NativeWebSocket) {
      ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(prop) {
        Object.defineProperty(W3CWebSocket, prop, {
          get: function() {
            return NativeWebSocket[prop];
          }
        });
      });
    }
    module2.exports = {
      "w3cwebsocket": NativeWebSocket ? W3CWebSocket : null,
      "version": websocket_version
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/lib/version.js
var version2;
var init_version2 = __esm({
  "node_modules/@supabase/realtime-js/dist/module/lib/version.js"() {
    version2 = "2.1.0";
  }
});

// node_modules/@supabase/realtime-js/dist/module/lib/constants.js
var DEFAULT_HEADERS2, VSN, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, SOCKET_STATES, CHANNEL_STATES, CHANNEL_EVENTS, TRANSPORTS, CONNECTION_STATE;
var init_constants2 = __esm({
  "node_modules/@supabase/realtime-js/dist/module/lib/constants.js"() {
    init_version2();
    DEFAULT_HEADERS2 = { "X-Client-Info": `realtime-js/${version2}` };
    VSN = "1.0.0";
    DEFAULT_TIMEOUT = 1e4;
    WS_CLOSE_NORMAL = 1e3;
    (function(SOCKET_STATES2) {
      SOCKET_STATES2[SOCKET_STATES2["connecting"] = 0] = "connecting";
      SOCKET_STATES2[SOCKET_STATES2["open"] = 1] = "open";
      SOCKET_STATES2[SOCKET_STATES2["closing"] = 2] = "closing";
      SOCKET_STATES2[SOCKET_STATES2["closed"] = 3] = "closed";
    })(SOCKET_STATES || (SOCKET_STATES = {}));
    (function(CHANNEL_STATES2) {
      CHANNEL_STATES2["closed"] = "closed";
      CHANNEL_STATES2["errored"] = "errored";
      CHANNEL_STATES2["joined"] = "joined";
      CHANNEL_STATES2["joining"] = "joining";
      CHANNEL_STATES2["leaving"] = "leaving";
    })(CHANNEL_STATES || (CHANNEL_STATES = {}));
    (function(CHANNEL_EVENTS2) {
      CHANNEL_EVENTS2["close"] = "phx_close";
      CHANNEL_EVENTS2["error"] = "phx_error";
      CHANNEL_EVENTS2["join"] = "phx_join";
      CHANNEL_EVENTS2["reply"] = "phx_reply";
      CHANNEL_EVENTS2["leave"] = "phx_leave";
      CHANNEL_EVENTS2["access_token"] = "access_token";
    })(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
    (function(TRANSPORTS2) {
      TRANSPORTS2["websocket"] = "websocket";
    })(TRANSPORTS || (TRANSPORTS = {}));
    (function(CONNECTION_STATE2) {
      CONNECTION_STATE2["Connecting"] = "connecting";
      CONNECTION_STATE2["Open"] = "open";
      CONNECTION_STATE2["Closing"] = "closing";
      CONNECTION_STATE2["Closed"] = "closed";
    })(CONNECTION_STATE || (CONNECTION_STATE = {}));
  }
});

// node_modules/@supabase/realtime-js/dist/module/lib/timer.js
var Timer;
var init_timer = __esm({
  "node_modules/@supabase/realtime-js/dist/module/lib/timer.js"() {
    Timer = class {
      constructor(callback, timerCalc) {
        this.callback = callback;
        this.timerCalc = timerCalc;
        this.timer = void 0;
        this.tries = 0;
        this.callback = callback;
        this.timerCalc = timerCalc;
      }
      reset() {
        this.tries = 0;
        clearTimeout(this.timer);
      }
      scheduleTimeout() {
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.tries = this.tries + 1;
          this.callback();
        }, this.timerCalc(this.tries + 1));
      }
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/lib/serializer.js
var Serializer;
var init_serializer = __esm({
  "node_modules/@supabase/realtime-js/dist/module/lib/serializer.js"() {
    Serializer = class {
      constructor() {
        this.HEADER_LENGTH = 1;
      }
      decode(rawPayload, callback) {
        if (rawPayload.constructor === ArrayBuffer) {
          return callback(this._binaryDecode(rawPayload));
        }
        if (typeof rawPayload === "string") {
          return callback(JSON.parse(rawPayload));
        }
        return callback({});
      }
      _binaryDecode(buffer) {
        const view = new DataView(buffer);
        const decoder = new TextDecoder();
        return this._decodeBroadcast(buffer, view, decoder);
      }
      _decodeBroadcast(buffer, view, decoder) {
        const topicSize = view.getUint8(1);
        const eventSize = view.getUint8(2);
        let offset = this.HEADER_LENGTH + 2;
        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));
        offset = offset + topicSize;
        const event = decoder.decode(buffer.slice(offset, offset + eventSize));
        offset = offset + eventSize;
        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));
        return { ref: null, topic, event, payload: data };
      }
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/lib/push.js
var Push;
var init_push = __esm({
  "node_modules/@supabase/realtime-js/dist/module/lib/push.js"() {
    init_constants2();
    Push = class {
      constructor(channel, event, payload = {}, timeout2 = DEFAULT_TIMEOUT) {
        this.channel = channel;
        this.event = event;
        this.payload = payload;
        this.timeout = timeout2;
        this.sent = false;
        this.timeoutTimer = void 0;
        this.ref = "";
        this.receivedResp = null;
        this.recHooks = [];
        this.refEvent = null;
        this.rateLimited = false;
      }
      resend(timeout2) {
        this.timeout = timeout2;
        this._cancelRefEvent();
        this.ref = "";
        this.refEvent = null;
        this.receivedResp = null;
        this.sent = false;
        this.send();
      }
      send() {
        if (this._hasReceived("timeout")) {
          return;
        }
        this.startTimeout();
        this.sent = true;
        const status = this.channel.socket.push({
          topic: this.channel.topic,
          event: this.event,
          payload: this.payload,
          ref: this.ref,
          join_ref: this.channel._joinRef()
        });
        if (status === "rate limited") {
          this.rateLimited = true;
        }
      }
      updatePayload(payload) {
        this.payload = Object.assign(Object.assign({}, this.payload), payload);
      }
      receive(status, callback) {
        var _a3;
        if (this._hasReceived(status)) {
          callback((_a3 = this.receivedResp) === null || _a3 === void 0 ? void 0 : _a3.response);
        }
        this.recHooks.push({ status, callback });
        return this;
      }
      startTimeout() {
        if (this.timeoutTimer) {
          return;
        }
        this.ref = this.channel.socket._makeRef();
        this.refEvent = this.channel._replyEventName(this.ref);
        const callback = (payload) => {
          this._cancelRefEvent();
          this._cancelTimeout();
          this.receivedResp = payload;
          this._matchReceive(payload);
        };
        this.channel._on(this.refEvent, {}, callback);
        this.timeoutTimer = setTimeout(() => {
          this.trigger("timeout", {});
        }, this.timeout);
      }
      trigger(status, response) {
        if (this.refEvent)
          this.channel._trigger(this.refEvent, { status, response });
      }
      destroy() {
        this._cancelRefEvent();
        this._cancelTimeout();
      }
      _cancelRefEvent() {
        if (!this.refEvent) {
          return;
        }
        this.channel._off(this.refEvent, {});
      }
      _cancelTimeout() {
        clearTimeout(this.timeoutTimer);
        this.timeoutTimer = void 0;
      }
      _matchReceive({ status, response }) {
        this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
      }
      _hasReceived(status) {
        return this.receivedResp && this.receivedResp.status === status;
      }
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js
var REALTIME_PRESENCE_LISTEN_EVENTS, RealtimePresence;
var init_RealtimePresence = __esm({
  "node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js"() {
    (function(REALTIME_PRESENCE_LISTEN_EVENTS2) {
      REALTIME_PRESENCE_LISTEN_EVENTS2["SYNC"] = "sync";
      REALTIME_PRESENCE_LISTEN_EVENTS2["JOIN"] = "join";
      REALTIME_PRESENCE_LISTEN_EVENTS2["LEAVE"] = "leave";
    })(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
    RealtimePresence = class {
      constructor(channel, opts) {
        this.channel = channel;
        this.state = {};
        this.pendingDiffs = [];
        this.joinRef = null;
        this.caller = {
          onJoin: () => {
          },
          onLeave: () => {
          },
          onSync: () => {
          }
        };
        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {
          state: "presence_state",
          diff: "presence_diff"
        };
        this.channel._on(events.state, {}, (newState) => {
          const { onJoin, onLeave, onSync } = this.caller;
          this.joinRef = this.channel._joinRef();
          this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);
          this.pendingDiffs.forEach((diff) => {
            this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
          });
          this.pendingDiffs = [];
          onSync();
        });
        this.channel._on(events.diff, {}, (diff) => {
          const { onJoin, onLeave, onSync } = this.caller;
          if (this.inPendingSyncState()) {
            this.pendingDiffs.push(diff);
          } else {
            this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
            onSync();
          }
        });
        this.onJoin((key2, currentPresences, newPresences) => {
          this.channel._trigger("presence", {
            event: "join",
            key: key2,
            currentPresences,
            newPresences
          });
        });
        this.onLeave((key2, currentPresences, leftPresences) => {
          this.channel._trigger("presence", {
            event: "leave",
            key: key2,
            currentPresences,
            leftPresences
          });
        });
        this.onSync(() => {
          this.channel._trigger("presence", { event: "sync" });
        });
      }
      static syncState(currentState, newState, onJoin, onLeave) {
        const state = this.cloneDeep(currentState);
        const transformedState = this.transformState(newState);
        const joins = {};
        const leaves = {};
        this.map(state, (key2, presences) => {
          if (!transformedState[key2]) {
            leaves[key2] = presences;
          }
        });
        this.map(transformedState, (key2, newPresences) => {
          const currentPresences = state[key2];
          if (currentPresences) {
            const newPresenceRefs = newPresences.map((m2) => m2.presence_ref);
            const curPresenceRefs = currentPresences.map((m2) => m2.presence_ref);
            const joinedPresences = newPresences.filter((m2) => curPresenceRefs.indexOf(m2.presence_ref) < 0);
            const leftPresences = currentPresences.filter((m2) => newPresenceRefs.indexOf(m2.presence_ref) < 0);
            if (joinedPresences.length > 0) {
              joins[key2] = joinedPresences;
            }
            if (leftPresences.length > 0) {
              leaves[key2] = leftPresences;
            }
          } else {
            joins[key2] = newPresences;
          }
        });
        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);
      }
      static syncDiff(state, diff, onJoin, onLeave) {
        const { joins, leaves } = {
          joins: this.transformState(diff.joins),
          leaves: this.transformState(diff.leaves)
        };
        if (!onJoin) {
          onJoin = () => {
          };
        }
        if (!onLeave) {
          onLeave = () => {
          };
        }
        this.map(joins, (key2, newPresences) => {
          var _a3;
          const currentPresences = (_a3 = state[key2]) !== null && _a3 !== void 0 ? _a3 : [];
          state[key2] = this.cloneDeep(newPresences);
          if (currentPresences.length > 0) {
            const joinedPresenceRefs = state[key2].map((m2) => m2.presence_ref);
            const curPresences = currentPresences.filter((m2) => joinedPresenceRefs.indexOf(m2.presence_ref) < 0);
            state[key2].unshift(...curPresences);
          }
          onJoin(key2, currentPresences, newPresences);
        });
        this.map(leaves, (key2, leftPresences) => {
          let currentPresences = state[key2];
          if (!currentPresences)
            return;
          const presenceRefsToRemove = leftPresences.map((m2) => m2.presence_ref);
          currentPresences = currentPresences.filter((m2) => presenceRefsToRemove.indexOf(m2.presence_ref) < 0);
          state[key2] = currentPresences;
          onLeave(key2, currentPresences, leftPresences);
          if (currentPresences.length === 0)
            delete state[key2];
        });
        return state;
      }
      static map(obj, func) {
        return Object.getOwnPropertyNames(obj).map((key2) => func(key2, obj[key2]));
      }
      static transformState(state) {
        state = this.cloneDeep(state);
        return Object.getOwnPropertyNames(state).reduce((newState, key2) => {
          const presences = state[key2];
          if ("metas" in presences) {
            newState[key2] = presences.metas.map((presence) => {
              presence["presence_ref"] = presence["phx_ref"];
              delete presence["phx_ref"];
              delete presence["phx_ref_prev"];
              return presence;
            });
          } else {
            newState[key2] = presences;
          }
          return newState;
        }, {});
      }
      static cloneDeep(obj) {
        return JSON.parse(JSON.stringify(obj));
      }
      onJoin(callback) {
        this.caller.onJoin = callback;
      }
      onLeave(callback) {
        this.caller.onLeave = callback;
      }
      onSync(callback) {
        this.caller.onSync = callback;
      }
      inPendingSyncState() {
        return !this.joinRef || this.joinRef !== this.channel._joinRef();
      }
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/lib/transformers.js
var PostgresTypes, convertChangeData, convertColumn, convertCell, noop2, toBoolean, toNumber, toJson, toArray, toTimestampString;
var init_transformers = __esm({
  "node_modules/@supabase/realtime-js/dist/module/lib/transformers.js"() {
    (function(PostgresTypes2) {
      PostgresTypes2["abstime"] = "abstime";
      PostgresTypes2["bool"] = "bool";
      PostgresTypes2["date"] = "date";
      PostgresTypes2["daterange"] = "daterange";
      PostgresTypes2["float4"] = "float4";
      PostgresTypes2["float8"] = "float8";
      PostgresTypes2["int2"] = "int2";
      PostgresTypes2["int4"] = "int4";
      PostgresTypes2["int4range"] = "int4range";
      PostgresTypes2["int8"] = "int8";
      PostgresTypes2["int8range"] = "int8range";
      PostgresTypes2["json"] = "json";
      PostgresTypes2["jsonb"] = "jsonb";
      PostgresTypes2["money"] = "money";
      PostgresTypes2["numeric"] = "numeric";
      PostgresTypes2["oid"] = "oid";
      PostgresTypes2["reltime"] = "reltime";
      PostgresTypes2["text"] = "text";
      PostgresTypes2["time"] = "time";
      PostgresTypes2["timestamp"] = "timestamp";
      PostgresTypes2["timestamptz"] = "timestamptz";
      PostgresTypes2["timetz"] = "timetz";
      PostgresTypes2["tsrange"] = "tsrange";
      PostgresTypes2["tstzrange"] = "tstzrange";
    })(PostgresTypes || (PostgresTypes = {}));
    convertChangeData = (columns, record, options2 = {}) => {
      var _a3;
      const skipTypes = (_a3 = options2.skipTypes) !== null && _a3 !== void 0 ? _a3 : [];
      return Object.keys(record).reduce((acc, rec_key) => {
        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);
        return acc;
      }, {});
    };
    convertColumn = (columnName, columns, record, skipTypes) => {
      const column = columns.find((x3) => x3.name === columnName);
      const colType = column === null || column === void 0 ? void 0 : column.type;
      const value2 = record[columnName];
      if (colType && !skipTypes.includes(colType)) {
        return convertCell(colType, value2);
      }
      return noop2(value2);
    };
    convertCell = (type2, value2) => {
      if (type2.charAt(0) === "_") {
        const dataType = type2.slice(1, type2.length);
        return toArray(value2, dataType);
      }
      switch (type2) {
        case PostgresTypes.bool:
          return toBoolean(value2);
        case PostgresTypes.float4:
        case PostgresTypes.float8:
        case PostgresTypes.int2:
        case PostgresTypes.int4:
        case PostgresTypes.int8:
        case PostgresTypes.numeric:
        case PostgresTypes.oid:
          return toNumber(value2);
        case PostgresTypes.json:
        case PostgresTypes.jsonb:
          return toJson(value2);
        case PostgresTypes.timestamp:
          return toTimestampString(value2);
        case PostgresTypes.abstime:
        case PostgresTypes.date:
        case PostgresTypes.daterange:
        case PostgresTypes.int4range:
        case PostgresTypes.int8range:
        case PostgresTypes.money:
        case PostgresTypes.reltime:
        case PostgresTypes.text:
        case PostgresTypes.time:
        case PostgresTypes.timestamptz:
        case PostgresTypes.timetz:
        case PostgresTypes.tsrange:
        case PostgresTypes.tstzrange:
          return noop2(value2);
        default:
          return noop2(value2);
      }
    };
    noop2 = (value2) => {
      return value2;
    };
    toBoolean = (value2) => {
      switch (value2) {
        case "t":
          return true;
        case "f":
          return false;
        default:
          return value2;
      }
    };
    toNumber = (value2) => {
      if (typeof value2 === "string") {
        const parsedValue = parseFloat(value2);
        if (!Number.isNaN(parsedValue)) {
          return parsedValue;
        }
      }
      return value2;
    };
    toJson = (value2) => {
      if (typeof value2 === "string") {
        try {
          return JSON.parse(value2);
        } catch (error2) {
          console.log(`JSON parse error: ${error2}`);
          return value2;
        }
      }
      return value2;
    };
    toArray = (value2, type2) => {
      if (typeof value2 !== "string") {
        return value2;
      }
      const lastIdx = value2.length - 1;
      const closeBrace = value2[lastIdx];
      const openBrace = value2[0];
      if (openBrace === "{" && closeBrace === "}") {
        let arr;
        const valTrim = value2.slice(1, lastIdx);
        try {
          arr = JSON.parse("[" + valTrim + "]");
        } catch (_) {
          arr = valTrim ? valTrim.split(",") : [];
        }
        return arr.map((val) => convertCell(type2, val));
      }
      return value2;
    };
    toTimestampString = (value2) => {
      if (typeof value2 === "string") {
        return value2.replace(" ", "T");
      }
      return value2;
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js
var __awaiter4, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_LISTEN_TYPES, REALTIME_SUBSCRIBE_STATES, RealtimeChannel;
var init_RealtimeChannel = __esm({
  "node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js"() {
    init_constants2();
    init_push();
    init_timer();
    init_RealtimePresence();
    init_transformers();
    __awaiter4 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    (function(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2) {
      REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["ALL"] = "*";
      REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["INSERT"] = "INSERT";
      REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["UPDATE"] = "UPDATE";
      REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["DELETE"] = "DELETE";
    })(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
    (function(REALTIME_LISTEN_TYPES2) {
      REALTIME_LISTEN_TYPES2["BROADCAST"] = "broadcast";
      REALTIME_LISTEN_TYPES2["PRESENCE"] = "presence";
      REALTIME_LISTEN_TYPES2["POSTGRES_CHANGES"] = "postgres_changes";
    })(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
    (function(REALTIME_SUBSCRIBE_STATES2) {
      REALTIME_SUBSCRIBE_STATES2["SUBSCRIBED"] = "SUBSCRIBED";
      REALTIME_SUBSCRIBE_STATES2["TIMED_OUT"] = "TIMED_OUT";
      REALTIME_SUBSCRIBE_STATES2["CLOSED"] = "CLOSED";
      REALTIME_SUBSCRIBE_STATES2["CHANNEL_ERROR"] = "CHANNEL_ERROR";
    })(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
    RealtimeChannel = class {
      constructor(topic, params = { config: {} }, socket) {
        this.topic = topic;
        this.params = params;
        this.socket = socket;
        this.bindings = {};
        this.state = CHANNEL_STATES.closed;
        this.joinedOnce = false;
        this.pushBuffer = [];
        this.params.config = Object.assign({
          broadcast: { ack: false, self: false },
          presence: { key: "" }
        }, params.config);
        this.timeout = this.socket.timeout;
        this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
        this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);
        this.joinPush.receive("ok", () => {
          this.state = CHANNEL_STATES.joined;
          this.rejoinTimer.reset();
          this.pushBuffer.forEach((pushEvent) => pushEvent.send());
          this.pushBuffer = [];
        });
        this._onClose(() => {
          this.rejoinTimer.reset();
          this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`);
          this.state = CHANNEL_STATES.closed;
          this.socket._remove(this);
        });
        this._onError((reason) => {
          if (this._isLeaving() || this._isClosed()) {
            return;
          }
          this.socket.log("channel", `error ${this.topic}`, reason);
          this.state = CHANNEL_STATES.errored;
          this.rejoinTimer.scheduleTimeout();
        });
        this.joinPush.receive("timeout", () => {
          if (!this._isJoining()) {
            return;
          }
          this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout);
          this.state = CHANNEL_STATES.errored;
          this.rejoinTimer.scheduleTimeout();
        });
        this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {
          this._trigger(this._replyEventName(ref), payload);
        });
        this.presence = new RealtimePresence(this);
      }
      subscribe(callback, timeout2 = this.timeout) {
        var _a3, _b;
        if (this.joinedOnce) {
          throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;
        } else {
          const { config: { broadcast, presence } } = this.params;
          this._onError((e) => callback && callback("CHANNEL_ERROR", e));
          this._onClose(() => callback && callback("CLOSED"));
          const accessTokenPayload = {};
          const config = {
            broadcast,
            presence,
            postgres_changes: (_b = (_a3 = this.bindings.postgres_changes) === null || _a3 === void 0 ? void 0 : _a3.map((r) => r.filter)) !== null && _b !== void 0 ? _b : []
          };
          if (this.socket.accessToken) {
            accessTokenPayload.access_token = this.socket.accessToken;
          }
          this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));
          this.joinedOnce = true;
          this._rejoin(timeout2);
          this.joinPush.receive("ok", ({ postgres_changes: serverPostgresFilters }) => {
            var _a4;
            this.socket.accessToken && this.socket.setAuth(this.socket.accessToken);
            if (serverPostgresFilters === void 0) {
              callback && callback("SUBSCRIBED");
              return;
            } else {
              const clientPostgresBindings = this.bindings.postgres_changes;
              const bindingsLen = (_a4 = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a4 !== void 0 ? _a4 : 0;
              const newPostgresBindings = [];
              for (let i = 0; i < bindingsLen; i++) {
                const clientPostgresBinding = clientPostgresBindings[i];
                const { filter: { event, schema, table, filter: filter2 } } = clientPostgresBinding;
                const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];
                if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter2) {
                  newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));
                } else {
                  this.unsubscribe();
                  callback && callback("CHANNEL_ERROR", new Error("mismatch between server and client bindings for postgres changes"));
                  return;
                }
              }
              this.bindings.postgres_changes = newPostgresBindings;
              callback && callback("SUBSCRIBED");
              return;
            }
          }).receive("error", (error2) => {
            callback && callback("CHANNEL_ERROR", new Error(JSON.stringify(Object.values(error2).join(", ") || "error")));
            return;
          }).receive("timeout", () => {
            callback && callback("TIMED_OUT");
            return;
          });
        }
        return this;
      }
      presenceState() {
        return this.presence.state;
      }
      track(payload, opts = {}) {
        return __awaiter4(this, void 0, void 0, function* () {
          return yield this.send({
            type: "presence",
            event: "track",
            payload
          }, opts.timeout || this.timeout);
        });
      }
      untrack(opts = {}) {
        return __awaiter4(this, void 0, void 0, function* () {
          return yield this.send({
            type: "presence",
            event: "untrack"
          }, opts);
        });
      }
      on(type2, filter2, callback) {
        return this._on(type2, filter2, callback);
      }
      send(payload, opts = {}) {
        return new Promise((resolve) => {
          var _a3, _b, _c;
          const push = this._push(payload.type, payload, opts.timeout || this.timeout);
          if (push.rateLimited) {
            resolve("rate limited");
          }
          if (payload.type === "broadcast" && !((_c = (_b = (_a3 = this.params) === null || _a3 === void 0 ? void 0 : _a3.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {
            resolve("ok");
          }
          push.receive("ok", () => resolve("ok"));
          push.receive("timeout", () => resolve("timed out"));
        });
      }
      updateJoinPayload(payload) {
        this.joinPush.updatePayload(payload);
      }
      unsubscribe(timeout2 = this.timeout) {
        this.state = CHANNEL_STATES.leaving;
        const onClose = () => {
          this.socket.log("channel", `leave ${this.topic}`);
          this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef());
        };
        this.rejoinTimer.reset();
        this.joinPush.destroy();
        return new Promise((resolve) => {
          const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout2);
          leavePush.receive("ok", () => {
            onClose();
            resolve("ok");
          }).receive("timeout", () => {
            onClose();
            resolve("timed out");
          }).receive("error", () => {
            resolve("error");
          });
          leavePush.send();
          if (!this._canPush()) {
            leavePush.trigger("ok", {});
          }
        });
      }
      _push(event, payload, timeout2 = this.timeout) {
        if (!this.joinedOnce) {
          throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
        }
        let pushEvent = new Push(this, event, payload, timeout2);
        if (this._canPush()) {
          pushEvent.send();
        } else {
          pushEvent.startTimeout();
          this.pushBuffer.push(pushEvent);
        }
        return pushEvent;
      }
      _onMessage(_event, payload, _ref) {
        return payload;
      }
      _isMember(topic) {
        return this.topic === topic;
      }
      _joinRef() {
        return this.joinPush.ref;
      }
      _trigger(type2, payload, ref) {
        var _a3, _b;
        const typeLower = type2.toLocaleLowerCase();
        const { close, error: error2, leave, join } = CHANNEL_EVENTS;
        const events = [close, error2, leave, join];
        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {
          return;
        }
        let handledPayload = this._onMessage(typeLower, payload, ref);
        if (payload && !handledPayload) {
          throw "channel onMessage callbacks must return the payload, modified or unmodified";
        }
        if (["insert", "update", "delete"].includes(typeLower)) {
          (_a3 = this.bindings.postgres_changes) === null || _a3 === void 0 ? void 0 : _a3.filter((bind) => {
            var _a4, _b2, _c;
            return ((_a4 = bind.filter) === null || _a4 === void 0 ? void 0 : _a4.event) === "*" || ((_c = (_b2 = bind.filter) === null || _b2 === void 0 ? void 0 : _b2.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;
          }).map((bind) => bind.callback(handledPayload, ref));
        } else {
          (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {
            var _a4, _b2, _c, _d, _e, _f;
            if (["broadcast", "presence", "postgres_changes"].includes(typeLower)) {
              if ("id" in bind) {
                const bindId = bind.id;
                const bindEvent = (_a4 = bind.filter) === null || _a4 === void 0 ? void 0 : _a4.event;
                return bindId && ((_b2 = payload.ids) === null || _b2 === void 0 ? void 0 : _b2.includes(bindId)) && (bindEvent === "*" || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));
              } else {
                const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();
                return bindEvent === "*" || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());
              }
            } else {
              return bind.type.toLocaleLowerCase() === typeLower;
            }
          }).map((bind) => {
            if (typeof handledPayload === "object" && "ids" in handledPayload) {
              const postgresChanges = handledPayload.data;
              const { schema, table, commit_timestamp, type: type3, errors } = postgresChanges;
              const enrichedPayload = {
                schema,
                table,
                commit_timestamp,
                eventType: type3,
                new: {},
                old: {},
                errors
              };
              handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));
            }
            bind.callback(handledPayload, ref);
          });
        }
      }
      _isClosed() {
        return this.state === CHANNEL_STATES.closed;
      }
      _isJoined() {
        return this.state === CHANNEL_STATES.joined;
      }
      _isJoining() {
        return this.state === CHANNEL_STATES.joining;
      }
      _isLeaving() {
        return this.state === CHANNEL_STATES.leaving;
      }
      _replyEventName(ref) {
        return `chan_reply_${ref}`;
      }
      _on(type2, filter2, callback) {
        const typeLower = type2.toLocaleLowerCase();
        const binding = {
          type: typeLower,
          filter: filter2,
          callback
        };
        if (this.bindings[typeLower]) {
          this.bindings[typeLower].push(binding);
        } else {
          this.bindings[typeLower] = [binding];
        }
        return this;
      }
      _off(type2, filter2) {
        const typeLower = type2.toLocaleLowerCase();
        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {
          var _a3;
          return !(((_a3 = bind.type) === null || _a3 === void 0 ? void 0 : _a3.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter2));
        });
        return this;
      }
      static isEqual(obj1, obj2) {
        if (Object.keys(obj1).length !== Object.keys(obj2).length) {
          return false;
        }
        for (const k in obj1) {
          if (obj1[k] !== obj2[k]) {
            return false;
          }
        }
        return true;
      }
      _rejoinUntilConnected() {
        this.rejoinTimer.scheduleTimeout();
        if (this.socket.isConnected()) {
          this._rejoin();
        }
      }
      _onClose(callback) {
        this._on(CHANNEL_EVENTS.close, {}, callback);
      }
      _onError(callback) {
        this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));
      }
      _canPush() {
        return this.socket.isConnected() && this._isJoined();
      }
      _rejoin(timeout2 = this.timeout) {
        if (this._isLeaving()) {
          return;
        }
        this.socket._leaveOpenTopic(this.topic);
        this.state = CHANNEL_STATES.joining;
        this.joinPush.resend(timeout2);
      }
      _getPayloadRecords(payload) {
        const records = {
          new: {},
          old: {}
        };
        if (payload.type === "INSERT" || payload.type === "UPDATE") {
          records.new = convertChangeData(payload.columns, payload.record);
        }
        if (payload.type === "UPDATE" || payload.type === "DELETE") {
          records.old = convertChangeData(payload.columns, payload.old_record);
        }
        return records;
      }
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js
var import_websocket, __awaiter5, noop3, RealtimeClient;
var init_RealtimeClient = __esm({
  "node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js"() {
    import_websocket = __toESM(require_browser());
    init_constants2();
    init_timer();
    init_serializer();
    init_RealtimeChannel();
    __awaiter5 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    noop3 = () => {
    };
    RealtimeClient = class {
      constructor(endPoint, options2) {
        var _a3;
        this.accessToken = null;
        this.channels = [];
        this.endPoint = "";
        this.headers = DEFAULT_HEADERS2;
        this.params = {};
        this.timeout = DEFAULT_TIMEOUT;
        this.transport = import_websocket.w3cwebsocket;
        this.heartbeatIntervalMs = 3e4;
        this.heartbeatTimer = void 0;
        this.pendingHeartbeatRef = null;
        this.ref = 0;
        this.logger = noop3;
        this.conn = null;
        this.sendBuffer = [];
        this.serializer = new Serializer();
        this.stateChangeCallbacks = {
          open: [],
          close: [],
          error: [],
          message: []
        };
        this.eventsPerSecondLimitMs = 100;
        this.inThrottle = false;
        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
        if (options2 === null || options2 === void 0 ? void 0 : options2.params)
          this.params = options2.params;
        if (options2 === null || options2 === void 0 ? void 0 : options2.headers)
          this.headers = Object.assign(Object.assign({}, this.headers), options2.headers);
        if (options2 === null || options2 === void 0 ? void 0 : options2.timeout)
          this.timeout = options2.timeout;
        if (options2 === null || options2 === void 0 ? void 0 : options2.logger)
          this.logger = options2.logger;
        if (options2 === null || options2 === void 0 ? void 0 : options2.transport)
          this.transport = options2.transport;
        if (options2 === null || options2 === void 0 ? void 0 : options2.heartbeatIntervalMs)
          this.heartbeatIntervalMs = options2.heartbeatIntervalMs;
        const eventsPerSecond = (_a3 = options2 === null || options2 === void 0 ? void 0 : options2.params) === null || _a3 === void 0 ? void 0 : _a3.eventsPerSecond;
        if (eventsPerSecond)
          this.eventsPerSecondLimitMs = Math.floor(1e3 / eventsPerSecond);
        this.reconnectAfterMs = (options2 === null || options2 === void 0 ? void 0 : options2.reconnectAfterMs) ? options2.reconnectAfterMs : (tries) => {
          return [1e3, 2e3, 5e3, 1e4][tries - 1] || 1e4;
        };
        this.encode = (options2 === null || options2 === void 0 ? void 0 : options2.encode) ? options2.encode : (payload, callback) => {
          return callback(JSON.stringify(payload));
        };
        this.decode = (options2 === null || options2 === void 0 ? void 0 : options2.decode) ? options2.decode : this.serializer.decode.bind(this.serializer);
        this.reconnectTimer = new Timer(() => __awaiter5(this, void 0, void 0, function* () {
          this.disconnect();
          this.connect();
        }), this.reconnectAfterMs);
      }
      connect() {
        if (this.conn) {
          return;
        }
        this.conn = new this.transport(this._endPointURL(), [], null, this.headers);
        if (this.conn) {
          this.conn.binaryType = "arraybuffer";
          this.conn.onopen = () => this._onConnOpen();
          this.conn.onerror = (error2) => this._onConnError(error2);
          this.conn.onmessage = (event) => this._onConnMessage(event);
          this.conn.onclose = (event) => this._onConnClose(event);
        }
      }
      disconnect(code, reason) {
        if (this.conn) {
          this.conn.onclose = function() {
          };
          if (code) {
            this.conn.close(code, reason !== null && reason !== void 0 ? reason : "");
          } else {
            this.conn.close();
          }
          this.conn = null;
          this.heartbeatTimer && clearInterval(this.heartbeatTimer);
          this.reconnectTimer.reset();
        }
      }
      getChannels() {
        return this.channels;
      }
      removeChannel(channel) {
        return channel.unsubscribe().then((status) => {
          if (this.channels.length === 0) {
            this.disconnect();
          }
          return status;
        });
      }
      removeAllChannels() {
        return Promise.all(this.channels.map((channel) => channel.unsubscribe())).then((values) => {
          this.disconnect();
          return values;
        });
      }
      log(kind, msg, data) {
        this.logger(kind, msg, data);
      }
      connectionState() {
        switch (this.conn && this.conn.readyState) {
          case SOCKET_STATES.connecting:
            return CONNECTION_STATE.Connecting;
          case SOCKET_STATES.open:
            return CONNECTION_STATE.Open;
          case SOCKET_STATES.closing:
            return CONNECTION_STATE.Closing;
          default:
            return CONNECTION_STATE.Closed;
        }
      }
      isConnected() {
        return this.connectionState() === CONNECTION_STATE.Open;
      }
      channel(topic, params = { config: {} }) {
        if (!this.isConnected()) {
          this.connect();
        }
        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);
        this.channels.push(chan);
        return chan;
      }
      push(data) {
        const { topic, event, payload, ref } = data;
        let callback = () => {
          this.encode(data, (result) => {
            var _a3;
            (_a3 = this.conn) === null || _a3 === void 0 ? void 0 : _a3.send(result);
          });
        };
        this.log("push", `${topic} ${event} (${ref})`, payload);
        if (this.isConnected()) {
          if (["broadcast", "presence", "postgres_changes"].includes(event)) {
            const isThrottled = this._throttle(callback)();
            if (isThrottled) {
              return "rate limited";
            }
          } else {
            callback();
          }
        } else {
          this.sendBuffer.push(callback);
        }
      }
      setAuth(token) {
        this.accessToken = token;
        this.channels.forEach((channel) => {
          token && channel.updateJoinPayload({ access_token: token });
          if (channel.joinedOnce && channel._isJoined()) {
            channel._push(CHANNEL_EVENTS.access_token, { access_token: token });
          }
        });
      }
      _makeRef() {
        let newRef = this.ref + 1;
        if (newRef === this.ref) {
          this.ref = 0;
        } else {
          this.ref = newRef;
        }
        return this.ref.toString();
      }
      _leaveOpenTopic(topic) {
        let dupChannel = this.channels.find((c2) => c2.topic === topic && (c2._isJoined() || c2._isJoining()));
        if (dupChannel) {
          this.log("transport", `leaving duplicate topic "${topic}"`);
          dupChannel.unsubscribe();
        }
      }
      _remove(channel) {
        this.channels = this.channels.filter((c2) => c2._joinRef() !== channel._joinRef());
      }
      _endPointURL() {
        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));
      }
      _onConnMessage(rawMessage) {
        this.decode(rawMessage.data, (msg) => {
          let { topic, event, payload, ref } = msg;
          if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {
            this.pendingHeartbeatRef = null;
          }
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
          this.channels.filter((channel) => channel._isMember(topic)).forEach((channel) => channel._trigger(event, payload, ref));
          this.stateChangeCallbacks.message.forEach((callback) => callback(msg));
        });
      }
      _onConnOpen() {
        this.log("transport", `connected to ${this._endPointURL()}`);
        this._flushSendBuffer();
        this.reconnectTimer.reset();
        this.heartbeatTimer && clearInterval(this.heartbeatTimer);
        this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);
        this.stateChangeCallbacks.open.forEach((callback) => callback());
      }
      _onConnClose(event) {
        this.log("transport", "close", event);
        this._triggerChanError();
        this.heartbeatTimer && clearInterval(this.heartbeatTimer);
        this.reconnectTimer.scheduleTimeout();
        this.stateChangeCallbacks.close.forEach((callback) => callback(event));
      }
      _onConnError(error2) {
        this.log("transport", error2.message);
        this._triggerChanError();
        this.stateChangeCallbacks.error.forEach((callback) => callback(error2));
      }
      _triggerChanError() {
        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));
      }
      _appendParams(url, params) {
        if (Object.keys(params).length === 0) {
          return url;
        }
        const prefix = url.match(/\?/) ? "&" : "?";
        const query = new URLSearchParams(params);
        return `${url}${prefix}${query}`;
      }
      _flushSendBuffer() {
        if (this.isConnected() && this.sendBuffer.length > 0) {
          this.sendBuffer.forEach((callback) => callback());
          this.sendBuffer = [];
        }
      }
      _sendHeartbeat() {
        var _a3;
        if (!this.isConnected()) {
          return;
        }
        if (this.pendingHeartbeatRef) {
          this.pendingHeartbeatRef = null;
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
          (_a3 = this.conn) === null || _a3 === void 0 ? void 0 : _a3.close(WS_CLOSE_NORMAL, "hearbeat timeout");
          return;
        }
        this.pendingHeartbeatRef = this._makeRef();
        this.push({
          topic: "phoenix",
          event: "heartbeat",
          payload: {},
          ref: this.pendingHeartbeatRef
        });
        this.setAuth(this.accessToken);
      }
      _throttle(callback, eventsPerSecondLimit = this.eventsPerSecondLimitMs) {
        return () => {
          if (this.inThrottle)
            return true;
          callback();
          this.inThrottle = true;
          setTimeout(() => {
            this.inThrottle = false;
          }, eventsPerSecondLimit);
          return false;
        };
      }
    };
  }
});

// node_modules/@supabase/realtime-js/dist/module/index.js
var init_module3 = __esm({
  "node_modules/@supabase/realtime-js/dist/module/index.js"() {
    init_RealtimeClient();
    init_RealtimeChannel();
    init_RealtimePresence();
  }
});

// node_modules/@supabase/storage-js/dist/module/lib/errors.js
function isStorageError(error2) {
  return typeof error2 === "object" && error2 !== null && "__isStorageError" in error2;
}
var StorageError, StorageApiError, StorageUnknownError;
var init_errors = __esm({
  "node_modules/@supabase/storage-js/dist/module/lib/errors.js"() {
    StorageError = class extends Error {
      constructor(message) {
        super(message);
        this.__isStorageError = true;
        this.name = "StorageError";
      }
    };
    StorageApiError = class extends StorageError {
      constructor(message, status) {
        super(message);
        this.name = "StorageApiError";
        this.status = status;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          status: this.status
        };
      }
    };
    StorageUnknownError = class extends StorageError {
      constructor(message, originalError) {
        super(message);
        this.name = "StorageUnknownError";
        this.originalError = originalError;
      }
    };
  }
});

// node_modules/@supabase/storage-js/dist/module/lib/helpers.js
var __awaiter6, resolveFetch2, resolveResponse;
var init_helpers = __esm({
  "node_modules/@supabase/storage-js/dist/module/lib/helpers.js"() {
    __awaiter6 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    resolveFetch2 = (customFetch) => {
      let _fetch;
      if (customFetch) {
        _fetch = customFetch;
      } else if (typeof fetch === "undefined") {
        _fetch = (...args) => __awaiter6(void 0, void 0, void 0, function* () {
          return yield (yield Promise.resolve().then(() => __toESM(require_browser_ponyfill()))).fetch(...args);
        });
      } else {
        _fetch = fetch;
      }
      return (...args) => _fetch(...args);
    };
    resolveResponse = () => __awaiter6(void 0, void 0, void 0, function* () {
      if (typeof Response === "undefined") {
        return (yield Promise.resolve().then(() => __toESM(require_browser_ponyfill()))).Response;
      }
      return Response;
    });
  }
});

// node_modules/@supabase/storage-js/dist/module/lib/fetch.js
function _handleRequest(fetcher, method, url, options2, parameters, body) {
  return __awaiter7(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      fetcher(url, _getRequestParams(method, options2, parameters, body)).then((result) => {
        if (!result.ok)
          throw result;
        if (options2 === null || options2 === void 0 ? void 0 : options2.noResolveJson)
          return result;
        return result.json();
      }).then((data) => resolve(data)).catch((error2) => handleError(error2, reject));
    });
  });
}
function get(fetcher, url, options2, parameters) {
  return __awaiter7(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "GET", url, options2, parameters);
  });
}
function post(fetcher, url, body, options2, parameters) {
  return __awaiter7(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "POST", url, options2, parameters, body);
  });
}
function put(fetcher, url, body, options2, parameters) {
  return __awaiter7(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "PUT", url, options2, parameters, body);
  });
}
function remove(fetcher, url, body, options2, parameters) {
  return __awaiter7(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "DELETE", url, options2, parameters, body);
  });
}
var __awaiter7, _getErrorMessage, handleError, _getRequestParams;
var init_fetch = __esm({
  "node_modules/@supabase/storage-js/dist/module/lib/fetch.js"() {
    init_errors();
    init_helpers();
    __awaiter7 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
    handleError = (error2, reject) => __awaiter7(void 0, void 0, void 0, function* () {
      const Res = yield resolveResponse();
      if (error2 instanceof Res) {
        error2.json().then((err) => {
          reject(new StorageApiError(_getErrorMessage(err), error2.status || 500));
        });
      } else {
        reject(new StorageUnknownError(_getErrorMessage(error2), error2));
      }
    });
    _getRequestParams = (method, options2, parameters, body) => {
      const params = { method, headers: (options2 === null || options2 === void 0 ? void 0 : options2.headers) || {} };
      if (method === "GET") {
        return params;
      }
      params.headers = Object.assign({ "Content-Type": "application/json" }, options2 === null || options2 === void 0 ? void 0 : options2.headers);
      params.body = JSON.stringify(body);
      return Object.assign(Object.assign({}, params), parameters);
    };
  }
});

// node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js
var __awaiter8, DEFAULT_SEARCH_OPTIONS, DEFAULT_FILE_OPTIONS, StorageFileApi;
var init_StorageFileApi = __esm({
  "node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js"() {
    init_errors();
    init_fetch();
    init_helpers();
    __awaiter8 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    DEFAULT_SEARCH_OPTIONS = {
      limit: 100,
      offset: 0,
      sortBy: {
        column: "name",
        order: "asc"
      }
    };
    DEFAULT_FILE_OPTIONS = {
      cacheControl: "3600",
      contentType: "text/plain;charset=UTF-8",
      upsert: false
    };
    StorageFileApi = class {
      constructor(url, headers = {}, bucketId, fetch2) {
        this.url = url;
        this.headers = headers;
        this.bucketId = bucketId;
        this.fetch = resolveFetch2(fetch2);
      }
      uploadOrUpdate(method, path3, fileBody, fileOptions) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            let body;
            const options2 = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);
            const headers = Object.assign(Object.assign({}, this.headers), method === "POST" && { "x-upsert": String(options2.upsert) });
            if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
              body = new FormData();
              body.append("cacheControl", options2.cacheControl);
              body.append("", fileBody);
            } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
              body = fileBody;
              body.append("cacheControl", options2.cacheControl);
            } else {
              body = fileBody;
              headers["cache-control"] = `max-age=${options2.cacheControl}`;
              headers["content-type"] = options2.contentType;
            }
            const cleanPath = this._removeEmptyFolders(path3);
            const _path = this._getFinalPath(cleanPath);
            const res = yield this.fetch(`${this.url}/object/${_path}`, {
              method,
              body,
              headers
            });
            if (res.ok) {
              return {
                data: { path: cleanPath },
                error: null
              };
            } else {
              const error2 = yield res.json();
              return { data: null, error: error2 };
            }
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      upload(path3, fileBody, fileOptions) {
        return __awaiter8(this, void 0, void 0, function* () {
          return this.uploadOrUpdate("POST", path3, fileBody, fileOptions);
        });
      }
      update(path3, fileBody, fileOptions) {
        return __awaiter8(this, void 0, void 0, function* () {
          return this.uploadOrUpdate("PUT", path3, fileBody, fileOptions);
        });
      }
      move(fromPath, toPath) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            const data = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      copy(fromPath, toPath) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            const data = yield post(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });
            return { data: { path: data.Key }, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      createSignedUrl(path3, expiresIn, options2) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            let _path = this._getFinalPath(path3);
            let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, (options2 === null || options2 === void 0 ? void 0 : options2.transform) ? { transform: options2.transform } : {}), { headers: this.headers });
            const downloadQueryParam = (options2 === null || options2 === void 0 ? void 0 : options2.download) ? `&download=${options2.download === true ? "" : options2.download}` : "";
            const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);
            data = { signedUrl };
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      createSignedUrls(paths, expiresIn, options2) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });
            const downloadQueryParam = (options2 === null || options2 === void 0 ? void 0 : options2.download) ? `&download=${options2.download === true ? "" : options2.download}` : "";
            return {
              data: data.map((datum2) => Object.assign(Object.assign({}, datum2), { signedUrl: datum2.signedURL ? encodeURI(`${this.url}${datum2.signedURL}${downloadQueryParam}`) : null })),
              error: null
            };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      download(path3, options2) {
        return __awaiter8(this, void 0, void 0, function* () {
          const wantsTransformation = typeof (options2 === null || options2 === void 0 ? void 0 : options2.transform) !== "undefined";
          const renderPath = wantsTransformation ? "render/image/authenticated" : "object";
          const transformationQuery = this.transformOptsToQueryString((options2 === null || options2 === void 0 ? void 0 : options2.transform) || {});
          const queryString = transformationQuery ? `?${transformationQuery}` : "";
          try {
            const _path = this._getFinalPath(path3);
            const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {
              headers: this.headers,
              noResolveJson: true
            });
            const data = yield res.blob();
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      getPublicUrl(path3, options2) {
        const _path = this._getFinalPath(path3);
        const _queryString = [];
        const downloadQueryParam = (options2 === null || options2 === void 0 ? void 0 : options2.download) ? `download=${options2.download === true ? "" : options2.download}` : "";
        if (downloadQueryParam !== "") {
          _queryString.push(downloadQueryParam);
        }
        const wantsTransformation = typeof (options2 === null || options2 === void 0 ? void 0 : options2.transform) !== "undefined";
        const renderPath = wantsTransformation ? "render/image" : "object";
        const transformationQuery = this.transformOptsToQueryString((options2 === null || options2 === void 0 ? void 0 : options2.transform) || {});
        if (transformationQuery !== "") {
          _queryString.push(transformationQuery);
        }
        let queryString = _queryString.join("&");
        if (queryString !== "") {
          queryString = `?${queryString}`;
        }
        return {
          data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) }
        };
      }
      remove(paths) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      list(path3, options2, parameters) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options2), { prefix: path3 || "" });
            const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      _getFinalPath(path3) {
        return `${this.bucketId}/${path3}`;
      }
      _removeEmptyFolders(path3) {
        return path3.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
      }
      transformOptsToQueryString(transform) {
        const params = [];
        if (transform.width) {
          params.push(`width=${transform.width}`);
        }
        if (transform.height) {
          params.push(`height=${transform.height}`);
        }
        if (transform.resize) {
          params.push(`resize=${transform.resize}`);
        }
        return params.join("&");
      }
    };
  }
});

// node_modules/@supabase/storage-js/dist/module/lib/version.js
var version3;
var init_version3 = __esm({
  "node_modules/@supabase/storage-js/dist/module/lib/version.js"() {
    version3 = "2.1.0";
  }
});

// node_modules/@supabase/storage-js/dist/module/lib/constants.js
var DEFAULT_HEADERS3;
var init_constants3 = __esm({
  "node_modules/@supabase/storage-js/dist/module/lib/constants.js"() {
    init_version3();
    DEFAULT_HEADERS3 = { "X-Client-Info": `storage-js/${version3}` };
  }
});

// node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js
var __awaiter9, StorageBucketApi;
var init_StorageBucketApi = __esm({
  "node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js"() {
    init_constants3();
    init_errors();
    init_fetch();
    init_helpers();
    __awaiter9 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    StorageBucketApi = class {
      constructor(url, headers = {}, fetch2) {
        this.url = url;
        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS3), headers);
        this.fetch = resolveFetch2(fetch2);
      }
      listBuckets() {
        return __awaiter9(this, void 0, void 0, function* () {
          try {
            const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      getBucket(id2) {
        return __awaiter9(this, void 0, void 0, function* () {
          try {
            const data = yield get(this.fetch, `${this.url}/bucket/${id2}`, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      createBucket(id2, options2 = { public: false }) {
        return __awaiter9(this, void 0, void 0, function* () {
          try {
            const data = yield post(this.fetch, `${this.url}/bucket`, { id: id2, name: id2, public: options2.public }, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      updateBucket(id2, options2) {
        return __awaiter9(this, void 0, void 0, function* () {
          try {
            const data = yield put(this.fetch, `${this.url}/bucket/${id2}`, { id: id2, name: id2, public: options2.public }, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      emptyBucket(id2) {
        return __awaiter9(this, void 0, void 0, function* () {
          try {
            const data = yield post(this.fetch, `${this.url}/bucket/${id2}/empty`, {}, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      deleteBucket(id2) {
        return __awaiter9(this, void 0, void 0, function* () {
          try {
            const data = yield remove(this.fetch, `${this.url}/bucket/${id2}`, {}, { headers: this.headers });
            return { data, error: null };
          } catch (error2) {
            if (isStorageError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
    };
  }
});

// node_modules/@supabase/storage-js/dist/module/StorageClient.js
var StorageClient;
var init_StorageClient = __esm({
  "node_modules/@supabase/storage-js/dist/module/StorageClient.js"() {
    init_StorageFileApi();
    init_StorageBucketApi();
    StorageClient = class extends StorageBucketApi {
      constructor(url, headers = {}, fetch2) {
        super(url, headers, fetch2);
      }
      from(id2) {
        return new StorageFileApi(this.url, this.headers, id2, this.fetch);
      }
    };
  }
});

// node_modules/@supabase/storage-js/dist/module/lib/types.js
var init_types2 = __esm({
  "node_modules/@supabase/storage-js/dist/module/lib/types.js"() {
  }
});

// node_modules/@supabase/storage-js/dist/module/index.js
var init_module4 = __esm({
  "node_modules/@supabase/storage-js/dist/module/index.js"() {
    init_StorageClient();
    init_types2();
    init_errors();
  }
});

// node_modules/@supabase/supabase-js/dist/module/lib/version.js
var version4;
var init_version4 = __esm({
  "node_modules/@supabase/supabase-js/dist/module/lib/version.js"() {
    version4 = "2.2.1";
  }
});

// node_modules/@supabase/supabase-js/dist/module/lib/constants.js
var DEFAULT_HEADERS4;
var init_constants4 = __esm({
  "node_modules/@supabase/supabase-js/dist/module/lib/constants.js"() {
    init_version4();
    DEFAULT_HEADERS4 = { "X-Client-Info": `supabase-js/${version4}` };
  }
});

// node_modules/@supabase/supabase-js/dist/module/lib/fetch.js
var import_cross_fetch2, __awaiter10, resolveFetch3, resolveHeadersConstructor, fetchWithAuth;
var init_fetch2 = __esm({
  "node_modules/@supabase/supabase-js/dist/module/lib/fetch.js"() {
    import_cross_fetch2 = __toESM(require_browser_ponyfill());
    __awaiter10 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    resolveFetch3 = (customFetch) => {
      let _fetch;
      if (customFetch) {
        _fetch = customFetch;
      } else if (typeof fetch === "undefined") {
        _fetch = import_cross_fetch2.default;
      } else {
        _fetch = fetch;
      }
      return (...args) => _fetch(...args);
    };
    resolveHeadersConstructor = () => {
      if (typeof Headers === "undefined") {
        return import_cross_fetch2.Headers;
      }
      return Headers;
    };
    fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {
      const fetch2 = resolveFetch3(customFetch);
      const HeadersConstructor = resolveHeadersConstructor();
      return (input, init3) => __awaiter10(void 0, void 0, void 0, function* () {
        var _a3;
        const accessToken = (_a3 = yield getAccessToken()) !== null && _a3 !== void 0 ? _a3 : supabaseKey;
        let headers = new HeadersConstructor(init3 === null || init3 === void 0 ? void 0 : init3.headers);
        if (!headers.has("apikey")) {
          headers.set("apikey", supabaseKey);
        }
        if (!headers.has("Authorization")) {
          headers.set("Authorization", `Bearer ${accessToken}`);
        }
        return fetch2(input, Object.assign(Object.assign({}, init3), { headers }));
      });
    };
  }
});

// node_modules/@supabase/supabase-js/dist/module/lib/helpers.js
function stripTrailingSlash(url) {
  return url.replace(/\/$/, "");
}
function applySettingDefaults(options2, defaults) {
  const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions } = options2;
  const { db: DEFAULT_DB_OPTIONS2, auth: DEFAULT_AUTH_OPTIONS2, realtime: DEFAULT_REALTIME_OPTIONS2, global: DEFAULT_GLOBAL_OPTIONS2 } = defaults;
  return {
    db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS2), dbOptions),
    auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS2), authOptions),
    realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS2), realtimeOptions),
    global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS2), globalOptions)
  };
}
var init_helpers2 = __esm({
  "node_modules/@supabase/supabase-js/dist/module/lib/helpers.js"() {
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/helpers.js
function expiresAt(expiresIn) {
  const timeNow = Math.round(Date.now() / 1e3);
  return timeNow + expiresIn;
}
function uuid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c2) {
    const r = Math.random() * 16 | 0, v = c2 == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
function getParameterByName(name, url) {
  var _a3;
  if (!url)
    url = ((_a3 = window === null || window === void 0 ? void 0 : window.location) === null || _a3 === void 0 ? void 0 : _a3.href) || "";
  name = name.replace(/[\[\]]/g, "\\$&");
  const regex = new RegExp("[?&#]" + name + "(=([^&#]*)|&|#|$)"), results = regex.exec(url);
  if (!results)
    return null;
  if (!results[2])
    return "";
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}
function decodeJWTPayload(token) {
  const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i;
  const parts = token.split(".");
  if (parts.length !== 3) {
    throw new Error("JWT is not valid: not a JWT structure");
  }
  if (!base64UrlRegex.test(parts[1])) {
    throw new Error("JWT is not valid: payload is not in base64url format");
  }
  const base64Url = parts[1];
  return JSON.parse(decodeBase64URL(base64Url));
}
var __awaiter11, isBrowser, resolveFetch4, looksLikeFetchResponse, setItemAsync, getItemAsync, removeItemAsync, decodeBase64URL, Deferred;
var init_helpers3 = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/helpers.js"() {
    __awaiter11 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    isBrowser = () => typeof document !== "undefined";
    resolveFetch4 = (customFetch) => {
      let _fetch;
      if (customFetch) {
        _fetch = customFetch;
      } else if (typeof fetch === "undefined") {
        _fetch = (...args) => __awaiter11(void 0, void 0, void 0, function* () {
          return yield (yield Promise.resolve().then(() => __toESM(require_browser_ponyfill()))).fetch(...args);
        });
      } else {
        _fetch = fetch;
      }
      return (...args) => _fetch(...args);
    };
    looksLikeFetchResponse = (maybeResponse) => {
      return typeof maybeResponse === "object" && maybeResponse !== null && "status" in maybeResponse && "ok" in maybeResponse && "json" in maybeResponse && typeof maybeResponse.json === "function";
    };
    setItemAsync = (storage, key2, data) => __awaiter11(void 0, void 0, void 0, function* () {
      yield storage.setItem(key2, JSON.stringify(data));
    });
    getItemAsync = (storage, key2) => __awaiter11(void 0, void 0, void 0, function* () {
      const value2 = yield storage.getItem(key2);
      if (!value2) {
        return null;
      }
      try {
        return JSON.parse(value2);
      } catch (_a3) {
        return value2;
      }
    });
    removeItemAsync = (storage, key2) => __awaiter11(void 0, void 0, void 0, function* () {
      yield storage.removeItem(key2);
    });
    decodeBase64URL = (value2) => {
      try {
        return decodeURIComponent(atob(value2.replace(/[-]/g, "+").replace(/[_]/g, "/")).split("").map((c2) => "%" + ("00" + c2.charCodeAt(0).toString(16)).slice(-2)).join(""));
      } catch (e) {
        if (e instanceof ReferenceError) {
          return Buffer.from(value2, "base64").toString("utf-8");
        } else {
          throw e;
        }
      }
    };
    Deferred = class {
      constructor() {
        ;
        this.promise = new Deferred.promiseConstructor((res, rej) => {
          ;
          this.resolve = res;
          this.reject = rej;
        });
      }
    };
    Deferred.promiseConstructor = Promise;
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/errors.js
function isAuthError(error2) {
  return typeof error2 === "object" && error2 !== null && "__isAuthError" in error2;
}
function isAuthApiError(error2) {
  return isAuthError(error2) && error2.name === "AuthApiError";
}
var AuthError, AuthApiError, AuthUnknownError, CustomAuthError, AuthSessionMissingError, AuthInvalidCredentialsError, AuthImplicitGrantRedirectError, AuthRetryableFetchError;
var init_errors2 = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/errors.js"() {
    AuthError = class extends Error {
      constructor(message) {
        super(message);
        this.__isAuthError = true;
        this.name = "AuthError";
      }
    };
    AuthApiError = class extends AuthError {
      constructor(message, status) {
        super(message);
        this.name = "AuthApiError";
        this.status = status;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          status: this.status
        };
      }
    };
    AuthUnknownError = class extends AuthError {
      constructor(message, originalError) {
        super(message);
        this.name = "AuthUnknownError";
        this.originalError = originalError;
      }
    };
    CustomAuthError = class extends AuthError {
      constructor(message, name, status) {
        super(message);
        this.name = name;
        this.status = status;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          status: this.status
        };
      }
    };
    AuthSessionMissingError = class extends CustomAuthError {
      constructor() {
        super("Auth session missing!", "AuthSessionMissingError", 400);
      }
    };
    AuthInvalidCredentialsError = class extends CustomAuthError {
      constructor(message) {
        super(message, "AuthInvalidCredentialsError", 400);
      }
    };
    AuthImplicitGrantRedirectError = class extends CustomAuthError {
      constructor(message, details = null) {
        super(message, "AuthImplicitGrantRedirectError", 500);
        this.details = null;
        this.details = details;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          status: this.status,
          details: this.details
        };
      }
    };
    AuthRetryableFetchError = class extends CustomAuthError {
      constructor(message, status) {
        super(message, "AuthRetryableFetchError", status);
      }
    };
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/fetch.js
function _request(fetcher, method, url, options2) {
  var _a3;
  return __awaiter12(this, void 0, void 0, function* () {
    const headers = Object.assign({}, options2 === null || options2 === void 0 ? void 0 : options2.headers);
    if (options2 === null || options2 === void 0 ? void 0 : options2.jwt) {
      headers["Authorization"] = `Bearer ${options2.jwt}`;
    }
    const qs = (_a3 = options2 === null || options2 === void 0 ? void 0 : options2.query) !== null && _a3 !== void 0 ? _a3 : {};
    if (options2 === null || options2 === void 0 ? void 0 : options2.redirectTo) {
      qs["redirect_to"] = options2.redirectTo;
    }
    const queryString = Object.keys(qs).length ? "?" + new URLSearchParams(qs).toString() : "";
    const data = yield _handleRequest2(fetcher, method, url + queryString, { headers, noResolveJson: options2 === null || options2 === void 0 ? void 0 : options2.noResolveJson }, {}, options2 === null || options2 === void 0 ? void 0 : options2.body);
    return (options2 === null || options2 === void 0 ? void 0 : options2.xform) ? options2 === null || options2 === void 0 ? void 0 : options2.xform(data) : { data: Object.assign({}, data), error: null };
  });
}
function _handleRequest2(fetcher, method, url, options2, parameters, body) {
  return __awaiter12(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      fetcher(url, _getRequestParams2(method, options2, parameters, body)).then((result) => {
        if (!result.ok)
          throw result;
        if (options2 === null || options2 === void 0 ? void 0 : options2.noResolveJson)
          return result;
        return result.json();
      }).then((data) => resolve(data)).catch((error2) => handleError2(error2, reject));
    });
  });
}
function _sessionResponse(data) {
  var _a3;
  let session = null;
  if (hasSession(data)) {
    session = Object.assign({}, data);
    session.expires_at = expiresAt(data.expires_in);
  }
  const user = (_a3 = data.user) !== null && _a3 !== void 0 ? _a3 : data;
  return { data: { session, user }, error: null };
}
function _userResponse(data) {
  var _a3;
  const user = (_a3 = data.user) !== null && _a3 !== void 0 ? _a3 : data;
  return { data: { user }, error: null };
}
function _ssoResponse(data) {
  return { data, error: null };
}
function _generateLinkResponse(data) {
  const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest(data, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"]);
  const properties = {
    action_link,
    email_otp,
    hashed_token,
    redirect_to,
    verification_type
  };
  const user = Object.assign({}, rest);
  return {
    data: {
      properties,
      user
    },
    error: null
  };
}
function _noResolveJsonResponse(data) {
  return data;
}
function hasSession(data) {
  return data.access_token && data.refresh_token && data.expires_in;
}
var __awaiter12, __rest, _getErrorMessage2, handleError2, _getRequestParams2;
var init_fetch3 = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/fetch.js"() {
    init_helpers3();
    init_errors2();
    __awaiter12 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __rest = function(s2, e) {
      var t = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
          t[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
            t[p[i]] = s2[p[i]];
        }
      return t;
    };
    _getErrorMessage2 = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
    handleError2 = (error2, reject) => __awaiter12(void 0, void 0, void 0, function* () {
      const NETWORK_ERROR_CODES = [502, 503, 504];
      if (!looksLikeFetchResponse(error2)) {
        reject(new AuthRetryableFetchError(_getErrorMessage2(error2), 0));
      } else if (NETWORK_ERROR_CODES.includes(error2.status)) {
        reject(new AuthRetryableFetchError(_getErrorMessage2(error2), error2.status));
      } else {
        error2.json().then((err) => {
          reject(new AuthApiError(_getErrorMessage2(err), error2.status || 500));
        }).catch((e) => {
          reject(new AuthUnknownError(_getErrorMessage2(e), e));
        });
      }
    });
    _getRequestParams2 = (method, options2, parameters, body) => {
      const params = { method, headers: (options2 === null || options2 === void 0 ? void 0 : options2.headers) || {} };
      if (method === "GET") {
        return params;
      }
      params.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, options2 === null || options2 === void 0 ? void 0 : options2.headers);
      params.body = JSON.stringify(body);
      return Object.assign(Object.assign({}, params), parameters);
    };
  }
});

// node_modules/@supabase/gotrue-js/dist/module/GoTrueAdminApi.js
var __awaiter13, __rest2, GoTrueAdminApi;
var init_GoTrueAdminApi = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/GoTrueAdminApi.js"() {
    init_fetch3();
    init_helpers3();
    init_errors2();
    __awaiter13 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __rest2 = function(s2, e) {
      var t = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
          t[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
            t[p[i]] = s2[p[i]];
        }
      return t;
    };
    GoTrueAdminApi = class {
      constructor({ url = "", headers = {}, fetch: fetch2 }) {
        this.url = url;
        this.headers = headers;
        this.fetch = resolveFetch4(fetch2);
        this.mfa = {
          listFactors: this._listFactors.bind(this),
          deleteFactor: this._deleteFactor.bind(this)
        };
      }
      signOut(jwt) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            yield _request(this.fetch, "POST", `${this.url}/logout`, {
              headers: this.headers,
              jwt,
              noResolveJson: true
            });
            return { data: null, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      inviteUserByEmail(email, options2 = {}) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            return yield _request(this.fetch, "POST", `${this.url}/invite`, {
              body: { email, data: options2.data },
              headers: this.headers,
              redirectTo: options2.redirectTo,
              xform: _userResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      generateLink(params) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            const { options: options2 } = params, rest = __rest2(params, ["options"]);
            const body = Object.assign(Object.assign({}, rest), options2);
            if ("newEmail" in rest) {
              body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;
              delete body["newEmail"];
            }
            return yield _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
              body,
              headers: this.headers,
              xform: _generateLinkResponse,
              redirectTo: options2 === null || options2 === void 0 ? void 0 : options2.redirectTo
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return {
                data: {
                  properties: null,
                  user: null
                },
                error: error2
              };
            }
            throw error2;
          }
        });
      }
      createUser(attributes) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            return yield _request(this.fetch, "POST", `${this.url}/admin/users`, {
              body: attributes,
              headers: this.headers,
              xform: _userResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      listUsers(params) {
        var _a3, _b, _c, _d, _e, _f, _g;
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            let pagination = { nextPage: null, lastPage: 0, total: 0 };
            const response = yield _request(this.fetch, "GET", `${this.url}/admin/users`, {
              headers: this.headers,
              noResolveJson: true,
              query: {
                page: (_b = (_a3 = params === null || params === void 0 ? void 0 : params.page) === null || _a3 === void 0 ? void 0 : _a3.toString()) !== null && _b !== void 0 ? _b : "",
                per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""
              },
              xform: _noResolveJsonResponse
            });
            if (response.error)
              throw response.error;
            const users = yield response.json();
            const total = (_e = response.headers.get("x-total-count")) !== null && _e !== void 0 ? _e : 0;
            const links = (_g = (_f = response.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
            if (links.length > 0) {
              links.forEach((link3) => {
                const page2 = parseInt(link3.split(";")[0].split("=")[1].substring(0, 1));
                const rel = JSON.parse(link3.split(";")[1].split("=")[1]);
                pagination[`${rel}Page`] = page2;
              });
              pagination.total = parseInt(total);
            }
            return { data: Object.assign(Object.assign({}, users), pagination), error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { users: [] }, error: error2 };
            }
            throw error2;
          }
        });
      }
      getUserById(uid) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            return yield _request(this.fetch, "GET", `${this.url}/admin/users/${uid}`, {
              headers: this.headers,
              xform: _userResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      updateUserById(uid, attributes) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            return yield _request(this.fetch, "PUT", `${this.url}/admin/users/${uid}`, {
              body: attributes,
              headers: this.headers,
              xform: _userResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      deleteUser(id2) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            return yield _request(this.fetch, "DELETE", `${this.url}/admin/users/${id2}`, {
              headers: this.headers,
              xform: _userResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      _listFactors(params) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            const data = yield _request(this.fetch, "GET", `${this.url}/admin/users/${params.userId}/factors`, {
              headers: this.headers
            });
            return { data, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      _deleteFactor(params) {
        return __awaiter13(this, void 0, void 0, function* () {
          try {
            const data = yield _request(this.fetch, "DELETE", `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {
              headers: this.headers
            });
            return { data, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
    };
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/version.js
var version5;
var init_version5 = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/version.js"() {
    version5 = "2.6.0";
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/constants.js
var GOTRUE_URL, STORAGE_KEY, DEFAULT_HEADERS5, EXPIRY_MARGIN, NETWORK_FAILURE;
var init_constants5 = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/constants.js"() {
    init_version5();
    GOTRUE_URL = "http://localhost:9999";
    STORAGE_KEY = "supabase.auth.token";
    DEFAULT_HEADERS5 = { "X-Client-Info": `gotrue-js/${version5}` };
    EXPIRY_MARGIN = 10;
    NETWORK_FAILURE = {
      MAX_RETRIES: 10,
      RETRY_INTERVAL: 2
    };
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/local-storage.js
var localStorageAdapter, local_storage_default;
var init_local_storage = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/local-storage.js"() {
    init_helpers3();
    localStorageAdapter = {
      getItem: (key2) => {
        if (!isBrowser()) {
          return null;
        }
        return globalThis.localStorage.getItem(key2);
      },
      setItem: (key2, value2) => {
        if (!isBrowser()) {
          return;
        }
        globalThis.localStorage.setItem(key2, value2);
      },
      removeItem: (key2) => {
        if (!isBrowser()) {
          return;
        }
        globalThis.localStorage.removeItem(key2);
      }
    };
    local_storage_default = localStorageAdapter;
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/polyfills.js
function polyfillGlobalThis() {
  if (typeof globalThis === "object")
    return;
  try {
    Object.defineProperty(Object.prototype, "__magic__", {
      get: function() {
        return this;
      },
      configurable: true
    });
    __magic__.globalThis = __magic__;
    delete Object.prototype.__magic__;
  } catch (e) {
    if (typeof self !== "undefined") {
      self.globalThis = self;
    }
  }
}
var init_polyfills = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/polyfills.js"() {
  }
});

// node_modules/@supabase/gotrue-js/dist/module/GoTrueClient.js
var __awaiter14, DEFAULT_OPTIONS, GoTrueClient;
var init_GoTrueClient = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/GoTrueClient.js"() {
    init_GoTrueAdminApi();
    init_constants5();
    init_errors2();
    init_fetch3();
    init_helpers3();
    init_local_storage();
    init_polyfills();
    __awaiter14 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    polyfillGlobalThis();
    DEFAULT_OPTIONS = {
      url: GOTRUE_URL,
      storageKey: STORAGE_KEY,
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      headers: DEFAULT_HEADERS5
    };
    GoTrueClient = class {
      constructor(options2) {
        this.stateChangeEmitters = /* @__PURE__ */ new Map();
        this.networkRetries = 0;
        this.refreshingDeferred = null;
        this.initializePromise = null;
        this.detectSessionInUrl = true;
        const settings2 = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options2);
        this.inMemorySession = null;
        this.storageKey = settings2.storageKey;
        this.autoRefreshToken = settings2.autoRefreshToken;
        this.persistSession = settings2.persistSession;
        this.storage = settings2.storage || local_storage_default;
        this.admin = new GoTrueAdminApi({
          url: settings2.url,
          headers: settings2.headers,
          fetch: settings2.fetch
        });
        this.url = settings2.url;
        this.headers = settings2.headers;
        this.fetch = resolveFetch4(settings2.fetch);
        this.detectSessionInUrl = settings2.detectSessionInUrl;
        this.initialize();
        this.mfa = {
          verify: this._verify.bind(this),
          enroll: this._enroll.bind(this),
          unenroll: this._unenroll.bind(this),
          challenge: this._challenge.bind(this),
          listFactors: this._listFactors.bind(this),
          challengeAndVerify: this._challengeAndVerify.bind(this),
          getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)
        };
      }
      initialize() {
        if (!this.initializePromise) {
          this.initializePromise = this._initialize();
        }
        return this.initializePromise;
      }
      _initialize() {
        return __awaiter14(this, void 0, void 0, function* () {
          if (this.initializePromise) {
            return this.initializePromise;
          }
          try {
            if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {
              const { data, error: error2 } = yield this._getSessionFromUrl();
              if (error2) {
                yield this._removeSession();
                return { error: error2 };
              }
              const { session, redirectType } = data;
              yield this._saveSession(session);
              this._notifyAllSubscribers("SIGNED_IN", session);
              if (redirectType === "recovery") {
                this._notifyAllSubscribers("PASSWORD_RECOVERY", session);
              }
              return { error: null };
            }
            yield this._recoverAndRefresh();
            return { error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { error: error2 };
            }
            return {
              error: new AuthUnknownError("Unexpected error during initialization", error2)
            };
          } finally {
            this._handleVisibilityChange();
          }
        });
      }
      signUp(credentials) {
        var _a3, _b;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            yield this._removeSession();
            let res;
            if ("email" in credentials) {
              const { email, password, options: options2 } = credentials;
              res = yield _request(this.fetch, "POST", `${this.url}/signup`, {
                headers: this.headers,
                redirectTo: options2 === null || options2 === void 0 ? void 0 : options2.emailRedirectTo,
                body: {
                  email,
                  password,
                  data: (_a3 = options2 === null || options2 === void 0 ? void 0 : options2.data) !== null && _a3 !== void 0 ? _a3 : {},
                  gotrue_meta_security: { captcha_token: options2 === null || options2 === void 0 ? void 0 : options2.captchaToken }
                },
                xform: _sessionResponse
              });
            } else if ("phone" in credentials) {
              const { phone, password, options: options2 } = credentials;
              res = yield _request(this.fetch, "POST", `${this.url}/signup`, {
                headers: this.headers,
                body: {
                  phone,
                  password,
                  data: (_b = options2 === null || options2 === void 0 ? void 0 : options2.data) !== null && _b !== void 0 ? _b : {},
                  gotrue_meta_security: { captcha_token: options2 === null || options2 === void 0 ? void 0 : options2.captchaToken }
                },
                xform: _sessionResponse
              });
            } else {
              throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
            }
            const { data, error: error2 } = res;
            if (error2 || !data) {
              return { data: { user: null, session: null }, error: error2 };
            }
            const session = data.session;
            const user = data.user;
            if (data.session) {
              yield this._saveSession(data.session);
              this._notifyAllSubscribers("SIGNED_IN", session);
            }
            return { data: { user, session }, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null, session: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      signInWithPassword(credentials) {
        var _a3, _b;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            yield this._removeSession();
            let res;
            if ("email" in credentials) {
              const { email, password, options: options2 } = credentials;
              res = yield _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
                headers: this.headers,
                body: {
                  email,
                  password,
                  data: (_a3 = options2 === null || options2 === void 0 ? void 0 : options2.data) !== null && _a3 !== void 0 ? _a3 : {},
                  gotrue_meta_security: { captcha_token: options2 === null || options2 === void 0 ? void 0 : options2.captchaToken }
                },
                xform: _sessionResponse
              });
            } else if ("phone" in credentials) {
              const { phone, password, options: options2 } = credentials;
              res = yield _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
                headers: this.headers,
                body: {
                  phone,
                  password,
                  data: (_b = options2 === null || options2 === void 0 ? void 0 : options2.data) !== null && _b !== void 0 ? _b : {},
                  gotrue_meta_security: { captcha_token: options2 === null || options2 === void 0 ? void 0 : options2.captchaToken }
                },
                xform: _sessionResponse
              });
            } else {
              throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
            }
            const { data, error: error2 } = res;
            if (error2 || !data)
              return { data: { user: null, session: null }, error: error2 };
            if (data.session) {
              yield this._saveSession(data.session);
              this._notifyAllSubscribers("SIGNED_IN", data.session);
            }
            return { data, error: error2 };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null, session: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      signInWithOAuth(credentials) {
        var _a3, _b, _c;
        return __awaiter14(this, void 0, void 0, function* () {
          yield this._removeSession();
          return this._handleProviderSignIn(credentials.provider, {
            redirectTo: (_a3 = credentials.options) === null || _a3 === void 0 ? void 0 : _a3.redirectTo,
            scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
            queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams
          });
        });
      }
      signInWithOtp(credentials) {
        var _a3, _b, _c, _d;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            yield this._removeSession();
            if ("email" in credentials) {
              const { email, options: options2 } = credentials;
              const { error: error2 } = yield _request(this.fetch, "POST", `${this.url}/otp`, {
                headers: this.headers,
                body: {
                  email,
                  data: (_a3 = options2 === null || options2 === void 0 ? void 0 : options2.data) !== null && _a3 !== void 0 ? _a3 : {},
                  create_user: (_b = options2 === null || options2 === void 0 ? void 0 : options2.shouldCreateUser) !== null && _b !== void 0 ? _b : true,
                  gotrue_meta_security: { captcha_token: options2 === null || options2 === void 0 ? void 0 : options2.captchaToken }
                },
                redirectTo: options2 === null || options2 === void 0 ? void 0 : options2.emailRedirectTo
              });
              return { data: { user: null, session: null }, error: error2 };
            }
            if ("phone" in credentials) {
              const { phone, options: options2 } = credentials;
              const { error: error2 } = yield _request(this.fetch, "POST", `${this.url}/otp`, {
                headers: this.headers,
                body: {
                  phone,
                  data: (_c = options2 === null || options2 === void 0 ? void 0 : options2.data) !== null && _c !== void 0 ? _c : {},
                  create_user: (_d = options2 === null || options2 === void 0 ? void 0 : options2.shouldCreateUser) !== null && _d !== void 0 ? _d : true,
                  gotrue_meta_security: { captcha_token: options2 === null || options2 === void 0 ? void 0 : options2.captchaToken }
                }
              });
              return { data: { user: null, session: null }, error: error2 };
            }
            throw new AuthInvalidCredentialsError("You must provide either an email or phone number.");
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null, session: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      verifyOtp(params) {
        var _a3, _b;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            yield this._removeSession();
            const { data, error: error2 } = yield _request(this.fetch, "POST", `${this.url}/verify`, {
              headers: this.headers,
              body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: (_a3 = params.options) === null || _a3 === void 0 ? void 0 : _a3.captchaToken } }),
              redirectTo: (_b = params.options) === null || _b === void 0 ? void 0 : _b.redirectTo,
              xform: _sessionResponse
            });
            if (error2) {
              throw error2;
            }
            if (!data) {
              throw "An error occurred on token verification.";
            }
            const session = data.session;
            const user = data.user;
            if (session === null || session === void 0 ? void 0 : session.access_token) {
              yield this._saveSession(session);
              this._notifyAllSubscribers("SIGNED_IN", session);
            }
            return { data: { user, session }, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null, session: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      signInWithSSO(params) {
        var _a3, _b, _c;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            yield this._removeSession();
            return yield _request(this.fetch, "POST", `${this.url}/sso`, {
              body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in params ? { provider_id: params.providerId } : null), "domain" in params ? { domain: params.domain } : null), { redirect_to: (_b = (_a3 = params.options) === null || _a3 === void 0 ? void 0 : _a3.redirectTo) !== null && _b !== void 0 ? _b : void 0 }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } } : null), { skip_http_redirect: true }),
              headers: this.headers,
              xform: _ssoResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      getSession() {
        return __awaiter14(this, void 0, void 0, function* () {
          yield this.initializePromise;
          let currentSession = null;
          if (this.persistSession) {
            const maybeSession = yield getItemAsync(this.storage, this.storageKey);
            if (maybeSession !== null) {
              if (this._isValidSession(maybeSession)) {
                currentSession = maybeSession;
              } else {
                yield this._removeSession();
              }
            }
          } else {
            currentSession = this.inMemorySession;
          }
          if (!currentSession) {
            return { data: { session: null }, error: null };
          }
          const hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1e3 : false;
          if (!hasExpired) {
            return { data: { session: currentSession }, error: null };
          }
          const { session, error: error2 } = yield this._callRefreshToken(currentSession.refresh_token);
          if (error2) {
            return { data: { session: null }, error: error2 };
          }
          return { data: { session }, error: null };
        });
      }
      getUser(jwt) {
        var _a3, _b;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            if (!jwt) {
              const { data, error: error2 } = yield this.getSession();
              if (error2) {
                throw error2;
              }
              jwt = (_b = (_a3 = data.session) === null || _a3 === void 0 ? void 0 : _a3.access_token) !== null && _b !== void 0 ? _b : void 0;
            }
            return yield _request(this.fetch, "GET", `${this.url}/user`, {
              headers: this.headers,
              jwt,
              xform: _userResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      updateUser(attributes) {
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            const { data: sessionData, error: sessionError } = yield this.getSession();
            if (sessionError) {
              throw sessionError;
            }
            if (!sessionData.session) {
              throw new AuthSessionMissingError();
            }
            const session = sessionData.session;
            const { data, error: userError } = yield _request(this.fetch, "PUT", `${this.url}/user`, {
              headers: this.headers,
              body: attributes,
              jwt: session.access_token,
              xform: _userResponse
            });
            if (userError)
              throw userError;
            session.user = data.user;
            yield this._saveSession(session);
            this._notifyAllSubscribers("USER_UPDATED", session);
            return { data: { user: session.user }, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      _decodeJWT(jwt) {
        return decodeJWTPayload(jwt);
      }
      setSession(currentSession) {
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            if (!currentSession.access_token || !currentSession.refresh_token) {
              throw new AuthSessionMissingError();
            }
            const timeNow = Date.now() / 1e3;
            let expiresAt2 = timeNow;
            let hasExpired = true;
            let session = null;
            const payload = decodeJWTPayload(currentSession.access_token);
            if (payload.exp) {
              expiresAt2 = payload.exp;
              hasExpired = expiresAt2 <= timeNow;
            }
            if (hasExpired) {
              const { session: refreshedSession, error: error2 } = yield this._callRefreshToken(currentSession.refresh_token);
              if (error2) {
                return { data: { user: null, session: null }, error: error2 };
              }
              if (!refreshedSession) {
                return { data: { user: null, session: null }, error: null };
              }
              session = refreshedSession;
            } else {
              const { data, error: error2 } = yield this.getUser(currentSession.access_token);
              if (error2) {
                throw error2;
              }
              session = {
                access_token: currentSession.access_token,
                refresh_token: currentSession.refresh_token,
                user: data.user,
                token_type: "bearer",
                expires_in: expiresAt2 - timeNow,
                expires_at: expiresAt2
              };
              yield this._saveSession(session);
            }
            return { data: { user: session.user, session }, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { session: null, user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      refreshSession(currentSession) {
        var _a3;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            if (!currentSession) {
              const { data, error: error3 } = yield this.getSession();
              if (error3) {
                throw error3;
              }
              currentSession = (_a3 = data.session) !== null && _a3 !== void 0 ? _a3 : void 0;
            }
            if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {
              throw new AuthSessionMissingError();
            }
            const { session, error: error2 } = yield this._callRefreshToken(currentSession.refresh_token);
            if (error2) {
              return { data: { user: null, session: null }, error: error2 };
            }
            if (!session) {
              return { data: { user: null, session: null }, error: null };
            }
            return { data: { user: session.user, session }, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { user: null, session: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      _getSessionFromUrl() {
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            if (!isBrowser())
              throw new AuthImplicitGrantRedirectError("No browser detected.");
            if (!this._isImplicitGrantFlow()) {
              throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
            }
            const error_description = getParameterByName("error_description");
            if (error_description) {
              const error_code = getParameterByName("error_code");
              if (!error_code)
                throw new AuthImplicitGrantRedirectError("No error_code detected.");
              const error3 = getParameterByName("error");
              if (!error3)
                throw new AuthImplicitGrantRedirectError("No error detected.");
              throw new AuthImplicitGrantRedirectError(error_description, { error: error3, code: error_code });
            }
            const provider_token = getParameterByName("provider_token");
            const provider_refresh_token = getParameterByName("provider_refresh_token");
            const access_token = getParameterByName("access_token");
            if (!access_token)
              throw new AuthImplicitGrantRedirectError("No access_token detected.");
            const expires_in = getParameterByName("expires_in");
            if (!expires_in)
              throw new AuthImplicitGrantRedirectError("No expires_in detected.");
            const refresh_token = getParameterByName("refresh_token");
            if (!refresh_token)
              throw new AuthImplicitGrantRedirectError("No refresh_token detected.");
            const token_type = getParameterByName("token_type");
            if (!token_type)
              throw new AuthImplicitGrantRedirectError("No token_type detected.");
            const timeNow = Math.round(Date.now() / 1e3);
            const expires_at = timeNow + parseInt(expires_in);
            const { data, error: error2 } = yield this.getUser(access_token);
            if (error2)
              throw error2;
            const user = data.user;
            const session = {
              provider_token,
              provider_refresh_token,
              access_token,
              expires_in: parseInt(expires_in),
              expires_at,
              refresh_token,
              token_type,
              user
            };
            const redirectType = getParameterByName("type");
            window.location.hash = "";
            return { data: { session, redirectType }, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { session: null, redirectType: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      _isImplicitGrantFlow() {
        return isBrowser() && (Boolean(getParameterByName("access_token")) || Boolean(getParameterByName("error_description")));
      }
      signOut() {
        var _a3;
        return __awaiter14(this, void 0, void 0, function* () {
          const { data, error: sessionError } = yield this.getSession();
          if (sessionError) {
            return { error: sessionError };
          }
          const accessToken = (_a3 = data.session) === null || _a3 === void 0 ? void 0 : _a3.access_token;
          if (accessToken) {
            const { error: error2 } = yield this.admin.signOut(accessToken);
            if (error2) {
              if (!(isAuthApiError(error2) && (error2.status === 404 || error2.status === 401))) {
                return { error: error2 };
              }
            }
          }
          yield this._removeSession();
          this._notifyAllSubscribers("SIGNED_OUT", null);
          return { error: null };
        });
      }
      onAuthStateChange(callback) {
        const id2 = uuid();
        const subscription = {
          id: id2,
          callback,
          unsubscribe: () => {
            this.stateChangeEmitters.delete(id2);
          }
        };
        this.stateChangeEmitters.set(id2, subscription);
        return { data: { subscription } };
      }
      resetPasswordForEmail(email, options2 = {}) {
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            return yield _request(this.fetch, "POST", `${this.url}/recover`, {
              body: { email, gotrue_meta_security: { captcha_token: options2.captchaToken } },
              headers: this.headers,
              redirectTo: options2.redirectTo
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      _refreshAccessToken(refreshToken) {
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            return yield _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
              body: { refresh_token: refreshToken },
              headers: this.headers,
              xform: _sessionResponse
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: { session: null, user: null }, error: error2 };
            }
            throw error2;
          }
        });
      }
      _isValidSession(maybeSession) {
        const isValidSession = typeof maybeSession === "object" && maybeSession !== null && "access_token" in maybeSession && "refresh_token" in maybeSession && "expires_at" in maybeSession;
        return isValidSession;
      }
      _handleProviderSignIn(provider, options2 = {}) {
        const url = this._getUrlForProvider(provider, {
          redirectTo: options2.redirectTo,
          scopes: options2.scopes,
          queryParams: options2.queryParams
        });
        if (isBrowser()) {
          window.location.href = url;
        }
        return { data: { provider, url }, error: null };
      }
      _recoverAndRefresh() {
        var _a3;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            const currentSession = yield getItemAsync(this.storage, this.storageKey);
            if (!this._isValidSession(currentSession)) {
              if (currentSession !== null) {
                yield this._removeSession();
              }
              return;
            }
            const timeNow = Math.round(Date.now() / 1e3);
            if (((_a3 = currentSession.expires_at) !== null && _a3 !== void 0 ? _a3 : Infinity) < timeNow + EXPIRY_MARGIN) {
              if (this.autoRefreshToken && currentSession.refresh_token) {
                this.networkRetries++;
                const { error: error2 } = yield this._callRefreshToken(currentSession.refresh_token);
                if (error2) {
                  console.log(error2.message);
                  if (error2 instanceof AuthRetryableFetchError && this.networkRetries < NETWORK_FAILURE.MAX_RETRIES) {
                    if (this.refreshTokenTimer)
                      clearTimeout(this.refreshTokenTimer);
                    this.refreshTokenTimer = setTimeout(
                      () => this._recoverAndRefresh(),
                      Math.pow(NETWORK_FAILURE.RETRY_INTERVAL, this.networkRetries) * 100
                    );
                    return;
                  }
                  yield this._removeSession();
                }
                this.networkRetries = 0;
              } else {
                yield this._removeSession();
              }
            } else {
              if (this.persistSession) {
                yield this._saveSession(currentSession);
              }
              this._notifyAllSubscribers("SIGNED_IN", currentSession);
            }
          } catch (err) {
            console.error(err);
            return;
          }
        });
      }
      _callRefreshToken(refreshToken) {
        var _a3, _b;
        return __awaiter14(this, void 0, void 0, function* () {
          if (this.refreshingDeferred) {
            return this.refreshingDeferred.promise;
          }
          try {
            this.refreshingDeferred = new Deferred();
            if (!refreshToken) {
              throw new AuthSessionMissingError();
            }
            const { data, error: error2 } = yield this._refreshAccessToken(refreshToken);
            if (error2)
              throw error2;
            if (!data.session)
              throw new AuthSessionMissingError();
            yield this._saveSession(data.session);
            this._notifyAllSubscribers("TOKEN_REFRESHED", data.session);
            const result = { session: data.session, error: null };
            this.refreshingDeferred.resolve(result);
            return result;
          } catch (error2) {
            if (isAuthError(error2)) {
              const result = { session: null, error: error2 };
              (_a3 = this.refreshingDeferred) === null || _a3 === void 0 ? void 0 : _a3.resolve(result);
              return result;
            }
            (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error2);
            throw error2;
          } finally {
            this.refreshingDeferred = null;
          }
        });
      }
      _notifyAllSubscribers(event, session) {
        this.stateChangeEmitters.forEach((x3) => x3.callback(event, session));
      }
      _saveSession(session) {
        return __awaiter14(this, void 0, void 0, function* () {
          if (!this.persistSession) {
            this.inMemorySession = session;
          }
          const expiresAt2 = session.expires_at;
          if (expiresAt2) {
            const timeNow = Math.round(Date.now() / 1e3);
            const expiresIn = expiresAt2 - timeNow;
            const refreshDurationBeforeExpires = expiresIn > EXPIRY_MARGIN ? EXPIRY_MARGIN : 0.5;
            this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1e3);
          }
          if (this.persistSession && session.expires_at) {
            yield this._persistSession(session);
          }
        });
      }
      _persistSession(currentSession) {
        return setItemAsync(this.storage, this.storageKey, currentSession);
      }
      _removeSession() {
        return __awaiter14(this, void 0, void 0, function* () {
          if (this.persistSession) {
            yield removeItemAsync(this.storage, this.storageKey);
          } else {
            this.inMemorySession = null;
          }
          if (this.refreshTokenTimer) {
            clearTimeout(this.refreshTokenTimer);
          }
        });
      }
      _startAutoRefreshToken(value2) {
        if (this.refreshTokenTimer)
          clearTimeout(this.refreshTokenTimer);
        if (value2 <= 0 || !this.autoRefreshToken)
          return;
        this.refreshTokenTimer = setTimeout(() => __awaiter14(this, void 0, void 0, function* () {
          this.networkRetries++;
          const { data: { session }, error: sessionError } = yield this.getSession();
          if (!sessionError && session) {
            const { error: error2 } = yield this._callRefreshToken(session.refresh_token);
            if (!error2)
              this.networkRetries = 0;
            if (error2 instanceof AuthRetryableFetchError && this.networkRetries < NETWORK_FAILURE.MAX_RETRIES)
              this._startAutoRefreshToken(Math.pow(NETWORK_FAILURE.RETRY_INTERVAL, this.networkRetries) * 100);
          }
        }), value2);
        if (typeof this.refreshTokenTimer.unref === "function")
          this.refreshTokenTimer.unref();
      }
      _handleVisibilityChange() {
        if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {
          return false;
        }
        try {
          window === null || window === void 0 ? void 0 : window.addEventListener("visibilitychange", () => __awaiter14(this, void 0, void 0, function* () {
            if (document.visibilityState === "visible") {
              yield this.initializePromise;
              yield this._recoverAndRefresh();
            }
          }));
        } catch (error2) {
          console.error("_handleVisibilityChange", error2);
        }
      }
      _getUrlForProvider(provider, options2) {
        const urlParams = [`provider=${encodeURIComponent(provider)}`];
        if (options2 === null || options2 === void 0 ? void 0 : options2.redirectTo) {
          urlParams.push(`redirect_to=${encodeURIComponent(options2.redirectTo)}`);
        }
        if (options2 === null || options2 === void 0 ? void 0 : options2.scopes) {
          urlParams.push(`scopes=${encodeURIComponent(options2.scopes)}`);
        }
        if (options2 === null || options2 === void 0 ? void 0 : options2.queryParams) {
          const query = new URLSearchParams(options2.queryParams);
          urlParams.push(query.toString());
        }
        return `${this.url}/authorize?${urlParams.join("&")}`;
      }
      _unenroll(params) {
        var _a3;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            const { data: sessionData, error: sessionError } = yield this.getSession();
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            return yield _request(this.fetch, "DELETE", `${this.url}/factors/${params.factorId}`, {
              headers: this.headers,
              jwt: (_a3 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a3 === void 0 ? void 0 : _a3.access_token
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      _enroll(params) {
        var _a3, _b;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            const { data: sessionData, error: sessionError } = yield this.getSession();
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            const { data, error: error2 } = yield _request(this.fetch, "POST", `${this.url}/factors`, {
              body: {
                friendly_name: params.friendlyName,
                factor_type: params.factorType,
                issuer: params.issuer
              },
              headers: this.headers,
              jwt: (_a3 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a3 === void 0 ? void 0 : _a3.access_token
            });
            if (error2) {
              return { data: null, error: error2 };
            }
            if ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code) {
              data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;
            }
            return { data, error: null };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      _verify(params) {
        var _a3;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            const { data: sessionData, error: sessionError } = yield this.getSession();
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            const { data, error: error2 } = yield _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/verify`, {
              body: { code: params.code, challenge_id: params.challengeId },
              headers: this.headers,
              jwt: (_a3 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a3 === void 0 ? void 0 : _a3.access_token
            });
            if (error2) {
              return { data: null, error: error2 };
            }
            yield this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + data.expires_in }, data));
            this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", data);
            return { data, error: error2 };
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      _challenge(params) {
        var _a3;
        return __awaiter14(this, void 0, void 0, function* () {
          try {
            const { data: sessionData, error: sessionError } = yield this.getSession();
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            return yield _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/challenge`, {
              headers: this.headers,
              jwt: (_a3 = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a3 === void 0 ? void 0 : _a3.access_token
            });
          } catch (error2) {
            if (isAuthError(error2)) {
              return { data: null, error: error2 };
            }
            throw error2;
          }
        });
      }
      _challengeAndVerify(params) {
        return __awaiter14(this, void 0, void 0, function* () {
          const { data: challengeData, error: challengeError } = yield this._challenge({
            factorId: params.factorId
          });
          if (challengeError) {
            return { data: null, error: challengeError };
          }
          return yield this._verify({
            factorId: params.factorId,
            challengeId: challengeData.id,
            code: params.code
          });
        });
      }
      _listFactors() {
        return __awaiter14(this, void 0, void 0, function* () {
          const { data: { user }, error: userError } = yield this.getUser();
          if (userError) {
            return { data: null, error: userError };
          }
          const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];
          const totp = factors.filter((factor) => factor.factor_type === "totp" && factor.status === "verified");
          return {
            data: {
              all: factors,
              totp
            },
            error: null
          };
        });
      }
      _getAuthenticatorAssuranceLevel() {
        var _a3, _b;
        return __awaiter14(this, void 0, void 0, function* () {
          const { data: { session }, error: sessionError } = yield this.getSession();
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          if (!session) {
            return {
              data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
              error: null
            };
          }
          const payload = this._decodeJWT(session.access_token);
          let currentLevel = null;
          if (payload.aal) {
            currentLevel = payload.aal;
          }
          let nextLevel = currentLevel;
          const verifiedFactors = (_b = (_a3 = session.user.factors) === null || _a3 === void 0 ? void 0 : _a3.filter((factor) => factor.status === "verified")) !== null && _b !== void 0 ? _b : [];
          if (verifiedFactors.length > 0) {
            nextLevel = "aal2";
          }
          const currentAuthenticationMethods = payload.amr || [];
          return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };
        });
      }
    };
  }
});

// node_modules/@supabase/gotrue-js/dist/module/lib/types.js
var init_types3 = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/lib/types.js"() {
  }
});

// node_modules/@supabase/gotrue-js/dist/module/index.js
var init_module5 = __esm({
  "node_modules/@supabase/gotrue-js/dist/module/index.js"() {
    init_GoTrueAdminApi();
    init_GoTrueClient();
    init_types3();
    init_errors2();
  }
});

// node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js
var SupabaseAuthClient;
var init_SupabaseAuthClient = __esm({
  "node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js"() {
    init_module5();
    SupabaseAuthClient = class extends GoTrueClient {
      constructor(options2) {
        super(options2);
      }
    };
  }
});

// node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js
var __awaiter15, DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS, SupabaseClient;
var init_SupabaseClient = __esm({
  "node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js"() {
    init_module();
    init_module2();
    init_module3();
    init_module4();
    init_constants4();
    init_fetch2();
    init_helpers2();
    init_SupabaseAuthClient();
    __awaiter15 = function(thisArg, _arguments, P, generator) {
      function adopt(value2) {
        return value2 instanceof P ? value2 : new P(function(resolve) {
          resolve(value2);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    DEFAULT_GLOBAL_OPTIONS = {
      headers: DEFAULT_HEADERS4
    };
    DEFAULT_DB_OPTIONS = {
      schema: "public"
    };
    DEFAULT_AUTH_OPTIONS = {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    };
    DEFAULT_REALTIME_OPTIONS = {};
    SupabaseClient = class {
      constructor(supabaseUrl, supabaseKey, options2) {
        var _a3, _b, _c, _d, _e, _f, _g, _h;
        this.supabaseUrl = supabaseUrl;
        this.supabaseKey = supabaseKey;
        if (!supabaseUrl)
          throw new Error("supabaseUrl is required.");
        if (!supabaseKey)
          throw new Error("supabaseKey is required.");
        const _supabaseUrl = stripTrailingSlash(supabaseUrl);
        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, "ws");
        this.authUrl = `${_supabaseUrl}/auth/v1`;
        this.storageUrl = `${_supabaseUrl}/storage/v1`;
        const isPlatform = _supabaseUrl.match(/(supabase\.co)|(supabase\.in)/);
        if (isPlatform) {
          const urlParts = _supabaseUrl.split(".");
          this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;
        } else {
          this.functionsUrl = `${_supabaseUrl}/functions/v1`;
        }
        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split(".")[0]}-auth-token`;
        const DEFAULTS = {
          db: DEFAULT_DB_OPTIONS,
          realtime: DEFAULT_REALTIME_OPTIONS,
          auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),
          global: DEFAULT_GLOBAL_OPTIONS
        };
        const settings2 = applySettingDefaults(options2 !== null && options2 !== void 0 ? options2 : {}, DEFAULTS);
        this.storageKey = (_b = (_a3 = settings2.auth) === null || _a3 === void 0 ? void 0 : _a3.storageKey) !== null && _b !== void 0 ? _b : "";
        this.headers = (_d = (_c = settings2.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};
        this.auth = this._initSupabaseAuthClient((_e = settings2.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings2.global) === null || _f === void 0 ? void 0 : _f.fetch);
        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings2.global) === null || _g === void 0 ? void 0 : _g.fetch);
        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings2.realtime));
        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {
          headers: this.headers,
          schema: (_h = settings2.db) === null || _h === void 0 ? void 0 : _h.schema,
          fetch: this.fetch
        });
        this._listenForAuthEvents();
      }
      get functions() {
        return new FunctionsClient(this.functionsUrl, {
          headers: this.headers,
          customFetch: this.fetch
        });
      }
      get storage() {
        return new StorageClient(this.storageUrl, this.headers, this.fetch);
      }
      from(relation) {
        return this.rest.from(relation);
      }
      rpc(fn, args = {}, options2) {
        return this.rest.rpc(fn, args, options2);
      }
      channel(name, opts = { config: {} }) {
        return this.realtime.channel(name, opts);
      }
      getChannels() {
        return this.realtime.getChannels();
      }
      removeChannel(channel) {
        return this.realtime.removeChannel(channel);
      }
      removeAllChannels() {
        return this.realtime.removeAllChannels();
      }
      _getAccessToken() {
        var _a3, _b;
        return __awaiter15(this, void 0, void 0, function* () {
          const { data } = yield this.auth.getSession();
          return (_b = (_a3 = data.session) === null || _a3 === void 0 ? void 0 : _a3.access_token) !== null && _b !== void 0 ? _b : null;
        });
      }
      _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey }, headers, fetch2) {
        const authHeaders = {
          Authorization: `Bearer ${this.supabaseKey}`,
          apikey: `${this.supabaseKey}`
        };
        return new SupabaseAuthClient({
          url: this.authUrl,
          headers: Object.assign(Object.assign({}, authHeaders), headers),
          storageKey,
          autoRefreshToken,
          persistSession,
          detectSessionInUrl,
          storage,
          fetch: fetch2
        });
      }
      _initRealtimeClient(options2) {
        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options2), { params: Object.assign({ apikey: this.supabaseKey }, options2 === null || options2 === void 0 ? void 0 : options2.params) }));
      }
      _listenForAuthEvents() {
        let data = this.auth.onAuthStateChange((event, session) => {
          this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, "CLIENT");
        });
        return data;
      }
      _handleTokenChanged(event, token, source) {
        if ((event === "TOKEN_REFRESHED" || event === "SIGNED_IN") && this.changedAccessToken !== token) {
          this.realtime.setAuth(token !== null && token !== void 0 ? token : null);
          this.changedAccessToken = token;
        } else if (event === "SIGNED_OUT" || event === "USER_DELETED") {
          this.realtime.setAuth(this.supabaseKey);
          if (source == "STORAGE")
            this.auth.signOut();
        }
      }
    };
  }
});

// node_modules/@supabase/supabase-js/dist/module/index.js
var createClient;
var init_module6 = __esm({
  "node_modules/@supabase/supabase-js/dist/module/index.js"() {
    init_SupabaseClient();
    init_module5();
    init_module3();
    createClient = (supabaseUrl, supabaseKey, options2) => {
      return new SupabaseClient(supabaseUrl, supabaseKey, options2);
    };
  }
});

// .svelte-kit/output/server/chunks/db.js
var supabase;
var init_db = __esm({
  ".svelte-kit/output/server/chunks/db.js"() {
    init_module6();
    supabase = createClient(
      "https://oiocyjhzfobbfnefwypz.supabase.co",
      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pb2N5amh6Zm9iYmZuZWZ3eXB6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2NzA4NDAyOTAsImV4cCI6MTk4NjQxNjI5MH0.UTVBixWP5xFV1x_lklwpZAYzS2AdBz-IvC0rQo7OjKM"
    );
  }
});

// .svelte-kit/output/server/entries/pages/_page.server.ts.js
var page_server_ts_exports = {};
__export(page_server_ts_exports, {
  actions: () => actions,
  load: () => load
});
var load, actions;
var init_page_server_ts = __esm({
  ".svelte-kit/output/server/entries/pages/_page.server.ts.js"() {
    init_db();
    load = async () => {
      try {
        const response = await supabase.from("patscenario").select();
        const { data: responseData } = await response;
        return { ...responseData };
      } catch (error2) {
        console.error(`Error in load function for /: ${error2}`);
      }
    };
    actions = {
      default: async ({ request }) => {
        const formData = await request.formData();
        console.log(formData);
      }
    };
  }
});

// .svelte-kit/output/server/chunks/g10.js
var CheckboxSkeleton, CheckboxSkeleton$1, Checkbox, Checkbox$1, WarningFilled, WarningFilled$1, WarningAltFilled, WarningAltFilled$1, ListBox, ListBox$1, ListBoxField, ListBoxField$1, ListBoxMenu, ListBoxMenu$1, ListBoxMenuIcon, ListBoxMenuIcon$1, ListBoxMenuItem, ListBoxMenuItem$1, ListBoxSelection, ListBoxSelection$1, MultiSelect, MultiSelect$1;
var init_g10 = __esm({
  ".svelte-kit/output/server/chunks/g10.js"() {
    init_chunks();
    init_Close();
    CheckboxSkeleton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, []);
      return `
<div${spread([escape_object($$restProps)], {
        classes: "bx--form-item bx--checkbox-wrapper bx--checkbox-label"
      })}><span${add_classes("bx--checkbox-label-text bx--skeleton".trim())}></span></div>`;
    });
    CheckboxSkeleton$1 = CheckboxSkeleton;
    Checkbox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let useGroup;
      let isTruncated;
      let $$restProps = compute_rest_props($$props, [
        "value",
        "checked",
        "group",
        "indeterminate",
        "skeleton",
        "required",
        "readonly",
        "disabled",
        "labelText",
        "hideLabel",
        "name",
        "title",
        "id",
        "ref"
      ]);
      let { value: value2 = "" } = $$props;
      let { checked = false } = $$props;
      let { group = void 0 } = $$props;
      let { indeterminate = false } = $$props;
      let { skeleton = false } = $$props;
      let { required: required2 = false } = $$props;
      let { readonly = false } = $$props;
      let { disabled = false } = $$props;
      let { labelText = "" } = $$props;
      let { hideLabel = false } = $$props;
      let { name = "" } = $$props;
      let { title = void 0 } = $$props;
      let { id: id2 = "ccs-" + Math.random().toString(36) } = $$props;
      let { ref = null } = $$props;
      const dispatch2 = createEventDispatcher();
      let refLabel = null;
      if ($$props.value === void 0 && $$bindings.value && value2 !== void 0)
        $$bindings.value(value2);
      if ($$props.checked === void 0 && $$bindings.checked && checked !== void 0)
        $$bindings.checked(checked);
      if ($$props.group === void 0 && $$bindings.group && group !== void 0)
        $$bindings.group(group);
      if ($$props.indeterminate === void 0 && $$bindings.indeterminate && indeterminate !== void 0)
        $$bindings.indeterminate(indeterminate);
      if ($$props.skeleton === void 0 && $$bindings.skeleton && skeleton !== void 0)
        $$bindings.skeleton(skeleton);
      if ($$props.required === void 0 && $$bindings.required && required2 !== void 0)
        $$bindings.required(required2);
      if ($$props.readonly === void 0 && $$bindings.readonly && readonly !== void 0)
        $$bindings.readonly(readonly);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.labelText === void 0 && $$bindings.labelText && labelText !== void 0)
        $$bindings.labelText(labelText);
      if ($$props.hideLabel === void 0 && $$bindings.hideLabel && hideLabel !== void 0)
        $$bindings.hideLabel(hideLabel);
      if ($$props.name === void 0 && $$bindings.name && name !== void 0)
        $$bindings.name(name);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      useGroup = Array.isArray(group);
      checked = useGroup ? group.includes(value2) : checked;
      {
        dispatch2("check", checked);
      }
      isTruncated = refLabel?.offsetWidth < refLabel?.scrollWidth;
      title = !title && isTruncated ? refLabel?.innerText : title;
      return `
${skeleton ? `${validate_component(CheckboxSkeleton$1, "CheckboxSkeleton").$$render($$result, Object.assign($$restProps), {}, {})}` : `<div${spread([escape_object($$restProps)], {
        classes: "bx--form-item bx--checkbox-wrapper"
      })}><input type="${"checkbox"}"${add_attribute("value", value2, 0)} ${checked ? "checked" : ""} ${disabled ? "disabled" : ""}${add_attribute("id", id2, 0)}${add_attribute("indeterminate", indeterminate, 0)}${add_attribute("name", name, 0)} ${required2 ? "required" : ""} ${readonly ? "readonly" : ""}${add_classes("bx--checkbox".trim())}${add_attribute("this", ref, 0)}>
    <label${add_attribute("for", id2, 0)}${add_attribute("title", title, 0)}${add_classes("bx--checkbox-label".trim())}><span${add_classes(("bx--checkbox-label-text " + (hideLabel ? "bx--visually-hidden" : "")).trim())}${add_attribute("this", refLabel, 0)}>${slots.labelText ? slots.labelText({}) : `
          ${escape(labelText)}
        `}</span></label></div>`}`;
    });
    Checkbox$1 = Checkbox;
    WarningFilled = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path d="${"M16,2C8.3,2,2,8.3,2,16s6.3,14,14,14s14-6.3,14-14C30,8.3,23.7,2,16,2z M14.9,8h2.2v11h-2.2V8z M16,25	c-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22c0.8,0,1.5,0.7,1.5,1.5S16.8,25,16,25z"}"></path><path fill="${"none"}" d="${"M17.5,23.5c0,0.8-0.7,1.5-1.5,1.5c-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22	C16.8,22,17.5,22.7,17.5,23.5z M17.1,8h-2.2v11h2.2V8z"}" data-icon-path="${"inner-path"}" opacity="${"0"}"></path></svg>`;
    });
    WarningFilled$1 = WarningFilled;
    WarningAltFilled = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path fill="${"none"}" d="${"M16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Zm-1.125-5h2.25V12h-2.25Z"}" data-icon-path="${"inner-path"}"></path><path d="${"M16.002,6.1714h-.004L4.6487,27.9966,4.6506,28H27.3494l.0019-.0034ZM14.875,12h2.25v9h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z"}"></path><path d="${"M29,30H3a1,1,0,0,1-.8872-1.4614l13-25a1,1,0,0,1,1.7744,0l13,25A1,1,0,0,1,29,30ZM4.6507,28H27.3493l.002-.0033L16.002,6.1714h-.004L4.6487,27.9967Z"}"></path></svg>`;
    });
    WarningAltFilled$1 = WarningAltFilled;
    ListBox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, [
        "size",
        "type",
        "open",
        "light",
        "disabled",
        "invalid",
        "invalidText",
        "warn",
        "warnText"
      ]);
      let { size = void 0 } = $$props;
      let { type: type2 = "default" } = $$props;
      let { open = false } = $$props;
      let { light = false } = $$props;
      let { disabled = false } = $$props;
      let { invalid = false } = $$props;
      let { invalidText = "" } = $$props;
      let { warn = false } = $$props;
      let { warnText = "" } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.type === void 0 && $$bindings.type && type2 !== void 0)
        $$bindings.type(type2);
      if ($$props.open === void 0 && $$bindings.open && open !== void 0)
        $$bindings.open(open);
      if ($$props.light === void 0 && $$bindings.light && light !== void 0)
        $$bindings.light(light);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.invalid === void 0 && $$bindings.invalid && invalid !== void 0)
        $$bindings.invalid(invalid);
      if ($$props.invalidText === void 0 && $$bindings.invalidText && invalidText !== void 0)
        $$bindings.invalidText(invalidText);
      if ($$props.warn === void 0 && $$bindings.warn && warn !== void 0)
        $$bindings.warn(warn);
      if ($$props.warnText === void 0 && $$bindings.warnText && warnText !== void 0)
        $$bindings.warnText(warnText);
      return `<div${spread(
        [
          { role: "listbox" },
          { tabindex: "-1" },
          {
            "data-invalid": escape_attribute_value(invalid || void 0)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--list-box " + (size === "sm" ? "bx--list-box--sm" : "") + " " + (size === "xl" ? "bx--list-box--xl" : "") + " " + (type2 === "inline" ? "bx--list-box--inline" : "") + " " + (disabled ? "bx--list-box--disabled" : "") + " " + (open ? "bx--list-box--expanded" : "") + " " + (light ? "bx--list-box--light" : "") + " " + (!invalid && warn ? "bx--list-box--warning" : "")
        }
      )}>${slots.default ? slots.default({}) : ``}</div>
${invalid ? `<div${add_classes("bx--form-requirement".trim())}>${escape(invalidText)}</div>` : ``}
${!invalid && warn ? `<div${add_classes("bx--form-requirement".trim())}>${escape(warnText)}</div>` : ``}`;
    });
    ListBox$1 = ListBox;
    ListBoxField = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let ariaExpanded;
      let menuId;
      let $$restProps = compute_rest_props($$props, ["disabled", "role", "tabindex", "translationIds", "translateWithId", "id", "ref"]);
      let { disabled = false } = $$props;
      let { role = "combobox" } = $$props;
      let { tabindex = "-1" } = $$props;
      const translationIds = { close: "close", open: "open" };
      let { translateWithId = (id22) => defaultTranslations[id22] } = $$props;
      let { id: id2 = "ccs-" + Math.random().toString(36) } = $$props;
      let { ref = null } = $$props;
      const defaultTranslations = {
        [translationIds.close]: "Close menu",
        [translationIds.open]: "Open menu"
      };
      const ctx = getContext("MultiSelect");
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.role === void 0 && $$bindings.role && role !== void 0)
        $$bindings.role(role);
      if ($$props.tabindex === void 0 && $$bindings.tabindex && tabindex !== void 0)
        $$bindings.tabindex(tabindex);
      if ($$props.translationIds === void 0 && $$bindings.translationIds && translationIds !== void 0)
        $$bindings.translationIds(translationIds);
      if ($$props.translateWithId === void 0 && $$bindings.translateWithId && translateWithId !== void 0)
        $$bindings.translateWithId(translateWithId);
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      {
        if (ctx && ref) {
          ctx.declareRef({ key: "field", ref });
        }
      }
      ariaExpanded = $$props["aria-expanded"];
      menuId = `menu-${id2}`;
      return `
<div${spread(
        [
          { role: escape_attribute_value(role) },
          {
            "aria-expanded": escape_attribute_value(ariaExpanded)
          },
          {
            "aria-owns": escape_attribute_value(ariaExpanded && menuId || void 0)
          },
          {
            "aria-controls": escape_attribute_value(ariaExpanded && menuId || void 0)
          },
          {
            "aria-disabled": escape_attribute_value(disabled)
          },
          {
            "aria-label": escape_attribute_value(ariaExpanded ? translateWithId("close") : translateWithId("open"))
          },
          {
            tabindex: escape_attribute_value(disabled ? "-1" : tabindex)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--list-box__field"
        }
      )}${add_attribute("this", ref, 0)}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    ListBoxField$1 = ListBoxField;
    ListBoxMenu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["id", "ref"]);
      let { id: id2 = "ccs-" + Math.random().toString(36) } = $$props;
      let { ref = null } = $$props;
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      return `<div${spread(
        [
          { role: "listbox" },
          { id: "menu-" + escape(id2, true) },
          escape_object($$restProps)
        ],
        {
          classes: "bx--list-box__menu"
        }
      )}${add_attribute("this", ref, 0)}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    ListBoxMenu$1 = ListBoxMenu;
    ListBoxMenuIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let translationId;
      let description;
      let $$restProps = compute_rest_props($$props, ["open", "translationIds", "translateWithId"]);
      let { open = false } = $$props;
      const translationIds = { close: "close", open: "open" };
      let { translateWithId = (id2) => defaultTranslations[id2] } = $$props;
      const defaultTranslations = {
        [translationIds.close]: "Close menu",
        [translationIds.open]: "Open menu"
      };
      if ($$props.open === void 0 && $$bindings.open && open !== void 0)
        $$bindings.open(open);
      if ($$props.translationIds === void 0 && $$bindings.translationIds && translationIds !== void 0)
        $$bindings.translationIds(translationIds);
      if ($$props.translateWithId === void 0 && $$bindings.translateWithId && translateWithId !== void 0)
        $$bindings.translateWithId(translateWithId);
      translationId = open ? translationIds.close : translationIds.open;
      description = translateWithId?.(translationId) ?? defaultTranslations[translationId];
      return `<div${spread([escape_object($$restProps)], {
        classes: "bx--list-box__menu-icon " + (open ? "bx--list-box__menu-icon--open" : "")
      })}>${validate_component(ChevronDown$1, "ChevronDown").$$render(
        $$result,
        {
          "aria-label": description,
          title: description
        },
        {},
        {}
      )}</div>`;
    });
    ListBoxMenuIcon$1 = ListBoxMenuIcon;
    ListBoxMenuItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let isTruncated;
      let title;
      let $$restProps = compute_rest_props($$props, ["active", "highlighted", "disabled"]);
      let { active = false } = $$props;
      let { highlighted = false } = $$props;
      let { disabled = false } = $$props;
      let ref = null;
      if ($$props.active === void 0 && $$bindings.active && active !== void 0)
        $$bindings.active(active);
      if ($$props.highlighted === void 0 && $$bindings.highlighted && highlighted !== void 0)
        $$bindings.highlighted(highlighted);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      isTruncated = ref?.offsetWidth < ref?.scrollWidth;
      title = isTruncated ? ref?.innerText : void 0;
      {
        if (highlighted && ref && !ref.matches(":hover")) {
          ref.scrollIntoView({ block: "nearest" });
        }
      }
      return `<div${spread(
        [
          { role: "option" },
          {
            "aria-selected": escape_attribute_value(active)
          },
          {
            disabled: (disabled ? true : void 0) || null
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--list-box__menu-item " + (active ? "bx--list-box__menu-item--active" : "") + " " + (highlighted || active ? "bx--list-box__menu-item--highlighted" : "")
        }
      )}><div${add_attribute("title", title, 0)}${add_classes("bx--list-box__menu-item__option".trim())}${add_attribute("this", ref, 0)}>${slots.default ? slots.default({}) : ``}</div></div>`;
    });
    ListBoxMenuItem$1 = ListBoxMenuItem;
    ListBoxSelection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let translationId;
      let description;
      let $$restProps = compute_rest_props($$props, ["selectionCount", "disabled", "translationIds", "translateWithId", "ref"]);
      let { selectionCount = void 0 } = $$props;
      let { disabled = false } = $$props;
      const translationIds = {
        clearAll: "clearAll",
        clearSelection: "clearSelection"
      };
      let { translateWithId = (id2) => defaultTranslations[id2] } = $$props;
      let { ref = null } = $$props;
      const defaultTranslations = {
        [translationIds.clearAll]: "Clear all selected items",
        [translationIds.clearSelection]: "Clear selected item"
      };
      createEventDispatcher();
      const ctx = getContext("MultiSelect");
      if ($$props.selectionCount === void 0 && $$bindings.selectionCount && selectionCount !== void 0)
        $$bindings.selectionCount(selectionCount);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.translationIds === void 0 && $$bindings.translationIds && translationIds !== void 0)
        $$bindings.translationIds(translationIds);
      if ($$props.translateWithId === void 0 && $$bindings.translateWithId && translateWithId !== void 0)
        $$bindings.translateWithId(translateWithId);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      {
        if (ctx && ref) {
          ctx.declareRef({ key: "selection", ref });
        }
      }
      translationId = selectionCount ? translationIds.clearAll : translationIds.clearSelection;
      description = translateWithId?.(translationId) ?? defaultTranslations[translationId];
      return `${selectionCount !== void 0 ? `<div${add_classes(("bx--tag bx--tag--filter bx--tag--high-contrast " + (disabled ? "bx--tag--disabled" : "")).trim())}><span${add_attribute("title", selectionCount, 0)}${add_classes("bx--tag__label".trim())}>${escape(selectionCount)}</span>
    <div role="${"button"}"${add_attribute("tabindex", disabled ? -1 : 0, 0)} ${disabled ? "disabled" : ""}${add_attribute("aria-label", translationIds.clearAll, 0)}${add_attribute("title", description, 0)}${add_classes("bx--tag__close-icon".trim())}${add_attribute("this", ref, 0)}>${validate_component(Close$1, "Close").$$render($$result, {}, {}, {})}</div></div>` : `<div${spread(
        [
          { role: "button" },
          {
            "aria-label": escape_attribute_value(description)
          },
          {
            title: escape_attribute_value(description)
          },
          {
            tabindex: escape_attribute_value(disabled ? "-1" : "0")
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--list-box__selection " + (selectionCount ? "bx--tag--filter" : "") + " " + (selectionCount ? "bx--list-box__selection--multi" : "")
        }
      )}${add_attribute("this", ref, 0)}>${selectionCount !== void 0 ? `${escape(selectionCount)}` : ``}
    ${validate_component(Close$1, "Close").$$render($$result, {}, {}, {})}</div>`}`;
    });
    ListBoxSelection$1 = ListBoxSelection;
    MultiSelect = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let menuId;
      let inline;
      let ariaLabel;
      let sortedItems;
      let checked;
      let filteredItems;
      let $$restProps = compute_rest_props($$props, [
        "items",
        "itemToString",
        "itemToInput",
        "selectedIds",
        "value",
        "size",
        "type",
        "direction",
        "selectionFeedback",
        "disabled",
        "filterable",
        "filterItem",
        "open",
        "light",
        "locale",
        "placeholder",
        "sortItem",
        "translateWithId",
        "translateWithIdSelection",
        "titleText",
        "useTitleInItem",
        "invalid",
        "invalidText",
        "warn",
        "warnText",
        "helperText",
        "label",
        "hideLabel",
        "id",
        "name",
        "inputRef",
        "multiSelectRef",
        "fieldRef",
        "selectionRef",
        "highlightedId"
      ]);
      let { items = [] } = $$props;
      let { itemToString = (item) => item.text || item.id } = $$props;
      let { itemToInput = (item) => {
      } } = $$props;
      let { selectedIds = [] } = $$props;
      let { value: value2 = "" } = $$props;
      let { size = void 0 } = $$props;
      let { type: type2 = "default" } = $$props;
      let { direction = "bottom" } = $$props;
      let { selectionFeedback = "top-after-reopen" } = $$props;
      let { disabled = false } = $$props;
      let { filterable = false } = $$props;
      let { filterItem = (item, value22) => item.text.toLowerCase().includes(value22.trim().toLowerCase()) } = $$props;
      let { open = false } = $$props;
      let { light = false } = $$props;
      let { locale: locale4 = "en" } = $$props;
      let { placeholder = "" } = $$props;
      let { sortItem = (a2, b) => a2.text.localeCompare(b.text, locale4, { numeric: true }) } = $$props;
      let { translateWithId = void 0 } = $$props;
      let { translateWithIdSelection = void 0 } = $$props;
      let { titleText = "" } = $$props;
      let { useTitleInItem = false } = $$props;
      let { invalid = false } = $$props;
      let { invalidText = "" } = $$props;
      let { warn = false } = $$props;
      let { warnText = "" } = $$props;
      let { helperText = "" } = $$props;
      let { label = "" } = $$props;
      let { hideLabel = false } = $$props;
      let { id: id2 = "ccs-" + Math.random().toString(36) } = $$props;
      let { name = void 0 } = $$props;
      let { inputRef = null } = $$props;
      let { multiSelectRef = null } = $$props;
      let { fieldRef = null } = $$props;
      let { selectionRef = null } = $$props;
      let { highlightedId = null } = $$props;
      createEventDispatcher();
      let highlightedIndex = -1;
      setContext("MultiSelect", {
        declareRef: ({ key: key2, ref }) => {
          switch (key2) {
            case "field":
              fieldRef = ref;
              break;
            case "selection":
              selectionRef = ref;
              break;
          }
        }
      });
      if ($$props.items === void 0 && $$bindings.items && items !== void 0)
        $$bindings.items(items);
      if ($$props.itemToString === void 0 && $$bindings.itemToString && itemToString !== void 0)
        $$bindings.itemToString(itemToString);
      if ($$props.itemToInput === void 0 && $$bindings.itemToInput && itemToInput !== void 0)
        $$bindings.itemToInput(itemToInput);
      if ($$props.selectedIds === void 0 && $$bindings.selectedIds && selectedIds !== void 0)
        $$bindings.selectedIds(selectedIds);
      if ($$props.value === void 0 && $$bindings.value && value2 !== void 0)
        $$bindings.value(value2);
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.type === void 0 && $$bindings.type && type2 !== void 0)
        $$bindings.type(type2);
      if ($$props.direction === void 0 && $$bindings.direction && direction !== void 0)
        $$bindings.direction(direction);
      if ($$props.selectionFeedback === void 0 && $$bindings.selectionFeedback && selectionFeedback !== void 0)
        $$bindings.selectionFeedback(selectionFeedback);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.filterable === void 0 && $$bindings.filterable && filterable !== void 0)
        $$bindings.filterable(filterable);
      if ($$props.filterItem === void 0 && $$bindings.filterItem && filterItem !== void 0)
        $$bindings.filterItem(filterItem);
      if ($$props.open === void 0 && $$bindings.open && open !== void 0)
        $$bindings.open(open);
      if ($$props.light === void 0 && $$bindings.light && light !== void 0)
        $$bindings.light(light);
      if ($$props.locale === void 0 && $$bindings.locale && locale4 !== void 0)
        $$bindings.locale(locale4);
      if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0)
        $$bindings.placeholder(placeholder);
      if ($$props.sortItem === void 0 && $$bindings.sortItem && sortItem !== void 0)
        $$bindings.sortItem(sortItem);
      if ($$props.translateWithId === void 0 && $$bindings.translateWithId && translateWithId !== void 0)
        $$bindings.translateWithId(translateWithId);
      if ($$props.translateWithIdSelection === void 0 && $$bindings.translateWithIdSelection && translateWithIdSelection !== void 0)
        $$bindings.translateWithIdSelection(translateWithIdSelection);
      if ($$props.titleText === void 0 && $$bindings.titleText && titleText !== void 0)
        $$bindings.titleText(titleText);
      if ($$props.useTitleInItem === void 0 && $$bindings.useTitleInItem && useTitleInItem !== void 0)
        $$bindings.useTitleInItem(useTitleInItem);
      if ($$props.invalid === void 0 && $$bindings.invalid && invalid !== void 0)
        $$bindings.invalid(invalid);
      if ($$props.invalidText === void 0 && $$bindings.invalidText && invalidText !== void 0)
        $$bindings.invalidText(invalidText);
      if ($$props.warn === void 0 && $$bindings.warn && warn !== void 0)
        $$bindings.warn(warn);
      if ($$props.warnText === void 0 && $$bindings.warnText && warnText !== void 0)
        $$bindings.warnText(warnText);
      if ($$props.helperText === void 0 && $$bindings.helperText && helperText !== void 0)
        $$bindings.helperText(helperText);
      if ($$props.label === void 0 && $$bindings.label && label !== void 0)
        $$bindings.label(label);
      if ($$props.hideLabel === void 0 && $$bindings.hideLabel && hideLabel !== void 0)
        $$bindings.hideLabel(hideLabel);
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      if ($$props.name === void 0 && $$bindings.name && name !== void 0)
        $$bindings.name(name);
      if ($$props.inputRef === void 0 && $$bindings.inputRef && inputRef !== void 0)
        $$bindings.inputRef(inputRef);
      if ($$props.multiSelectRef === void 0 && $$bindings.multiSelectRef && multiSelectRef !== void 0)
        $$bindings.multiSelectRef(multiSelectRef);
      if ($$props.fieldRef === void 0 && $$bindings.fieldRef && fieldRef !== void 0)
        $$bindings.fieldRef(fieldRef);
      if ($$props.selectionRef === void 0 && $$bindings.selectionRef && selectionRef !== void 0)
        $$bindings.selectionRef(selectionRef);
      if ($$props.highlightedId === void 0 && $$bindings.highlightedId && highlightedId !== void 0)
        $$bindings.highlightedId(highlightedId);
      menuId = `menu-${id2}`;
      inline = type2 === "inline";
      ariaLabel = $$props["aria-label"] || "Choose an item";
      sortedItems = items.map((item) => ({
        ...item,
        checked: selectedIds.includes(item.id)
      }));
      checked = sortedItems.filter(({ checked: checked2 }) => checked2);
      sortedItems.filter(({ checked: checked2 }) => !checked2);
      filteredItems = sortedItems.filter((item) => filterItem(item, value2));
      highlightedId = null;
      return `

<div${add_classes(("bx--multi-select__wrapper bx--list-box__wrapper " + (inline ? "bx--multi-select__wrapper--inline" : "") + " " + (inline ? "bx--list-box__wrapper--inline" : "") + " " + (inline && invalid ? "bx--multi-select__wrapper--inline--invalid" : "")).trim())}${add_attribute("this", multiSelectRef, 0)}>${titleText ? `<label${add_attribute("for", id2, 0)}${add_classes(("bx--label " + (disabled ? "bx--label--disabled" : "") + " " + (hideLabel ? "bx--visually-hidden" : "")).trim())}>${escape(titleText)}</label>` : ``}
  ${validate_component(ListBox$1, "ListBox").$$render(
        $$result,
        {
          role: void 0,
          disabled,
          invalid,
          invalidText,
          open,
          light,
          size,
          warn,
          warnText,
          class: "bx--multi-select " + (direction === "top" && "bx--list-box--up") + " " + (filterable && "bx--combo-box") + "\n      " + (filterable && "bx--multi-select--filterable") + "\n      " + (invalid && "bx--multi-select--invalid") + "\n      " + (inline && "bx--multi-select--inline") + "\n      " + (checked.length > 0 && "bx--multi-select--selected")
        },
        {},
        {
          default: () => {
            return `${invalid ? `${validate_component(WarningFilled$1, "WarningFilled").$$render($$result, { class: "bx--list-box__invalid-icon" }, {}, {})}` : ``}
    ${!invalid && warn ? `${validate_component(WarningAltFilled$1, "WarningAltFilled").$$render(
              $$result,
              {
                class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
              },
              {},
              {}
            )}` : ``}
    ${validate_component(ListBoxField$1, "ListBoxField").$$render(
              $$result,
              {
                role: "button",
                tabindex: "0",
                "aria-expanded": open,
                id: id2,
                disabled,
                translateWithId
              },
              {},
              {
                default: () => {
                  return `${checked.length > 0 ? `${validate_component(ListBoxSelection$1, "ListBoxSelection").$$render(
                    $$result,
                    {
                      selectionCount: checked.length,
                      translateWithId: translateWithIdSelection,
                      disabled
                    },
                    {},
                    {}
                  )}` : ``}
      ${filterable ? `<input${spread(
                    [
                      escape_object($$restProps),
                      { role: "combobox" },
                      { tabindex: "0" },
                      { autocomplete: "off" },
                      { "aria-autocomplete": "list" },
                      {
                        "aria-expanded": escape_attribute_value(open)
                      },
                      {
                        "aria-activedescendant": escape_attribute_value(highlightedId)
                      },
                      {
                        "aria-disabled": escape_attribute_value(disabled)
                      },
                      {
                        "aria-controls": escape_attribute_value(menuId)
                      },
                      { disabled: disabled || null },
                      {
                        placeholder: escape_attribute_value(placeholder)
                      },
                      { id: escape_attribute_value(id2) },
                      { name: escape_attribute_value(name) }
                    ],
                    {
                      classes: "bx--text-input " + (value2 === "" ? "bx--text-input--empty" : "") + " " + (light ? "bx--text-input--light" : "")
                    }
                  )}${add_attribute("this", inputRef, 0)}${add_attribute("value", value2, 0)}>
        ${invalid ? `${validate_component(WarningFilled$1, "WarningFilled").$$render($$result, { class: "bx--list-box__invalid-icon" }, {}, {})}` : ``}
        ${value2 ? `${validate_component(ListBoxSelection$1, "ListBoxSelection").$$render(
                    $$result,
                    {
                      translateWithId: translateWithIdSelection,
                      disabled,
                      open
                    },
                    {},
                    {}
                  )}` : ``}
        ${validate_component(ListBoxMenuIcon$1, "ListBoxMenuIcon").$$render(
                    $$result,
                    {
                      style: "pointer-events: " + (open ? "auto" : "none"),
                      translateWithId,
                      open
                    },
                    {},
                    {}
                  )}` : ``}
      ${!filterable ? `<span${add_classes("bx--list-box__label".trim())}>${escape(label)}</span>
        ${validate_component(ListBoxMenuIcon$1, "ListBoxMenuIcon").$$render($$result, { open, translateWithId }, {}, {})}` : ``}`;
                }
              }
            )}
    ${open ? `${validate_component(ListBoxMenu$1, "ListBoxMenu").$$render(
              $$result,
              {
                "aria-label": ariaLabel,
                id: id2,
                "aria-multiselectable": "true"
              },
              {},
              {
                default: () => {
                  return `${each(filterable ? filteredItems : sortedItems, (item, i) => {
                    return `${validate_component(ListBoxMenuItem$1, "ListBoxMenuItem").$$render(
                      $$result,
                      {
                        id: item.id,
                        role: "option",
                        "aria-labelledby": "checkbox-" + item.id,
                        "aria-selected": item.checked,
                        active: item.checked,
                        highlighted: highlightedIndex === i,
                        disabled: item.disabled
                      },
                      {},
                      {
                        default: () => {
                          return `${validate_component(Checkbox$1, "Checkbox").$$render(
                            $$result,
                            Object.assign(
                              { name: item.id },
                              {
                                title: useTitleInItem ? itemToString(item) : void 0
                              },
                              itemToInput(item),
                              { readonly: true },
                              { tabindex: "-1" },
                              { id: "checkbox-" + item.id },
                              { checked: item.checked },
                              { disabled: item.disabled }
                            ),
                            {},
                            {
                              labelText: () => {
                                return `${slots.default ? slots.default({ slot: "labelText", item, index: i }) : `
                ${escape(itemToString(item))}
              `}`;
                              }
                            }
                          )}
          `;
                        }
                      }
                    )}`;
                  })}`;
                }
              }
            )}` : ``}`;
          }
        }
      )}
  ${!inline && !invalid && !warn && helperText ? `<div${add_classes(("bx--form__helper-text " + (disabled ? "bx--form__helper-text--disabled" : "")).trim())}>${escape(helperText)}</div>` : ``}</div>`;
    });
    MultiSelect$1 = MultiSelect;
  }
});

// node_modules/d3-ease/src/linear.js
var linear;
var init_linear = __esm({
  "node_modules/d3-ease/src/linear.js"() {
    linear = (t) => +t;
  }
});

// node_modules/d3-ease/src/cubic.js
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
var init_cubic = __esm({
  "node_modules/d3-ease/src/cubic.js"() {
  }
});

// node_modules/d3-ease/src/index.js
var init_src = __esm({
  "node_modules/d3-ease/src/index.js"() {
    init_linear();
    init_cubic();
  }
});

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal, freeGlobal_default;
var init_freeGlobal = __esm({
  "node_modules/lodash-es/_freeGlobal.js"() {
    freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    freeGlobal_default = freeGlobal;
  }
});

// node_modules/lodash-es/_root.js
var freeSelf, root, root_default;
var init_root = __esm({
  "node_modules/lodash-es/_root.js"() {
    init_freeGlobal();
    freeSelf = typeof self == "object" && self && self.Object === Object && self;
    root = freeGlobal_default || freeSelf || Function("return this")();
    root_default = root;
  }
});

// node_modules/lodash-es/_Symbol.js
var Symbol2, Symbol_default;
var init_Symbol = __esm({
  "node_modules/lodash-es/_Symbol.js"() {
    init_root();
    Symbol2 = root_default.Symbol;
    Symbol_default = Symbol2;
  }
});

// node_modules/lodash-es/_getRawTag.js
function getRawTag(value2) {
  var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
  try {
    value2[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value2);
  if (unmasked) {
    if (isOwn) {
      value2[symToStringTag] = tag;
    } else {
      delete value2[symToStringTag];
    }
  }
  return result;
}
var objectProto, hasOwnProperty, nativeObjectToString, symToStringTag, getRawTag_default;
var init_getRawTag = __esm({
  "node_modules/lodash-es/_getRawTag.js"() {
    init_Symbol();
    objectProto = Object.prototype;
    hasOwnProperty = objectProto.hasOwnProperty;
    nativeObjectToString = objectProto.toString;
    symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
    getRawTag_default = getRawTag;
  }
});

// node_modules/lodash-es/_objectToString.js
function objectToString(value2) {
  return nativeObjectToString2.call(value2);
}
var objectProto2, nativeObjectToString2, objectToString_default;
var init_objectToString = __esm({
  "node_modules/lodash-es/_objectToString.js"() {
    objectProto2 = Object.prototype;
    nativeObjectToString2 = objectProto2.toString;
    objectToString_default = objectToString;
  }
});

// node_modules/lodash-es/_baseGetTag.js
function baseGetTag(value2) {
  if (value2 == null) {
    return value2 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value2) ? getRawTag_default(value2) : objectToString_default(value2);
}
var nullTag, undefinedTag, symToStringTag2, baseGetTag_default;
var init_baseGetTag = __esm({
  "node_modules/lodash-es/_baseGetTag.js"() {
    init_Symbol();
    init_getRawTag();
    init_objectToString();
    nullTag = "[object Null]";
    undefinedTag = "[object Undefined]";
    symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
    baseGetTag_default = baseGetTag;
  }
});

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value2) {
  return value2 != null && typeof value2 == "object";
}
var isObjectLike_default;
var init_isObjectLike = __esm({
  "node_modules/lodash-es/isObjectLike.js"() {
    isObjectLike_default = isObjectLike;
  }
});

// node_modules/lodash-es/isSymbol.js
function isSymbol(value2) {
  return typeof value2 == "symbol" || isObjectLike_default(value2) && baseGetTag_default(value2) == symbolTag;
}
var symbolTag, isSymbol_default;
var init_isSymbol = __esm({
  "node_modules/lodash-es/isSymbol.js"() {
    init_baseGetTag();
    init_isObjectLike();
    symbolTag = "[object Symbol]";
    isSymbol_default = isSymbol;
  }
});

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array4, iteratee) {
  var index5 = -1, length = array4 == null ? 0 : array4.length, result = Array(length);
  while (++index5 < length) {
    result[index5] = iteratee(array4[index5], index5, array4);
  }
  return result;
}
var arrayMap_default;
var init_arrayMap = __esm({
  "node_modules/lodash-es/_arrayMap.js"() {
    arrayMap_default = arrayMap;
  }
});

// node_modules/lodash-es/isArray.js
var isArray, isArray_default;
var init_isArray = __esm({
  "node_modules/lodash-es/isArray.js"() {
    isArray = Array.isArray;
    isArray_default = isArray;
  }
});

// node_modules/lodash-es/_baseToString.js
function baseToString(value2) {
  if (typeof value2 == "string") {
    return value2;
  }
  if (isArray_default(value2)) {
    return arrayMap_default(value2, baseToString) + "";
  }
  if (isSymbol_default(value2)) {
    return symbolToString ? symbolToString.call(value2) : "";
  }
  var result = value2 + "";
  return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
}
var INFINITY, symbolProto, symbolToString, baseToString_default;
var init_baseToString = __esm({
  "node_modules/lodash-es/_baseToString.js"() {
    init_Symbol();
    init_arrayMap();
    init_isArray();
    init_isSymbol();
    INFINITY = 1 / 0;
    symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
    symbolToString = symbolProto ? symbolProto.toString : void 0;
    baseToString_default = baseToString;
  }
});

// node_modules/lodash-es/_trimmedEndIndex.js
function trimmedEndIndex(string) {
  var index5 = string.length;
  while (index5-- && reWhitespace.test(string.charAt(index5))) {
  }
  return index5;
}
var reWhitespace, trimmedEndIndex_default;
var init_trimmedEndIndex = __esm({
  "node_modules/lodash-es/_trimmedEndIndex.js"() {
    reWhitespace = /\s/;
    trimmedEndIndex_default = trimmedEndIndex;
  }
});

// node_modules/lodash-es/_baseTrim.js
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var reTrimStart, baseTrim_default;
var init_baseTrim = __esm({
  "node_modules/lodash-es/_baseTrim.js"() {
    init_trimmedEndIndex();
    reTrimStart = /^\s+/;
    baseTrim_default = baseTrim;
  }
});

// node_modules/lodash-es/isObject.js
function isObject(value2) {
  var type2 = typeof value2;
  return value2 != null && (type2 == "object" || type2 == "function");
}
var isObject_default;
var init_isObject = __esm({
  "node_modules/lodash-es/isObject.js"() {
    isObject_default = isObject;
  }
});

// node_modules/lodash-es/toNumber.js
function toNumber2(value2) {
  if (typeof value2 == "number") {
    return value2;
  }
  if (isSymbol_default(value2)) {
    return NAN2;
  }
  if (isObject_default(value2)) {
    var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
    value2 = isObject_default(other) ? other + "" : other;
  }
  if (typeof value2 != "string") {
    return value2 === 0 ? value2 : +value2;
  }
  value2 = baseTrim_default(value2);
  var isBinary = reIsBinary.test(value2);
  return isBinary || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value2) ? NAN2 : +value2;
}
var NAN2, reIsBadHex, reIsBinary, reIsOctal, freeParseInt, toNumber_default;
var init_toNumber = __esm({
  "node_modules/lodash-es/toNumber.js"() {
    init_baseTrim();
    init_isObject();
    init_isSymbol();
    NAN2 = 0 / 0;
    reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    reIsBinary = /^0b[01]+$/i;
    reIsOctal = /^0o[0-7]+$/i;
    freeParseInt = parseInt;
    toNumber_default = toNumber2;
  }
});

// node_modules/lodash-es/identity.js
function identity(value2) {
  return value2;
}
var identity_default;
var init_identity = __esm({
  "node_modules/lodash-es/identity.js"() {
    identity_default = identity;
  }
});

// node_modules/lodash-es/isFunction.js
function isFunction(value2) {
  if (!isObject_default(value2)) {
    return false;
  }
  var tag = baseGetTag_default(value2);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var asyncTag, funcTag, genTag, proxyTag, isFunction_default;
var init_isFunction = __esm({
  "node_modules/lodash-es/isFunction.js"() {
    init_baseGetTag();
    init_isObject();
    asyncTag = "[object AsyncFunction]";
    funcTag = "[object Function]";
    genTag = "[object GeneratorFunction]";
    proxyTag = "[object Proxy]";
    isFunction_default = isFunction;
  }
});

// node_modules/lodash-es/_coreJsData.js
var coreJsData, coreJsData_default;
var init_coreJsData = __esm({
  "node_modules/lodash-es/_coreJsData.js"() {
    init_root();
    coreJsData = root_default["__core-js_shared__"];
    coreJsData_default = coreJsData;
  }
});

// node_modules/lodash-es/_isMasked.js
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var maskSrcKey, isMasked_default;
var init_isMasked = __esm({
  "node_modules/lodash-es/_isMasked.js"() {
    init_coreJsData();
    maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    isMasked_default = isMasked;
  }
});

// node_modules/lodash-es/_toSource.js
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var funcProto, funcToString, toSource_default;
var init_toSource = __esm({
  "node_modules/lodash-es/_toSource.js"() {
    funcProto = Function.prototype;
    funcToString = funcProto.toString;
    toSource_default = toSource;
  }
});

// node_modules/lodash-es/_baseIsNative.js
function baseIsNative(value2) {
  if (!isObject_default(value2) || isMasked_default(value2)) {
    return false;
  }
  var pattern2 = isFunction_default(value2) ? reIsNative : reIsHostCtor;
  return pattern2.test(toSource_default(value2));
}
var reRegExpChar, reIsHostCtor, funcProto2, objectProto3, funcToString2, hasOwnProperty2, reIsNative, baseIsNative_default;
var init_baseIsNative = __esm({
  "node_modules/lodash-es/_baseIsNative.js"() {
    init_isFunction();
    init_isMasked();
    init_isObject();
    init_toSource();
    reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    reIsHostCtor = /^\[object .+?Constructor\]$/;
    funcProto2 = Function.prototype;
    objectProto3 = Object.prototype;
    funcToString2 = funcProto2.toString;
    hasOwnProperty2 = objectProto3.hasOwnProperty;
    reIsNative = RegExp(
      "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    baseIsNative_default = baseIsNative;
  }
});

// node_modules/lodash-es/_getValue.js
function getValue(object, key2) {
  return object == null ? void 0 : object[key2];
}
var getValue_default;
var init_getValue = __esm({
  "node_modules/lodash-es/_getValue.js"() {
    getValue_default = getValue;
  }
});

// node_modules/lodash-es/_getNative.js
function getNative(object, key2) {
  var value2 = getValue_default(object, key2);
  return baseIsNative_default(value2) ? value2 : void 0;
}
var getNative_default;
var init_getNative = __esm({
  "node_modules/lodash-es/_getNative.js"() {
    init_baseIsNative();
    init_getValue();
    getNative_default = getNative;
  }
});

// node_modules/lodash-es/_WeakMap.js
var WeakMap2, WeakMap_default;
var init_WeakMap = __esm({
  "node_modules/lodash-es/_WeakMap.js"() {
    init_getNative();
    init_root();
    WeakMap2 = getNative_default(root_default, "WeakMap");
    WeakMap_default = WeakMap2;
  }
});

// node_modules/lodash-es/_baseCreate.js
var objectCreate, baseCreate, baseCreate_default;
var init_baseCreate = __esm({
  "node_modules/lodash-es/_baseCreate.js"() {
    init_isObject();
    objectCreate = Object.create;
    baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject_default(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    baseCreate_default = baseCreate;
  }
});

// node_modules/lodash-es/_apply.js
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var apply_default;
var init_apply = __esm({
  "node_modules/lodash-es/_apply.js"() {
    apply_default = apply;
  }
});

// node_modules/lodash-es/noop.js
function noop4() {
}
var noop_default;
var init_noop = __esm({
  "node_modules/lodash-es/noop.js"() {
    noop_default = noop4;
  }
});

// node_modules/lodash-es/_copyArray.js
function copyArray(source, array4) {
  var index5 = -1, length = source.length;
  array4 || (array4 = Array(length));
  while (++index5 < length) {
    array4[index5] = source[index5];
  }
  return array4;
}
var copyArray_default;
var init_copyArray = __esm({
  "node_modules/lodash-es/_copyArray.js"() {
    copyArray_default = copyArray;
  }
});

// node_modules/lodash-es/_shortOut.js
function shortOut(func) {
  var count3 = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count3 >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count3 = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var HOT_COUNT, HOT_SPAN, nativeNow, shortOut_default;
var init_shortOut = __esm({
  "node_modules/lodash-es/_shortOut.js"() {
    HOT_COUNT = 800;
    HOT_SPAN = 16;
    nativeNow = Date.now;
    shortOut_default = shortOut;
  }
});

// node_modules/lodash-es/constant.js
function constant(value2) {
  return function() {
    return value2;
  };
}
var constant_default;
var init_constant = __esm({
  "node_modules/lodash-es/constant.js"() {
    constant_default = constant;
  }
});

// node_modules/lodash-es/_defineProperty.js
var defineProperty, defineProperty_default;
var init_defineProperty = __esm({
  "node_modules/lodash-es/_defineProperty.js"() {
    init_getNative();
    defineProperty = function() {
      try {
        var func = getNative_default(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    defineProperty_default = defineProperty;
  }
});

// node_modules/lodash-es/_baseSetToString.js
var baseSetToString, baseSetToString_default;
var init_baseSetToString = __esm({
  "node_modules/lodash-es/_baseSetToString.js"() {
    init_constant();
    init_defineProperty();
    init_identity();
    baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
      return defineProperty_default(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant_default(string),
        "writable": true
      });
    };
    baseSetToString_default = baseSetToString;
  }
});

// node_modules/lodash-es/_setToString.js
var setToString, setToString_default;
var init_setToString = __esm({
  "node_modules/lodash-es/_setToString.js"() {
    init_baseSetToString();
    init_shortOut();
    setToString = shortOut_default(baseSetToString_default);
    setToString_default = setToString;
  }
});

// node_modules/lodash-es/_arrayEach.js
function arrayEach(array4, iteratee) {
  var index5 = -1, length = array4 == null ? 0 : array4.length;
  while (++index5 < length) {
    if (iteratee(array4[index5], index5, array4) === false) {
      break;
    }
  }
  return array4;
}
var arrayEach_default;
var init_arrayEach = __esm({
  "node_modules/lodash-es/_arrayEach.js"() {
    arrayEach_default = arrayEach;
  }
});

// node_modules/lodash-es/_baseFindIndex.js
function baseFindIndex(array4, predicate, fromIndex, fromRight) {
  var length = array4.length, index5 = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index5-- : ++index5 < length) {
    if (predicate(array4[index5], index5, array4)) {
      return index5;
    }
  }
  return -1;
}
var baseFindIndex_default;
var init_baseFindIndex = __esm({
  "node_modules/lodash-es/_baseFindIndex.js"() {
    baseFindIndex_default = baseFindIndex;
  }
});

// node_modules/lodash-es/_baseIsNaN.js
function baseIsNaN(value2) {
  return value2 !== value2;
}
var baseIsNaN_default;
var init_baseIsNaN = __esm({
  "node_modules/lodash-es/_baseIsNaN.js"() {
    baseIsNaN_default = baseIsNaN;
  }
});

// node_modules/lodash-es/_strictIndexOf.js
function strictIndexOf(array4, value2, fromIndex) {
  var index5 = fromIndex - 1, length = array4.length;
  while (++index5 < length) {
    if (array4[index5] === value2) {
      return index5;
    }
  }
  return -1;
}
var strictIndexOf_default;
var init_strictIndexOf = __esm({
  "node_modules/lodash-es/_strictIndexOf.js"() {
    strictIndexOf_default = strictIndexOf;
  }
});

// node_modules/lodash-es/_baseIndexOf.js
function baseIndexOf(array4, value2, fromIndex) {
  return value2 === value2 ? strictIndexOf_default(array4, value2, fromIndex) : baseFindIndex_default(array4, baseIsNaN_default, fromIndex);
}
var baseIndexOf_default;
var init_baseIndexOf = __esm({
  "node_modules/lodash-es/_baseIndexOf.js"() {
    init_baseFindIndex();
    init_baseIsNaN();
    init_strictIndexOf();
    baseIndexOf_default = baseIndexOf;
  }
});

// node_modules/lodash-es/_arrayIncludes.js
function arrayIncludes(array4, value2) {
  var length = array4 == null ? 0 : array4.length;
  return !!length && baseIndexOf_default(array4, value2, 0) > -1;
}
var arrayIncludes_default;
var init_arrayIncludes = __esm({
  "node_modules/lodash-es/_arrayIncludes.js"() {
    init_baseIndexOf();
    arrayIncludes_default = arrayIncludes;
  }
});

// node_modules/lodash-es/_isIndex.js
function isIndex(value2, length) {
  var type2 = typeof value2;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
}
var MAX_SAFE_INTEGER, reIsUint, isIndex_default;
var init_isIndex = __esm({
  "node_modules/lodash-es/_isIndex.js"() {
    MAX_SAFE_INTEGER = 9007199254740991;
    reIsUint = /^(?:0|[1-9]\d*)$/;
    isIndex_default = isIndex;
  }
});

// node_modules/lodash-es/_baseAssignValue.js
function baseAssignValue(object, key2, value2) {
  if (key2 == "__proto__" && defineProperty_default) {
    defineProperty_default(object, key2, {
      "configurable": true,
      "enumerable": true,
      "value": value2,
      "writable": true
    });
  } else {
    object[key2] = value2;
  }
}
var baseAssignValue_default;
var init_baseAssignValue = __esm({
  "node_modules/lodash-es/_baseAssignValue.js"() {
    init_defineProperty();
    baseAssignValue_default = baseAssignValue;
  }
});

// node_modules/lodash-es/eq.js
function eq(value2, other) {
  return value2 === other || value2 !== value2 && other !== other;
}
var eq_default;
var init_eq = __esm({
  "node_modules/lodash-es/eq.js"() {
    eq_default = eq;
  }
});

// node_modules/lodash-es/_assignValue.js
function assignValue(object, key2, value2) {
  var objValue = object[key2];
  if (!(hasOwnProperty3.call(object, key2) && eq_default(objValue, value2)) || value2 === void 0 && !(key2 in object)) {
    baseAssignValue_default(object, key2, value2);
  }
}
var objectProto4, hasOwnProperty3, assignValue_default;
var init_assignValue = __esm({
  "node_modules/lodash-es/_assignValue.js"() {
    init_baseAssignValue();
    init_eq();
    objectProto4 = Object.prototype;
    hasOwnProperty3 = objectProto4.hasOwnProperty;
    assignValue_default = assignValue;
  }
});

// node_modules/lodash-es/_copyObject.js
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index5 = -1, length = props.length;
  while (++index5 < length) {
    var key2 = props[index5];
    var newValue = customizer ? customizer(object[key2], source[key2], key2, object, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key2];
    }
    if (isNew) {
      baseAssignValue_default(object, key2, newValue);
    } else {
      assignValue_default(object, key2, newValue);
    }
  }
  return object;
}
var copyObject_default;
var init_copyObject = __esm({
  "node_modules/lodash-es/_copyObject.js"() {
    init_assignValue();
    init_baseAssignValue();
    copyObject_default = copyObject;
  }
});

// node_modules/lodash-es/_overRest.js
function overRest(func, start2, transform) {
  start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
  return function() {
    var args = arguments, index5 = -1, length = nativeMax(args.length - start2, 0), array4 = Array(length);
    while (++index5 < length) {
      array4[index5] = args[start2 + index5];
    }
    index5 = -1;
    var otherArgs = Array(start2 + 1);
    while (++index5 < start2) {
      otherArgs[index5] = args[index5];
    }
    otherArgs[start2] = transform(array4);
    return apply_default(func, this, otherArgs);
  };
}
var nativeMax, overRest_default;
var init_overRest = __esm({
  "node_modules/lodash-es/_overRest.js"() {
    init_apply();
    nativeMax = Math.max;
    overRest_default = overRest;
  }
});

// node_modules/lodash-es/_baseRest.js
function baseRest(func, start2) {
  return setToString_default(overRest_default(func, start2, identity_default), func + "");
}
var baseRest_default;
var init_baseRest = __esm({
  "node_modules/lodash-es/_baseRest.js"() {
    init_identity();
    init_overRest();
    init_setToString();
    baseRest_default = baseRest;
  }
});

// node_modules/lodash-es/isLength.js
function isLength(value2) {
  return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER2;
}
var MAX_SAFE_INTEGER2, isLength_default;
var init_isLength = __esm({
  "node_modules/lodash-es/isLength.js"() {
    MAX_SAFE_INTEGER2 = 9007199254740991;
    isLength_default = isLength;
  }
});

// node_modules/lodash-es/isArrayLike.js
function isArrayLike(value2) {
  return value2 != null && isLength_default(value2.length) && !isFunction_default(value2);
}
var isArrayLike_default;
var init_isArrayLike = __esm({
  "node_modules/lodash-es/isArrayLike.js"() {
    init_isFunction();
    init_isLength();
    isArrayLike_default = isArrayLike;
  }
});

// node_modules/lodash-es/_isIterateeCall.js
function isIterateeCall(value2, index5, object) {
  if (!isObject_default(object)) {
    return false;
  }
  var type2 = typeof index5;
  if (type2 == "number" ? isArrayLike_default(object) && isIndex_default(index5, object.length) : type2 == "string" && index5 in object) {
    return eq_default(object[index5], value2);
  }
  return false;
}
var isIterateeCall_default;
var init_isIterateeCall = __esm({
  "node_modules/lodash-es/_isIterateeCall.js"() {
    init_eq();
    init_isArrayLike();
    init_isIndex();
    init_isObject();
    isIterateeCall_default = isIterateeCall;
  }
});

// node_modules/lodash-es/_createAssigner.js
function createAssigner(assigner) {
  return baseRest_default(function(object, sources) {
    var index5 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index5 < length) {
      var source = sources[index5];
      if (source) {
        assigner(object, source, index5, customizer);
      }
    }
    return object;
  });
}
var createAssigner_default;
var init_createAssigner = __esm({
  "node_modules/lodash-es/_createAssigner.js"() {
    init_baseRest();
    init_isIterateeCall();
    createAssigner_default = createAssigner;
  }
});

// node_modules/lodash-es/_isPrototype.js
function isPrototype(value2) {
  var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto5;
  return value2 === proto;
}
var objectProto5, isPrototype_default;
var init_isPrototype = __esm({
  "node_modules/lodash-es/_isPrototype.js"() {
    objectProto5 = Object.prototype;
    isPrototype_default = isPrototype;
  }
});

// node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee) {
  var index5 = -1, result = Array(n);
  while (++index5 < n) {
    result[index5] = iteratee(index5);
  }
  return result;
}
var baseTimes_default;
var init_baseTimes = __esm({
  "node_modules/lodash-es/_baseTimes.js"() {
    baseTimes_default = baseTimes;
  }
});

// node_modules/lodash-es/_baseIsArguments.js
function baseIsArguments(value2) {
  return isObjectLike_default(value2) && baseGetTag_default(value2) == argsTag;
}
var argsTag, baseIsArguments_default;
var init_baseIsArguments = __esm({
  "node_modules/lodash-es/_baseIsArguments.js"() {
    init_baseGetTag();
    init_isObjectLike();
    argsTag = "[object Arguments]";
    baseIsArguments_default = baseIsArguments;
  }
});

// node_modules/lodash-es/isArguments.js
var objectProto6, hasOwnProperty4, propertyIsEnumerable, isArguments, isArguments_default;
var init_isArguments = __esm({
  "node_modules/lodash-es/isArguments.js"() {
    init_baseIsArguments();
    init_isObjectLike();
    objectProto6 = Object.prototype;
    hasOwnProperty4 = objectProto6.hasOwnProperty;
    propertyIsEnumerable = objectProto6.propertyIsEnumerable;
    isArguments = baseIsArguments_default(function() {
      return arguments;
    }()) ? baseIsArguments_default : function(value2) {
      return isObjectLike_default(value2) && hasOwnProperty4.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
    };
    isArguments_default = isArguments;
  }
});

// node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return false;
}
var stubFalse_default;
var init_stubFalse = __esm({
  "node_modules/lodash-es/stubFalse.js"() {
    stubFalse_default = stubFalse;
  }
});

// node_modules/lodash-es/isBuffer.js
var freeExports, freeModule, moduleExports, Buffer2, nativeIsBuffer, isBuffer, isBuffer_default;
var init_isBuffer = __esm({
  "node_modules/lodash-es/isBuffer.js"() {
    init_root();
    init_stubFalse();
    freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    moduleExports = freeModule && freeModule.exports === freeExports;
    Buffer2 = moduleExports ? root_default.Buffer : void 0;
    nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    isBuffer = nativeIsBuffer || stubFalse_default;
    isBuffer_default = isBuffer;
  }
});

// node_modules/lodash-es/_baseIsTypedArray.js
function baseIsTypedArray(value2) {
  return isObjectLike_default(value2) && isLength_default(value2.length) && !!typedArrayTags[baseGetTag_default(value2)];
}
var argsTag2, arrayTag, boolTag, dateTag, errorTag, funcTag2, mapTag, numberTag, objectTag, regexpTag, setTag, stringTag, weakMapTag, arrayBufferTag, dataViewTag, float32Tag, float64Tag, int8Tag, int16Tag, int32Tag, uint8Tag, uint8ClampedTag, uint16Tag, uint32Tag, typedArrayTags, baseIsTypedArray_default;
var init_baseIsTypedArray = __esm({
  "node_modules/lodash-es/_baseIsTypedArray.js"() {
    init_baseGetTag();
    init_isLength();
    init_isObjectLike();
    argsTag2 = "[object Arguments]";
    arrayTag = "[object Array]";
    boolTag = "[object Boolean]";
    dateTag = "[object Date]";
    errorTag = "[object Error]";
    funcTag2 = "[object Function]";
    mapTag = "[object Map]";
    numberTag = "[object Number]";
    objectTag = "[object Object]";
    regexpTag = "[object RegExp]";
    setTag = "[object Set]";
    stringTag = "[object String]";
    weakMapTag = "[object WeakMap]";
    arrayBufferTag = "[object ArrayBuffer]";
    dataViewTag = "[object DataView]";
    float32Tag = "[object Float32Array]";
    float64Tag = "[object Float64Array]";
    int8Tag = "[object Int8Array]";
    int16Tag = "[object Int16Array]";
    int32Tag = "[object Int32Array]";
    uint8Tag = "[object Uint8Array]";
    uint8ClampedTag = "[object Uint8ClampedArray]";
    uint16Tag = "[object Uint16Array]";
    uint32Tag = "[object Uint32Array]";
    typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    baseIsTypedArray_default = baseIsTypedArray;
  }
});

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value2) {
    return func(value2);
  };
}
var baseUnary_default;
var init_baseUnary = __esm({
  "node_modules/lodash-es/_baseUnary.js"() {
    baseUnary_default = baseUnary;
  }
});

// node_modules/lodash-es/_nodeUtil.js
var freeExports2, freeModule2, moduleExports2, freeProcess, nodeUtil, nodeUtil_default;
var init_nodeUtil = __esm({
  "node_modules/lodash-es/_nodeUtil.js"() {
    init_freeGlobal();
    freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
    freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
    moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
    freeProcess = moduleExports2 && freeGlobal_default.process;
    nodeUtil = function() {
      try {
        var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    nodeUtil_default = nodeUtil;
  }
});

// node_modules/lodash-es/isTypedArray.js
var nodeIsTypedArray, isTypedArray, isTypedArray_default;
var init_isTypedArray = __esm({
  "node_modules/lodash-es/isTypedArray.js"() {
    init_baseIsTypedArray();
    init_baseUnary();
    init_nodeUtil();
    nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
    isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
    isTypedArray_default = isTypedArray;
  }
});

// node_modules/lodash-es/_arrayLikeKeys.js
function arrayLikeKeys(value2, inherited) {
  var isArr = isArray_default(value2), isArg = !isArr && isArguments_default(value2), isBuff = !isArr && !isArg && isBuffer_default(value2), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value2.length, String) : [], length = result.length;
  for (var key2 in value2) {
    if ((inherited || hasOwnProperty5.call(value2, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex_default(key2, length)))) {
      result.push(key2);
    }
  }
  return result;
}
var objectProto7, hasOwnProperty5, arrayLikeKeys_default;
var init_arrayLikeKeys = __esm({
  "node_modules/lodash-es/_arrayLikeKeys.js"() {
    init_baseTimes();
    init_isArguments();
    init_isArray();
    init_isBuffer();
    init_isIndex();
    init_isTypedArray();
    objectProto7 = Object.prototype;
    hasOwnProperty5 = objectProto7.hasOwnProperty;
    arrayLikeKeys_default = arrayLikeKeys;
  }
});

// node_modules/lodash-es/_overArg.js
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var overArg_default;
var init_overArg = __esm({
  "node_modules/lodash-es/_overArg.js"() {
    overArg_default = overArg;
  }
});

// node_modules/lodash-es/_nativeKeys.js
var nativeKeys, nativeKeys_default;
var init_nativeKeys = __esm({
  "node_modules/lodash-es/_nativeKeys.js"() {
    init_overArg();
    nativeKeys = overArg_default(Object.keys, Object);
    nativeKeys_default = nativeKeys;
  }
});

// node_modules/lodash-es/_baseKeys.js
function baseKeys(object) {
  if (!isPrototype_default(object)) {
    return nativeKeys_default(object);
  }
  var result = [];
  for (var key2 in Object(object)) {
    if (hasOwnProperty6.call(object, key2) && key2 != "constructor") {
      result.push(key2);
    }
  }
  return result;
}
var objectProto8, hasOwnProperty6, baseKeys_default;
var init_baseKeys = __esm({
  "node_modules/lodash-es/_baseKeys.js"() {
    init_isPrototype();
    init_nativeKeys();
    objectProto8 = Object.prototype;
    hasOwnProperty6 = objectProto8.hasOwnProperty;
    baseKeys_default = baseKeys;
  }
});

// node_modules/lodash-es/keys.js
function keys(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
}
var keys_default;
var init_keys = __esm({
  "node_modules/lodash-es/keys.js"() {
    init_arrayLikeKeys();
    init_baseKeys();
    init_isArrayLike();
    keys_default = keys;
  }
});

// node_modules/lodash-es/_nativeKeysIn.js
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key2 in Object(object)) {
      result.push(key2);
    }
  }
  return result;
}
var nativeKeysIn_default;
var init_nativeKeysIn = __esm({
  "node_modules/lodash-es/_nativeKeysIn.js"() {
    nativeKeysIn_default = nativeKeysIn;
  }
});

// node_modules/lodash-es/_baseKeysIn.js
function baseKeysIn(object) {
  if (!isObject_default(object)) {
    return nativeKeysIn_default(object);
  }
  var isProto = isPrototype_default(object), result = [];
  for (var key2 in object) {
    if (!(key2 == "constructor" && (isProto || !hasOwnProperty7.call(object, key2)))) {
      result.push(key2);
    }
  }
  return result;
}
var objectProto9, hasOwnProperty7, baseKeysIn_default;
var init_baseKeysIn = __esm({
  "node_modules/lodash-es/_baseKeysIn.js"() {
    init_isObject();
    init_isPrototype();
    init_nativeKeysIn();
    objectProto9 = Object.prototype;
    hasOwnProperty7 = objectProto9.hasOwnProperty;
    baseKeysIn_default = baseKeysIn;
  }
});

// node_modules/lodash-es/keysIn.js
function keysIn(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
}
var keysIn_default;
var init_keysIn = __esm({
  "node_modules/lodash-es/keysIn.js"() {
    init_arrayLikeKeys();
    init_baseKeysIn();
    init_isArrayLike();
    keysIn_default = keysIn;
  }
});

// node_modules/lodash-es/_isKey.js
function isKey(value2, object) {
  if (isArray_default(value2)) {
    return false;
  }
  var type2 = typeof value2;
  if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value2 == null || isSymbol_default(value2)) {
    return true;
  }
  return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
}
var reIsDeepProp, reIsPlainProp, isKey_default;
var init_isKey = __esm({
  "node_modules/lodash-es/_isKey.js"() {
    init_isArray();
    init_isSymbol();
    reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    reIsPlainProp = /^\w*$/;
    isKey_default = isKey;
  }
});

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate, nativeCreate_default;
var init_nativeCreate = __esm({
  "node_modules/lodash-es/_nativeCreate.js"() {
    init_getNative();
    nativeCreate = getNative_default(Object, "create");
    nativeCreate_default = nativeCreate;
  }
});

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default;
var init_hashClear = __esm({
  "node_modules/lodash-es/_hashClear.js"() {
    init_nativeCreate();
    hashClear_default = hashClear;
  }
});

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key2) {
  var result = this.has(key2) && delete this.__data__[key2];
  this.size -= result ? 1 : 0;
  return result;
}
var hashDelete_default;
var init_hashDelete = __esm({
  "node_modules/lodash-es/_hashDelete.js"() {
    hashDelete_default = hashDelete;
  }
});

// node_modules/lodash-es/_hashGet.js
function hashGet(key2) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key2];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty8.call(data, key2) ? data[key2] : void 0;
}
var HASH_UNDEFINED, objectProto10, hasOwnProperty8, hashGet_default;
var init_hashGet = __esm({
  "node_modules/lodash-es/_hashGet.js"() {
    init_nativeCreate();
    HASH_UNDEFINED = "__lodash_hash_undefined__";
    objectProto10 = Object.prototype;
    hasOwnProperty8 = objectProto10.hasOwnProperty;
    hashGet_default = hashGet;
  }
});

// node_modules/lodash-es/_hashHas.js
function hashHas(key2) {
  var data = this.__data__;
  return nativeCreate_default ? data[key2] !== void 0 : hasOwnProperty9.call(data, key2);
}
var objectProto11, hasOwnProperty9, hashHas_default;
var init_hashHas = __esm({
  "node_modules/lodash-es/_hashHas.js"() {
    init_nativeCreate();
    objectProto11 = Object.prototype;
    hasOwnProperty9 = objectProto11.hasOwnProperty;
    hashHas_default = hashHas;
  }
});

// node_modules/lodash-es/_hashSet.js
function hashSet(key2, value2) {
  var data = this.__data__;
  this.size += this.has(key2) ? 0 : 1;
  data[key2] = nativeCreate_default && value2 === void 0 ? HASH_UNDEFINED2 : value2;
  return this;
}
var HASH_UNDEFINED2, hashSet_default;
var init_hashSet = __esm({
  "node_modules/lodash-es/_hashSet.js"() {
    init_nativeCreate();
    HASH_UNDEFINED2 = "__lodash_hash_undefined__";
    hashSet_default = hashSet;
  }
});

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index5 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index5 < length) {
    var entry = entries[index5];
    this.set(entry[0], entry[1]);
  }
}
var Hash_default;
var init_Hash = __esm({
  "node_modules/lodash-es/_Hash.js"() {
    init_hashClear();
    init_hashDelete();
    init_hashGet();
    init_hashHas();
    init_hashSet();
    Hash.prototype.clear = hashClear_default;
    Hash.prototype["delete"] = hashDelete_default;
    Hash.prototype.get = hashGet_default;
    Hash.prototype.has = hashHas_default;
    Hash.prototype.set = hashSet_default;
    Hash_default = Hash;
  }
});

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default;
var init_listCacheClear = __esm({
  "node_modules/lodash-es/_listCacheClear.js"() {
    listCacheClear_default = listCacheClear;
  }
});

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array4, key2) {
  var length = array4.length;
  while (length--) {
    if (eq_default(array4[length][0], key2)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default;
var init_assocIndexOf = __esm({
  "node_modules/lodash-es/_assocIndexOf.js"() {
    init_eq();
    assocIndexOf_default = assocIndexOf;
  }
});

// node_modules/lodash-es/_listCacheDelete.js
function listCacheDelete(key2) {
  var data = this.__data__, index5 = assocIndexOf_default(data, key2);
  if (index5 < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index5 == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index5, 1);
  }
  --this.size;
  return true;
}
var arrayProto, splice, listCacheDelete_default;
var init_listCacheDelete = __esm({
  "node_modules/lodash-es/_listCacheDelete.js"() {
    init_assocIndexOf();
    arrayProto = Array.prototype;
    splice = arrayProto.splice;
    listCacheDelete_default = listCacheDelete;
  }
});

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key2) {
  var data = this.__data__, index5 = assocIndexOf_default(data, key2);
  return index5 < 0 ? void 0 : data[index5][1];
}
var listCacheGet_default;
var init_listCacheGet = __esm({
  "node_modules/lodash-es/_listCacheGet.js"() {
    init_assocIndexOf();
    listCacheGet_default = listCacheGet;
  }
});

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key2) {
  return assocIndexOf_default(this.__data__, key2) > -1;
}
var listCacheHas_default;
var init_listCacheHas = __esm({
  "node_modules/lodash-es/_listCacheHas.js"() {
    init_assocIndexOf();
    listCacheHas_default = listCacheHas;
  }
});

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key2, value2) {
  var data = this.__data__, index5 = assocIndexOf_default(data, key2);
  if (index5 < 0) {
    ++this.size;
    data.push([key2, value2]);
  } else {
    data[index5][1] = value2;
  }
  return this;
}
var listCacheSet_default;
var init_listCacheSet = __esm({
  "node_modules/lodash-es/_listCacheSet.js"() {
    init_assocIndexOf();
    listCacheSet_default = listCacheSet;
  }
});

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index5 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index5 < length) {
    var entry = entries[index5];
    this.set(entry[0], entry[1]);
  }
}
var ListCache_default;
var init_ListCache = __esm({
  "node_modules/lodash-es/_ListCache.js"() {
    init_listCacheClear();
    init_listCacheDelete();
    init_listCacheGet();
    init_listCacheHas();
    init_listCacheSet();
    ListCache.prototype.clear = listCacheClear_default;
    ListCache.prototype["delete"] = listCacheDelete_default;
    ListCache.prototype.get = listCacheGet_default;
    ListCache.prototype.has = listCacheHas_default;
    ListCache.prototype.set = listCacheSet_default;
    ListCache_default = ListCache;
  }
});

// node_modules/lodash-es/_Map.js
var Map2, Map_default;
var init_Map = __esm({
  "node_modules/lodash-es/_Map.js"() {
    init_getNative();
    init_root();
    Map2 = getNative_default(root_default, "Map");
    Map_default = Map2;
  }
});

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default;
var init_mapCacheClear = __esm({
  "node_modules/lodash-es/_mapCacheClear.js"() {
    init_Hash();
    init_ListCache();
    init_Map();
    mapCacheClear_default = mapCacheClear;
  }
});

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value2) {
  var type2 = typeof value2;
  return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value2 !== "__proto__" : value2 === null;
}
var isKeyable_default;
var init_isKeyable = __esm({
  "node_modules/lodash-es/_isKeyable.js"() {
    isKeyable_default = isKeyable;
  }
});

// node_modules/lodash-es/_getMapData.js
function getMapData(map4, key2) {
  var data = map4.__data__;
  return isKeyable_default(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default;
var init_getMapData = __esm({
  "node_modules/lodash-es/_getMapData.js"() {
    init_isKeyable();
    getMapData_default = getMapData;
  }
});

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key2) {
  var result = getMapData_default(this, key2)["delete"](key2);
  this.size -= result ? 1 : 0;
  return result;
}
var mapCacheDelete_default;
var init_mapCacheDelete = __esm({
  "node_modules/lodash-es/_mapCacheDelete.js"() {
    init_getMapData();
    mapCacheDelete_default = mapCacheDelete;
  }
});

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key2) {
  return getMapData_default(this, key2).get(key2);
}
var mapCacheGet_default;
var init_mapCacheGet = __esm({
  "node_modules/lodash-es/_mapCacheGet.js"() {
    init_getMapData();
    mapCacheGet_default = mapCacheGet;
  }
});

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key2) {
  return getMapData_default(this, key2).has(key2);
}
var mapCacheHas_default;
var init_mapCacheHas = __esm({
  "node_modules/lodash-es/_mapCacheHas.js"() {
    init_getMapData();
    mapCacheHas_default = mapCacheHas;
  }
});

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key2, value2) {
  var data = getMapData_default(this, key2), size = data.size;
  data.set(key2, value2);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var mapCacheSet_default;
var init_mapCacheSet = __esm({
  "node_modules/lodash-es/_mapCacheSet.js"() {
    init_getMapData();
    mapCacheSet_default = mapCacheSet;
  }
});

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index5 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index5 < length) {
    var entry = entries[index5];
    this.set(entry[0], entry[1]);
  }
}
var MapCache_default;
var init_MapCache = __esm({
  "node_modules/lodash-es/_MapCache.js"() {
    init_mapCacheClear();
    init_mapCacheDelete();
    init_mapCacheGet();
    init_mapCacheHas();
    init_mapCacheSet();
    MapCache.prototype.clear = mapCacheClear_default;
    MapCache.prototype["delete"] = mapCacheDelete_default;
    MapCache.prototype.get = mapCacheGet_default;
    MapCache.prototype.has = mapCacheHas_default;
    MapCache.prototype.set = mapCacheSet_default;
    MapCache_default = MapCache;
  }
});

// node_modules/lodash-es/memoize.js
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key2)) {
      return cache.get(key2);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key2, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
var FUNC_ERROR_TEXT, memoize_default;
var init_memoize = __esm({
  "node_modules/lodash-es/memoize.js"() {
    init_MapCache();
    FUNC_ERROR_TEXT = "Expected a function";
    memoize.Cache = MapCache_default;
    memoize_default = memoize;
  }
});

// node_modules/lodash-es/_memoizeCapped.js
function memoizeCapped(func) {
  var result = memoize_default(func, function(key2) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key2;
  });
  var cache = result.cache;
  return result;
}
var MAX_MEMOIZE_SIZE, memoizeCapped_default;
var init_memoizeCapped = __esm({
  "node_modules/lodash-es/_memoizeCapped.js"() {
    init_memoize();
    MAX_MEMOIZE_SIZE = 500;
    memoizeCapped_default = memoizeCapped;
  }
});

// node_modules/lodash-es/_stringToPath.js
var rePropName, reEscapeChar, stringToPath, stringToPath_default;
var init_stringToPath = __esm({
  "node_modules/lodash-es/_stringToPath.js"() {
    init_memoizeCapped();
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    reEscapeChar = /\\(\\)?/g;
    stringToPath = memoizeCapped_default(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match2, number5, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number5 || match2);
      });
      return result;
    });
    stringToPath_default = stringToPath;
  }
});

// node_modules/lodash-es/toString.js
function toString(value2) {
  return value2 == null ? "" : baseToString_default(value2);
}
var toString_default;
var init_toString = __esm({
  "node_modules/lodash-es/toString.js"() {
    init_baseToString();
    toString_default = toString;
  }
});

// node_modules/lodash-es/_castPath.js
function castPath(value2, object) {
  if (isArray_default(value2)) {
    return value2;
  }
  return isKey_default(value2, object) ? [value2] : stringToPath_default(toString_default(value2));
}
var castPath_default;
var init_castPath = __esm({
  "node_modules/lodash-es/_castPath.js"() {
    init_isArray();
    init_isKey();
    init_stringToPath();
    init_toString();
    castPath_default = castPath;
  }
});

// node_modules/lodash-es/_toKey.js
function toKey(value2) {
  if (typeof value2 == "string" || isSymbol_default(value2)) {
    return value2;
  }
  var result = value2 + "";
  return result == "0" && 1 / value2 == -INFINITY2 ? "-0" : result;
}
var INFINITY2, toKey_default;
var init_toKey = __esm({
  "node_modules/lodash-es/_toKey.js"() {
    init_isSymbol();
    INFINITY2 = 1 / 0;
    toKey_default = toKey;
  }
});

// node_modules/lodash-es/_baseGet.js
function baseGet(object, path3) {
  path3 = castPath_default(path3, object);
  var index5 = 0, length = path3.length;
  while (object != null && index5 < length) {
    object = object[toKey_default(path3[index5++])];
  }
  return index5 && index5 == length ? object : void 0;
}
var baseGet_default;
var init_baseGet = __esm({
  "node_modules/lodash-es/_baseGet.js"() {
    init_castPath();
    init_toKey();
    baseGet_default = baseGet;
  }
});

// node_modules/lodash-es/get.js
function get2(object, path3, defaultValue) {
  var result = object == null ? void 0 : baseGet_default(object, path3);
  return result === void 0 ? defaultValue : result;
}
var get_default;
var init_get = __esm({
  "node_modules/lodash-es/get.js"() {
    init_baseGet();
    get_default = get2;
  }
});

// node_modules/lodash-es/_arrayPush.js
function arrayPush(array4, values) {
  var index5 = -1, length = values.length, offset = array4.length;
  while (++index5 < length) {
    array4[offset + index5] = values[index5];
  }
  return array4;
}
var arrayPush_default;
var init_arrayPush = __esm({
  "node_modules/lodash-es/_arrayPush.js"() {
    arrayPush_default = arrayPush;
  }
});

// node_modules/lodash-es/_isFlattenable.js
function isFlattenable(value2) {
  return isArray_default(value2) || isArguments_default(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
}
var spreadableSymbol, isFlattenable_default;
var init_isFlattenable = __esm({
  "node_modules/lodash-es/_isFlattenable.js"() {
    init_Symbol();
    init_isArguments();
    init_isArray();
    spreadableSymbol = Symbol_default ? Symbol_default.isConcatSpreadable : void 0;
    isFlattenable_default = isFlattenable;
  }
});

// node_modules/lodash-es/_baseFlatten.js
function baseFlatten(array4, depth, predicate, isStrict, result) {
  var index5 = -1, length = array4.length;
  predicate || (predicate = isFlattenable_default);
  result || (result = []);
  while (++index5 < length) {
    var value2 = array4[index5];
    if (depth > 0 && predicate(value2)) {
      if (depth > 1) {
        baseFlatten(value2, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush_default(result, value2);
      }
    } else if (!isStrict) {
      result[result.length] = value2;
    }
  }
  return result;
}
var baseFlatten_default;
var init_baseFlatten = __esm({
  "node_modules/lodash-es/_baseFlatten.js"() {
    init_arrayPush();
    init_isFlattenable();
    baseFlatten_default = baseFlatten;
  }
});

// node_modules/lodash-es/flatten.js
function flatten(array4) {
  var length = array4 == null ? 0 : array4.length;
  return length ? baseFlatten_default(array4, 1) : [];
}
var flatten_default;
var init_flatten = __esm({
  "node_modules/lodash-es/flatten.js"() {
    init_baseFlatten();
    flatten_default = flatten;
  }
});

// node_modules/lodash-es/_getPrototype.js
var getPrototype, getPrototype_default;
var init_getPrototype = __esm({
  "node_modules/lodash-es/_getPrototype.js"() {
    init_overArg();
    getPrototype = overArg_default(Object.getPrototypeOf, Object);
    getPrototype_default = getPrototype;
  }
});

// node_modules/lodash-es/isPlainObject.js
function isPlainObject(value2) {
  if (!isObjectLike_default(value2) || baseGetTag_default(value2) != objectTag2) {
    return false;
  }
  var proto = getPrototype_default(value2);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty10.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
}
var objectTag2, funcProto3, objectProto12, funcToString3, hasOwnProperty10, objectCtorString, isPlainObject_default;
var init_isPlainObject = __esm({
  "node_modules/lodash-es/isPlainObject.js"() {
    init_baseGetTag();
    init_getPrototype();
    init_isObjectLike();
    objectTag2 = "[object Object]";
    funcProto3 = Function.prototype;
    objectProto12 = Object.prototype;
    funcToString3 = funcProto3.toString;
    hasOwnProperty10 = objectProto12.hasOwnProperty;
    objectCtorString = funcToString3.call(Object);
    isPlainObject_default = isPlainObject;
  }
});

// node_modules/lodash-es/_baseSlice.js
function baseSlice(array4, start2, end) {
  var index5 = -1, length = array4.length;
  if (start2 < 0) {
    start2 = -start2 > length ? 0 : length + start2;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start2 > end ? 0 : end - start2 >>> 0;
  start2 >>>= 0;
  var result = Array(length);
  while (++index5 < length) {
    result[index5] = array4[index5 + start2];
  }
  return result;
}
var baseSlice_default;
var init_baseSlice = __esm({
  "node_modules/lodash-es/_baseSlice.js"() {
    baseSlice_default = baseSlice;
  }
});

// node_modules/lodash-es/_castSlice.js
function castSlice(array4, start2, end) {
  var length = array4.length;
  end = end === void 0 ? length : end;
  return !start2 && end >= length ? array4 : baseSlice_default(array4, start2, end);
}
var castSlice_default;
var init_castSlice = __esm({
  "node_modules/lodash-es/_castSlice.js"() {
    init_baseSlice();
    castSlice_default = castSlice;
  }
});

// node_modules/lodash-es/_hasUnicode.js
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
var rsAstralRange, rsComboMarksRange, reComboHalfMarksRange, rsComboSymbolsRange, rsComboRange, rsVarRange, rsZWJ, reHasUnicode, hasUnicode_default;
var init_hasUnicode = __esm({
  "node_modules/lodash-es/_hasUnicode.js"() {
    rsAstralRange = "\\ud800-\\udfff";
    rsComboMarksRange = "\\u0300-\\u036f";
    reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    rsComboSymbolsRange = "\\u20d0-\\u20ff";
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    rsVarRange = "\\ufe0e\\ufe0f";
    rsZWJ = "\\u200d";
    reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    hasUnicode_default = hasUnicode;
  }
});

// node_modules/lodash-es/_asciiToArray.js
function asciiToArray(string) {
  return string.split("");
}
var asciiToArray_default;
var init_asciiToArray = __esm({
  "node_modules/lodash-es/_asciiToArray.js"() {
    asciiToArray_default = asciiToArray;
  }
});

// node_modules/lodash-es/_unicodeToArray.js
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
var rsAstralRange2, rsComboMarksRange2, reComboHalfMarksRange2, rsComboSymbolsRange2, rsComboRange2, rsVarRange2, rsAstral, rsCombo, rsFitz, rsModifier, rsNonAstral, rsRegional, rsSurrPair, rsZWJ2, reOptMod, rsOptVar, rsOptJoin, rsSeq, rsSymbol, reUnicode, unicodeToArray_default;
var init_unicodeToArray = __esm({
  "node_modules/lodash-es/_unicodeToArray.js"() {
    rsAstralRange2 = "\\ud800-\\udfff";
    rsComboMarksRange2 = "\\u0300-\\u036f";
    reComboHalfMarksRange2 = "\\ufe20-\\ufe2f";
    rsComboSymbolsRange2 = "\\u20d0-\\u20ff";
    rsComboRange2 = rsComboMarksRange2 + reComboHalfMarksRange2 + rsComboSymbolsRange2;
    rsVarRange2 = "\\ufe0e\\ufe0f";
    rsAstral = "[" + rsAstralRange2 + "]";
    rsCombo = "[" + rsComboRange2 + "]";
    rsFitz = "\\ud83c[\\udffb-\\udfff]";
    rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    rsNonAstral = "[^" + rsAstralRange2 + "]";
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    rsZWJ2 = "\\u200d";
    reOptMod = rsModifier + "?";
    rsOptVar = "[" + rsVarRange2 + "]?";
    rsOptJoin = "(?:" + rsZWJ2 + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    rsSeq = rsOptVar + reOptMod + rsOptJoin;
    rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    unicodeToArray_default = unicodeToArray;
  }
});

// node_modules/lodash-es/_stringToArray.js
function stringToArray(string) {
  return hasUnicode_default(string) ? unicodeToArray_default(string) : asciiToArray_default(string);
}
var stringToArray_default;
var init_stringToArray = __esm({
  "node_modules/lodash-es/_stringToArray.js"() {
    init_asciiToArray();
    init_hasUnicode();
    init_unicodeToArray();
    stringToArray_default = stringToArray;
  }
});

// node_modules/lodash-es/_createCaseFirst.js
function createCaseFirst(methodName) {
  return function(string) {
    string = toString_default(string);
    var strSymbols = hasUnicode_default(string) ? stringToArray_default(string) : void 0;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice_default(strSymbols, 1).join("") : string.slice(1);
    return chr[methodName]() + trailing;
  };
}
var createCaseFirst_default;
var init_createCaseFirst = __esm({
  "node_modules/lodash-es/_createCaseFirst.js"() {
    init_castSlice();
    init_hasUnicode();
    init_stringToArray();
    init_toString();
    createCaseFirst_default = createCaseFirst;
  }
});

// node_modules/lodash-es/upperFirst.js
var upperFirst, upperFirst_default;
var init_upperFirst = __esm({
  "node_modules/lodash-es/upperFirst.js"() {
    init_createCaseFirst();
    upperFirst = createCaseFirst_default("toUpperCase");
    upperFirst_default = upperFirst;
  }
});

// node_modules/lodash-es/capitalize.js
function capitalize(string) {
  return upperFirst_default(toString_default(string).toLowerCase());
}
var capitalize_default;
var init_capitalize = __esm({
  "node_modules/lodash-es/capitalize.js"() {
    init_toString();
    init_upperFirst();
    capitalize_default = capitalize;
  }
});

// node_modules/lodash-es/_arrayReduce.js
function arrayReduce(array4, iteratee, accumulator, initAccum) {
  var index5 = -1, length = array4 == null ? 0 : array4.length;
  if (initAccum && length) {
    accumulator = array4[++index5];
  }
  while (++index5 < length) {
    accumulator = iteratee(accumulator, array4[index5], index5, array4);
  }
  return accumulator;
}
var arrayReduce_default;
var init_arrayReduce = __esm({
  "node_modules/lodash-es/_arrayReduce.js"() {
    arrayReduce_default = arrayReduce;
  }
});

// node_modules/lodash-es/_basePropertyOf.js
function basePropertyOf(object) {
  return function(key2) {
    return object == null ? void 0 : object[key2];
  };
}
var basePropertyOf_default;
var init_basePropertyOf = __esm({
  "node_modules/lodash-es/_basePropertyOf.js"() {
    basePropertyOf_default = basePropertyOf;
  }
});

// node_modules/lodash-es/_deburrLetter.js
var deburredLetters, deburrLetter, deburrLetter_default;
var init_deburrLetter = __esm({
  "node_modules/lodash-es/_deburrLetter.js"() {
    init_basePropertyOf();
    deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "s"
    };
    deburrLetter = basePropertyOf_default(deburredLetters);
    deburrLetter_default = deburrLetter;
  }
});

// node_modules/lodash-es/deburr.js
function deburr(string) {
  string = toString_default(string);
  return string && string.replace(reLatin, deburrLetter_default).replace(reComboMark, "");
}
var reLatin, rsComboMarksRange3, reComboHalfMarksRange3, rsComboSymbolsRange3, rsComboRange3, rsCombo2, reComboMark, deburr_default;
var init_deburr = __esm({
  "node_modules/lodash-es/deburr.js"() {
    init_deburrLetter();
    init_toString();
    reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    rsComboMarksRange3 = "\\u0300-\\u036f";
    reComboHalfMarksRange3 = "\\ufe20-\\ufe2f";
    rsComboSymbolsRange3 = "\\u20d0-\\u20ff";
    rsComboRange3 = rsComboMarksRange3 + reComboHalfMarksRange3 + rsComboSymbolsRange3;
    rsCombo2 = "[" + rsComboRange3 + "]";
    reComboMark = RegExp(rsCombo2, "g");
    deburr_default = deburr;
  }
});

// node_modules/lodash-es/_asciiWords.js
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}
var reAsciiWord, asciiWords_default;
var init_asciiWords = __esm({
  "node_modules/lodash-es/_asciiWords.js"() {
    reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    asciiWords_default = asciiWords;
  }
});

// node_modules/lodash-es/_hasUnicodeWord.js
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}
var reHasUnicodeWord, hasUnicodeWord_default;
var init_hasUnicodeWord = __esm({
  "node_modules/lodash-es/_hasUnicodeWord.js"() {
    reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    hasUnicodeWord_default = hasUnicodeWord;
  }
});

// node_modules/lodash-es/_unicodeWords.js
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}
var rsAstralRange3, rsComboMarksRange4, reComboHalfMarksRange4, rsComboSymbolsRange4, rsComboRange4, rsDingbatRange, rsLowerRange, rsMathOpRange, rsNonCharRange, rsPunctuationRange, rsSpaceRange, rsUpperRange, rsVarRange3, rsBreakRange, rsApos, rsBreak, rsCombo3, rsDigits, rsDingbat, rsLower, rsMisc, rsFitz2, rsModifier2, rsNonAstral2, rsRegional2, rsSurrPair2, rsUpper, rsZWJ3, rsMiscLower, rsMiscUpper, rsOptContrLower, rsOptContrUpper, reOptMod2, rsOptVar2, rsOptJoin2, rsOrdLower, rsOrdUpper, rsSeq2, rsEmoji, reUnicodeWord, unicodeWords_default;
var init_unicodeWords = __esm({
  "node_modules/lodash-es/_unicodeWords.js"() {
    rsAstralRange3 = "\\ud800-\\udfff";
    rsComboMarksRange4 = "\\u0300-\\u036f";
    reComboHalfMarksRange4 = "\\ufe20-\\ufe2f";
    rsComboSymbolsRange4 = "\\u20d0-\\u20ff";
    rsComboRange4 = rsComboMarksRange4 + reComboHalfMarksRange4 + rsComboSymbolsRange4;
    rsDingbatRange = "\\u2700-\\u27bf";
    rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    rsPunctuationRange = "\\u2000-\\u206f";
    rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    rsVarRange3 = "\\ufe0e\\ufe0f";
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    rsApos = "['\u2019]";
    rsBreak = "[" + rsBreakRange + "]";
    rsCombo3 = "[" + rsComboRange4 + "]";
    rsDigits = "\\d+";
    rsDingbat = "[" + rsDingbatRange + "]";
    rsLower = "[" + rsLowerRange + "]";
    rsMisc = "[^" + rsAstralRange3 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    rsFitz2 = "\\ud83c[\\udffb-\\udfff]";
    rsModifier2 = "(?:" + rsCombo3 + "|" + rsFitz2 + ")";
    rsNonAstral2 = "[^" + rsAstralRange3 + "]";
    rsRegional2 = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    rsSurrPair2 = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    rsUpper = "[" + rsUpperRange + "]";
    rsZWJ3 = "\\u200d";
    rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    reOptMod2 = rsModifier2 + "?";
    rsOptVar2 = "[" + rsVarRange3 + "]?";
    rsOptJoin2 = "(?:" + rsZWJ3 + "(?:" + [rsNonAstral2, rsRegional2, rsSurrPair2].join("|") + ")" + rsOptVar2 + reOptMod2 + ")*";
    rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    rsSeq2 = rsOptVar2 + reOptMod2 + rsOptJoin2;
    rsEmoji = "(?:" + [rsDingbat, rsRegional2, rsSurrPair2].join("|") + ")" + rsSeq2;
    reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    unicodeWords_default = unicodeWords;
  }
});

// node_modules/lodash-es/words.js
function words(string, pattern2, guard) {
  string = toString_default(string);
  pattern2 = guard ? void 0 : pattern2;
  if (pattern2 === void 0) {
    return hasUnicodeWord_default(string) ? unicodeWords_default(string) : asciiWords_default(string);
  }
  return string.match(pattern2) || [];
}
var words_default;
var init_words = __esm({
  "node_modules/lodash-es/words.js"() {
    init_asciiWords();
    init_hasUnicodeWord();
    init_toString();
    init_unicodeWords();
    words_default = words;
  }
});

// node_modules/lodash-es/_createCompounder.js
function createCompounder(callback) {
  return function(string) {
    return arrayReduce_default(words_default(deburr_default(string).replace(reApos, "")), callback, "");
  };
}
var rsApos2, reApos, createCompounder_default;
var init_createCompounder = __esm({
  "node_modules/lodash-es/_createCompounder.js"() {
    init_arrayReduce();
    init_deburr();
    init_words();
    rsApos2 = "['\u2019]";
    reApos = RegExp(rsApos2, "g");
    createCompounder_default = createCompounder;
  }
});

// node_modules/lodash-es/camelCase.js
var camelCase, camelCase_default;
var init_camelCase = __esm({
  "node_modules/lodash-es/camelCase.js"() {
    init_capitalize();
    init_createCompounder();
    camelCase = createCompounder_default(function(result, word, index5) {
      word = word.toLowerCase();
      return result + (index5 ? capitalize_default(word) : word);
    });
    camelCase_default = camelCase;
  }
});

// node_modules/lodash-es/_baseClamp.js
function baseClamp(number5, lower2, upper) {
  if (number5 === number5) {
    if (upper !== void 0) {
      number5 = number5 <= upper ? number5 : upper;
    }
    if (lower2 !== void 0) {
      number5 = number5 >= lower2 ? number5 : lower2;
    }
  }
  return number5;
}
var baseClamp_default;
var init_baseClamp = __esm({
  "node_modules/lodash-es/_baseClamp.js"() {
    baseClamp_default = baseClamp;
  }
});

// node_modules/lodash-es/clamp.js
function clamp(number5, lower2, upper) {
  if (upper === void 0) {
    upper = lower2;
    lower2 = void 0;
  }
  if (upper !== void 0) {
    upper = toNumber_default(upper);
    upper = upper === upper ? upper : 0;
  }
  if (lower2 !== void 0) {
    lower2 = toNumber_default(lower2);
    lower2 = lower2 === lower2 ? lower2 : 0;
  }
  return baseClamp_default(toNumber_default(number5), lower2, upper);
}
var clamp_default;
var init_clamp = __esm({
  "node_modules/lodash-es/clamp.js"() {
    init_baseClamp();
    init_toNumber();
    clamp_default = clamp;
  }
});

// node_modules/lodash-es/_stackClear.js
function stackClear() {
  this.__data__ = new ListCache_default();
  this.size = 0;
}
var stackClear_default;
var init_stackClear = __esm({
  "node_modules/lodash-es/_stackClear.js"() {
    init_ListCache();
    stackClear_default = stackClear;
  }
});

// node_modules/lodash-es/_stackDelete.js
function stackDelete(key2) {
  var data = this.__data__, result = data["delete"](key2);
  this.size = data.size;
  return result;
}
var stackDelete_default;
var init_stackDelete = __esm({
  "node_modules/lodash-es/_stackDelete.js"() {
    stackDelete_default = stackDelete;
  }
});

// node_modules/lodash-es/_stackGet.js
function stackGet(key2) {
  return this.__data__.get(key2);
}
var stackGet_default;
var init_stackGet = __esm({
  "node_modules/lodash-es/_stackGet.js"() {
    stackGet_default = stackGet;
  }
});

// node_modules/lodash-es/_stackHas.js
function stackHas(key2) {
  return this.__data__.has(key2);
}
var stackHas_default;
var init_stackHas = __esm({
  "node_modules/lodash-es/_stackHas.js"() {
    stackHas_default = stackHas;
  }
});

// node_modules/lodash-es/_stackSet.js
function stackSet(key2, value2) {
  var data = this.__data__;
  if (data instanceof ListCache_default) {
    var pairs = data.__data__;
    if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key2, value2]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache_default(pairs);
  }
  data.set(key2, value2);
  this.size = data.size;
  return this;
}
var LARGE_ARRAY_SIZE, stackSet_default;
var init_stackSet = __esm({
  "node_modules/lodash-es/_stackSet.js"() {
    init_ListCache();
    init_Map();
    init_MapCache();
    LARGE_ARRAY_SIZE = 200;
    stackSet_default = stackSet;
  }
});

// node_modules/lodash-es/_Stack.js
function Stack(entries) {
  var data = this.__data__ = new ListCache_default(entries);
  this.size = data.size;
}
var Stack_default;
var init_Stack = __esm({
  "node_modules/lodash-es/_Stack.js"() {
    init_ListCache();
    init_stackClear();
    init_stackDelete();
    init_stackGet();
    init_stackHas();
    init_stackSet();
    Stack.prototype.clear = stackClear_default;
    Stack.prototype["delete"] = stackDelete_default;
    Stack.prototype.get = stackGet_default;
    Stack.prototype.has = stackHas_default;
    Stack.prototype.set = stackSet_default;
    Stack_default = Stack;
  }
});

// node_modules/lodash-es/_baseAssign.js
function baseAssign(object, source) {
  return object && copyObject_default(source, keys_default(source), object);
}
var baseAssign_default;
var init_baseAssign = __esm({
  "node_modules/lodash-es/_baseAssign.js"() {
    init_copyObject();
    init_keys();
    baseAssign_default = baseAssign;
  }
});

// node_modules/lodash-es/_baseAssignIn.js
function baseAssignIn(object, source) {
  return object && copyObject_default(source, keysIn_default(source), object);
}
var baseAssignIn_default;
var init_baseAssignIn = __esm({
  "node_modules/lodash-es/_baseAssignIn.js"() {
    init_copyObject();
    init_keysIn();
    baseAssignIn_default = baseAssignIn;
  }
});

// node_modules/lodash-es/_cloneBuffer.js
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
var freeExports3, freeModule3, moduleExports3, Buffer3, allocUnsafe, cloneBuffer_default;
var init_cloneBuffer = __esm({
  "node_modules/lodash-es/_cloneBuffer.js"() {
    init_root();
    freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
    freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
    moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
    Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
    allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
    cloneBuffer_default = cloneBuffer;
  }
});

// node_modules/lodash-es/_arrayFilter.js
function arrayFilter(array4, predicate) {
  var index5 = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result = [];
  while (++index5 < length) {
    var value2 = array4[index5];
    if (predicate(value2, index5, array4)) {
      result[resIndex++] = value2;
    }
  }
  return result;
}
var arrayFilter_default;
var init_arrayFilter = __esm({
  "node_modules/lodash-es/_arrayFilter.js"() {
    arrayFilter_default = arrayFilter;
  }
});

// node_modules/lodash-es/stubArray.js
function stubArray() {
  return [];
}
var stubArray_default;
var init_stubArray = __esm({
  "node_modules/lodash-es/stubArray.js"() {
    stubArray_default = stubArray;
  }
});

// node_modules/lodash-es/_getSymbols.js
var objectProto13, propertyIsEnumerable2, nativeGetSymbols, getSymbols, getSymbols_default;
var init_getSymbols = __esm({
  "node_modules/lodash-es/_getSymbols.js"() {
    init_arrayFilter();
    init_stubArray();
    objectProto13 = Object.prototype;
    propertyIsEnumerable2 = objectProto13.propertyIsEnumerable;
    nativeGetSymbols = Object.getOwnPropertySymbols;
    getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable2.call(object, symbol);
      });
    };
    getSymbols_default = getSymbols;
  }
});

// node_modules/lodash-es/_copySymbols.js
function copySymbols(source, object) {
  return copyObject_default(source, getSymbols_default(source), object);
}
var copySymbols_default;
var init_copySymbols = __esm({
  "node_modules/lodash-es/_copySymbols.js"() {
    init_copyObject();
    init_getSymbols();
    copySymbols_default = copySymbols;
  }
});

// node_modules/lodash-es/_getSymbolsIn.js
var nativeGetSymbols2, getSymbolsIn, getSymbolsIn_default;
var init_getSymbolsIn = __esm({
  "node_modules/lodash-es/_getSymbolsIn.js"() {
    init_arrayPush();
    init_getPrototype();
    init_getSymbols();
    init_stubArray();
    nativeGetSymbols2 = Object.getOwnPropertySymbols;
    getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object) {
      var result = [];
      while (object) {
        arrayPush_default(result, getSymbols_default(object));
        object = getPrototype_default(object);
      }
      return result;
    };
    getSymbolsIn_default = getSymbolsIn;
  }
});

// node_modules/lodash-es/_copySymbolsIn.js
function copySymbolsIn(source, object) {
  return copyObject_default(source, getSymbolsIn_default(source), object);
}
var copySymbolsIn_default;
var init_copySymbolsIn = __esm({
  "node_modules/lodash-es/_copySymbolsIn.js"() {
    init_copyObject();
    init_getSymbolsIn();
    copySymbolsIn_default = copySymbolsIn;
  }
});

// node_modules/lodash-es/_baseGetAllKeys.js
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
}
var baseGetAllKeys_default;
var init_baseGetAllKeys = __esm({
  "node_modules/lodash-es/_baseGetAllKeys.js"() {
    init_arrayPush();
    init_isArray();
    baseGetAllKeys_default = baseGetAllKeys;
  }
});

// node_modules/lodash-es/_getAllKeys.js
function getAllKeys(object) {
  return baseGetAllKeys_default(object, keys_default, getSymbols_default);
}
var getAllKeys_default;
var init_getAllKeys = __esm({
  "node_modules/lodash-es/_getAllKeys.js"() {
    init_baseGetAllKeys();
    init_getSymbols();
    init_keys();
    getAllKeys_default = getAllKeys;
  }
});

// node_modules/lodash-es/_getAllKeysIn.js
function getAllKeysIn(object) {
  return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
}
var getAllKeysIn_default;
var init_getAllKeysIn = __esm({
  "node_modules/lodash-es/_getAllKeysIn.js"() {
    init_baseGetAllKeys();
    init_getSymbolsIn();
    init_keysIn();
    getAllKeysIn_default = getAllKeysIn;
  }
});

// node_modules/lodash-es/_DataView.js
var DataView2, DataView_default;
var init_DataView = __esm({
  "node_modules/lodash-es/_DataView.js"() {
    init_getNative();
    init_root();
    DataView2 = getNative_default(root_default, "DataView");
    DataView_default = DataView2;
  }
});

// node_modules/lodash-es/_Promise.js
var Promise2, Promise_default;
var init_Promise = __esm({
  "node_modules/lodash-es/_Promise.js"() {
    init_getNative();
    init_root();
    Promise2 = getNative_default(root_default, "Promise");
    Promise_default = Promise2;
  }
});

// node_modules/lodash-es/_Set.js
var Set2, Set_default;
var init_Set = __esm({
  "node_modules/lodash-es/_Set.js"() {
    init_getNative();
    init_root();
    Set2 = getNative_default(root_default, "Set");
    Set_default = Set2;
  }
});

// node_modules/lodash-es/_getTag.js
var mapTag2, objectTag3, promiseTag, setTag2, weakMapTag2, dataViewTag2, dataViewCtorString, mapCtorString, promiseCtorString, setCtorString, weakMapCtorString, getTag, getTag_default;
var init_getTag = __esm({
  "node_modules/lodash-es/_getTag.js"() {
    init_DataView();
    init_Map();
    init_Promise();
    init_Set();
    init_WeakMap();
    init_baseGetTag();
    init_toSource();
    mapTag2 = "[object Map]";
    objectTag3 = "[object Object]";
    promiseTag = "[object Promise]";
    setTag2 = "[object Set]";
    weakMapTag2 = "[object WeakMap]";
    dataViewTag2 = "[object DataView]";
    dataViewCtorString = toSource_default(DataView_default);
    mapCtorString = toSource_default(Map_default);
    promiseCtorString = toSource_default(Promise_default);
    setCtorString = toSource_default(Set_default);
    weakMapCtorString = toSource_default(WeakMap_default);
    getTag = baseGetTag_default;
    if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
      getTag = function(value2) {
        var result = baseGetTag_default(value2), Ctor = result == objectTag3 ? value2.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag2;
            case mapCtorString:
              return mapTag2;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag2;
            case weakMapCtorString:
              return weakMapTag2;
          }
        }
        return result;
      };
    }
    getTag_default = getTag;
  }
});

// node_modules/lodash-es/_initCloneArray.js
function initCloneArray(array4) {
  var length = array4.length, result = new array4.constructor(length);
  if (length && typeof array4[0] == "string" && hasOwnProperty11.call(array4, "index")) {
    result.index = array4.index;
    result.input = array4.input;
  }
  return result;
}
var objectProto14, hasOwnProperty11, initCloneArray_default;
var init_initCloneArray = __esm({
  "node_modules/lodash-es/_initCloneArray.js"() {
    objectProto14 = Object.prototype;
    hasOwnProperty11 = objectProto14.hasOwnProperty;
    initCloneArray_default = initCloneArray;
  }
});

// node_modules/lodash-es/_Uint8Array.js
var Uint8Array2, Uint8Array_default;
var init_Uint8Array = __esm({
  "node_modules/lodash-es/_Uint8Array.js"() {
    init_root();
    Uint8Array2 = root_default.Uint8Array;
    Uint8Array_default = Uint8Array2;
  }
});

// node_modules/lodash-es/_cloneArrayBuffer.js
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
  return result;
}
var cloneArrayBuffer_default;
var init_cloneArrayBuffer = __esm({
  "node_modules/lodash-es/_cloneArrayBuffer.js"() {
    init_Uint8Array();
    cloneArrayBuffer_default = cloneArrayBuffer;
  }
});

// node_modules/lodash-es/_cloneDataView.js
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var cloneDataView_default;
var init_cloneDataView = __esm({
  "node_modules/lodash-es/_cloneDataView.js"() {
    init_cloneArrayBuffer();
    cloneDataView_default = cloneDataView;
  }
});

// node_modules/lodash-es/_cloneRegExp.js
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}
var reFlags, cloneRegExp_default;
var init_cloneRegExp = __esm({
  "node_modules/lodash-es/_cloneRegExp.js"() {
    reFlags = /\w*$/;
    cloneRegExp_default = cloneRegExp;
  }
});

// node_modules/lodash-es/_cloneSymbol.js
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
var symbolProto2, symbolValueOf, cloneSymbol_default;
var init_cloneSymbol = __esm({
  "node_modules/lodash-es/_cloneSymbol.js"() {
    init_Symbol();
    symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
    symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
    cloneSymbol_default = cloneSymbol;
  }
});

// node_modules/lodash-es/_cloneTypedArray.js
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var cloneTypedArray_default;
var init_cloneTypedArray = __esm({
  "node_modules/lodash-es/_cloneTypedArray.js"() {
    init_cloneArrayBuffer();
    cloneTypedArray_default = cloneTypedArray;
  }
});

// node_modules/lodash-es/_initCloneByTag.js
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag2:
      return cloneArrayBuffer_default(object);
    case boolTag2:
    case dateTag2:
      return new Ctor(+object);
    case dataViewTag3:
      return cloneDataView_default(object, isDeep);
    case float32Tag2:
    case float64Tag2:
    case int8Tag2:
    case int16Tag2:
    case int32Tag2:
    case uint8Tag2:
    case uint8ClampedTag2:
    case uint16Tag2:
    case uint32Tag2:
      return cloneTypedArray_default(object, isDeep);
    case mapTag3:
      return new Ctor();
    case numberTag2:
    case stringTag2:
      return new Ctor(object);
    case regexpTag2:
      return cloneRegExp_default(object);
    case setTag3:
      return new Ctor();
    case symbolTag2:
      return cloneSymbol_default(object);
  }
}
var boolTag2, dateTag2, mapTag3, numberTag2, regexpTag2, setTag3, stringTag2, symbolTag2, arrayBufferTag2, dataViewTag3, float32Tag2, float64Tag2, int8Tag2, int16Tag2, int32Tag2, uint8Tag2, uint8ClampedTag2, uint16Tag2, uint32Tag2, initCloneByTag_default;
var init_initCloneByTag = __esm({
  "node_modules/lodash-es/_initCloneByTag.js"() {
    init_cloneArrayBuffer();
    init_cloneDataView();
    init_cloneRegExp();
    init_cloneSymbol();
    init_cloneTypedArray();
    boolTag2 = "[object Boolean]";
    dateTag2 = "[object Date]";
    mapTag3 = "[object Map]";
    numberTag2 = "[object Number]";
    regexpTag2 = "[object RegExp]";
    setTag3 = "[object Set]";
    stringTag2 = "[object String]";
    symbolTag2 = "[object Symbol]";
    arrayBufferTag2 = "[object ArrayBuffer]";
    dataViewTag3 = "[object DataView]";
    float32Tag2 = "[object Float32Array]";
    float64Tag2 = "[object Float64Array]";
    int8Tag2 = "[object Int8Array]";
    int16Tag2 = "[object Int16Array]";
    int32Tag2 = "[object Int32Array]";
    uint8Tag2 = "[object Uint8Array]";
    uint8ClampedTag2 = "[object Uint8ClampedArray]";
    uint16Tag2 = "[object Uint16Array]";
    uint32Tag2 = "[object Uint32Array]";
    initCloneByTag_default = initCloneByTag;
  }
});

// node_modules/lodash-es/_initCloneObject.js
function initCloneObject(object) {
  return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
}
var initCloneObject_default;
var init_initCloneObject = __esm({
  "node_modules/lodash-es/_initCloneObject.js"() {
    init_baseCreate();
    init_getPrototype();
    init_isPrototype();
    initCloneObject_default = initCloneObject;
  }
});

// node_modules/lodash-es/_baseIsMap.js
function baseIsMap(value2) {
  return isObjectLike_default(value2) && getTag_default(value2) == mapTag4;
}
var mapTag4, baseIsMap_default;
var init_baseIsMap = __esm({
  "node_modules/lodash-es/_baseIsMap.js"() {
    init_getTag();
    init_isObjectLike();
    mapTag4 = "[object Map]";
    baseIsMap_default = baseIsMap;
  }
});

// node_modules/lodash-es/isMap.js
var nodeIsMap, isMap, isMap_default;
var init_isMap = __esm({
  "node_modules/lodash-es/isMap.js"() {
    init_baseIsMap();
    init_baseUnary();
    init_nodeUtil();
    nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
    isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
    isMap_default = isMap;
  }
});

// node_modules/lodash-es/_baseIsSet.js
function baseIsSet(value2) {
  return isObjectLike_default(value2) && getTag_default(value2) == setTag4;
}
var setTag4, baseIsSet_default;
var init_baseIsSet = __esm({
  "node_modules/lodash-es/_baseIsSet.js"() {
    init_getTag();
    init_isObjectLike();
    setTag4 = "[object Set]";
    baseIsSet_default = baseIsSet;
  }
});

// node_modules/lodash-es/isSet.js
var nodeIsSet, isSet, isSet_default;
var init_isSet = __esm({
  "node_modules/lodash-es/isSet.js"() {
    init_baseIsSet();
    init_baseUnary();
    init_nodeUtil();
    nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
    isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
    isSet_default = isSet;
  }
});

// node_modules/lodash-es/_baseClone.js
function baseClone(value2, bitmask, customizer, key2, object, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer) {
    result = object ? customizer(value2, key2, object, stack) : customizer(value2);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject_default(value2)) {
    return value2;
  }
  var isArr = isArray_default(value2);
  if (isArr) {
    result = initCloneArray_default(value2);
    if (!isDeep) {
      return copyArray_default(value2, result);
    }
  } else {
    var tag = getTag_default(value2), isFunc = tag == funcTag3 || tag == genTag2;
    if (isBuffer_default(value2)) {
      return cloneBuffer_default(value2, isDeep);
    }
    if (tag == objectTag4 || tag == argsTag3 || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject_default(value2);
      if (!isDeep) {
        return isFlat ? copySymbolsIn_default(value2, baseAssignIn_default(result, value2)) : copySymbols_default(value2, baseAssign_default(result, value2));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value2 : {};
      }
      result = initCloneByTag_default(value2, tag, isDeep);
    }
  }
  stack || (stack = new Stack_default());
  var stacked = stack.get(value2);
  if (stacked) {
    return stacked;
  }
  stack.set(value2, result);
  if (isSet_default(value2)) {
    value2.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value2, stack));
    });
  } else if (isMap_default(value2)) {
    value2.forEach(function(subValue, key3) {
      result.set(key3, baseClone(subValue, bitmask, customizer, key3, value2, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
  var props = isArr ? void 0 : keysFunc(value2);
  arrayEach_default(props || value2, function(subValue, key3) {
    if (props) {
      key3 = subValue;
      subValue = value2[key3];
    }
    assignValue_default(result, key3, baseClone(subValue, bitmask, customizer, key3, value2, stack));
  });
  return result;
}
var CLONE_DEEP_FLAG, CLONE_FLAT_FLAG, CLONE_SYMBOLS_FLAG, argsTag3, arrayTag2, boolTag3, dateTag3, errorTag2, funcTag3, genTag2, mapTag5, numberTag3, objectTag4, regexpTag3, setTag5, stringTag3, symbolTag3, weakMapTag3, arrayBufferTag3, dataViewTag4, float32Tag3, float64Tag3, int8Tag3, int16Tag3, int32Tag3, uint8Tag3, uint8ClampedTag3, uint16Tag3, uint32Tag3, cloneableTags, baseClone_default;
var init_baseClone = __esm({
  "node_modules/lodash-es/_baseClone.js"() {
    init_Stack();
    init_arrayEach();
    init_assignValue();
    init_baseAssign();
    init_baseAssignIn();
    init_cloneBuffer();
    init_copyArray();
    init_copySymbols();
    init_copySymbolsIn();
    init_getAllKeys();
    init_getAllKeysIn();
    init_getTag();
    init_initCloneArray();
    init_initCloneByTag();
    init_initCloneObject();
    init_isArray();
    init_isBuffer();
    init_isMap();
    init_isObject();
    init_isSet();
    init_keys();
    init_keysIn();
    CLONE_DEEP_FLAG = 1;
    CLONE_FLAT_FLAG = 2;
    CLONE_SYMBOLS_FLAG = 4;
    argsTag3 = "[object Arguments]";
    arrayTag2 = "[object Array]";
    boolTag3 = "[object Boolean]";
    dateTag3 = "[object Date]";
    errorTag2 = "[object Error]";
    funcTag3 = "[object Function]";
    genTag2 = "[object GeneratorFunction]";
    mapTag5 = "[object Map]";
    numberTag3 = "[object Number]";
    objectTag4 = "[object Object]";
    regexpTag3 = "[object RegExp]";
    setTag5 = "[object Set]";
    stringTag3 = "[object String]";
    symbolTag3 = "[object Symbol]";
    weakMapTag3 = "[object WeakMap]";
    arrayBufferTag3 = "[object ArrayBuffer]";
    dataViewTag4 = "[object DataView]";
    float32Tag3 = "[object Float32Array]";
    float64Tag3 = "[object Float64Array]";
    int8Tag3 = "[object Int8Array]";
    int16Tag3 = "[object Int16Array]";
    int32Tag3 = "[object Int32Array]";
    uint8Tag3 = "[object Uint8Array]";
    uint8ClampedTag3 = "[object Uint8ClampedArray]";
    uint16Tag3 = "[object Uint16Array]";
    uint32Tag3 = "[object Uint32Array]";
    cloneableTags = {};
    cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag4] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag3] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
    cloneableTags[errorTag2] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
    baseClone_default = baseClone;
  }
});

// node_modules/lodash-es/cloneDeep.js
function cloneDeep(value2) {
  return baseClone_default(value2, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
}
var CLONE_DEEP_FLAG2, CLONE_SYMBOLS_FLAG2, cloneDeep_default;
var init_cloneDeep = __esm({
  "node_modules/lodash-es/cloneDeep.js"() {
    init_baseClone();
    CLONE_DEEP_FLAG2 = 1;
    CLONE_SYMBOLS_FLAG2 = 4;
    cloneDeep_default = cloneDeep;
  }
});

// node_modules/lodash-es/_setCacheAdd.js
function setCacheAdd(value2) {
  this.__data__.set(value2, HASH_UNDEFINED3);
  return this;
}
var HASH_UNDEFINED3, setCacheAdd_default;
var init_setCacheAdd = __esm({
  "node_modules/lodash-es/_setCacheAdd.js"() {
    HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    setCacheAdd_default = setCacheAdd;
  }
});

// node_modules/lodash-es/_setCacheHas.js
function setCacheHas(value2) {
  return this.__data__.has(value2);
}
var setCacheHas_default;
var init_setCacheHas = __esm({
  "node_modules/lodash-es/_setCacheHas.js"() {
    setCacheHas_default = setCacheHas;
  }
});

// node_modules/lodash-es/_SetCache.js
function SetCache(values) {
  var index5 = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache_default();
  while (++index5 < length) {
    this.add(values[index5]);
  }
}
var SetCache_default;
var init_SetCache = __esm({
  "node_modules/lodash-es/_SetCache.js"() {
    init_MapCache();
    init_setCacheAdd();
    init_setCacheHas();
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
    SetCache.prototype.has = setCacheHas_default;
    SetCache_default = SetCache;
  }
});

// node_modules/lodash-es/_arraySome.js
function arraySome(array4, predicate) {
  var index5 = -1, length = array4 == null ? 0 : array4.length;
  while (++index5 < length) {
    if (predicate(array4[index5], index5, array4)) {
      return true;
    }
  }
  return false;
}
var arraySome_default;
var init_arraySome = __esm({
  "node_modules/lodash-es/_arraySome.js"() {
    arraySome_default = arraySome;
  }
});

// node_modules/lodash-es/_cacheHas.js
function cacheHas(cache, key2) {
  return cache.has(key2);
}
var cacheHas_default;
var init_cacheHas = __esm({
  "node_modules/lodash-es/_cacheHas.js"() {
    cacheHas_default = cacheHas;
  }
});

// node_modules/lodash-es/_equalArrays.js
function equalArrays(array4, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array4.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array4);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array4;
  }
  var index5 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
  stack.set(array4, other);
  stack.set(other, array4);
  while (++index5 < arrLength) {
    var arrValue = array4[index5], othValue = other[index5];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index5, other, array4, stack) : customizer(arrValue, othValue, index5, array4, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!arraySome_default(other, function(othValue2, othIndex) {
        if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array4);
  stack["delete"](other);
  return result;
}
var COMPARE_PARTIAL_FLAG, COMPARE_UNORDERED_FLAG, equalArrays_default;
var init_equalArrays = __esm({
  "node_modules/lodash-es/_equalArrays.js"() {
    init_SetCache();
    init_arraySome();
    init_cacheHas();
    COMPARE_PARTIAL_FLAG = 1;
    COMPARE_UNORDERED_FLAG = 2;
    equalArrays_default = equalArrays;
  }
});

// node_modules/lodash-es/_mapToArray.js
function mapToArray(map4) {
  var index5 = -1, result = Array(map4.size);
  map4.forEach(function(value2, key2) {
    result[++index5] = [key2, value2];
  });
  return result;
}
var mapToArray_default;
var init_mapToArray = __esm({
  "node_modules/lodash-es/_mapToArray.js"() {
    mapToArray_default = mapToArray;
  }
});

// node_modules/lodash-es/_setToArray.js
function setToArray(set3) {
  var index5 = -1, result = Array(set3.size);
  set3.forEach(function(value2) {
    result[++index5] = value2;
  });
  return result;
}
var setToArray_default;
var init_setToArray = __esm({
  "node_modules/lodash-es/_setToArray.js"() {
    setToArray_default = setToArray;
  }
});

// node_modules/lodash-es/_equalByTag.js
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag5:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag4:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
        return false;
      }
      return true;
    case boolTag4:
    case dateTag4:
    case numberTag4:
      return eq_default(+object, +other);
    case errorTag3:
      return object.name == other.name && object.message == other.message;
    case regexpTag4:
    case stringTag4:
      return object == other + "";
    case mapTag6:
      var convert = mapToArray_default;
    case setTag6:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
      convert || (convert = setToArray_default);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG2;
      stack.set(object, other);
      var result = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object);
      return result;
    case symbolTag4:
      if (symbolValueOf2) {
        return symbolValueOf2.call(object) == symbolValueOf2.call(other);
      }
  }
  return false;
}
var COMPARE_PARTIAL_FLAG2, COMPARE_UNORDERED_FLAG2, boolTag4, dateTag4, errorTag3, mapTag6, numberTag4, regexpTag4, setTag6, stringTag4, symbolTag4, arrayBufferTag4, dataViewTag5, symbolProto3, symbolValueOf2, equalByTag_default;
var init_equalByTag = __esm({
  "node_modules/lodash-es/_equalByTag.js"() {
    init_Symbol();
    init_Uint8Array();
    init_eq();
    init_equalArrays();
    init_mapToArray();
    init_setToArray();
    COMPARE_PARTIAL_FLAG2 = 1;
    COMPARE_UNORDERED_FLAG2 = 2;
    boolTag4 = "[object Boolean]";
    dateTag4 = "[object Date]";
    errorTag3 = "[object Error]";
    mapTag6 = "[object Map]";
    numberTag4 = "[object Number]";
    regexpTag4 = "[object RegExp]";
    setTag6 = "[object Set]";
    stringTag4 = "[object String]";
    symbolTag4 = "[object Symbol]";
    arrayBufferTag4 = "[object ArrayBuffer]";
    dataViewTag5 = "[object DataView]";
    symbolProto3 = Symbol_default ? Symbol_default.prototype : void 0;
    symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
    equalByTag_default = equalByTag;
  }
});

// node_modules/lodash-es/_equalObjects.js
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index5 = objLength;
  while (index5--) {
    var key2 = objProps[index5];
    if (!(isPartial ? key2 in other : hasOwnProperty12.call(other, key2))) {
      return false;
    }
  }
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index5 < objLength) {
    key2 = objProps[index5];
    var objValue = object[key2], othValue = other[key2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key2 == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object);
  stack["delete"](other);
  return result;
}
var COMPARE_PARTIAL_FLAG3, objectProto15, hasOwnProperty12, equalObjects_default;
var init_equalObjects = __esm({
  "node_modules/lodash-es/_equalObjects.js"() {
    init_getAllKeys();
    COMPARE_PARTIAL_FLAG3 = 1;
    objectProto15 = Object.prototype;
    hasOwnProperty12 = objectProto15.hasOwnProperty;
    equalObjects_default = equalObjects;
  }
});

// node_modules/lodash-es/_baseIsEqualDeep.js
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag3 : getTag_default(object), othTag = othIsArr ? arrayTag3 : getTag_default(other);
  objTag = objTag == argsTag4 ? objectTag5 : objTag;
  othTag = othTag == argsTag4 ? objectTag5 : othTag;
  var objIsObj = objTag == objectTag5, othIsObj = othTag == objectTag5, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer_default(object)) {
    if (!isBuffer_default(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack_default());
    return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
    var objIsWrapped = objIsObj && hasOwnProperty13.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty13.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack_default());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack_default());
  return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
}
var COMPARE_PARTIAL_FLAG4, argsTag4, arrayTag3, objectTag5, objectProto16, hasOwnProperty13, baseIsEqualDeep_default;
var init_baseIsEqualDeep = __esm({
  "node_modules/lodash-es/_baseIsEqualDeep.js"() {
    init_Stack();
    init_equalArrays();
    init_equalByTag();
    init_equalObjects();
    init_getTag();
    init_isArray();
    init_isBuffer();
    init_isTypedArray();
    COMPARE_PARTIAL_FLAG4 = 1;
    argsTag4 = "[object Arguments]";
    arrayTag3 = "[object Array]";
    objectTag5 = "[object Object]";
    objectProto16 = Object.prototype;
    hasOwnProperty13 = objectProto16.hasOwnProperty;
    baseIsEqualDeep_default = baseIsEqualDeep;
  }
});

// node_modules/lodash-es/_baseIsEqual.js
function baseIsEqual(value2, other, bitmask, customizer, stack) {
  if (value2 === other) {
    return true;
  }
  if (value2 == null || other == null || !isObjectLike_default(value2) && !isObjectLike_default(other)) {
    return value2 !== value2 && other !== other;
  }
  return baseIsEqualDeep_default(value2, other, bitmask, customizer, baseIsEqual, stack);
}
var baseIsEqual_default;
var init_baseIsEqual = __esm({
  "node_modules/lodash-es/_baseIsEqual.js"() {
    init_baseIsEqualDeep();
    init_isObjectLike();
    baseIsEqual_default = baseIsEqual;
  }
});

// node_modules/lodash-es/_baseIsMatch.js
function baseIsMatch(object, source, matchData, customizer) {
  var index5 = matchData.length, length = index5, noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index5--) {
    var data = matchData[index5];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index5 < length) {
    data = matchData[index5];
    var key2 = data[0], objValue = object[key2], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key2 in object)) {
        return false;
      }
    } else {
      var stack = new Stack_default();
      if (customizer) {
        var result = customizer(objValue, srcValue, key2, object, source, stack);
      }
      if (!(result === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
var COMPARE_PARTIAL_FLAG5, COMPARE_UNORDERED_FLAG3, baseIsMatch_default;
var init_baseIsMatch = __esm({
  "node_modules/lodash-es/_baseIsMatch.js"() {
    init_Stack();
    init_baseIsEqual();
    COMPARE_PARTIAL_FLAG5 = 1;
    COMPARE_UNORDERED_FLAG3 = 2;
    baseIsMatch_default = baseIsMatch;
  }
});

// node_modules/lodash-es/_isStrictComparable.js
function isStrictComparable(value2) {
  return value2 === value2 && !isObject_default(value2);
}
var isStrictComparable_default;
var init_isStrictComparable = __esm({
  "node_modules/lodash-es/_isStrictComparable.js"() {
    init_isObject();
    isStrictComparable_default = isStrictComparable;
  }
});

// node_modules/lodash-es/_getMatchData.js
function getMatchData(object) {
  var result = keys_default(object), length = result.length;
  while (length--) {
    var key2 = result[length], value2 = object[key2];
    result[length] = [key2, value2, isStrictComparable_default(value2)];
  }
  return result;
}
var getMatchData_default;
var init_getMatchData = __esm({
  "node_modules/lodash-es/_getMatchData.js"() {
    init_isStrictComparable();
    init_keys();
    getMatchData_default = getMatchData;
  }
});

// node_modules/lodash-es/_matchesStrictComparable.js
function matchesStrictComparable(key2, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key2] === srcValue && (srcValue !== void 0 || key2 in Object(object));
  };
}
var matchesStrictComparable_default;
var init_matchesStrictComparable = __esm({
  "node_modules/lodash-es/_matchesStrictComparable.js"() {
    matchesStrictComparable_default = matchesStrictComparable;
  }
});

// node_modules/lodash-es/_baseMatches.js
function baseMatches(source) {
  var matchData = getMatchData_default(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch_default(object, source, matchData);
  };
}
var baseMatches_default;
var init_baseMatches = __esm({
  "node_modules/lodash-es/_baseMatches.js"() {
    init_baseIsMatch();
    init_getMatchData();
    init_matchesStrictComparable();
    baseMatches_default = baseMatches;
  }
});

// node_modules/lodash-es/_baseHasIn.js
function baseHasIn(object, key2) {
  return object != null && key2 in Object(object);
}
var baseHasIn_default;
var init_baseHasIn = __esm({
  "node_modules/lodash-es/_baseHasIn.js"() {
    baseHasIn_default = baseHasIn;
  }
});

// node_modules/lodash-es/_hasPath.js
function hasPath(object, path3, hasFunc) {
  path3 = castPath_default(path3, object);
  var index5 = -1, length = path3.length, result = false;
  while (++index5 < length) {
    var key2 = toKey_default(path3[index5]);
    if (!(result = object != null && hasFunc(object, key2))) {
      break;
    }
    object = object[key2];
  }
  if (result || ++index5 != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength_default(length) && isIndex_default(key2, length) && (isArray_default(object) || isArguments_default(object));
}
var hasPath_default;
var init_hasPath = __esm({
  "node_modules/lodash-es/_hasPath.js"() {
    init_castPath();
    init_isArguments();
    init_isArray();
    init_isIndex();
    init_isLength();
    init_toKey();
    hasPath_default = hasPath;
  }
});

// node_modules/lodash-es/hasIn.js
function hasIn(object, path3) {
  return object != null && hasPath_default(object, path3, baseHasIn_default);
}
var hasIn_default;
var init_hasIn = __esm({
  "node_modules/lodash-es/hasIn.js"() {
    init_baseHasIn();
    init_hasPath();
    hasIn_default = hasIn;
  }
});

// node_modules/lodash-es/_baseMatchesProperty.js
function baseMatchesProperty(path3, srcValue) {
  if (isKey_default(path3) && isStrictComparable_default(srcValue)) {
    return matchesStrictComparable_default(toKey_default(path3), srcValue);
  }
  return function(object) {
    var objValue = get_default(object, path3);
    return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path3) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
  };
}
var COMPARE_PARTIAL_FLAG6, COMPARE_UNORDERED_FLAG4, baseMatchesProperty_default;
var init_baseMatchesProperty = __esm({
  "node_modules/lodash-es/_baseMatchesProperty.js"() {
    init_baseIsEqual();
    init_get();
    init_hasIn();
    init_isKey();
    init_isStrictComparable();
    init_matchesStrictComparable();
    init_toKey();
    COMPARE_PARTIAL_FLAG6 = 1;
    COMPARE_UNORDERED_FLAG4 = 2;
    baseMatchesProperty_default = baseMatchesProperty;
  }
});

// node_modules/lodash-es/_baseProperty.js
function baseProperty(key2) {
  return function(object) {
    return object == null ? void 0 : object[key2];
  };
}
var baseProperty_default;
var init_baseProperty = __esm({
  "node_modules/lodash-es/_baseProperty.js"() {
    baseProperty_default = baseProperty;
  }
});

// node_modules/lodash-es/_basePropertyDeep.js
function basePropertyDeep(path3) {
  return function(object) {
    return baseGet_default(object, path3);
  };
}
var basePropertyDeep_default;
var init_basePropertyDeep = __esm({
  "node_modules/lodash-es/_basePropertyDeep.js"() {
    init_baseGet();
    basePropertyDeep_default = basePropertyDeep;
  }
});

// node_modules/lodash-es/property.js
function property(path3) {
  return isKey_default(path3) ? baseProperty_default(toKey_default(path3)) : basePropertyDeep_default(path3);
}
var property_default;
var init_property = __esm({
  "node_modules/lodash-es/property.js"() {
    init_baseProperty();
    init_basePropertyDeep();
    init_isKey();
    init_toKey();
    property_default = property;
  }
});

// node_modules/lodash-es/_baseIteratee.js
function baseIteratee(value2) {
  if (typeof value2 == "function") {
    return value2;
  }
  if (value2 == null) {
    return identity_default;
  }
  if (typeof value2 == "object") {
    return isArray_default(value2) ? baseMatchesProperty_default(value2[0], value2[1]) : baseMatches_default(value2);
  }
  return property_default(value2);
}
var baseIteratee_default;
var init_baseIteratee = __esm({
  "node_modules/lodash-es/_baseIteratee.js"() {
    init_baseMatches();
    init_baseMatchesProperty();
    init_identity();
    init_isArray();
    init_property();
    baseIteratee_default = baseIteratee;
  }
});

// node_modules/lodash-es/_arrayAggregator.js
function arrayAggregator(array4, setter, iteratee, accumulator) {
  var index5 = -1, length = array4 == null ? 0 : array4.length;
  while (++index5 < length) {
    var value2 = array4[index5];
    setter(accumulator, value2, iteratee(value2), array4);
  }
  return accumulator;
}
var arrayAggregator_default;
var init_arrayAggregator = __esm({
  "node_modules/lodash-es/_arrayAggregator.js"() {
    arrayAggregator_default = arrayAggregator;
  }
});

// node_modules/lodash-es/_createBaseFor.js
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index5 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
    while (length--) {
      var key2 = props[fromRight ? length : ++index5];
      if (iteratee(iterable[key2], key2, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
var createBaseFor_default;
var init_createBaseFor = __esm({
  "node_modules/lodash-es/_createBaseFor.js"() {
    createBaseFor_default = createBaseFor;
  }
});

// node_modules/lodash-es/_baseFor.js
var baseFor, baseFor_default;
var init_baseFor = __esm({
  "node_modules/lodash-es/_baseFor.js"() {
    init_createBaseFor();
    baseFor = createBaseFor_default();
    baseFor_default = baseFor;
  }
});

// node_modules/lodash-es/_baseForOwn.js
function baseForOwn(object, iteratee) {
  return object && baseFor_default(object, iteratee, keys_default);
}
var baseForOwn_default;
var init_baseForOwn = __esm({
  "node_modules/lodash-es/_baseForOwn.js"() {
    init_baseFor();
    init_keys();
    baseForOwn_default = baseForOwn;
  }
});

// node_modules/lodash-es/_createBaseEach.js
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike_default(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length, index5 = fromRight ? length : -1, iterable = Object(collection);
    while (fromRight ? index5-- : ++index5 < length) {
      if (iteratee(iterable[index5], index5, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}
var createBaseEach_default;
var init_createBaseEach = __esm({
  "node_modules/lodash-es/_createBaseEach.js"() {
    init_isArrayLike();
    createBaseEach_default = createBaseEach;
  }
});

// node_modules/lodash-es/_baseEach.js
var baseEach, baseEach_default;
var init_baseEach = __esm({
  "node_modules/lodash-es/_baseEach.js"() {
    init_baseForOwn();
    init_createBaseEach();
    baseEach = createBaseEach_default(baseForOwn_default);
    baseEach_default = baseEach;
  }
});

// node_modules/lodash-es/_baseAggregator.js
function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach_default(collection, function(value2, key2, collection2) {
    setter(accumulator, value2, iteratee(value2), collection2);
  });
  return accumulator;
}
var baseAggregator_default;
var init_baseAggregator = __esm({
  "node_modules/lodash-es/_baseAggregator.js"() {
    init_baseEach();
    baseAggregator_default = baseAggregator;
  }
});

// node_modules/lodash-es/_createAggregator.js
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray_default(collection) ? arrayAggregator_default : baseAggregator_default, accumulator = initializer ? initializer() : {};
    return func(collection, setter, baseIteratee_default(iteratee, 2), accumulator);
  };
}
var createAggregator_default;
var init_createAggregator = __esm({
  "node_modules/lodash-es/_createAggregator.js"() {
    init_arrayAggregator();
    init_baseAggregator();
    init_baseIteratee();
    init_isArray();
    createAggregator_default = createAggregator;
  }
});

// node_modules/lodash-es/now.js
var now, now_default;
var init_now = __esm({
  "node_modules/lodash-es/now.js"() {
    init_root();
    now = function() {
      return root_default.Date.now();
    };
    now_default = now;
  }
});

// node_modules/lodash-es/debounce.js
function debounce(func, wait, options2) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT2);
  }
  wait = toNumber_default(wait) || 0;
  if (isObject_default(options2)) {
    leading = !!options2.leading;
    maxing = "maxWait" in options2;
    maxWait = maxing ? nativeMax2(toNumber_default(options2.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options2 ? !!options2.trailing : trailing;
  }
  function invokeFunc(time2) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time2;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time2) {
    lastInvokeTime = time2;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time2) : result;
  }
  function remainingWait(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time2 = now_default();
    if (shouldInvoke(time2)) {
      return trailingEdge(time2);
    }
    timerId = setTimeout(timerExpired, remainingWait(time2));
  }
  function trailingEdge(time2) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time2);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now_default());
  }
  function debounced() {
    var time2 = now_default(), isInvoking = shouldInvoke(time2);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time2;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var FUNC_ERROR_TEXT2, nativeMax2, nativeMin, debounce_default;
var init_debounce = __esm({
  "node_modules/lodash-es/debounce.js"() {
    init_isObject();
    init_now();
    init_toNumber();
    FUNC_ERROR_TEXT2 = "Expected a function";
    nativeMax2 = Math.max;
    nativeMin = Math.min;
    debounce_default = debounce;
  }
});

// node_modules/lodash-es/_assignMergeValue.js
function assignMergeValue(object, key2, value2) {
  if (value2 !== void 0 && !eq_default(object[key2], value2) || value2 === void 0 && !(key2 in object)) {
    baseAssignValue_default(object, key2, value2);
  }
}
var assignMergeValue_default;
var init_assignMergeValue = __esm({
  "node_modules/lodash-es/_assignMergeValue.js"() {
    init_baseAssignValue();
    init_eq();
    assignMergeValue_default = assignMergeValue;
  }
});

// node_modules/lodash-es/isArrayLikeObject.js
function isArrayLikeObject(value2) {
  return isObjectLike_default(value2) && isArrayLike_default(value2);
}
var isArrayLikeObject_default;
var init_isArrayLikeObject = __esm({
  "node_modules/lodash-es/isArrayLikeObject.js"() {
    init_isArrayLike();
    init_isObjectLike();
    isArrayLikeObject_default = isArrayLikeObject;
  }
});

// node_modules/lodash-es/_safeGet.js
function safeGet(object, key2) {
  if (key2 === "constructor" && typeof object[key2] === "function") {
    return;
  }
  if (key2 == "__proto__") {
    return;
  }
  return object[key2];
}
var safeGet_default;
var init_safeGet = __esm({
  "node_modules/lodash-es/_safeGet.js"() {
    safeGet_default = safeGet;
  }
});

// node_modules/lodash-es/toPlainObject.js
function toPlainObject(value2) {
  return copyObject_default(value2, keysIn_default(value2));
}
var toPlainObject_default;
var init_toPlainObject = __esm({
  "node_modules/lodash-es/toPlainObject.js"() {
    init_copyObject();
    init_keysIn();
    toPlainObject_default = toPlainObject;
  }
});

// node_modules/lodash-es/_baseMergeDeep.js
function baseMergeDeep(object, source, key2, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet_default(object, key2), srcValue = safeGet_default(source, key2), stacked = stack.get(srcValue);
  if (stacked) {
    assignMergeValue_default(object, key2, stacked);
    return;
  }
  var newValue = customizer ? customizer(objValue, srcValue, key2 + "", object, source, stack) : void 0;
  var isCommon = newValue === void 0;
  if (isCommon) {
    var isArr = isArray_default(srcValue), isBuff = !isArr && isBuffer_default(srcValue), isTyped = !isArr && !isBuff && isTypedArray_default(srcValue);
    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray_default(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject_default(objValue)) {
        newValue = copyArray_default(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer_default(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray_default(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject_default(srcValue) || isArguments_default(srcValue)) {
      newValue = objValue;
      if (isArguments_default(objValue)) {
        newValue = toPlainObject_default(objValue);
      } else if (!isObject_default(objValue) || isFunction_default(objValue)) {
        newValue = initCloneObject_default(srcValue);
      }
    } else {
      isCommon = false;
    }
  }
  if (isCommon) {
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack["delete"](srcValue);
  }
  assignMergeValue_default(object, key2, newValue);
}
var baseMergeDeep_default;
var init_baseMergeDeep = __esm({
  "node_modules/lodash-es/_baseMergeDeep.js"() {
    init_assignMergeValue();
    init_cloneBuffer();
    init_cloneTypedArray();
    init_copyArray();
    init_initCloneObject();
    init_isArguments();
    init_isArray();
    init_isArrayLikeObject();
    init_isBuffer();
    init_isFunction();
    init_isObject();
    init_isPlainObject();
    init_isTypedArray();
    init_safeGet();
    init_toPlainObject();
    baseMergeDeep_default = baseMergeDeep;
  }
});

// node_modules/lodash-es/_baseMerge.js
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor_default(source, function(srcValue, key2) {
    stack || (stack = new Stack_default());
    if (isObject_default(srcValue)) {
      baseMergeDeep_default(object, source, key2, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet_default(object, key2), srcValue, key2 + "", object, source, stack) : void 0;
      if (newValue === void 0) {
        newValue = srcValue;
      }
      assignMergeValue_default(object, key2, newValue);
    }
  }, keysIn_default);
}
var baseMerge_default;
var init_baseMerge = __esm({
  "node_modules/lodash-es/_baseMerge.js"() {
    init_Stack();
    init_assignMergeValue();
    init_baseFor();
    init_baseMergeDeep();
    init_isObject();
    init_keysIn();
    init_safeGet();
    baseMerge_default = baseMerge;
  }
});

// node_modules/lodash-es/_arrayIncludesWith.js
function arrayIncludesWith(array4, value2, comparator) {
  var index5 = -1, length = array4 == null ? 0 : array4.length;
  while (++index5 < length) {
    if (comparator(value2, array4[index5])) {
      return true;
    }
  }
  return false;
}
var arrayIncludesWith_default;
var init_arrayIncludesWith = __esm({
  "node_modules/lodash-es/_arrayIncludesWith.js"() {
    arrayIncludesWith_default = arrayIncludesWith;
  }
});

// node_modules/lodash-es/last.js
function last(array4) {
  var length = array4 == null ? 0 : array4.length;
  return length ? array4[length - 1] : void 0;
}
var last_default;
var init_last = __esm({
  "node_modules/lodash-es/last.js"() {
    last_default = last;
  }
});

// node_modules/lodash-es/_baseMap.js
function baseMap(collection, iteratee) {
  var index5 = -1, result = isArrayLike_default(collection) ? Array(collection.length) : [];
  baseEach_default(collection, function(value2, key2, collection2) {
    result[++index5] = iteratee(value2, key2, collection2);
  });
  return result;
}
var baseMap_default;
var init_baseMap = __esm({
  "node_modules/lodash-es/_baseMap.js"() {
    init_baseEach();
    init_isArrayLike();
    baseMap_default = baseMap;
  }
});

// node_modules/lodash-es/map.js
function map(collection, iteratee) {
  var func = isArray_default(collection) ? arrayMap_default : baseMap_default;
  return func(collection, baseIteratee_default(iteratee, 3));
}
var map_default;
var init_map = __esm({
  "node_modules/lodash-es/map.js"() {
    init_arrayMap();
    init_baseIteratee();
    init_baseMap();
    init_isArray();
    map_default = map;
  }
});

// node_modules/lodash-es/flatMapDeep.js
function flatMapDeep(collection, iteratee) {
  return baseFlatten_default(map_default(collection, iteratee), INFINITY3);
}
var INFINITY3, flatMapDeep_default;
var init_flatMapDeep = __esm({
  "node_modules/lodash-es/flatMapDeep.js"() {
    init_baseFlatten();
    init_map();
    INFINITY3 = 1 / 0;
    flatMapDeep_default = flatMapDeep;
  }
});

// node_modules/lodash-es/fromPairs.js
function fromPairs(pairs) {
  var index5 = -1, length = pairs == null ? 0 : pairs.length, result = {};
  while (++index5 < length) {
    var pair = pairs[index5];
    result[pair[0]] = pair[1];
  }
  return result;
}
var fromPairs_default;
var init_fromPairs = __esm({
  "node_modules/lodash-es/fromPairs.js"() {
    fromPairs_default = fromPairs;
  }
});

// node_modules/lodash-es/groupBy.js
var objectProto17, hasOwnProperty14, groupBy, groupBy_default;
var init_groupBy = __esm({
  "node_modules/lodash-es/groupBy.js"() {
    init_baseAssignValue();
    init_createAggregator();
    objectProto17 = Object.prototype;
    hasOwnProperty14 = objectProto17.hasOwnProperty;
    groupBy = createAggregator_default(function(result, value2, key2) {
      if (hasOwnProperty14.call(result, key2)) {
        result[key2].push(value2);
      } else {
        baseAssignValue_default(result, key2, [value2]);
      }
    });
    groupBy_default = groupBy;
  }
});

// node_modules/lodash-es/isEmpty.js
function isEmpty(value2) {
  if (value2 == null) {
    return true;
  }
  if (isArrayLike_default(value2) && (isArray_default(value2) || typeof value2 == "string" || typeof value2.splice == "function" || isBuffer_default(value2) || isTypedArray_default(value2) || isArguments_default(value2))) {
    return !value2.length;
  }
  var tag = getTag_default(value2);
  if (tag == mapTag7 || tag == setTag7) {
    return !value2.size;
  }
  if (isPrototype_default(value2)) {
    return !baseKeys_default(value2).length;
  }
  for (var key2 in value2) {
    if (hasOwnProperty15.call(value2, key2)) {
      return false;
    }
  }
  return true;
}
var mapTag7, setTag7, objectProto18, hasOwnProperty15, isEmpty_default;
var init_isEmpty = __esm({
  "node_modules/lodash-es/isEmpty.js"() {
    init_baseKeys();
    init_getTag();
    init_isArguments();
    init_isArray();
    init_isArrayLike();
    init_isBuffer();
    init_isPrototype();
    init_isTypedArray();
    mapTag7 = "[object Map]";
    setTag7 = "[object Set]";
    objectProto18 = Object.prototype;
    hasOwnProperty15 = objectProto18.hasOwnProperty;
    isEmpty_default = isEmpty;
  }
});

// node_modules/lodash-es/isEqual.js
function isEqual(value2, other) {
  return baseIsEqual_default(value2, other);
}
var isEqual_default;
var init_isEqual = __esm({
  "node_modules/lodash-es/isEqual.js"() {
    init_baseIsEqual();
    isEqual_default = isEqual;
  }
});

// node_modules/lodash-es/kebabCase.js
var kebabCase, kebabCase_default;
var init_kebabCase = __esm({
  "node_modules/lodash-es/kebabCase.js"() {
    init_createCompounder();
    kebabCase = createCompounder_default(function(result, word, index5) {
      return result + (index5 ? "-" : "") + word.toLowerCase();
    });
    kebabCase_default = kebabCase;
  }
});

// node_modules/lodash-es/merge.js
var merge, merge_default;
var init_merge = __esm({
  "node_modules/lodash-es/merge.js"() {
    init_baseMerge();
    init_createAssigner();
    merge = createAssigner_default(function(object, source, srcIndex) {
      baseMerge_default(object, source, srcIndex);
    });
    merge_default = merge;
  }
});

// node_modules/lodash-es/_baseSome.js
function baseSome(collection, predicate) {
  var result;
  baseEach_default(collection, function(value2, index5, collection2) {
    result = predicate(value2, index5, collection2);
    return !result;
  });
  return !!result;
}
var baseSome_default;
var init_baseSome = __esm({
  "node_modules/lodash-es/_baseSome.js"() {
    init_baseEach();
    baseSome_default = baseSome;
  }
});

// node_modules/lodash-es/some.js
function some(collection, predicate, guard) {
  var func = isArray_default(collection) ? arraySome_default : baseSome_default;
  if (guard && isIterateeCall_default(collection, predicate, guard)) {
    predicate = void 0;
  }
  return func(collection, baseIteratee_default(predicate, 3));
}
var some_default;
var init_some = __esm({
  "node_modules/lodash-es/some.js"() {
    init_arraySome();
    init_baseIteratee();
    init_baseSome();
    init_isArray();
    init_isIterateeCall();
    some_default = some;
  }
});

// node_modules/lodash-es/_createSet.js
var INFINITY4, createSet, createSet_default;
var init_createSet = __esm({
  "node_modules/lodash-es/_createSet.js"() {
    init_Set();
    init_noop();
    init_setToArray();
    INFINITY4 = 1 / 0;
    createSet = !(Set_default && 1 / setToArray_default(new Set_default([, -0]))[1] == INFINITY4) ? noop_default : function(values) {
      return new Set_default(values);
    };
    createSet_default = createSet;
  }
});

// node_modules/lodash-es/_baseUniq.js
function baseUniq(array4, iteratee, comparator) {
  var index5 = -1, includes = arrayIncludes_default, length = array4.length, isCommon = true, result = [], seen = result;
  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith_default;
  } else if (length >= LARGE_ARRAY_SIZE2) {
    var set3 = iteratee ? null : createSet_default(array4);
    if (set3) {
      return setToArray_default(set3);
    }
    isCommon = false;
    includes = cacheHas_default;
    seen = new SetCache_default();
  } else {
    seen = iteratee ? [] : result;
  }
  outer:
    while (++index5 < length) {
      var value2 = array4[index5], computed = iteratee ? iteratee(value2) : value2;
      value2 = comparator || value2 !== 0 ? value2 : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value2);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value2);
      }
    }
  return result;
}
var LARGE_ARRAY_SIZE2, baseUniq_default;
var init_baseUniq = __esm({
  "node_modules/lodash-es/_baseUniq.js"() {
    init_SetCache();
    init_arrayIncludes();
    init_arrayIncludesWith();
    init_cacheHas();
    init_createSet();
    init_setToArray();
    LARGE_ARRAY_SIZE2 = 200;
    baseUniq_default = baseUniq;
  }
});

// node_modules/lodash-es/unionBy.js
var unionBy, unionBy_default;
var init_unionBy = __esm({
  "node_modules/lodash-es/unionBy.js"() {
    init_baseFlatten();
    init_baseIteratee();
    init_baseRest();
    init_baseUniq();
    init_isArrayLikeObject();
    init_last();
    unionBy = baseRest_default(function(arrays) {
      var iteratee = last_default(arrays);
      if (isArrayLikeObject_default(iteratee)) {
        iteratee = void 0;
      }
      return baseUniq_default(baseFlatten_default(arrays, 1, isArrayLikeObject_default, true), baseIteratee_default(iteratee, 2));
    });
    unionBy_default = unionBy;
  }
});

// node_modules/lodash-es/uniq.js
function uniq(array4) {
  return array4 && array4.length ? baseUniq_default(array4) : [];
}
var uniq_default;
var init_uniq = __esm({
  "node_modules/lodash-es/uniq.js"() {
    init_baseUniq();
    uniq_default = uniq;
  }
});

// node_modules/lodash-es/lodash.js
var init_lodash = __esm({
  "node_modules/lodash-es/lodash.js"() {
    init_camelCase();
    init_clamp();
    init_cloneDeep();
    init_debounce();
    init_flatMapDeep();
    init_flatten();
    init_fromPairs();
    init_get();
    init_groupBy();
    init_isEmpty();
    init_isEqual();
    init_kebabCase();
    init_merge();
    init_some();
    init_unionBy();
    init_uniq();
  }
});

// node_modules/d3-selection/src/namespaces.js
var xhtml, namespaces_default;
var init_namespaces = __esm({
  "node_modules/d3-selection/src/namespaces.js"() {
    xhtml = "http://www.w3.org/1999/xhtml";
    namespaces_default = {
      svg: "http://www.w3.org/2000/svg",
      xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };
  }
});

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}
var init_namespace = __esm({
  "node_modules/d3-selection/src/namespace.js"() {
    init_namespaces();
  }
});

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
var init_creator = __esm({
  "node_modules/d3-selection/src/creator.js"() {
    init_namespace();
    init_namespaces();
  }
});

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}
var init_selector = __esm({
  "node_modules/d3-selection/src/selector.js"() {
  }
});

// node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_select = __esm({
  "node_modules/d3-selection/src/selection/select.js"() {
    init_selection();
    init_selector();
  }
});

// node_modules/d3-selection/src/array.js
function array2(x3) {
  return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
}
var init_array = __esm({
  "node_modules/d3-selection/src/array.js"() {
  }
});

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}
var init_selectorAll = __esm({
  "node_modules/d3-selection/src/selectorAll.js"() {
  }
});

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array2(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}
var init_selectAll = __esm({
  "node_modules/d3-selection/src/selection/selectAll.js"() {
    init_selection();
    init_array();
    init_selectorAll();
  }
});

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}
var init_matcher = __esm({
  "node_modules/d3-selection/src/matcher.js"() {
  }
});

// node_modules/d3-selection/src/selection/selectChild.js
function childFind(match2) {
  return function() {
    return find.call(this.children, match2);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match2) {
  return this.select(match2 == null ? childFirst : childFind(typeof match2 === "function" ? match2 : childMatcher(match2)));
}
var find;
var init_selectChild = __esm({
  "node_modules/d3-selection/src/selection/selectChild.js"() {
    init_matcher();
    find = Array.prototype.find;
  }
});

// node_modules/d3-selection/src/selection/selectChildren.js
function children() {
  return Array.from(this.children);
}
function childrenFilter(match2) {
  return function() {
    return filter.call(this.children, match2);
  };
}
function selectChildren_default(match2) {
  return this.selectAll(match2 == null ? children : childrenFilter(typeof match2 === "function" ? match2 : childMatcher(match2)));
}
var filter;
var init_selectChildren = __esm({
  "node_modules/d3-selection/src/selection/selectChildren.js"() {
    init_matcher();
    filter = Array.prototype.filter;
  }
});

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match2) {
  if (typeof match2 !== "function")
    match2 = matcher_default(match2);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match2.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_filter = __esm({
  "node_modules/d3-selection/src/selection/filter.js"() {
    init_selection();
    init_matcher();
  }
});

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}
var init_sparse = __esm({
  "node_modules/d3-selection/src/selection/sparse.js"() {
  }
});

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
var init_enter = __esm({
  "node_modules/d3-selection/src/selection/enter.js"() {
    init_sparse();
    init_selection();
    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
      },
      insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
      },
      querySelector: function(selector) {
        return this._parent.querySelector(selector);
      },
      querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
      }
    };
  }
});

// node_modules/d3-selection/src/constant.js
function constant_default2(x3) {
  return function() {
    return x3;
  };
}
var init_constant2 = __esm({
  "node_modules/d3-selection/src/constant.js"() {
  }
});

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key2) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key2.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key2.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value2, key2) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key2 ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value2 !== "function")
    value2 = constant_default2(value2);
  for (var m2 = groups.length, update = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value2.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key2);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}
var init_data = __esm({
  "node_modules/d3-selection/src/selection/data.js"() {
    init_selection();
    init_enter();
    init_constant2();
  }
});

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}
var init_exit = __esm({
  "node_modules/d3-selection/src/selection/exit.js"() {
    init_sparse();
    init_selection();
  }
});

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
var init_join = __esm({
  "node_modules/d3-selection/src/selection/join.js"() {
  }
});

// node_modules/d3-selection/src/selection/merge.js
function merge_default2(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge2 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge2[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}
var init_merge2 = __esm({
  "node_modules/d3-selection/src/selection/merge.js"() {
    init_selection();
  }
});

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m2 = groups.length; ++j < m2; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}
var init_order = __esm({
  "node_modules/d3-selection/src/selection/order.js"() {
  }
});

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups = this._groups, m2 = groups.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}
var init_sort = __esm({
  "node_modules/d3-selection/src/selection/sort.js"() {
    init_selection();
  }
});

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
var init_call = __esm({
  "node_modules/d3-selection/src/selection/call.js"() {
  }
});

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}
var init_nodes = __esm({
  "node_modules/d3-selection/src/selection/nodes.js"() {
  }
});

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}
var init_node = __esm({
  "node_modules/d3-selection/src/selection/node.js"() {
  }
});

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}
var init_size = __esm({
  "node_modules/d3-selection/src/selection/size.js"() {
  }
});

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}
var init_empty = __esm({
  "node_modules/d3-selection/src/selection/empty.js"() {
  }
});

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}
var init_each = __esm({
  "node_modules/d3-selection/src/selection/each.js"() {
  }
});

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value2) {
  return function() {
    this.setAttribute(name, value2);
  };
}
function attrConstantNS(fullname, value2) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value2);
  };
}
function attrFunction(name, value2) {
  return function() {
    var v = value2.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value2) {
  return function() {
    var v = value2.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value2) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value2 == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value2 === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value2));
}
var init_attr = __esm({
  "node_modules/d3-selection/src/selection/attr.js"() {
    init_namespace();
  }
});

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}
var init_window = __esm({
  "node_modules/d3-selection/src/window.js"() {
  }
});

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value2, priority) {
  return function() {
    this.style.setProperty(name, value2, priority);
  };
}
function styleFunction(name, value2, priority) {
  return function() {
    var v = value2.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value2, priority) {
  return arguments.length > 1 ? this.each((value2 == null ? styleRemove : typeof value2 === "function" ? styleFunction : styleConstant)(name, value2, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}
var init_style = __esm({
  "node_modules/d3-selection/src/selection/style.js"() {
    init_window();
  }
});

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value2) {
  return function() {
    this[name] = value2;
  };
}
function propertyFunction(name, value2) {
  return function() {
    var v = value2.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function property_default2(name, value2) {
  return arguments.length > 1 ? this.each((value2 == null ? propertyRemove : typeof value2 === "function" ? propertyFunction : propertyConstant)(name, value2)) : this.node()[name];
}
var init_property2 = __esm({
  "node_modules/d3-selection/src/selection/property.js"() {
  }
});

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value2) {
  return function() {
    (value2.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value2) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value2 === "function" ? classedFunction : value2 ? classedTrue : classedFalse)(names, value2));
}
var init_classed = __esm({
  "node_modules/d3-selection/src/selection/classed.js"() {
    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };
  }
});

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value2) {
  return function() {
    this.textContent = value2;
  };
}
function textFunction(value2) {
  return function() {
    var v = value2.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value2) {
  return arguments.length ? this.each(value2 == null ? textRemove : (typeof value2 === "function" ? textFunction : textConstant)(value2)) : this.node().textContent;
}
var init_text = __esm({
  "node_modules/d3-selection/src/selection/text.js"() {
  }
});

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value2) {
  return function() {
    this.innerHTML = value2;
  };
}
function htmlFunction(value2) {
  return function() {
    var v = value2.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value2) {
  return arguments.length ? this.each(value2 == null ? htmlRemove : (typeof value2 === "function" ? htmlFunction : htmlConstant)(value2)) : this.node().innerHTML;
}
var init_html = __esm({
  "node_modules/d3-selection/src/selection/html.js"() {
  }
});

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}
var init_raise = __esm({
  "node_modules/d3-selection/src/selection/raise.js"() {
  }
});

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}
var init_lower = __esm({
  "node_modules/d3-selection/src/selection/lower.js"() {
  }
});

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}
var init_append = __esm({
  "node_modules/d3-selection/src/selection/append.js"() {
    init_creator();
  }
});

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
var init_insert = __esm({
  "node_modules/d3-selection/src/selection/insert.js"() {
    init_creator();
    init_selector();
  }
});

// node_modules/d3-selection/src/selection/remove.js
function remove2() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove2);
}
var init_remove = __esm({
  "node_modules/d3-selection/src/selection/remove.js"() {
  }
});

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
var init_clone = __esm({
  "node_modules/d3-selection/src/selection/clone.js"() {
  }
});

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value2) {
  return arguments.length ? this.property("__data__", value2) : this.node().__data__;
}
var init_datum = __esm({
  "node_modules/d3-selection/src/selection/datum.js"() {
  }
});

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on2 = this.__on;
    if (!on2)
      return;
    for (var j = 0, i = -1, m2 = on2.length, o; j < m2; ++j) {
      if (o = on2[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on2[++i] = o;
      }
    }
    if (++i)
      on2.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value2, options2) {
  return function() {
    var on2 = this.__on, o, listener = contextListener(value2);
    if (on2)
      for (var j = 0, m2 = on2.length; j < m2; ++j) {
        if ((o = on2[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options2);
          o.value = value2;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options2);
    o = { type: typename.type, name: typename.name, value: value2, listener, options: options2 };
    if (!on2)
      this.__on = [o];
    else
      on2.push(o);
  };
}
function on_default(typename, value2, options2) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on2 = this.node().__on;
    if (on2)
      for (var j = 0, m2 = on2.length, o; j < m2; ++j) {
        for (i = 0, o = on2[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on2 = value2 ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on2(typenames[i], value2, options2));
  return this;
}
var init_on = __esm({
  "node_modules/d3-selection/src/selection/on.js"() {
  }
});

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}
var init_dispatch = __esm({
  "node_modules/d3-selection/src/selection/dispatch.js"() {
    init_window();
  }
});

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}
var init_iterator = __esm({
  "node_modules/d3-selection/src/selection/iterator.js"() {
  }
});

// node_modules/d3-selection/src/selection/index.js
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root2);
}
function selection_selection() {
  return this;
}
var root2, selection_default;
var init_selection = __esm({
  "node_modules/d3-selection/src/selection/index.js"() {
    init_select();
    init_selectAll();
    init_selectChild();
    init_selectChildren();
    init_filter();
    init_data();
    init_enter();
    init_exit();
    init_join();
    init_merge2();
    init_order();
    init_sort();
    init_call();
    init_nodes();
    init_node();
    init_size();
    init_empty();
    init_each();
    init_attr();
    init_style();
    init_property2();
    init_classed();
    init_text();
    init_html();
    init_raise();
    init_lower();
    init_append();
    init_insert();
    init_remove();
    init_clone();
    init_datum();
    init_on();
    init_dispatch();
    init_iterator();
    root2 = [null];
    Selection.prototype = selection.prototype = {
      constructor: Selection,
      select: select_default,
      selectAll: selectAll_default,
      selectChild: selectChild_default,
      selectChildren: selectChildren_default,
      filter: filter_default,
      data: data_default,
      enter: enter_default,
      exit: exit_default,
      join: join_default,
      merge: merge_default2,
      selection: selection_selection,
      order: order_default,
      sort: sort_default,
      call: call_default,
      nodes: nodes_default,
      node: node_default,
      size: size_default,
      empty: empty_default,
      each: each_default,
      attr: attr_default,
      style: style_default,
      property: property_default2,
      classed: classed_default,
      text: text_default,
      html: html_default,
      raise: raise_default,
      lower: lower_default,
      append: append_default,
      insert: insert_default,
      remove: remove_default,
      clone: clone_default,
      datum: datum_default,
      on: on_default,
      dispatch: dispatch_default,
      [Symbol.iterator]: iterator_default
    };
    selection_default = selection;
  }
});

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root2);
}
var init_select2 = __esm({
  "node_modules/d3-selection/src/select.js"() {
    init_selection();
  }
});

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}
var init_sourceEvent = __esm({
  "node_modules/d3-selection/src/sourceEvent.js"() {
  }
});

// node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point6 = svg.createSVGPoint();
      point6.x = event.clientX, point6.y = event.clientY;
      point6 = point6.matrixTransform(node.getScreenCTM().inverse());
      return [point6.x, point6.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}
var init_pointer = __esm({
  "node_modules/d3-selection/src/pointer.js"() {
    init_sourceEvent();
  }
});

// node_modules/d3-selection/src/index.js
var init_src2 = __esm({
  "node_modules/d3-selection/src/index.js"() {
    init_matcher();
    init_namespace();
    init_pointer();
    init_select2();
    init_selection();
    init_selector();
    init_selectorAll();
    init_style();
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatDistance/index.js
var require_formatDistance = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatDistance/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = formatDistance2;
    var formatDistanceLocale2 = {
      lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
      },
      xSeconds: {
        one: "1 second",
        other: "{{count}} seconds"
      },
      halfAMinute: "half a minute",
      lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
      },
      xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "about 1 hour",
        other: "about {{count}} hours"
      },
      xHours: {
        one: "1 hour",
        other: "{{count}} hours"
      },
      xDays: {
        one: "1 day",
        other: "{{count}} days"
      },
      aboutXMonths: {
        one: "about 1 month",
        other: "about {{count}} months"
      },
      xMonths: {
        one: "1 month",
        other: "{{count}} months"
      },
      aboutXYears: {
        one: "about 1 year",
        other: "about {{count}} years"
      },
      xYears: {
        one: "1 year",
        other: "{{count}} years"
      },
      overXYears: {
        one: "over 1 year",
        other: "over {{count}} years"
      },
      almostXYears: {
        one: "almost 1 year",
        other: "almost {{count}} years"
      }
    };
    function formatDistance2(token, count3, options2) {
      options2 = options2 || {};
      var result;
      if (typeof formatDistanceLocale2[token] === "string") {
        result = formatDistanceLocale2[token];
      } else if (count3 === 1) {
        result = formatDistanceLocale2[token].one;
      } else {
        result = formatDistanceLocale2[token].other.replace("{{count}}", count3);
      }
      if (options2.addSuffix) {
        if (options2.comparison > 0) {
          return "in " + result;
        } else {
          return result + " ago";
        }
      }
      return result;
    }
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/_lib/buildFormatLongFn/index.js
var require_buildFormatLongFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildFormatLongFn/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = buildFormatLongFn2;
    function buildFormatLongFn2(args) {
      return function(dirtyOptions) {
        var options2 = dirtyOptions || {};
        var width = options2.width ? String(options2.width) : args.defaultWidth;
        var format3 = args.formats[width] || args.formats[args.defaultWidth];
        return format3;
      };
    }
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatLong/index.js
var require_formatLong = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatLong/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = void 0;
    var _index = _interopRequireDefault(require_buildFormatLongFn());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var dateFormats2 = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats2 = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats2 = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong2 = {
      date: (0, _index.default)({
        formats: dateFormats2,
        defaultWidth: "full"
      }),
      time: (0, _index.default)({
        formats: timeFormats2,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats2,
        defaultWidth: "full"
      })
    };
    var _default = formatLong2;
    exports3.default = _default;
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatRelative/index.js
var require_formatRelative = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatRelative/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = formatRelative2;
    var formatRelativeLocale2 = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: "P"
    };
    function formatRelative2(token, _date, _baseDate, _options) {
      return formatRelativeLocale2[token];
    }
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/_lib/buildLocalizeFn/index.js
var require_buildLocalizeFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildLocalizeFn/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = buildLocalizeFn2;
    function buildLocalizeFn2(args) {
      return function(dirtyIndex, dirtyOptions) {
        var options2 = dirtyOptions || {};
        var context = options2.context ? String(options2.context) : "standalone";
        var valuesArray;
        if (context === "formatting" && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options2.width ? String(options2.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;
          var _width = options2.width ? String(options2.width) : args.defaultWidth;
          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index5 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        return valuesArray[index5];
      };
    }
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/localize/index.js
var require_localize = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/localize/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = void 0;
    var _index = _interopRequireDefault(require_buildLocalizeFn());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var eraValues2 = {
      narrow: ["B", "A"],
      abbreviated: ["BC", "AD"],
      wide: ["Before Christ", "Anno Domini"]
    };
    var quarterValues2 = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
    };
    var monthValues2 = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };
    var dayValues2 = {
      narrow: ["S", "M", "T", "W", "T", "F", "S"],
      short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    };
    var dayPeriodValues2 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      }
    };
    var formattingDayPeriodValues2 = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      }
    };
    function ordinalNumber2(dirtyNumber, _dirtyOptions) {
      var number5 = Number(dirtyNumber);
      var rem100 = number5 % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number5 + "st";
          case 2:
            return number5 + "nd";
          case 3:
            return number5 + "rd";
        }
      }
      return number5 + "th";
    }
    var localize2 = {
      ordinalNumber: ordinalNumber2,
      era: (0, _index.default)({
        values: eraValues2,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.default)({
        values: quarterValues2,
        defaultWidth: "wide",
        argumentCallback: function(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues2,
        defaultWidth: "wide"
      }),
      day: (0, _index.default)({
        values: dayValues2,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues2,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues2,
        defaultFormattingWidth: "wide"
      })
    };
    var _default = localize2;
    exports3.default = _default;
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/_lib/buildMatchPatternFn/index.js
var require_buildMatchPatternFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchPatternFn/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = buildMatchPatternFn2;
    function buildMatchPatternFn2(args) {
      return function(dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options2 = dirtyOptions || {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) {
          return null;
        }
        var value2 = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value2 = options2.valueCallback ? options2.valueCallback(value2) : value2;
        return {
          value: value2,
          rest: string.slice(matchedString.length)
        };
      };
    }
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/_lib/buildMatchFn/index.js
var require_buildMatchFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchFn/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = buildMatchFn2;
    function buildMatchFn2(args) {
      return function(dirtyString, dirtyOptions) {
        var string = String(dirtyString);
        var options2 = dirtyOptions || {};
        var width = options2.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var value2;
        if (Object.prototype.toString.call(parsePatterns) === "[object Array]") {
          value2 = findIndex2(parsePatterns, function(pattern2) {
            return pattern2.test(string);
          });
        } else {
          value2 = findKey2(parsePatterns, function(pattern2) {
            return pattern2.test(string);
          });
        }
        value2 = args.valueCallback ? args.valueCallback(value2) : value2;
        value2 = options2.valueCallback ? options2.valueCallback(value2) : value2;
        return {
          value: value2,
          rest: string.slice(matchedString.length)
        };
      };
    }
    function findKey2(object, predicate) {
      for (var key2 in object) {
        if (object.hasOwnProperty(key2) && predicate(object[key2])) {
          return key2;
        }
      }
    }
    function findIndex2(array4, predicate) {
      for (var key2 = 0; key2 < array4.length; key2++) {
        if (predicate(array4[key2])) {
          return key2;
        }
      }
    }
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/match/index.js
var require_match = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/match/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = void 0;
    var _index = _interopRequireDefault(require_buildMatchPatternFn());
    var _index2 = _interopRequireDefault(require_buildMatchFn());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var matchOrdinalNumberPattern2 = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern2 = /\d+/i;
    var matchEraPatterns2 = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns2 = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns2 = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns2 = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns2 = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns2 = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns2 = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns2 = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns2 = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns2 = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match2 = {
      ordinalNumber: (0, _index.default)({
        matchPattern: matchOrdinalNumberPattern2,
        parsePattern: parseOrdinalNumberPattern2,
        valueCallback: function(value2) {
          return parseInt(value2, 10);
        }
      }),
      era: (0, _index2.default)({
        matchPatterns: matchEraPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns2,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.default)({
        matchPatterns: matchQuarterPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns2,
        defaultParseWidth: "any",
        valueCallback: function(index5) {
          return index5 + 1;
        }
      }),
      month: (0, _index2.default)({
        matchPatterns: matchMonthPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns2,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.default)({
        matchPatterns: matchDayPatterns2,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns2,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.default)({
        matchPatterns: matchDayPeriodPatterns2,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns2,
        defaultParseWidth: "any"
      })
    };
    var _default = match2;
    exports3.default = _default;
    module2.exports = exports3.default;
  }
});

// node_modules/date-fns/locale/en-US/index.js
var require_en_US = __commonJS({
  "node_modules/date-fns/locale/en-US/index.js"(exports3, module2) {
    "use strict";
    Object.defineProperty(exports3, "__esModule", {
      value: true
    });
    exports3.default = void 0;
    var _index = _interopRequireDefault(require_formatDistance());
    var _index2 = _interopRequireDefault(require_formatLong());
    var _index3 = _interopRequireDefault(require_formatRelative());
    var _index4 = _interopRequireDefault(require_localize());
    var _index5 = _interopRequireDefault(require_match());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var locale4 = {
      code: "en-US",
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale4;
    exports3.default = _default;
    module2.exports = exports3.default;
  }
});

// node_modules/d3-array/src/ascending.js
function ascending2(a2, b) {
  return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}
var init_ascending = __esm({
  "node_modules/d3-array/src/ascending.js"() {
  }
});

// node_modules/d3-array/src/descending.js
function descending(a2, b) {
  return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}
var init_descending = __esm({
  "node_modules/d3-array/src/descending.js"() {
  }
});

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending2;
    compare2 = (d, x3) => ascending2(f(d), x3);
    delta = (d, x3) => f(d) - x3;
  } else {
    compare1 = f === ascending2 || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left3(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right3(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center3(a2, x3, lo = 0, hi = a2.length) {
    const i = left3(a2, x3, lo, hi - 1);
    return i > lo && delta(a2[i - 1], x3) > -delta(a2[i], x3) ? i - 1 : i;
  }
  return { left: left3, center: center3, right: right3 };
}
function zero() {
  return 0;
}
var init_bisector = __esm({
  "node_modules/d3-array/src/bisector.js"() {
    init_ascending();
    init_descending();
  }
});

// node_modules/d3-array/src/number.js
function number(x3) {
  return x3 === null ? NaN : +x3;
}
function* numbers(values, valueof) {
  if (valueof === void 0) {
    for (let value2 of values) {
      if (value2 != null && (value2 = +value2) >= value2) {
        yield value2;
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if ((value2 = valueof(value2, ++index5, values)) != null && (value2 = +value2) >= value2) {
        yield value2;
      }
    }
  }
}
var init_number = __esm({
  "node_modules/d3-array/src/number.js"() {
  }
});

// node_modules/d3-array/src/bisect.js
var ascendingBisect, bisectRight, bisectLeft, bisectCenter, bisect_default;
var init_bisect = __esm({
  "node_modules/d3-array/src/bisect.js"() {
    init_ascending();
    init_bisector();
    init_number();
    ascendingBisect = bisector(ascending2);
    bisectRight = ascendingBisect.right;
    bisectLeft = ascendingBisect.left;
    bisectCenter = bisector(number).center;
    bisect_default = bisectRight;
  }
});

// node_modules/d3-array/src/count.js
function count(values, valueof) {
  let count3 = 0;
  if (valueof === void 0) {
    for (let value2 of values) {
      if (value2 != null && (value2 = +value2) >= value2) {
        ++count3;
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if ((value2 = valueof(value2, ++index5, values)) != null && (value2 = +value2) >= value2) {
        ++count3;
      }
    }
  }
  return count3;
}
var init_count = __esm({
  "node_modules/d3-array/src/count.js"() {
  }
});

// node_modules/d3-array/src/extent.js
function extent(values, valueof) {
  let min5;
  let max5;
  if (valueof === void 0) {
    for (const value2 of values) {
      if (value2 != null) {
        if (min5 === void 0) {
          if (value2 >= value2)
            min5 = max5 = value2;
        } else {
          if (min5 > value2)
            min5 = value2;
          if (max5 < value2)
            max5 = value2;
        }
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if ((value2 = valueof(value2, ++index5, values)) != null) {
        if (min5 === void 0) {
          if (value2 >= value2)
            min5 = max5 = value2;
        } else {
          if (min5 > value2)
            min5 = value2;
          if (max5 < value2)
            max5 = value2;
        }
      }
    }
  }
  return [min5, max5];
}
var init_extent = __esm({
  "node_modules/d3-array/src/extent.js"() {
  }
});

// node_modules/internmap/src/index.js
function intern_get({ _intern, _key }, value2) {
  const key2 = _key(value2);
  return _intern.has(key2) ? _intern.get(key2) : value2;
}
function intern_set({ _intern, _key }, value2) {
  const key2 = _key(value2);
  if (_intern.has(key2))
    return _intern.get(key2);
  _intern.set(key2, value2);
  return value2;
}
function intern_delete({ _intern, _key }, value2) {
  const key2 = _key(value2);
  if (_intern.has(key2)) {
    value2 = _intern.get(key2);
    _intern.delete(key2);
  }
  return value2;
}
function keyof(value2) {
  return value2 !== null && typeof value2 === "object" ? value2.valueOf() : value2;
}
var InternMap;
var init_src3 = __esm({
  "node_modules/internmap/src/index.js"() {
    InternMap = class extends Map {
      constructor(entries, key2 = keyof) {
        super();
        Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
        if (entries != null)
          for (const [key3, value2] of entries)
            this.set(key3, value2);
      }
      get(key2) {
        return super.get(intern_get(this, key2));
      }
      has(key2) {
        return super.has(intern_get(this, key2));
      }
      set(key2, value2) {
        return super.set(intern_set(this, key2), value2);
      }
      delete(key2) {
        return super.delete(intern_delete(this, key2));
      }
    };
  }
});

// node_modules/d3-array/src/identity.js
function identity2(x3) {
  return x3;
}
var init_identity2 = __esm({
  "node_modules/d3-array/src/identity.js"() {
  }
});

// node_modules/d3-array/src/sort.js
function compareDefined(compare = ascending2) {
  if (compare === ascending2)
    return ascendingDefined;
  if (typeof compare !== "function")
    throw new TypeError("compare is not a function");
  return (a2, b) => {
    const x3 = compare(a2, b);
    if (x3 || x3 === 0)
      return x3;
    return (compare(b, b) === 0) - (compare(a2, a2) === 0);
  };
}
function ascendingDefined(a2, b) {
  return (a2 == null || !(a2 >= a2)) - (b == null || !(b >= b)) || (a2 < b ? -1 : a2 > b ? 1 : 0);
}
var init_sort2 = __esm({
  "node_modules/d3-array/src/sort.js"() {
    init_ascending();
  }
});

// node_modules/d3-array/src/array.js
var array3, slice, map2;
var init_array2 = __esm({
  "node_modules/d3-array/src/array.js"() {
    array3 = Array.prototype;
    slice = array3.slice;
    map2 = array3.map;
  }
});

// node_modules/d3-array/src/constant.js
function constant2(x3) {
  return () => x3;
}
var init_constant3 = __esm({
  "node_modules/d3-array/src/constant.js"() {
  }
});

// node_modules/d3-array/src/ticks.js
function ticks(start2, stop, count3) {
  var reverse, i = -1, n, ticks2, step;
  stop = +stop, start2 = +start2, count3 = +count3;
  if (start2 === stop && count3 > 0)
    return [start2];
  if (reverse = stop < start2)
    n = start2, start2 = stop, stop = n;
  if ((step = tickIncrement(start2, stop, count3)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start2 / step), r1 = Math.round(stop / step);
    if (r0 * step < start2)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start2 * step), r1 = Math.round(stop * step);
    if (r0 / step < start2)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) / step;
  }
  if (reverse)
    ticks2.reverse();
  return ticks2;
}
function tickIncrement(start2, stop, count3) {
  var step = (stop - start2) / Math.max(0, count3), power = Math.floor(Math.log(step) / Math.LN10), error2 = step / Math.pow(10, power);
  return power >= 0 ? (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1);
}
function tickStep(start2, stop, count3) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count3), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error2 = step0 / step1;
  if (error2 >= e10)
    step1 *= 10;
  else if (error2 >= e5)
    step1 *= 5;
  else if (error2 >= e2)
    step1 *= 2;
  return stop < start2 ? -step1 : step1;
}
var e10, e5, e2;
var init_ticks = __esm({
  "node_modules/d3-array/src/ticks.js"() {
    e10 = Math.sqrt(50);
    e5 = Math.sqrt(10);
    e2 = Math.sqrt(2);
  }
});

// node_modules/d3-array/src/nice.js
function nice(start2, stop, count3) {
  let prestep;
  while (true) {
    const step = tickIncrement(start2, stop, count3);
    if (step === prestep || step === 0 || !isFinite(step)) {
      return [start2, stop];
    } else if (step > 0) {
      start2 = Math.floor(start2 / step) * step;
      stop = Math.ceil(stop / step) * step;
    } else if (step < 0) {
      start2 = Math.ceil(start2 * step) / step;
      stop = Math.floor(stop * step) / step;
    }
    prestep = step;
  }
}
var init_nice = __esm({
  "node_modules/d3-array/src/nice.js"() {
    init_ticks();
  }
});

// node_modules/d3-array/src/threshold/sturges.js
function thresholdSturges(values) {
  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
}
var init_sturges = __esm({
  "node_modules/d3-array/src/threshold/sturges.js"() {
    init_count();
  }
});

// node_modules/d3-array/src/bin.js
function bin() {
  var value2 = identity2, domain = extent, threshold = thresholdSturges;
  function histogram2(data) {
    if (!Array.isArray(data))
      data = Array.from(data);
    var i, n = data.length, x3, step, values = new Array(n);
    for (i = 0; i < n; ++i) {
      values[i] = value2(data[i], i, data);
    }
    var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
    if (!Array.isArray(tz)) {
      const max5 = x1, tn = +tz;
      if (domain === extent)
        [x0, x1] = nice(x0, x1, tn);
      tz = ticks(x0, x1, tn);
      if (tz[0] <= x0)
        step = tickIncrement(x0, x1, tn);
      if (tz[tz.length - 1] >= x1) {
        if (max5 >= x1 && domain === extent) {
          const step2 = tickIncrement(x0, x1, tn);
          if (isFinite(step2)) {
            if (step2 > 0) {
              x1 = (Math.floor(x1 / step2) + 1) * step2;
            } else if (step2 < 0) {
              x1 = (Math.ceil(x1 * -step2) + 1) / -step2;
            }
          }
        } else {
          tz.pop();
        }
      }
    }
    var m2 = tz.length, a2 = 0, b = m2;
    while (tz[a2] <= x0)
      ++a2;
    while (tz[b - 1] > x1)
      --b;
    if (a2 || b < m2)
      tz = tz.slice(a2, b), m2 = b - a2;
    var bins = new Array(m2 + 1), bin2;
    for (i = 0; i <= m2; ++i) {
      bin2 = bins[i] = [];
      bin2.x0 = i > 0 ? tz[i - 1] : x0;
      bin2.x1 = i < m2 ? tz[i] : x1;
    }
    if (isFinite(step)) {
      if (step > 0) {
        for (i = 0; i < n; ++i) {
          if ((x3 = values[i]) != null && x0 <= x3 && x3 <= x1) {
            bins[Math.min(m2, Math.floor((x3 - x0) / step))].push(data[i]);
          }
        }
      } else if (step < 0) {
        for (i = 0; i < n; ++i) {
          if ((x3 = values[i]) != null && x0 <= x3 && x3 <= x1) {
            const j = Math.floor((x0 - x3) * step);
            bins[Math.min(m2, j + (tz[j] <= x3))].push(data[i]);
          }
        }
      }
    } else {
      for (i = 0; i < n; ++i) {
        if ((x3 = values[i]) != null && x0 <= x3 && x3 <= x1) {
          bins[bisect_default(tz, x3, 0, m2)].push(data[i]);
        }
      }
    }
    return bins;
  }
  histogram2.value = function(_) {
    return arguments.length ? (value2 = typeof _ === "function" ? _ : constant2(_), histogram2) : value2;
  };
  histogram2.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant2([_[0], _[1]]), histogram2) : domain;
  };
  histogram2.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : constant2(Array.isArray(_) ? slice.call(_) : _), histogram2) : threshold;
  };
  return histogram2;
}
var init_bin = __esm({
  "node_modules/d3-array/src/bin.js"() {
    init_array2();
    init_bisect();
    init_constant3();
    init_extent();
    init_identity2();
    init_nice();
    init_ticks();
    init_sturges();
  }
});

// node_modules/d3-array/src/max.js
function max(values, valueof) {
  let max5;
  if (valueof === void 0) {
    for (const value2 of values) {
      if (value2 != null && (max5 < value2 || max5 === void 0 && value2 >= value2)) {
        max5 = value2;
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if ((value2 = valueof(value2, ++index5, values)) != null && (max5 < value2 || max5 === void 0 && value2 >= value2)) {
        max5 = value2;
      }
    }
  }
  return max5;
}
var init_max = __esm({
  "node_modules/d3-array/src/max.js"() {
  }
});

// node_modules/d3-array/src/min.js
function min(values, valueof) {
  let min5;
  if (valueof === void 0) {
    for (const value2 of values) {
      if (value2 != null && (min5 > value2 || min5 === void 0 && value2 >= value2)) {
        min5 = value2;
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if ((value2 = valueof(value2, ++index5, values)) != null && (min5 > value2 || min5 === void 0 && value2 >= value2)) {
        min5 = value2;
      }
    }
  }
  return min5;
}
var init_min = __esm({
  "node_modules/d3-array/src/min.js"() {
  }
});

// node_modules/d3-array/src/quickselect.js
function quickselect(array4, k, left3 = 0, right3 = Infinity, compare) {
  k = Math.floor(k);
  left3 = Math.floor(Math.max(0, left3));
  right3 = Math.floor(Math.min(array4.length - 1, right3));
  if (!(left3 <= k && k <= right3))
    return array4;
  compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
  while (right3 > left3) {
    if (right3 - left3 > 600) {
      const n = right3 - left3 + 1;
      const m2 = k - left3 + 1;
      const z = Math.log(n);
      const s2 = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s2 * (n - s2) / n) * (m2 - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left3, Math.floor(k - m2 * s2 / n + sd));
      const newRight = Math.min(right3, Math.floor(k + (n - m2) * s2 / n + sd));
      quickselect(array4, k, newLeft, newRight, compare);
    }
    const t = array4[k];
    let i = left3;
    let j = right3;
    swap(array4, left3, k);
    if (compare(array4[right3], t) > 0)
      swap(array4, left3, right3);
    while (i < j) {
      swap(array4, i, j), ++i, --j;
      while (compare(array4[i], t) < 0)
        ++i;
      while (compare(array4[j], t) > 0)
        --j;
    }
    if (compare(array4[left3], t) === 0)
      swap(array4, left3, j);
    else
      ++j, swap(array4, j, right3);
    if (j <= k)
      left3 = j + 1;
    if (k <= j)
      right3 = j - 1;
  }
  return array4;
}
function swap(array4, i, j) {
  const t = array4[i];
  array4[i] = array4[j];
  array4[j] = t;
}
var init_quickselect = __esm({
  "node_modules/d3-array/src/quickselect.js"() {
    init_sort2();
  }
});

// node_modules/d3-array/src/quantile.js
function quantile(values, p, valueof) {
  values = Float64Array.from(numbers(values, valueof));
  if (!(n = values.length) || isNaN(p = +p))
    return;
  if (p <= 0 || n < 2)
    return min(values);
  if (p >= 1)
    return max(values);
  var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = max(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i - i0);
}
var init_quantile = __esm({
  "node_modules/d3-array/src/quantile.js"() {
    init_max();
    init_min();
    init_quickselect();
    init_number();
  }
});

// node_modules/d3-array/src/range.js
function range(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range2 = new Array(n);
  while (++i < n) {
    range2[i] = start2 + i * step;
  }
  return range2;
}
var init_range = __esm({
  "node_modules/d3-array/src/range.js"() {
  }
});

// node_modules/d3-array/src/index.js
var init_src4 = __esm({
  "node_modules/d3-array/src/index.js"() {
    init_bisect();
    init_ascending();
    init_bisector();
    init_extent();
    init_bin();
    init_max();
    init_min();
    init_quantile();
    init_range();
    init_ticks();
    init_src3();
  }
});

// node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}
var init_init = __esm({
  "node_modules/d3-scale/src/init.js"() {
  }
});

// node_modules/d3-scale/src/ordinal.js
function ordinal() {
  var index5 = new InternMap(), domain = [], range2 = [], unknown = implicit;
  function scale(d) {
    let i = index5.get(d);
    if (i === void 0) {
      if (unknown !== implicit)
        return unknown;
      index5.set(d, i = domain.push(d) - 1);
    }
    return range2[i % range2.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index5 = new InternMap();
    for (const value2 of _) {
      if (index5.has(value2))
        continue;
      index5.set(value2, domain.push(value2) - 1);
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), scale) : range2.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
var implicit;
var init_ordinal = __esm({
  "node_modules/d3-scale/src/ordinal.js"() {
    init_src4();
    init_init();
    implicit = Symbol("implicit");
  }
});

// node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse = r1 < r0, start2 = reverse ? r1 : r0, stop = reverse ? r0 : r1;
    step = (stop - start2) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start2 += (stop - start2 - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function(i) {
      return start2 + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
var init_band = __esm({
  "node_modules/d3-scale/src/band.js"() {
    init_src4();
    init_init();
    init_ordinal();
  }
});

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key2 in definition)
    prototype[key2] = definition[key2];
  return prototype;
}
var init_define = __esm({
  "node_modules/d3-color/src/define.js"() {
  }
});

// node_modules/d3-color/src/color.js
function Color() {
}
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m2, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format3)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format3)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format3)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format3)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format3)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value2) {
  return Math.max(0, Math.min(255, Math.round(value2) || 0));
}
function hex(value2) {
  value2 = clampi(value2);
  return (value2 < 16 ? "0" : "") + value2.toString(16);
}
function hsla(h, s2, l, a2) {
  if (a2 <= 0)
    h = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s2 = NaN;
  else if (s2 <= 0)
    h = NaN;
  return new Hsl(h, s2, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min5 = Math.min(r, g, b), max5 = Math.max(r, g, b), h = NaN, s2 = max5 - min5, l = (max5 + min5) / 2;
  if (s2) {
    if (r === max5)
      h = (g - b) / s2 + (g < b) * 6;
    else if (g === max5)
      h = (b - r) / s2 + 2;
    else
      h = (r - g) / s2 + 4;
    s2 /= l < 0.5 ? max5 + min5 : 2 - max5 - min5;
    h *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s2, l, o.opacity);
}
function hsl(h, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
function clamph(value2) {
  value2 = (value2 || 0) % 360;
  return value2 < 0 ? value2 + 360 : value2;
}
function clampt(value2) {
  return Math.max(0, Math.min(1, value2 || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
var darker, brighter, reI, reN, reP, reHex, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named;
var init_color = __esm({
  "node_modules/d3-color/src/color.js"() {
    init_define();
    darker = 0.7;
    brighter = 1 / darker;
    reI = "\\s*([+-]?\\d+)\\s*";
    reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
    reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
    reHex = /^#([0-9a-f]{3,8})$/;
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
    named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define_default(Color, color, {
      copy(channels) {
        return Object.assign(new this.constructor(), this, channels);
      },
      displayable() {
        return this.rgb().displayable();
      },
      hex: color_formatHex,
      formatHex: color_formatHex,
      formatHex8: color_formatHex8,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });
    define_default(Rgb, rgb, extend(Color, {
      brighter(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb() {
        return this;
      },
      clamp() {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
      },
      displayable() {
        return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex,
      formatHex: rgb_formatHex,
      formatHex8: rgb_formatHex8,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));
    define_default(Hsl, hsl, extend(Color, {
      brighter(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb() {
        var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      clamp() {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
      },
      displayable() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl() {
        const a2 = clampa(this.opacity);
        return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
      }
    }));
  }
});

// node_modules/d3-color/src/index.js
var init_src5 = __esm({
  "node_modules/d3-color/src/index.js"() {
    init_color();
  }
});

// node_modules/d3-interpolate/src/basis.js
function basis(t12, v0, v1, v2, v3) {
  var t2 = t12 * t12, t3 = t2 * t12;
  return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
var init_basis = __esm({
  "node_modules/d3-interpolate/src/basis.js"() {
  }
});

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
var init_basisClosed = __esm({
  "node_modules/d3-interpolate/src/basisClosed.js"() {
    init_basis();
  }
});

// node_modules/d3-interpolate/src/constant.js
var constant_default3;
var init_constant4 = __esm({
  "node_modules/d3-interpolate/src/constant.js"() {
    constant_default3 = (x3) => () => x3;
  }
});

// node_modules/d3-interpolate/src/color.js
function linear2(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y3) {
  return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t) {
    return Math.pow(a2 + t * b, y3);
  };
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y3) : constant_default3(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear2(a2, d) : constant_default3(isNaN(a2) ? b : a2);
}
var init_color2 = __esm({
  "node_modules/d3-interpolate/src/color.js"() {
    init_constant4();
  }
});

// node_modules/d3-interpolate/src/rgb.js
function rgbSpline(spline) {
  return function(colors2) {
    var n = colors2.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color3;
    for (i = 0; i < n; ++i) {
      color3 = rgb(colors2[i]);
      r[i] = color3.r || 0;
      g[i] = color3.g || 0;
      b[i] = color3.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color3.opacity = 1;
    return function(t) {
      color3.r = r(t);
      color3.g = g(t);
      color3.b = b(t);
      return color3 + "";
    };
  };
}
var rgb_default, rgbBasis, rgbBasisClosed;
var init_rgb = __esm({
  "node_modules/d3-interpolate/src/rgb.js"() {
    init_src5();
    init_basis();
    init_basisClosed();
    init_color2();
    rgb_default = function rgbGamma(y3) {
      var color3 = gamma(y3);
      function rgb2(start2, end) {
        var r = color3((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color3(start2.g, end.g), b = color3(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
        return function(t) {
          start2.r = r(t);
          start2.g = g(t);
          start2.b = b(t);
          start2.opacity = opacity(t);
          return start2 + "";
        };
      }
      rgb2.gamma = rgbGamma;
      return rgb2;
    }(1);
    rgbBasis = rgbSpline(basis_default);
    rgbBasisClosed = rgbSpline(basisClosed_default);
  }
});

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b) {
  if (!b)
    b = [];
  var n = a2 ? Math.min(b.length, a2.length) : 0, c2 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i)
      c2[i] = a2[i] * (1 - t) + b[i] * t;
    return c2;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}
var init_numberArray = __esm({
  "node_modules/d3-interpolate/src/numberArray.js"() {
  }
});

// node_modules/d3-interpolate/src/array.js
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x3 = new Array(na), c2 = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x3[i] = value_default(a2[i], b[i]);
  for (; i < nb; ++i)
    c2[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i)
      c2[i] = x3[i](t);
    return c2;
  };
}
var init_array3 = __esm({
  "node_modules/d3-interpolate/src/array.js"() {
    init_value();
  }
});

// node_modules/d3-interpolate/src/date.js
function date_default(a2, b) {
  var d = new Date();
  return a2 = +a2, b = +b, function(t) {
    return d.setTime(a2 * (1 - t) + b * t), d;
  };
}
var init_date = __esm({
  "node_modules/d3-interpolate/src/date.js"() {
  }
});

// node_modules/d3-interpolate/src/number.js
function number_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return a2 * (1 - t) + b * t;
  };
}
var init_number2 = __esm({
  "node_modules/d3-interpolate/src/number.js"() {
  }
});

// node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i = {}, c2 = {}, k;
  if (a2 === null || typeof a2 !== "object")
    a2 = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k in b) {
    if (k in a2) {
      i[k] = value_default(a2[k], b[k]);
    } else {
      c2[k] = b[k];
    }
  }
  return function(t) {
    for (k in i)
      c2[k] = i[k](t);
    return c2;
  };
}
var init_object = __esm({
  "node_modules/d3-interpolate/src/object.js"() {
    init_value();
  }
});

// node_modules/d3-interpolate/src/string.js
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s2[i])
        s2[i] += bs;
      else
        s2[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i])
        s2[i] += bm;
      else
        s2[++i] = bm;
    } else {
      s2[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s2[i])
      s2[i] += bs;
    else
      s2[++i] = bs;
  }
  return s2.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s2[(o = q[i2]).i] = o.x(t);
    return s2.join("");
  });
}
var reA, reB;
var init_string = __esm({
  "node_modules/d3-interpolate/src/string.js"() {
    init_number2();
    reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    reB = new RegExp(reA.source, "g");
  }
});

// node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t = typeof b, c2;
  return b == null || t === "boolean" ? constant_default3(b) : (t === "number" ? number_default : t === "string" ? (c2 = color(b)) ? (b = c2, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a2, b);
}
var init_value = __esm({
  "node_modules/d3-interpolate/src/value.js"() {
    init_src5();
    init_rgb();
    init_array3();
    init_date();
    init_number2();
    init_object();
    init_string();
    init_constant4();
    init_numberArray();
  }
});

// node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return Math.round(a2 * (1 - t) + b * t);
  };
}
var init_round = __esm({
  "node_modules/d3-interpolate/src/round.js"() {
  }
});

// node_modules/d3-interpolate/src/transform/decompose.js
function decompose_default(a2, b, c2, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b))
    a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c2 + b * d)
    c2 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c2 * c2 + d * d))
    c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c2)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}
var degrees, identity3;
var init_decompose = __esm({
  "node_modules/d3-interpolate/src/transform/decompose.js"() {
    degrees = 180 / Math.PI;
    identity3 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };
  }
});

// node_modules/d3-interpolate/src/transform/parse.js
function parseCss(value2) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value2 + "");
  return m2.isIdentity ? identity3 : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value2) {
  if (value2 == null)
    return identity3;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value2);
  if (!(value2 = svgNode.transform.baseVal.consolidate()))
    return identity3;
  value2 = value2.matrix;
  return decompose_default(value2.a, value2.b, value2.c, value2.d, value2.e, value2.f);
}
var svgNode;
var init_parse = __esm({
  "node_modules/d3-interpolate/src/transform/parse.js"() {
    init_decompose();
  }
});

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse3, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s2, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s2, q) {
    if (a2 !== b) {
      q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s2 = [], q = [];
    a2 = parse3(a2), b = parse3(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s2, q);
    rotate(a2.rotate, b.rotate, s2, q);
    skewX(a2.skewX, b.skewX, s2, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s2, q);
    a2 = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s2[(o = q[i]).i] = o.x(t);
      return s2.join("");
    };
  };
}
var interpolateTransformCss, interpolateTransformSvg;
var init_transform = __esm({
  "node_modules/d3-interpolate/src/transform/index.js"() {
    init_number2();
    init_parse();
    interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  }
});

// node_modules/d3-interpolate/src/quantize.js
function quantize_default(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i)
    samples[i] = interpolator(i / (n - 1));
  return samples;
}
var init_quantize = __esm({
  "node_modules/d3-interpolate/src/quantize.js"() {
  }
});

// node_modules/d3-interpolate/src/index.js
var init_src6 = __esm({
  "node_modules/d3-interpolate/src/index.js"() {
    init_value();
    init_number2();
    init_round();
    init_string();
    init_transform();
    init_rgb();
    init_quantize();
  }
});

// node_modules/d3-scale/src/constant.js
function constants(x3) {
  return function() {
    return x3;
  };
}
var init_constant5 = __esm({
  "node_modules/d3-scale/src/constant.js"() {
  }
});

// node_modules/d3-scale/src/number.js
function number2(x3) {
  return +x3;
}
var init_number3 = __esm({
  "node_modules/d3-scale/src/number.js"() {
  }
});

// node_modules/d3-scale/src/continuous.js
function identity4(x3) {
  return x3;
}
function normalize(a2, b) {
  return (b -= a2 = +a2) ? function(x3) {
    return (x3 - a2) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a2, b) {
  var t;
  if (a2 > b)
    t = a2, a2 = b, b = t;
  return function(x3) {
    return Math.max(a2, Math.min(b, x3));
  };
}
function bimap(domain, range2, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range2, interpolate) {
  var j = Math.min(domain.length, range2.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range2[i], range2[i + 1]);
  }
  return function(x3) {
    var i2 = bisect_default(domain, x3, 1, j) - 1;
    return r[i2](d[i2](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range2 = unit, interpolate = value_default, transform, untransform, unknown, clamp2 = identity4, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range2.length);
    if (clamp2 !== identity4)
      clamp2 = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform), range2, interpolate)))(transform(clamp2(x3)));
  }
  scale.invert = function(y3) {
    return clamp2(untransform((input || (input = piecewise(range2, domain.map(transform), number_default)))(y3)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number2), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
  };
  scale.rangeRound = function(_) {
    return range2 = Array.from(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp2 = _ ? true : identity4, rescale()) : clamp2 !== identity4;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity4, identity4);
}
var unit;
var init_continuous = __esm({
  "node_modules/d3-scale/src/continuous.js"() {
    init_src4();
    init_src6();
    init_constant5();
    init_number3();
    unit = [0, 1];
  }
});

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p) {
  if ((i = (x3 = p ? x3.toExponential(p - 1) : x3.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x3.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i + 1)
  ];
}
var init_formatDecimal = __esm({
  "node_modules/d3-format/src/formatDecimal.js"() {
  }
});

// node_modules/d3-format/src/exponent.js
function exponent_default(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}
var init_exponent = __esm({
  "node_modules/d3-format/src/exponent.js"() {
    init_formatDecimal();
  }
});

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value2, width) {
    var i = value2.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value2.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
var init_formatGroup = __esm({
  "node_modules/d3-format/src/formatGroup.js"() {
  }
});

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value2) {
    return value2.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}
var init_formatNumerals = __esm({
  "node_modules/d3-format/src/formatNumerals.js"() {
  }
});

// node_modules/d3-format/src/formatSpecifier.js
function formatSpecifier(specifier) {
  if (!(match2 = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match2;
  return new FormatSpecifier({
    fill: match2[1],
    align: match2[2],
    sign: match2[3],
    symbol: match2[4],
    zero: match2[5],
    width: match2[6],
    comma: match2[7],
    precision: match2[8] && match2[8].slice(1),
    trim: match2[9],
    type: match2[10]
  });
}
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
var re;
var init_formatSpecifier = __esm({
  "node_modules/d3-format/src/formatSpecifier.js"() {
    re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    formatSpecifier.prototype = FormatSpecifier.prototype;
    FormatSpecifier.prototype.toString = function() {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
    };
  }
});

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out:
    for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s2[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s2[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}
var init_formatTrim = __esm({
  "node_modules/d3-format/src/formatTrim.js"() {
  }
});

// node_modules/d3-format/src/formatPrefixAuto.js
function formatPrefixAuto_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x3, Math.max(0, p + i - 1))[0];
}
var prefixExponent;
var init_formatPrefixAuto = __esm({
  "node_modules/d3-format/src/formatPrefixAuto.js"() {
    init_formatDecimal();
  }
});

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
var init_formatRounded = __esm({
  "node_modules/d3-format/src/formatRounded.js"() {
    init_formatDecimal();
  }
});

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default;
var init_formatTypes = __esm({
  "node_modules/d3-format/src/formatTypes.js"() {
    init_formatDecimal();
    init_formatPrefixAuto();
    init_formatRounded();
    formatTypes_default = {
      "%": (x3, p) => (x3 * 100).toFixed(p),
      "b": (x3) => Math.round(x3).toString(2),
      "c": (x3) => x3 + "",
      "d": formatDecimal_default,
      "e": (x3, p) => x3.toExponential(p),
      "f": (x3, p) => x3.toFixed(p),
      "g": (x3, p) => x3.toPrecision(p),
      "o": (x3) => Math.round(x3).toString(8),
      "p": (x3, p) => formatRounded_default(x3 * 100, p),
      "r": formatRounded_default,
      "s": formatPrefixAuto_default,
      "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
      "x": (x3) => Math.round(x3).toString(16)
    };
  }
});

// node_modules/d3-format/src/identity.js
function identity_default2(x3) {
  return x3;
}
var init_identity3 = __esm({
  "node_modules/d3-format/src/identity.js"() {
  }
});

// node_modules/d3-format/src/locale.js
function locale_default(locale4) {
  var group = locale4.grouping === void 0 || locale4.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale4.grouping, Number), locale4.thousands + ""), currencyPrefix = locale4.currency === void 0 ? "" : locale4.currency[0] + "", currencySuffix = locale4.currency === void 0 ? "" : locale4.currency[1] + "", decimal = locale4.decimal === void 0 ? "." : locale4.decimal + "", numerals = locale4.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale4.numerals, String)), percent = locale4.percent === void 0 ? "%" : locale4.percent + "", minus = locale4.minus === void 0 ? "\u2212" : locale4.minus + "", nan = locale4.nan === void 0 ? "NaN" : locale4.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero3 || fill === "0" && align === "=")
      zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value2) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
      if (type2 === "c") {
        valueSuffix = formatType(value2) + valueSuffix;
        value2 = "";
      } else {
        value2 = +value2;
        var valueNegative = value2 < 0 || 1 / value2 < 0;
        value2 = isNaN(value2) ? nan : formatType(Math.abs(value2), precision);
        if (trim)
          value2 = formatTrim_default(value2);
        if (valueNegative && +value2 === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value2.length;
          while (++i < n) {
            if (c2 = value2.charCodeAt(i), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value2.slice(i + 1) : value2.slice(i)) + valueSuffix;
              value2 = value2.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value2 = group(value2, Infinity);
      var length = valuePrefix.length + value2.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3)
        value2 = group(padding + value2, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value2 = valuePrefix + value2 + valueSuffix + padding;
          break;
        case "=":
          value2 = valuePrefix + padding + value2 + valueSuffix;
          break;
        case "^":
          value2 = padding.slice(0, length = padding.length >> 1) + valuePrefix + value2 + valueSuffix + padding.slice(length);
          break;
        default:
          value2 = padding + valuePrefix + value2 + valueSuffix;
          break;
      }
      return numerals(value2);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value2) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value2) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value3) {
      return f(k * value3) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var map3, prefixes;
var init_locale = __esm({
  "node_modules/d3-format/src/locale.js"() {
    init_exponent();
    init_formatGroup();
    init_formatNumerals();
    init_formatSpecifier();
    init_formatTrim();
    init_formatTypes();
    init_formatPrefixAuto();
    init_identity3();
    map3 = Array.prototype.map;
    prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  }
});

// node_modules/d3-format/src/defaultLocale.js
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
var locale, format, formatPrefix;
var init_defaultLocale = __esm({
  "node_modules/d3-format/src/defaultLocale.js"() {
    init_locale();
    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
  }
});

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}
var init_precisionFixed = __esm({
  "node_modules/d3-format/src/precisionFixed.js"() {
    init_exponent();
  }
});

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value2) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value2) / 3))) * 3 - exponent_default(Math.abs(step)));
}
var init_precisionPrefix = __esm({
  "node_modules/d3-format/src/precisionPrefix.js"() {
    init_exponent();
  }
});

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max5) {
  step = Math.abs(step), max5 = Math.abs(max5) - step;
  return Math.max(0, exponent_default(max5) - exponent_default(step)) + 1;
}
var init_precisionRound = __esm({
  "node_modules/d3-format/src/precisionRound.js"() {
    init_exponent();
  }
});

// node_modules/d3-format/src/index.js
var init_src7 = __esm({
  "node_modules/d3-format/src/index.js"() {
    init_defaultLocale();
    init_formatSpecifier();
    init_precisionFixed();
    init_precisionPrefix();
    init_precisionRound();
  }
});

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count3, specifier) {
  var step = tickStep(start2, stop, count3), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value2 = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value2)))
        specifier.precision = precision;
      return formatPrefix(specifier, value2);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
var init_tickFormat = __esm({
  "node_modules/d3-scale/src/tickFormat.js"() {
    init_src4();
    init_src7();
  }
});

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count3) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count3 == null ? 10 : count3);
  };
  scale.tickFormat = function(count3, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count3 == null ? 10 : count3, specifier);
  };
  scale.nice = function(count3) {
    if (count3 == null)
      count3 = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count3);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear3() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear3());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
var init_linear2 = __esm({
  "node_modules/d3-scale/src/linear.js"() {
    init_src4();
    init_continuous();
    init_init();
    init_tickFormat();
  }
});

// node_modules/d3-scale/src/nice.js
function nice2(domain, interval2) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }
  domain[i0] = interval2.floor(x0);
  domain[i1] = interval2.ceil(x1);
  return domain;
}
var init_nice2 = __esm({
  "node_modules/d3-scale/src/nice.js"() {
  }
});

// node_modules/d3-scale/src/log.js
function transformLog(x3) {
  return Math.log(x3);
}
function transformExp(x3) {
  return Math.exp(x3);
}
function transformLogn(x3) {
  return -Math.log(-x3);
}
function transformExpn(x3) {
  return -Math.exp(-x3);
}
function pow10(x3) {
  return isFinite(x3) ? +("1e" + x3) : x3 < 0 ? 0 : x3;
}
function powp(base2) {
  return base2 === 10 ? pow10 : base2 === Math.E ? Math.exp : (x3) => Math.pow(base2, x3);
}
function logp(base2) {
  return base2 === Math.E ? Math.log : base2 === 10 && Math.log10 || base2 === 2 && Math.log2 || (base2 = Math.log(base2), (x3) => Math.log(x3) / base2);
}
function reflect(f) {
  return (x3, k) => -f(-x3, k);
}
function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base2 = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base2), pows = powp(base2);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base2 = +_, rescale()) : base2;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = (count3) => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;
    if (r)
      [u, v] = [v, u];
    let i = logs(u);
    let j = logs(v);
    let k;
    let t;
    const n = count3 == null ? 10 : +count3;
    let z = [];
    if (!(base2 % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0)
        for (; i <= j; ++i) {
          for (k = 1; k < base2; ++k) {
            t = i < 0 ? k / pows(-i) : k * pows(i);
            if (t < u)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      else
        for (; i <= j; ++i) {
          for (k = base2 - 1; k >= 1; --k) {
            t = i > 0 ? k / pows(-i) : k * pows(i);
            if (t < u)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      if (z.length * 2 < n)
        z = ticks(u, v, n);
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };
  scale.tickFormat = (count3, specifier) => {
    if (count3 == null)
      count3 = 10;
    if (specifier == null)
      specifier = base2 === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base2 % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format(specifier);
    }
    if (count3 === Infinity)
      return specifier;
    const k = Math.max(1, base2 * count3 / scale.ticks().length);
    return (d) => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base2 < base2 - 0.5)
        i *= base2;
      return i <= k ? specifier(d) : "";
    };
  };
  scale.nice = () => {
    return domain(nice2(domain(), {
      floor: (x3) => pows(Math.floor(logs(x3))),
      ceil: (x3) => pows(Math.ceil(logs(x3)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
var init_log = __esm({
  "node_modules/d3-scale/src/log.js"() {
    init_src4();
    init_src7();
    init_nice2();
    init_continuous();
    init_init();
  }
});

// node_modules/d3-scale/src/quantize.js
function quantize() {
  var x0 = 0, x1 = 1, n = 1, domain = [0.5], range2 = [0, 1], unknown;
  function scale(x3) {
    return x3 != null && x3 <= x3 ? range2[bisect_default(domain, x3, 0, n)] : unknown;
  }
  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n)
      domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }
  scale.domain = function(_) {
    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };
  scale.range = function(_) {
    return arguments.length ? (n = (range2 = Array.from(_)).length - 1, rescale()) : range2.slice();
  };
  scale.invertExtent = function(y3) {
    var i = range2.indexOf(y3);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x0, x1]).range(range2).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}
var init_quantize2 = __esm({
  "node_modules/d3-scale/src/quantize.js"() {
    init_src4();
    init_linear2();
    init_init();
  }
});

// node_modules/d3-time/src/interval.js
function timeInterval(floori, offseti, count3, field) {
  function interval2(date2) {
    return floori(date2 = arguments.length === 0 ? new Date() : new Date(+date2)), date2;
  }
  interval2.floor = (date2) => {
    return floori(date2 = new Date(+date2)), date2;
  };
  interval2.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval2.round = (date2) => {
    const d0 = interval2(date2), d1 = interval2.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval2.offset = (date2, step) => {
    return offseti(date2 = new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval2.range = (start2, stop, step) => {
    const range2 = [];
    start2 = interval2.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop) || !(step > 0))
      return range2;
    let previous;
    do
      range2.push(previous = new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop);
    return range2;
  };
  interval2.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, (date2, step) => {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count3) {
    interval2.count = (start2, end) => {
      t0.setTime(+start2), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count3(t0, t1));
    };
    interval2.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field ? (d) => field(d) % step === 0 : (d) => interval2.count(0, d) % step === 0);
    };
  }
  return interval2;
}
var t0, t1;
var init_interval = __esm({
  "node_modules/d3-time/src/interval.js"() {
    t0 = new Date();
    t1 = new Date();
  }
});

// node_modules/d3-time/src/millisecond.js
var millisecond, milliseconds;
var init_millisecond = __esm({
  "node_modules/d3-time/src/millisecond.js"() {
    init_interval();
    millisecond = timeInterval(() => {
    }, (date2, step) => {
      date2.setTime(+date2 + step);
    }, (start2, end) => {
      return end - start2;
    });
    millisecond.every = (k) => {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0))
        return null;
      if (!(k > 1))
        return millisecond;
      return timeInterval((date2) => {
        date2.setTime(Math.floor(date2 / k) * k);
      }, (date2, step) => {
        date2.setTime(+date2 + step * k);
      }, (start2, end) => {
        return (end - start2) / k;
      });
    };
    milliseconds = millisecond.range;
  }
});

// node_modules/d3-time/src/duration.js
var durationSecond, durationMinute, durationHour, durationDay, durationWeek, durationMonth, durationYear;
var init_duration = __esm({
  "node_modules/d3-time/src/duration.js"() {
    durationSecond = 1e3;
    durationMinute = durationSecond * 60;
    durationHour = durationMinute * 60;
    durationDay = durationHour * 24;
    durationWeek = durationDay * 7;
    durationMonth = durationDay * 30;
    durationYear = durationDay * 365;
  }
});

// node_modules/d3-time/src/second.js
var second, seconds;
var init_second = __esm({
  "node_modules/d3-time/src/second.js"() {
    init_interval();
    init_duration();
    second = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds());
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationSecond);
    }, (start2, end) => {
      return (end - start2) / durationSecond;
    }, (date2) => {
      return date2.getUTCSeconds();
    });
    seconds = second.range;
  }
});

// node_modules/d3-time/src/minute.js
var timeMinute, timeMinutes, utcMinute, utcMinutes;
var init_minute = __esm({
  "node_modules/d3-time/src/minute.js"() {
    init_interval();
    init_duration();
    timeMinute = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start2, end) => {
      return (end - start2) / durationMinute;
    }, (date2) => {
      return date2.getMinutes();
    });
    timeMinutes = timeMinute.range;
    utcMinute = timeInterval((date2) => {
      date2.setUTCSeconds(0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start2, end) => {
      return (end - start2) / durationMinute;
    }, (date2) => {
      return date2.getUTCMinutes();
    });
    utcMinutes = utcMinute.range;
  }
});

// node_modules/d3-time/src/hour.js
var timeHour, timeHours, utcHour, utcHours;
var init_hour = __esm({
  "node_modules/d3-time/src/hour.js"() {
    init_interval();
    init_duration();
    timeHour = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start2, end) => {
      return (end - start2) / durationHour;
    }, (date2) => {
      return date2.getHours();
    });
    timeHours = timeHour.range;
    utcHour = timeInterval((date2) => {
      date2.setUTCMinutes(0, 0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start2, end) => {
      return (end - start2) / durationHour;
    }, (date2) => {
      return date2.getUTCHours();
    });
    utcHours = utcHour.range;
  }
});

// node_modules/d3-time/src/day.js
var timeDay, timeDays, utcDay, utcDays, unixDay, unixDays;
var init_day = __esm({
  "node_modules/d3-time/src/day.js"() {
    init_interval();
    init_duration();
    timeDay = timeInterval(
      (date2) => date2.setHours(0, 0, 0, 0),
      (date2, step) => date2.setDate(date2.getDate() + step),
      (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
      (date2) => date2.getDate() - 1
    );
    timeDays = timeDay.range;
    utcDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start2, end) => {
      return (end - start2) / durationDay;
    }, (date2) => {
      return date2.getUTCDate() - 1;
    });
    utcDays = utcDay.range;
    unixDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start2, end) => {
      return (end - start2) / durationDay;
    }, (date2) => {
      return Math.floor(date2 / durationDay);
    });
    unixDays = unixDay.range;
  }
});

// node_modules/d3-time/src/week.js
function timeWeekday(i) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setDate(date2.getDate() + step * 7);
  }, (start2, end) => {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
function utcWeekday(i) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, (start2, end) => {
    return (end - start2) / durationWeek;
  });
}
var timeSunday, timeMonday, timeTuesday, timeWednesday, timeThursday, timeFriday, timeSaturday, timeSundays, timeMondays, timeTuesdays, timeWednesdays, timeThursdays, timeFridays, timeSaturdays, utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays;
var init_week = __esm({
  "node_modules/d3-time/src/week.js"() {
    init_interval();
    init_duration();
    timeSunday = timeWeekday(0);
    timeMonday = timeWeekday(1);
    timeTuesday = timeWeekday(2);
    timeWednesday = timeWeekday(3);
    timeThursday = timeWeekday(4);
    timeFriday = timeWeekday(5);
    timeSaturday = timeWeekday(6);
    timeSundays = timeSunday.range;
    timeMondays = timeMonday.range;
    timeTuesdays = timeTuesday.range;
    timeWednesdays = timeWednesday.range;
    timeThursdays = timeThursday.range;
    timeFridays = timeFriday.range;
    timeSaturdays = timeSaturday.range;
    utcSunday = utcWeekday(0);
    utcMonday = utcWeekday(1);
    utcTuesday = utcWeekday(2);
    utcWednesday = utcWeekday(3);
    utcThursday = utcWeekday(4);
    utcFriday = utcWeekday(5);
    utcSaturday = utcWeekday(6);
    utcSundays = utcSunday.range;
    utcMondays = utcMonday.range;
    utcTuesdays = utcTuesday.range;
    utcWednesdays = utcWednesday.range;
    utcThursdays = utcThursday.range;
    utcFridays = utcFriday.range;
    utcSaturdays = utcSaturday.range;
  }
});

// node_modules/d3-time/src/month.js
var timeMonth, timeMonths, utcMonth, utcMonths;
var init_month = __esm({
  "node_modules/d3-time/src/month.js"() {
    init_interval();
    timeMonth = timeInterval((date2) => {
      date2.setDate(1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setMonth(date2.getMonth() + step);
    }, (start2, end) => {
      return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
    }, (date2) => {
      return date2.getMonth();
    });
    timeMonths = timeMonth.range;
    utcMonth = timeInterval((date2) => {
      date2.setUTCDate(1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCMonth(date2.getUTCMonth() + step);
    }, (start2, end) => {
      return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
    }, (date2) => {
      return date2.getUTCMonth();
    });
    utcMonths = utcMonth.range;
  }
});

// node_modules/d3-time/src/year.js
var timeYear, timeYears, utcYear, utcYears;
var init_year = __esm({
  "node_modules/d3-time/src/year.js"() {
    init_interval();
    timeYear = timeInterval((date2) => {
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step);
    }, (start2, end) => {
      return end.getFullYear() - start2.getFullYear();
    }, (date2) => {
      return date2.getFullYear();
    });
    timeYear.every = (k) => {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date2) => {
        date2.setFullYear(Math.floor(date2.getFullYear() / k) * k);
        date2.setMonth(0, 1);
        date2.setHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setFullYear(date2.getFullYear() + step * k);
      });
    };
    timeYears = timeYear.range;
    utcYear = timeInterval((date2) => {
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step);
    }, (start2, end) => {
      return end.getUTCFullYear() - start2.getUTCFullYear();
    }, (date2) => {
      return date2.getUTCFullYear();
    });
    utcYear.every = (k) => {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date2) => {
        date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k) * k);
        date2.setUTCMonth(0, 1);
        date2.setUTCHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setUTCFullYear(date2.getUTCFullYear() + step * k);
      });
    };
    utcYears = utcYear.range;
  }
});

// node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start2, stop, count3) {
    const reverse = stop < start2;
    if (reverse)
      [start2, stop] = [stop, start2];
    const interval2 = count3 && typeof count3.range === "function" ? count3 : tickInterval(start2, stop, count3);
    const ticks3 = interval2 ? interval2.range(start2, +stop + 1) : [];
    return reverse ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start2, stop, count3) {
    const target = Math.abs(stop - start2) / count3;
    const i = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i === tickIntervals.length)
      return year.every(tickStep(start2 / durationYear, stop / durationYear, count3));
    if (i === 0)
      return millisecond.every(Math.max(tickStep(start2, stop, count3), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }
  return [ticks2, tickInterval];
}
var utcTicks, utcTickInterval, timeTicks, timeTickInterval;
var init_ticks2 = __esm({
  "node_modules/d3-time/src/ticks.js"() {
    init_src4();
    init_duration();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
    [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
  }
});

// node_modules/d3-time/src/index.js
var init_src8 = __esm({
  "node_modules/d3-time/src/index.js"() {
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_ticks2();
  }
});

// node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y3, m2, d) {
  return { y: y3, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale4) {
  var locale_dateTime = locale4.dateTime, locale_date = locale4.date, locale_time = locale4.time, locale_periods = locale4.periods, locale_weekdays = locale4.days, locale_shortWeekdays = locale4.shortDays, locale_months = locale4.months, locale_shortMonths = locale4.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i = -1, j = 0, n = specifier.length, c2, pad2, format3;
      if (!(date2 instanceof Date))
        date2 = new Date(+date2);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad2 = pads[c2 = specifier.charAt(++i)]) != null)
            c2 = specifier.charAt(++i);
          else
            pad2 = c2 === "e" ? " " : "0";
          if (format3 = formats2[c2])
            c2 = format3(date2, pad2);
          string.push(c2);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
      if (i != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m2 = string.length, c2, parse3;
    while (i < n) {
      if (j >= m2)
        return -1;
      c2 = specifier.charCodeAt(i++);
      if (c2 === 37) {
        c2 = specifier.charAt(i++);
        parse3 = parses[c2 in pads ? specifier.charAt(i++) : c2];
        if (!parse3 || (j = parse3(d, string, j)) < 0)
          return -1;
      } else if (c2 != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
function pad(value2, fill, width) {
  var sign2 = value2 < 0 ? "-" : "", string = (sign2 ? -value2 : value2) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}
function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad(1 + timeDay.count(timeYear(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p) {
  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
}
function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
}
function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}
var pads, numberRe, percentRe, requoteRe;
var init_locale2 = __esm({
  "node_modules/d3-time-format/src/locale.js"() {
    init_src8();
    pads = { "-": "", "_": " ", "0": "0" };
    numberRe = /^\s*\d+/;
    percentRe = /^%/;
    requoteRe = /[\\^$*+?|[\]().{}]/g;
  }
});

// node_modules/d3-time-format/src/defaultLocale.js
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}
var locale2, timeFormat, timeParse, utcFormat, utcParse;
var init_defaultLocale2 = __esm({
  "node_modules/d3-time-format/src/defaultLocale.js"() {
    init_locale2();
    defaultLocale2({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
  }
});

// node_modules/d3-time-format/src/index.js
var init_src9 = __esm({
  "node_modules/d3-time-format/src/index.js"() {
    init_defaultLocale2();
  }
});

// node_modules/d3-scale/src/time.js
function date(t) {
  return new Date(t);
}
function number3(t) {
  return t instanceof Date ? +t : +new Date(+t);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth = format3("%B"), formatYear2 = format3("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale.invert = function(y3) {
    return new Date(invert(y3));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number3)) : domain().map(date);
  };
  scale.ticks = function(interval2) {
    var d = domain();
    return ticks2(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
  };
  scale.tickFormat = function(count3, specifier) {
    return specifier == null ? tickFormat2 : format3(specifier);
  };
  scale.nice = function(interval2) {
    var d = domain();
    if (!interval2 || typeof interval2.range !== "function")
      interval2 = tickInterval(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
    return interval2 ? domain(nice2(d, interval2)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}
var init_time = __esm({
  "node_modules/d3-scale/src/time.js"() {
    init_src8();
    init_src9();
    init_continuous();
    init_init();
    init_nice2();
  }
});

// node_modules/d3-scale/src/index.js
var init_src10 = __esm({
  "node_modules/d3-scale/src/index.js"() {
    init_band();
    init_linear2();
    init_log();
    init_ordinal();
    init_quantize2();
    init_time();
  }
});

// node_modules/d3-path/src/path.js
function Path() {
  this._x0 = this._y0 = this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
var pi, tau, epsilon, tauEpsilon, path_default;
var init_path = __esm({
  "node_modules/d3-path/src/path.js"() {
    pi = Math.PI;
    tau = 2 * pi;
    epsilon = 1e-6;
    tauEpsilon = tau - epsilon;
    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x3, y3) {
        this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y3);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x3, y3) {
        this._ += "L" + (this._x1 = +x3) + "," + (this._y1 = +y3);
      },
      quadraticCurveTo: function(x1, y1, x3, y3) {
        this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
      },
      bezierCurveTo: function(x1, y1, x22, y22, x3, y3) {
        this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
      },
      arcTo: function(x1, y1, x22, y22, r) {
        x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else if (!(l01_2 > epsilon))
          ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else {
          var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          if (Math.abs(t01 - 1) > epsilon) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }
          this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x3, y3, r, a0, a1, ccw) {
        x3 = +x3, y3 = +y3, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x3 + dx, y0 = y3 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._ += "L" + x0 + "," + y0;
        }
        if (!r)
          return;
        if (da < 0)
          da = da % tau + tau;
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x3 - dx) + "," + (y3 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        } else if (da > epsilon) {
          this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x3 + r * Math.cos(a1)) + "," + (this._y1 = y3 + r * Math.sin(a1));
        }
      },
      rect: function(x3, y3, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y3) + "h" + +w + "v" + +h + "h" + -w + "Z";
      },
      toString: function() {
        return this._;
      }
    };
    path_default = path;
  }
});

// node_modules/d3-path/src/index.js
var init_src11 = __esm({
  "node_modules/d3-path/src/index.js"() {
    init_path();
  }
});

// node_modules/d3-shape/src/constant.js
function constant_default4(x3) {
  return function constant4() {
    return x3;
  };
}
var init_constant6 = __esm({
  "node_modules/d3-shape/src/constant.js"() {
  }
});

// node_modules/d3-shape/src/math.js
function acos(x3) {
  return x3 > 1 ? 0 : x3 < -1 ? pi2 : Math.acos(x3);
}
function asin(x3) {
  return x3 >= 1 ? halfPi : x3 <= -1 ? -halfPi : Math.asin(x3);
}
var abs, atan2, cos, max2, min2, sin, sqrt, epsilon2, pi2, halfPi, tau2;
var init_math = __esm({
  "node_modules/d3-shape/src/math.js"() {
    abs = Math.abs;
    atan2 = Math.atan2;
    cos = Math.cos;
    max2 = Math.max;
    min2 = Math.min;
    sin = Math.sin;
    sqrt = Math.sqrt;
    epsilon2 = 1e-12;
    pi2 = Math.PI;
    halfPi = pi2 / 2;
    tau2 = 2 * pi2;
  }
});

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle;
}
function intersect(x0, y0, x1, y1, x22, y22, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x22, y32 = y3 - y22, t = y32 * x10 - x32 * y10;
  if (t * t < epsilon2)
    return;
  t = (x32 * (y0 - y22) - y32 * (x0 - x22)) / t;
  return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max2(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default4(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
    if (!context)
      context = buffer = path_default();
    if (r1 < r0)
      r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon2))
      context.moveTo(0, 0);
    else if (da > tau2 - epsilon2) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon2) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon2 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t02, t12;
      if (rp > epsilon2) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon2)
          p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon2)
          p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon2) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da < pi2 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min2(rc, (r0 - lc) / (kc - 1));
          rc1 = min2(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon2))
        context.moveTo(x01, y01);
      else if (rc1 > epsilon2) {
        t02 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t12 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc1 < rc)
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r1, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), !cw);
          context.arc(t12.cx, t12.cy, rc1, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else
        context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon2) || !(da0 > epsilon2))
        context.lineTo(x10, y10);
      else if (rc0 > epsilon2) {
        t02 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t12 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc0 < rc)
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r0, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), cw);
          context.arc(t12.cx, t12.cy, rc0, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else
        context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
      return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a2) * r, sin(a2) * r];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default4(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default4(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default4(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default4(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default4(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default4(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}
var init_arc = __esm({
  "node_modules/d3-shape/src/arc.js"() {
    init_src11();
    init_constant6();
    init_math();
  }
});

// node_modules/d3-shape/src/array.js
function array_default(x3) {
  return typeof x3 === "object" && "length" in x3 ? x3 : Array.from(x3);
}
var slice2;
var init_array4 = __esm({
  "node_modules/d3-shape/src/array.js"() {
    slice2 = Array.prototype.slice;
  }
});

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
function linear_default(context) {
  return new Linear(context);
}
var init_linear3 = __esm({
  "node_modules/d3-shape/src/curve/linear.js"() {
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
            break;
          case 1:
            this._point = 2;
          default:
            this._context.lineTo(x3, y3);
            break;
        }
      }
    };
  }
});

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}
var init_point = __esm({
  "node_modules/d3-shape/src/point.js"() {
  }
});

// node_modules/d3-shape/src/line.js
function line_default(x3, y3) {
  var defined = constant_default4(true), context = null, curve = linear_default, output = null;
  x3 = typeof x3 === "function" ? x3 : x3 === void 0 ? x : constant_default4(x3);
  y3 = typeof y3 === "function" ? y3 : y3 === void 0 ? y : constant_default4(y3);
  function line(data) {
    var i, n = (data = array_default(data)).length, d, defined0 = false, buffer;
    if (context == null)
      output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0)
          output.lineStart();
        else
          output.lineEnd();
      }
      if (defined0)
        output.point(+x3(d, i, data), +y3(d, i, data));
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x3 = typeof _ === "function" ? _ : constant_default4(+_), line) : x3;
  };
  line.y = function(_) {
    return arguments.length ? (y3 = typeof _ === "function" ? _ : constant_default4(+_), line) : y3;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default4(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}
var init_line = __esm({
  "node_modules/d3-shape/src/line.js"() {
    init_src11();
    init_array4();
    init_constant6();
    init_linear3();
    init_point();
  }
});

// node_modules/d3-shape/src/area.js
function area_default(x0, y0, y1) {
  var x1 = null, defined = constant_default4(true), context = null, curve = linear_default, output = null;
  x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant_default4(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default4(0) : constant_default4(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant_default4(+y1);
  function area2(data) {
    var i, j, k, n = (data = array_default(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null)
      output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area2.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default4(+_), x1 = null, area2) : x0;
  };
  area2.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default4(+_), area2) : x0;
  };
  area2.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), area2) : x1;
  };
  area2.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default4(+_), y1 = null, area2) : y0;
  };
  area2.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default4(+_), area2) : y0;
  };
  area2.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), area2) : y1;
  };
  area2.lineX0 = area2.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area2.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area2.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area2.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default4(!!_), area2) : defined;
  };
  area2.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area2) : curve;
  };
  area2.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area2) : context;
  };
  return area2;
}
var init_area = __esm({
  "node_modules/d3-shape/src/area.js"() {
    init_src11();
    init_array4();
    init_constant6();
    init_linear3();
    init_line();
    init_point();
  }
});

// node_modules/d3-shape/src/descending.js
function descending_default(a2, b) {
  return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}
var init_descending2 = __esm({
  "node_modules/d3-shape/src/descending.js"() {
  }
});

// node_modules/d3-shape/src/identity.js
function identity_default3(d) {
  return d;
}
var init_identity4 = __esm({
  "node_modules/d3-shape/src/identity.js"() {
  }
});

// node_modules/d3-shape/src/pie.js
function pie_default() {
  var value2 = identity_default3, sortValues = descending_default, sort = null, startAngle = constant_default4(0), endAngle = constant_default4(tau2), padAngle = constant_default4(0);
  function pie2(data) {
    var i, n = (data = array_default(data)).length, j, k, sum2 = 0, index5 = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
    for (i = 0; i < n; ++i) {
      if ((v = arcs[index5[i] = i] = +value2(data[i], i, data)) > 0) {
        sum2 += v;
      }
    }
    if (sortValues != null)
      index5.sort(function(i2, j2) {
        return sortValues(arcs[i2], arcs[j2]);
      });
    else if (sort != null)
      index5.sort(function(i2, j2) {
        return sort(data[i2], data[j2]);
      });
    for (i = 0, k = sum2 ? (da - n * pa) / sum2 : 0; i < n; ++i, a0 = a1) {
      j = index5[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie2.value = function(_) {
    return arguments.length ? (value2 = typeof _ === "function" ? _ : constant_default4(+_), pie2) : value2;
  };
  pie2.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie2) : sortValues;
  };
  pie2.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie2) : sort;
  };
  pie2.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default4(+_), pie2) : startAngle;
  };
  pie2.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default4(+_), pie2) : endAngle;
  };
  pie2.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default4(+_), pie2) : padAngle;
  };
  return pie2;
}
var init_pie = __esm({
  "node_modules/d3-shape/src/pie.js"() {
    init_array4();
    init_constant6();
    init_descending2();
    init_identity4();
    init_math();
  }
});

// node_modules/d3-shape/src/curve/radial.js
function Radial(curve) {
  this._curve = curve;
}
function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }
  radial._curve = curve;
  return radial;
}
var curveRadialLinear;
var init_radial = __esm({
  "node_modules/d3-shape/src/curve/radial.js"() {
    init_linear3();
    curveRadialLinear = curveRadial(linear_default);
    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a2, r) {
        this._curve.point(r * Math.sin(a2), r * -Math.cos(a2));
      }
    };
  }
});

// node_modules/d3-shape/src/lineRadial.js
function lineRadial(l) {
  var c2 = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  l.curve = function(_) {
    return arguments.length ? c2(curveRadial(_)) : c2()._curve;
  };
  return l;
}
function lineRadial_default() {
  return lineRadial(line_default().curve(curveRadialLinear));
}
var init_lineRadial = __esm({
  "node_modules/d3-shape/src/lineRadial.js"() {
    init_radial();
    init_line();
  }
});

// node_modules/d3-shape/src/curve/bump.js
function bumpX(context) {
  return new Bump(context, true);
}
var Bump;
var init_bump = __esm({
  "node_modules/d3-shape/src/curve/bump.js"() {
    Bump = class {
      constructor(context, x3) {
        this._context = context;
        this._x = x3;
      }
      areaStart() {
        this._line = 0;
      }
      areaEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      }
      point(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0: {
            this._point = 1;
            if (this._line)
              this._context.lineTo(x3, y3);
            else
              this._context.moveTo(x3, y3);
            break;
          }
          case 1:
            this._point = 2;
          default: {
            if (this._x)
              this._context.bezierCurveTo(this._x0 = (this._x0 + x3) / 2, this._y0, this._x0, y3, x3, y3);
            else
              this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y3) / 2, x3, this._y0, x3, y3);
            break;
          }
        }
        this._x0 = x3, this._y0 = y3;
      }
    };
  }
});

// node_modules/d3-shape/src/link.js
function linkSource(d) {
  return d.source;
}
function linkTarget(d) {
  return d.target;
}
function link(curve) {
  let source = linkSource;
  let target = linkTarget;
  let x3 = x;
  let y3 = y;
  let context = null;
  let output = null;
  function link3() {
    let buffer;
    const argv = slice2.call(arguments);
    const s2 = source.apply(this, argv);
    const t = target.apply(this, argv);
    if (context == null)
      output = curve(buffer = path_default());
    output.lineStart();
    argv[0] = s2, output.point(+x3.apply(this, argv), +y3.apply(this, argv));
    argv[0] = t, output.point(+x3.apply(this, argv), +y3.apply(this, argv));
    output.lineEnd();
    if (buffer)
      return output = null, buffer + "" || null;
  }
  link3.source = function(_) {
    return arguments.length ? (source = _, link3) : source;
  };
  link3.target = function(_) {
    return arguments.length ? (target = _, link3) : target;
  };
  link3.x = function(_) {
    return arguments.length ? (x3 = typeof _ === "function" ? _ : constant_default4(+_), link3) : x3;
  };
  link3.y = function(_) {
    return arguments.length ? (y3 = typeof _ === "function" ? _ : constant_default4(+_), link3) : y3;
  };
  link3.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link3) : context;
  };
  return link3;
}
function linkHorizontal() {
  return link(bumpX);
}
var init_link = __esm({
  "node_modules/d3-shape/src/link.js"() {
    init_src11();
    init_array4();
    init_constant6();
    init_bump();
    init_point();
  }
});

// node_modules/d3-shape/src/noop.js
function noop_default2() {
}
var init_noop2 = __esm({
  "node_modules/d3-shape/src/noop.js"() {
  }
});

// node_modules/d3-shape/src/curve/basis.js
function point2(that, x3, y3) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x3) / 6,
    (that._y0 + 4 * that._y1 + y3) / 6
  );
}
function Basis(context) {
  this._context = context;
}
function basis_default2(context) {
  return new Basis(context);
}
var init_basis2 = __esm({
  "node_modules/d3-shape/src/curve/basis.js"() {
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point2(this, this._x1, this._y1);
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          default:
            point2(this, x3, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = x3;
        this._y0 = this._y1, this._y1 = y3;
      }
    };
  }
});

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
function basisClosed_default2(context) {
  return new BasisClosed(context);
}
var init_basisClosed2 = __esm({
  "node_modules/d3-shape/src/curve/basisClosed.js"() {
    init_noop2();
    init_basis2();
    BasisClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x3, this._y2 = y3;
            break;
          case 1:
            this._point = 2;
            this._x3 = x3, this._y3 = y3;
            break;
          case 2:
            this._point = 3;
            this._x4 = x3, this._y4 = y3;
            this._context.moveTo((this._x0 + 4 * this._x1 + x3) / 6, (this._y0 + 4 * this._y1 + y3) / 6);
            break;
          default:
            point2(this, x3, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = x3;
        this._y0 = this._y1, this._y1 = y3;
      }
    };
  }
});

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
function basisOpen_default(context) {
  return new BasisOpen(context);
}
var init_basisOpen = __esm({
  "node_modules/d3-shape/src/curve/basisOpen.js"() {
    init_basis2();
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x3) / 6, y0 = (this._y0 + 4 * this._y1 + y3) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          default:
            point2(this, x3, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = x3;
        this._y0 = this._y1, this._y1 = y3;
      }
    };
  }
});

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
var bundle_default;
var init_bundle = __esm({
  "node_modules/d3-shape/src/curve/bundle.js"() {
    init_basis2();
    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x3 = this._x, y3 = this._y, j = x3.length - 1;
        if (j > 0) {
          var x0 = x3[0], y0 = y3[0], dx = x3[j] - x0, dy = y3[j] - y0, i = -1, t;
          while (++i <= j) {
            t = i / j;
            this._basis.point(
              this._beta * x3[i] + (1 - this._beta) * (x0 + t * dx),
              this._beta * y3[i] + (1 - this._beta) * (y0 + t * dy)
            );
          }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x3, y3) {
        this._x.push(+x3);
        this._y.push(+y3);
      }
    };
    bundle_default = function custom(beta) {
      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }
      bundle.beta = function(beta2) {
        return custom(+beta2);
      };
      return bundle;
    }(0.85);
  }
});

// node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x3, y3) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x3),
    that._y2 + that._k * (that._y1 - y3),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinal_default;
var init_cardinal = __esm({
  "node_modules/d3-shape/src/curve/cardinal.js"() {
    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            point3(this, this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
            break;
          case 1:
            this._point = 2;
            this._x1 = x3, this._y1 = y3;
            break;
          case 2:
            this._point = 3;
          default:
            point3(this, x3, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    cardinal_default = function custom2(tension) {
      function cardinal(context) {
        return new Cardinal(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom2(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalClosed_default;
var init_cardinalClosed = __esm({
  "node_modules/d3-shape/src/curve/cardinalClosed.js"() {
    init_noop2();
    init_cardinal();
    CardinalClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x3, this._y3 = y3;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x3, this._y4 = y3);
            break;
          case 2:
            this._point = 3;
            this._x5 = x3, this._y5 = y3;
            break;
          default:
            point3(this, x3, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    cardinalClosed_default = function custom3(tension) {
      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom3(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalOpen_default;
var init_cardinalOpen = __esm({
  "node_modules/d3-shape/src/curve/cardinalOpen.js"() {
    init_cardinal();
    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point3(this, x3, y3);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    cardinalOpen_default = function custom4(tension) {
      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom4(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x3, y3) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon2) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon2) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b + that._x1 * that._l23_2a - x3 * that._l12_2a) / m2;
    y22 = (y22 * b + that._y1 * that._l23_2a - y3 * that._l12_2a) / m2;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRom_default;
var init_catmullRom = __esm({
  "node_modules/d3-shape/src/curve/catmullRom.js"() {
    init_math();
    init_cardinal();
    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            this.point(this._x2, this._y2);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        if (this._point) {
          var x23 = this._x2 - x3, y23 = this._y2 - y3;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
          default:
            point4(this, x3, y3);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    catmullRom_default = function custom5(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom5(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomClosed_default;
var init_catmullRomClosed = __esm({
  "node_modules/d3-shape/src/curve/catmullRomClosed.js"() {
    init_cardinalClosed();
    init_noop2();
    init_catmullRom();
    CatmullRomClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        if (this._point) {
          var x23 = this._x2 - x3, y23 = this._y2 - y3;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x3, this._y3 = y3;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x3, this._y4 = y3);
            break;
          case 2:
            this._point = 3;
            this._x5 = x3, this._y5 = y3;
            break;
          default:
            point4(this, x3, y3);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    catmullRomClosed_default = function custom6(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom6(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomOpen_default;
var init_catmullRomOpen = __esm({
  "node_modules/d3-shape/src/curve/catmullRomOpen.js"() {
    init_cardinalOpen();
    init_catmullRom();
    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        if (this._point) {
          var x23 = this._x2 - x3, y23 = this._y2 - y3;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point4(this, x3, y3);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
      }
    };
    catmullRomOpen_default = function custom7(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom7(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
function linearClosed_default(context) {
  return new LinearClosed(context);
}
var init_linearClosed = __esm({
  "node_modules/d3-shape/src/curve/linearClosed.js"() {
    init_noop2();
    LinearClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point)
          this._context.closePath();
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        if (this._point)
          this._context.lineTo(x3, y3);
        else
          this._point = 1, this._context.moveTo(x3, y3);
      }
    };
  }
});

// node_modules/d3-shape/src/curve/monotone.js
function sign(x3) {
  return x3 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
function point5(that, t02, t12) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
function ReflectContext(context) {
  this._context = context;
}
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}
var init_monotone = __esm({
  "node_modules/d3-shape/src/curve/monotone.js"() {
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point5(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        var t12 = NaN;
        x3 = +x3, y3 = +y3;
        if (x3 === this._x1 && y3 === this._y1)
          return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point5(this, slope2(this, t12 = slope3(this, x3, y3)), t12);
            break;
          default:
            point5(this, this._t0, t12 = slope3(this, x3, y3));
            break;
        }
        this._x0 = this._x1, this._x1 = x3;
        this._y0 = this._y1, this._y1 = y3;
        this._t0 = t12;
      }
    };
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x3, y3) {
      MonotoneX.prototype.point.call(this, y3, x3);
    };
    ReflectContext.prototype = {
      moveTo: function(x3, y3) {
        this._context.moveTo(y3, x3);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x3, y3) {
        this._context.lineTo(y3, x3);
      },
      bezierCurveTo: function(x1, y1, x22, y22, x3, y3) {
        this._context.bezierCurveTo(y1, x1, y22, x22, y3, x3);
      }
    };
  }
});

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
function controlPoints(x3) {
  var i, n = x3.length - 1, m2, a2 = new Array(n), b = new Array(n), r = new Array(n);
  a2[0] = 0, b[0] = 2, r[0] = x3[0] + 2 * x3[1];
  for (i = 1; i < n - 1; ++i)
    a2[i] = 1, b[i] = 4, r[i] = 4 * x3[i] + 2 * x3[i + 1];
  a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x3[n - 1] + x3[n];
  for (i = 1; i < n; ++i)
    m2 = a2[i] / b[i - 1], b[i] -= m2, r[i] -= m2 * r[i - 1];
  a2[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i)
    a2[i] = (r[i] - a2[i + 1]) / b[i];
  b[n - 1] = (x3[n] + a2[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i)
    b[i] = 2 * x3[i + 1] - a2[i + 1];
  return [a2, b];
}
function natural_default(context) {
  return new Natural(context);
}
var init_natural = __esm({
  "node_modules/d3-shape/src/curve/natural.js"() {
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x3 = this._x, y3 = this._y, n = x3.length;
        if (n) {
          this._line ? this._context.lineTo(x3[0], y3[0]) : this._context.moveTo(x3[0], y3[0]);
          if (n === 2) {
            this._context.lineTo(x3[1], y3[1]);
          } else {
            var px = controlPoints(x3), py = controlPoints(y3);
            for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x3[i1], y3[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n === 1)
          this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x3, y3) {
        this._x.push(+x3);
        this._y.push(+y3);
      }
    };
  }
});

// node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}
var init_step = __esm({
  "node_modules/d3-shape/src/curve/step.js"() {
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2)
          this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        if (this._line >= 0)
          this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x3, y3) {
        x3 = +x3, y3 = +y3;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
            break;
          case 1:
            this._point = 2;
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y3);
              this._context.lineTo(x3, y3);
            } else {
              var x1 = this._x * (1 - this._t) + x3 * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y3);
            }
            break;
          }
        }
        this._x = x3, this._y = y3;
      }
    };
  }
});

// node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n = series.length) > 1))
    return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m2 = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m2; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
var init_none = __esm({
  "node_modules/d3-shape/src/offset/none.js"() {
  }
});

// node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0)
    o[n] = n;
  return o;
}
var init_none2 = __esm({
  "node_modules/d3-shape/src/order/none.js"() {
  }
});

// node_modules/d3-shape/src/stack.js
function stackValue(d, key2) {
  return d[key2];
}
function stackSeries(key2) {
  const series = [];
  series.key = key2;
  return series;
}
function stack_default() {
  var keys2 = constant_default4([]), order = none_default2, offset = none_default, value2 = stackValue;
  function stack(data) {
    var sz = Array.from(keys2.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value2(d, sz[i].key, j, data)]).data = d;
      }
    }
    for (i = 0, oz = array_default(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function(_) {
    return arguments.length ? (keys2 = typeof _ === "function" ? _ : constant_default4(Array.from(_)), stack) : keys2;
  };
  stack.value = function(_) {
    return arguments.length ? (value2 = typeof _ === "function" ? _ : constant_default4(+_), stack) : value2;
  };
  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none_default2 : typeof _ === "function" ? _ : constant_default4(Array.from(_)), stack) : order;
  };
  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none_default : _, stack) : offset;
  };
  return stack;
}
var init_stack = __esm({
  "node_modules/d3-shape/src/stack.js"() {
    init_array4();
    init_constant6();
    init_none();
    init_none2();
  }
});

// node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n = series.length) > 0))
    return;
  for (var i, j = 0, d, dy, yp, yn, n, m2 = series[order[0]].length; j < m2; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}
var init_diverging = __esm({
  "node_modules/d3-shape/src/offset/diverging.js"() {
  }
});

// node_modules/d3-shape/src/index.js
var init_src12 = __esm({
  "node_modules/d3-shape/src/index.js"() {
    init_arc();
    init_area();
    init_line();
    init_pie();
    init_lineRadial();
    init_link();
    init_basisClosed2();
    init_basisOpen();
    init_basis2();
    init_bundle();
    init_cardinalClosed();
    init_cardinalOpen();
    init_cardinal();
    init_catmullRomClosed();
    init_catmullRomOpen();
    init_catmullRom();
    init_linearClosed();
    init_linear3();
    init_monotone();
    init_natural();
    init_step();
    init_stack();
    init_diverging();
  }
});

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}
var init_toDate = __esm({
  "node_modules/date-fns/esm/toDate/index.js"() {
  }
});

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number5 = Number(dirtyNumber);
  if (isNaN(number5)) {
    return number5;
  }
  return number5 < 0 ? Math.ceil(number5) : Math.floor(number5);
}
var init_toInteger = __esm({
  "node_modules/date-fns/esm/_lib/toInteger/index.js"() {
  }
});

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  date2.setDate(date2.getDate() + amount);
  return date2;
}
var init_addDays = __esm({
  "node_modules/date-fns/esm/addDays/index.js"() {
    init_toInteger();
    init_toDate();
  }
});

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var init_addMilliseconds = __esm({
  "node_modules/date-fns/esm/addMilliseconds/index.js"() {
    init_toInteger();
    init_toDate();
  }
});

// node_modules/date-fns/esm/addHours/index.js
function addHours(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
var MILLISECONDS_IN_HOUR;
var init_addHours = __esm({
  "node_modules/date-fns/esm/addHours/index.js"() {
    init_toInteger();
    init_addMilliseconds();
    MILLISECONDS_IN_HOUR = 36e5;
  }
});

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(dirtyDate) {
  var date2 = new Date(dirtyDate.getTime());
  var baseTimezoneOffset = Math.ceil(date2.getTimezoneOffset());
  date2.setSeconds(0, 0);
  var millisecondsPartOfTimezoneOffset = date2.getTime() % MILLISECONDS_IN_MINUTE;
  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
}
var MILLISECONDS_IN_MINUTE;
var init_getTimezoneOffsetInMilliseconds = __esm({
  "node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js"() {
    MILLISECONDS_IN_MINUTE = 6e4;
  }
});

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  date2.setHours(0, 0, 0, 0);
  return date2;
}
var init_startOfDay = __esm({
  "node_modules/date-fns/esm/startOfDay/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}
var MILLISECONDS_IN_DAY;
var init_differenceInCalendarDays = __esm({
  "node_modules/date-fns/esm/differenceInCalendarDays/index.js"() {
    init_getTimezoneOffsetInMilliseconds();
    init_startOfDay();
    MILLISECONDS_IN_DAY = 864e5;
  }
});

// node_modules/date-fns/esm/addMinutes/index.js
function addMinutes(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE2);
}
var MILLISECONDS_IN_MINUTE2;
var init_addMinutes = __esm({
  "node_modules/date-fns/esm/addMinutes/index.js"() {
    init_toInteger();
    init_addMilliseconds();
    MILLISECONDS_IN_MINUTE2 = 6e4;
  }
});

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  var year = date2.getFullYear();
  var monthIndex = date2.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}
var init_getDaysInMonth = __esm({
  "node_modules/date-fns/esm/getDaysInMonth/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  var desiredMonth = date2.getMonth() + amount;
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(date2.getFullYear(), desiredMonth, 1);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  date2.setMonth(desiredMonth, Math.min(daysInMonth, date2.getDate()));
  return date2;
}
var init_addMonths = __esm({
  "node_modules/date-fns/esm/addMonths/index.js"() {
    init_toInteger();
    init_toDate();
    init_getDaysInMonth();
  }
});

// node_modules/date-fns/esm/addSeconds/index.js
function addSeconds(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * 1e3);
}
var init_addSeconds = __esm({
  "node_modules/date-fns/esm/addSeconds/index.js"() {
    init_toInteger();
    init_addMilliseconds();
  }
});

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}
var init_addYears = __esm({
  "node_modules/date-fns/esm/addYears/index.js"() {
    init_toInteger();
    init_addMonths();
  }
});

// node_modules/date-fns/esm/compareAsc/index.js
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
var init_compareAsc = __esm({
  "node_modules/date-fns/esm/compareAsc/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  return !isNaN(date2);
}
var init_isValid = __esm({
  "node_modules/date-fns/esm/isValid/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/differenceInCalendarMonths/index.js
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
var init_differenceInCalendarMonths = __esm({
  "node_modules/date-fns/esm/differenceInCalendarMonths/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/differenceInCalendarYears/index.js
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}
var init_differenceInCalendarYears = __esm({
  "node_modules/date-fns/esm/differenceInCalendarYears/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/differenceInDays/index.js
function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign2 * difference);
  var isLastDayNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}
var init_differenceInDays = __esm({
  "node_modules/date-fns/esm/differenceInDays/index.js"() {
    init_toDate();
    init_differenceInCalendarDays();
    init_compareAsc();
  }
});

// node_modules/date-fns/esm/differenceInMilliseconds/index.js
function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getTime() - dateRight.getTime();
}
var init_differenceInMilliseconds = __esm({
  "node_modules/date-fns/esm/differenceInMilliseconds/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/differenceInHours/index.js
function differenceInHours(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR2;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
}
var MILLISECONDS_IN_HOUR2;
var init_differenceInHours = __esm({
  "node_modules/date-fns/esm/differenceInHours/index.js"() {
    init_differenceInMilliseconds();
    MILLISECONDS_IN_HOUR2 = 36e5;
  }
});

// node_modules/date-fns/esm/differenceInMinutes/index.js
function differenceInMinutes(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE3;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
}
var MILLISECONDS_IN_MINUTE3;
var init_differenceInMinutes = __esm({
  "node_modules/date-fns/esm/differenceInMinutes/index.js"() {
    init_differenceInMilliseconds();
    MILLISECONDS_IN_MINUTE3 = 6e4;
  }
});

// node_modules/date-fns/esm/differenceInMonths/index.js
function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  dateLeft.setMonth(dateLeft.getMonth() - sign2 * difference);
  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - isLastMonthNotFull);
  return result === 0 ? 0 : result;
}
var init_differenceInMonths = __esm({
  "node_modules/date-fns/esm/differenceInMonths/index.js"() {
    init_toDate();
    init_differenceInCalendarMonths();
    init_compareAsc();
  }
});

// node_modules/date-fns/esm/differenceInSeconds/index.js
function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1e3;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
}
var init_differenceInSeconds = __esm({
  "node_modules/date-fns/esm/differenceInSeconds/index.js"() {
    init_differenceInMilliseconds();
  }
});

// node_modules/date-fns/esm/differenceInYears/index.js
function differenceInYears(dirtyDateLeft, dirtyDateRight) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(dateLeft.getFullYear() - sign2 * difference);
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - isLastYearNotFull);
  return result === 0 ? 0 : result;
}
var init_differenceInYears = __esm({
  "node_modules/date-fns/esm/differenceInYears/index.js"() {
    init_toDate();
    init_differenceInCalendarYears();
    init_compareAsc();
  }
});

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
function formatDistance(token, count3, options2) {
  options2 = options2 || {};
  var result;
  if (typeof formatDistanceLocale[token] === "string") {
    result = formatDistanceLocale[token];
  } else if (count3 === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace("{{count}}", count3);
  }
  if (options2.addSuffix) {
    if (options2.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
}
var formatDistanceLocale;
var init_formatDistance = __esm({
  "node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js"() {
    formatDistanceLocale = {
      lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
      },
      xSeconds: {
        one: "1 second",
        other: "{{count}} seconds"
      },
      halfAMinute: "half a minute",
      lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
      },
      xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "about 1 hour",
        other: "about {{count}} hours"
      },
      xHours: {
        one: "1 hour",
        other: "{{count}} hours"
      },
      xDays: {
        one: "1 day",
        other: "{{count}} days"
      },
      aboutXMonths: {
        one: "about 1 month",
        other: "about {{count}} months"
      },
      xMonths: {
        one: "1 month",
        other: "{{count}} months"
      },
      aboutXYears: {
        one: "about 1 year",
        other: "about {{count}} years"
      },
      xYears: {
        one: "1 year",
        other: "{{count}} years"
      },
      overXYears: {
        one: "over 1 year",
        other: "over {{count}} years"
      },
      almostXYears: {
        one: "almost 1 year",
        other: "almost {{count}} years"
      }
    };
  }
});

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function(dirtyOptions) {
    var options2 = dirtyOptions || {};
    var width = options2.width ? String(options2.width) : args.defaultWidth;
    var format3 = args.formats[width] || args.formats[args.defaultWidth];
    return format3;
  };
}
var init_buildFormatLongFn = __esm({
  "node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js"() {
  }
});

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats, timeFormats, dateTimeFormats, formatLong, formatLong_default;
var init_formatLong = __esm({
  "node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js"() {
    init_buildFormatLongFn();
    dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
    formatLong_default = formatLong;
  }
});

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}
var formatRelativeLocale;
var init_formatRelative = __esm({
  "node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js"() {
    formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: "P"
    };
  }
});

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, dirtyOptions) {
    var options2 = dirtyOptions || {};
    var context = options2.context ? String(options2.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options2.width ? String(options2.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options2.width ? String(options2.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index5 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index5];
  };
}
var init_buildLocalizeFn = __esm({
  "node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js"() {
  }
});

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number5 = Number(dirtyNumber);
  var rem100 = number5 % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number5 + "st";
      case 2:
        return number5 + "nd";
      case 3:
        return number5 + "rd";
    }
  }
  return number5 + "th";
}
var eraValues, quarterValues, monthValues, dayValues, dayPeriodValues, formattingDayPeriodValues, localize, localize_default;
var init_localize = __esm({
  "node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js"() {
    init_buildLocalizeFn();
    eraValues = {
      narrow: ["B", "A"],
      abbreviated: ["BC", "AD"],
      wide: ["Before Christ", "Anno Domini"]
    };
    quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
    };
    monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };
    dayValues = {
      narrow: ["S", "M", "T", "W", "T", "F", "S"],
      short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    };
    dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      }
    };
    formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      }
    };
    localize = {
      ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: function(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
    localize_default = localize;
  }
});

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options2 = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) {
      return null;
    }
    var value2 = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value2 = options2.valueCallback ? options2.valueCallback(value2) : value2;
    return {
      value: value2,
      rest: string.slice(matchedString.length)
    };
  };
}
var init_buildMatchPatternFn = __esm({
  "node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js"() {
  }
});

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options2 = dirtyOptions || {};
    var width = options2.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value2;
    if (Object.prototype.toString.call(parsePatterns) === "[object Array]") {
      value2 = findIndex(parsePatterns, function(pattern2) {
        return pattern2.test(string);
      });
    } else {
      value2 = findKey(parsePatterns, function(pattern2) {
        return pattern2.test(string);
      });
    }
    value2 = args.valueCallback ? args.valueCallback(value2) : value2;
    value2 = options2.valueCallback ? options2.valueCallback(value2) : value2;
    return {
      value: value2,
      rest: string.slice(matchedString.length)
    };
  };
}
function findKey(object, predicate) {
  for (var key2 in object) {
    if (object.hasOwnProperty(key2) && predicate(object[key2])) {
      return key2;
    }
  }
}
function findIndex(array4, predicate) {
  for (var key2 = 0; key2 < array4.length; key2++) {
    if (predicate(array4[key2])) {
      return key2;
    }
  }
}
var init_buildMatchFn = __esm({
  "node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js"() {
  }
});

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern, parseOrdinalNumberPattern, matchEraPatterns, parseEraPatterns, matchQuarterPatterns, parseQuarterPatterns, matchMonthPatterns, parseMonthPatterns, matchDayPatterns, parseDayPatterns, matchDayPeriodPatterns, parseDayPeriodPatterns, match, match_default;
var init_match = __esm({
  "node_modules/date-fns/esm/locale/en-US/_lib/match/index.js"() {
    init_buildMatchPatternFn();
    init_buildMatchFn();
    matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    parseOrdinalNumberPattern = /\d+/i;
    matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value2) {
          return parseInt(value2, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: function(index5) {
          return index5 + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
    match_default = match;
  }
});

// node_modules/date-fns/esm/locale/en-US/index.js
var locale3, en_US_default;
var init_en_US = __esm({
  "node_modules/date-fns/esm/locale/en-US/index.js"() {
    init_formatDistance();
    init_formatLong();
    init_formatRelative();
    init_localize();
    init_match();
    locale3 = {
      code: "en-US",
      formatDistance,
      formatLong: formatLong_default,
      formatRelative,
      localize: localize_default,
      match: match_default,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    en_US_default = locale3;
  }
});

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var init_subMilliseconds = __esm({
  "node_modules/date-fns/esm/subMilliseconds/index.js"() {
    init_toInteger();
    init_addMilliseconds();
  }
});

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number5, targetLength) {
  var sign2 = number5 < 0 ? "-" : "";
  var output = Math.abs(number5).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign2 + output;
}
var init_addLeadingZeros = __esm({
  "node_modules/date-fns/esm/_lib/addLeadingZeros/index.js"() {
  }
});

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters, lightFormatters_default;
var init_lightFormatters = __esm({
  "node_modules/date-fns/esm/_lib/format/lightFormatters/index.js"() {
    init_addLeadingZeros();
    formatters = {
      y: function(date2, token) {
        var signedYear = date2.getUTCFullYear();
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
      },
      M: function(date2, token) {
        var month = date2.getUTCMonth();
        return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
      },
      d: function(date2, token) {
        return addLeadingZeros(date2.getUTCDate(), token.length);
      },
      a: function(date2, token) {
        var dayPeriodEnumValue = date2.getUTCHours() / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
          case "aaa":
            return dayPeriodEnumValue.toUpperCase();
          case "aaaaa":
            return dayPeriodEnumValue[0];
          case "aaaa":
          default:
            return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
        }
      },
      h: function(date2, token) {
        return addLeadingZeros(date2.getUTCHours() % 12 || 12, token.length);
      },
      H: function(date2, token) {
        return addLeadingZeros(date2.getUTCHours(), token.length);
      },
      m: function(date2, token) {
        return addLeadingZeros(date2.getUTCMinutes(), token.length);
      },
      s: function(date2, token) {
        return addLeadingZeros(date2.getUTCSeconds(), token.length);
      },
      S: function(date2, token) {
        var numberOfDigits = token.length;
        var milliseconds2 = date2.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
      }
    };
    lightFormatters_default = formatters;
  }
});

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
function getUTCDayOfYear(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  var timestamp = date2.getTime();
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date2.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY2) + 1;
}
var MILLISECONDS_IN_DAY2;
var init_getUTCDayOfYear = __esm({
  "node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js"() {
    init_toDate();
    MILLISECONDS_IN_DAY2 = 864e5;
  }
});

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}
var init_startOfUTCISOWeek = __esm({
  "node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js"() {
    init_toDate();
  }
});

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
var init_getUTCISOWeekYear = __esm({
  "node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js"() {
    init_toDate();
    init_startOfUTCISOWeek();
  }
});

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCISOWeek(fourthOfJanuary);
  return date2;
}
var init_startOfUTCISOWeekYear = __esm({
  "node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js"() {
    init_getUTCISOWeekYear();
    init_startOfUTCISOWeek();
  }
});

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
function getUTCISOWeek(dirtyDate) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date2).getTime() - startOfUTCISOWeekYear(date2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
var MILLISECONDS_IN_WEEK;
var init_getUTCISOWeek = __esm({
  "node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js"() {
    init_toDate();
    init_startOfUTCISOWeek();
    init_startOfUTCISOWeekYear();
    MILLISECONDS_IN_WEEK = 6048e5;
  }
});

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var options2 = dirtyOptions || {};
  var locale4 = options2.locale;
  var localeWeekStartsOn = locale4 && locale4.options && locale4.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}
var init_startOfUTCWeek = __esm({
  "node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js"() {
    init_toInteger();
    init_toDate();
  }
});

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate, dirtyOptions);
  var year = date2.getUTCFullYear();
  var options2 = dirtyOptions || {};
  var locale4 = options2.locale;
  var localeFirstWeekContainsDate = locale4 && locale4.options && locale4.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
var init_getUTCWeekYear = __esm({
  "node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js"() {
    init_toInteger();
    init_toDate();
    init_startOfUTCWeek();
  }
});

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var options2 = dirtyOptions || {};
  var locale4 = options2.locale;
  var localeFirstWeekContainsDate = locale4 && locale4.options && locale4.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options2.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCWeek(firstWeek, dirtyOptions);
  return date2;
}
var init_startOfUTCWeekYear = __esm({
  "node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js"() {
    init_toInteger();
    init_getUTCWeekYear();
    init_startOfUTCWeek();
  }
});

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
function getUTCWeek(dirtyDate, options2) {
  if (arguments.length < 1) {
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  }
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCWeek(date2, options2).getTime() - startOfUTCWeekYear(date2, options2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}
var MILLISECONDS_IN_WEEK2;
var init_getUTCWeek = __esm({
  "node_modules/date-fns/esm/_lib/getUTCWeek/index.js"() {
    init_toDate();
    init_startOfUTCWeek();
    init_startOfUTCWeekYear();
    MILLISECONDS_IN_WEEK2 = 6048e5;
  }
});

// node_modules/date-fns/esm/_lib/format/formatters/index.js
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign2 + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign2 + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign2 = offset > 0 ? "-" : "+";
    return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign2 + hours + delimiter + minutes;
}
var dayPeriodEnum, formatters2, formatters_default;
var init_formatters = __esm({
  "node_modules/date-fns/esm/_lib/format/formatters/index.js"() {
    init_lightFormatters();
    init_getUTCDayOfYear();
    init_getUTCISOWeek();
    init_getUTCISOWeekYear();
    init_getUTCWeek();
    init_getUTCWeekYear();
    init_addLeadingZeros();
    dayPeriodEnum = {
      am: "am",
      pm: "pm",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    };
    formatters2 = {
      G: function(date2, token, localize2) {
        var era = date2.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
          case "G":
          case "GG":
          case "GGG":
            return localize2.era(era, {
              width: "abbreviated"
            });
          case "GGGGG":
            return localize2.era(era, {
              width: "narrow"
            });
          case "GGGG":
          default:
            return localize2.era(era, {
              width: "wide"
            });
        }
      },
      y: function(date2, token, localize2) {
        if (token === "yo") {
          var signedYear = date2.getUTCFullYear();
          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize2.ordinalNumber(year, {
            unit: "year"
          });
        }
        return lightFormatters_default.y(date2, token);
      },
      Y: function(date2, token, localize2, options2) {
        var signedWeekYear = getUTCWeekYear(date2, options2);
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
        if (token === "YY") {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros(twoDigitYear, 2);
        }
        if (token === "Yo") {
          return localize2.ordinalNumber(weekYear, {
            unit: "year"
          });
        }
        return addLeadingZeros(weekYear, token.length);
      },
      R: function(date2, token) {
        var isoWeekYear = getUTCISOWeekYear(date2);
        return addLeadingZeros(isoWeekYear, token.length);
      },
      u: function(date2, token) {
        var year = date2.getUTCFullYear();
        return addLeadingZeros(year, token.length);
      },
      Q: function(date2, token, localize2) {
        var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
        switch (token) {
          case "Q":
            return String(quarter);
          case "QQ":
            return addLeadingZeros(quarter, 2);
          case "Qo":
            return localize2.ordinalNumber(quarter, {
              unit: "quarter"
            });
          case "QQQ":
            return localize2.quarter(quarter, {
              width: "abbreviated",
              context: "formatting"
            });
          case "QQQQQ":
            return localize2.quarter(quarter, {
              width: "narrow",
              context: "formatting"
            });
          case "QQQQ":
          default:
            return localize2.quarter(quarter, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      q: function(date2, token, localize2) {
        var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
        switch (token) {
          case "q":
            return String(quarter);
          case "qq":
            return addLeadingZeros(quarter, 2);
          case "qo":
            return localize2.ordinalNumber(quarter, {
              unit: "quarter"
            });
          case "qqq":
            return localize2.quarter(quarter, {
              width: "abbreviated",
              context: "standalone"
            });
          case "qqqqq":
            return localize2.quarter(quarter, {
              width: "narrow",
              context: "standalone"
            });
          case "qqqq":
          default:
            return localize2.quarter(quarter, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      M: function(date2, token, localize2) {
        var month = date2.getUTCMonth();
        switch (token) {
          case "M":
          case "MM":
            return lightFormatters_default.M(date2, token);
          case "Mo":
            return localize2.ordinalNumber(month + 1, {
              unit: "month"
            });
          case "MMM":
            return localize2.month(month, {
              width: "abbreviated",
              context: "formatting"
            });
          case "MMMMM":
            return localize2.month(month, {
              width: "narrow",
              context: "formatting"
            });
          case "MMMM":
          default:
            return localize2.month(month, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      L: function(date2, token, localize2) {
        var month = date2.getUTCMonth();
        switch (token) {
          case "L":
            return String(month + 1);
          case "LL":
            return addLeadingZeros(month + 1, 2);
          case "Lo":
            return localize2.ordinalNumber(month + 1, {
              unit: "month"
            });
          case "LLL":
            return localize2.month(month, {
              width: "abbreviated",
              context: "standalone"
            });
          case "LLLLL":
            return localize2.month(month, {
              width: "narrow",
              context: "standalone"
            });
          case "LLLL":
          default:
            return localize2.month(month, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      w: function(date2, token, localize2, options2) {
        var week = getUTCWeek(date2, options2);
        if (token === "wo") {
          return localize2.ordinalNumber(week, {
            unit: "week"
          });
        }
        return addLeadingZeros(week, token.length);
      },
      I: function(date2, token, localize2) {
        var isoWeek = getUTCISOWeek(date2);
        if (token === "Io") {
          return localize2.ordinalNumber(isoWeek, {
            unit: "week"
          });
        }
        return addLeadingZeros(isoWeek, token.length);
      },
      d: function(date2, token, localize2) {
        if (token === "do") {
          return localize2.ordinalNumber(date2.getUTCDate(), {
            unit: "date"
          });
        }
        return lightFormatters_default.d(date2, token);
      },
      D: function(date2, token, localize2) {
        var dayOfYear = getUTCDayOfYear(date2);
        if (token === "Do") {
          return localize2.ordinalNumber(dayOfYear, {
            unit: "dayOfYear"
          });
        }
        return addLeadingZeros(dayOfYear, token.length);
      },
      E: function(date2, token, localize2) {
        var dayOfWeek = date2.getUTCDay();
        switch (token) {
          case "E":
          case "EE":
          case "EEE":
            return localize2.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "EEEEE":
            return localize2.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "EEEEEE":
            return localize2.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "EEEE":
          default:
            return localize2.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      e: function(date2, token, localize2, options2) {
        var dayOfWeek = date2.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          case "e":
            return String(localDayOfWeek);
          case "ee":
            return addLeadingZeros(localDayOfWeek, 2);
          case "eo":
            return localize2.ordinalNumber(localDayOfWeek, {
              unit: "day"
            });
          case "eee":
            return localize2.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "eeeee":
            return localize2.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "eeeeee":
            return localize2.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "eeee":
          default:
            return localize2.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      c: function(date2, token, localize2, options2) {
        var dayOfWeek = date2.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          case "c":
            return String(localDayOfWeek);
          case "cc":
            return addLeadingZeros(localDayOfWeek, token.length);
          case "co":
            return localize2.ordinalNumber(localDayOfWeek, {
              unit: "day"
            });
          case "ccc":
            return localize2.day(dayOfWeek, {
              width: "abbreviated",
              context: "standalone"
            });
          case "ccccc":
            return localize2.day(dayOfWeek, {
              width: "narrow",
              context: "standalone"
            });
          case "cccccc":
            return localize2.day(dayOfWeek, {
              width: "short",
              context: "standalone"
            });
          case "cccc":
          default:
            return localize2.day(dayOfWeek, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      i: function(date2, token, localize2) {
        var dayOfWeek = date2.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
          case "i":
            return String(isoDayOfWeek);
          case "ii":
            return addLeadingZeros(isoDayOfWeek, token.length);
          case "io":
            return localize2.ordinalNumber(isoDayOfWeek, {
              unit: "day"
            });
          case "iii":
            return localize2.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "iiiii":
            return localize2.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "iiiiii":
            return localize2.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "iiii":
          default:
            return localize2.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      a: function(date2, token, localize2) {
        var hours = date2.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
          case "aaa":
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "aaaaa":
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaa":
          default:
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      b: function(date2, token, localize2) {
        var hours = date2.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        }
        switch (token) {
          case "b":
          case "bb":
          case "bbb":
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "bbbbb":
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbb":
          default:
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      B: function(date2, token, localize2) {
        var hours = date2.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
          case "B":
          case "BB":
          case "BBB":
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "BBBBB":
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBB":
          default:
            return localize2.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      h: function(date2, token, localize2) {
        if (token === "ho") {
          var hours = date2.getUTCHours() % 12;
          if (hours === 0)
            hours = 12;
          return localize2.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return lightFormatters_default.h(date2, token);
      },
      H: function(date2, token, localize2) {
        if (token === "Ho") {
          return localize2.ordinalNumber(date2.getUTCHours(), {
            unit: "hour"
          });
        }
        return lightFormatters_default.H(date2, token);
      },
      K: function(date2, token, localize2) {
        var hours = date2.getUTCHours() % 12;
        if (token === "Ko") {
          return localize2.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      k: function(date2, token, localize2) {
        var hours = date2.getUTCHours();
        if (hours === 0)
          hours = 24;
        if (token === "ko") {
          return localize2.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      m: function(date2, token, localize2) {
        if (token === "mo") {
          return localize2.ordinalNumber(date2.getUTCMinutes(), {
            unit: "minute"
          });
        }
        return lightFormatters_default.m(date2, token);
      },
      s: function(date2, token, localize2) {
        if (token === "so") {
          return localize2.ordinalNumber(date2.getUTCSeconds(), {
            unit: "second"
          });
        }
        return lightFormatters_default.s(date2, token);
      },
      S: function(date2, token) {
        return lightFormatters_default.S(date2, token);
      },
      X: function(date2, token, _localize, options2) {
        var originalDate = options2._originalDate || date2;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
          return "Z";
        }
        switch (token) {
          case "X":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          case "XXXX":
          case "XX":
            return formatTimezone(timezoneOffset);
          case "XXXXX":
          case "XXX":
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      x: function(date2, token, _localize, options2) {
        var originalDate = options2._originalDate || date2;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          case "x":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          case "xxxx":
          case "xx":
            return formatTimezone(timezoneOffset);
          case "xxxxx":
          case "xxx":
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      O: function(date2, token, _localize, options2) {
        var originalDate = options2._originalDate || date2;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          case "O":
          case "OO":
          case "OOO":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          case "OOOO":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      z: function(date2, token, _localize, options2) {
        var originalDate = options2._originalDate || date2;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          case "z":
          case "zz":
          case "zzz":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          case "zzzz":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      t: function(date2, token, _localize, options2) {
        var originalDate = options2._originalDate || date2;
        var timestamp = Math.floor(originalDate.getTime() / 1e3);
        return addLeadingZeros(timestamp, token.length);
      },
      T: function(date2, token, _localize, options2) {
        var originalDate = options2._originalDate || date2;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
      }
    };
    formatters_default = formatters2;
  }
});

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
function dateLongFormatter(pattern2, formatLong2) {
  switch (pattern2) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
}
function timeLongFormatter(pattern2, formatLong2) {
  switch (pattern2) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
}
function dateTimeLongFormatter(pattern2, formatLong2) {
  var matchResult = pattern2.match(/(P+)(p+)?/);
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern2, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
}
var longFormatters, longFormatters_default;
var init_longFormatters = __esm({
  "node_modules/date-fns/esm/_lib/format/longFormatters/index.js"() {
    longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
    longFormatters_default = longFormatters;
  }
});

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr");
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr");
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr");
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr");
  }
}
var protectedDayOfYearTokens, protectedWeekYearTokens;
var init_protectedTokens = __esm({
  "node_modules/date-fns/esm/_lib/protectedTokens/index.js"() {
    protectedDayOfYearTokens = ["D", "DD"];
    protectedWeekYearTokens = ["YY", "YYYY"];
  }
});

// node_modules/date-fns/esm/format/index.js
function format2(dirtyDate, dirtyFormatStr, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var formatStr = String(dirtyFormatStr);
  var options2 = dirtyOptions || {};
  var locale4 = options2.locale || en_US_default;
  var localeFirstWeekContainsDate = locale4.options && locale4.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale4.options && locale4.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale4.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale4.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate2 = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale4,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale4.formatLong, formatterOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!options2.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring);
      }
      if (!options2.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring);
      }
      return formatter(utcDate2, substring, locale4.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
var formattingTokensRegExp, longFormattingTokensRegExp, escapedStringRegExp, doubleQuoteRegExp, unescapedLatinCharacterRegExp;
var init_format = __esm({
  "node_modules/date-fns/esm/format/index.js"() {
    init_isValid();
    init_en_US();
    init_subMilliseconds();
    init_toDate();
    init_formatters();
    init_longFormatters();
    init_getTimezoneOffsetInMilliseconds();
    init_protectedTokens();
    init_toInteger();
    formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    escapedStringRegExp = /^'([^]*?)'?$/;
    doubleQuoteRegExp = /''/g;
    unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  }
});

// node_modules/date-fns/esm/subDays/index.js
function subDays(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}
var init_subDays = __esm({
  "node_modules/date-fns/esm/subDays/index.js"() {
    init_toInteger();
    init_addDays();
  }
});

// node_modules/date-fns/esm/subHours/index.js
function subHours(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addHours(dirtyDate, -amount);
}
var init_subHours = __esm({
  "node_modules/date-fns/esm/subHours/index.js"() {
    init_toInteger();
    init_addHours();
  }
});

// node_modules/date-fns/esm/subMinutes/index.js
function subMinutes(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addMinutes(dirtyDate, -amount);
}
var init_subMinutes = __esm({
  "node_modules/date-fns/esm/subMinutes/index.js"() {
    init_toInteger();
    init_addMinutes();
  }
});

// node_modules/date-fns/esm/subMonths/index.js
function subMonths(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}
var init_subMonths = __esm({
  "node_modules/date-fns/esm/subMonths/index.js"() {
    init_toInteger();
    init_addMonths();
  }
});

// node_modules/date-fns/esm/subSeconds/index.js
function subSeconds(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addSeconds(dirtyDate, -amount);
}
var init_subSeconds = __esm({
  "node_modules/date-fns/esm/subSeconds/index.js"() {
    init_toInteger();
    init_addSeconds();
  }
});

// node_modules/date-fns/esm/subYears/index.js
function subYears(dirtyDate, dirtyAmount) {
  if (arguments.length < 2) {
    throw new TypeError("2 arguments required, but only " + arguments.length + " present");
  }
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}
var init_subYears = __esm({
  "node_modules/date-fns/esm/subYears/index.js"() {
    init_toInteger();
    init_addYears();
  }
});

// node_modules/date-fns/esm/constants/index.js
var maxTime, minTime;
var init_constants6 = __esm({
  "node_modules/date-fns/esm/constants/index.js"() {
    maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
    minTime = -maxTime;
  }
});

// node_modules/date-fns/esm/index.js
var init_esm = __esm({
  "node_modules/date-fns/esm/index.js"() {
    init_addDays();
    init_addHours();
    init_addMinutes();
    init_addMonths();
    init_addSeconds();
    init_addYears();
    init_differenceInDays();
    init_differenceInHours();
    init_differenceInMinutes();
    init_differenceInMonths();
    init_differenceInSeconds();
    init_differenceInYears();
    init_format();
    init_subDays();
    init_subHours();
    init_subMinutes();
    init_subMonths();
    init_subSeconds();
    init_subYears();
    init_constants6();
  }
});

// node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
function toFloat(value2) {
  return parseFloat(value2) || 0;
}
function getBordersSize(styles) {
  var positions = [], len = arguments.length - 1;
  while (len-- > 0)
    positions[len] = arguments[len + 1];
  return positions.reduce(function(size, position2) {
    var value2 = styles["border-" + position2 + "-width"];
    return size + toFloat(value2);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var i = 0, list = positions; i < list.length; i += 1) {
    var position2 = list[i];
    var value2 = styles["padding-" + position2];
    paddings[position2] = toFloat(value2);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth;
  var clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser2) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(ref) {
  var x3 = ref.x;
  var y3 = ref.y;
  var width = ref.width;
  var height = ref.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x: x3,
    y: y3,
    width,
    height,
    top: y3,
    right: x3 + width,
    bottom: height + y3,
    left: x3
  });
  return rect;
}
function createRectInit(x3, y3, width, height) {
  return { x: x3, y: y3, width, height };
}
var MapShim, isBrowser2, global$1, requestAnimationFrame$1, trailingTimeout, throttle, REFRESH_DELAY, transitionKeys, mutationObserverSupported, ResizeObserverController, defineConfigurable, getWindowOf, emptyRect, isSVGGraphicsElement, ResizeObservation, ResizeObserverEntry, ResizeObserverSPI, observers, ResizeObserver, index3, ResizeObserver_es_default;
var init_ResizeObserver_es = __esm({
  "node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"() {
    MapShim = function() {
      if (typeof Map !== "undefined") {
        return Map;
      }
      function getIndex(arr, key2) {
        var result = -1;
        arr.some(function(entry, index5) {
          if (entry[0] === key2) {
            result = index5;
            return true;
          }
          return false;
        });
        return result;
      }
      return function() {
        function anonymous() {
          this.__entries__ = [];
        }
        var prototypeAccessors = { size: { configurable: true } };
        prototypeAccessors.size.get = function() {
          return this.__entries__.length;
        };
        anonymous.prototype.get = function(key2) {
          var index5 = getIndex(this.__entries__, key2);
          var entry = this.__entries__[index5];
          return entry && entry[1];
        };
        anonymous.prototype.set = function(key2, value2) {
          var index5 = getIndex(this.__entries__, key2);
          if (~index5) {
            this.__entries__[index5][1] = value2;
          } else {
            this.__entries__.push([key2, value2]);
          }
        };
        anonymous.prototype.delete = function(key2) {
          var entries = this.__entries__;
          var index5 = getIndex(entries, key2);
          if (~index5) {
            entries.splice(index5, 1);
          }
        };
        anonymous.prototype.has = function(key2) {
          return !!~getIndex(this.__entries__, key2);
        };
        anonymous.prototype.clear = function() {
          this.__entries__.splice(0);
        };
        anonymous.prototype.forEach = function(callback, ctx) {
          var this$1 = this;
          if (ctx === void 0)
            ctx = null;
          for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {
            var entry = list[i];
            callback.call(ctx, entry[1], entry[0]);
          }
        };
        Object.defineProperties(anonymous.prototype, prototypeAccessors);
        return anonymous;
      }();
    }();
    isBrowser2 = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
    global$1 = function() {
      if (typeof global !== "undefined" && global.Math === Math) {
        return global;
      }
      if (typeof self !== "undefined" && self.Math === Math) {
        return self;
      }
      if (typeof window !== "undefined" && window.Math === Math) {
        return window;
      }
      return Function("return this")();
    }();
    requestAnimationFrame$1 = function() {
      if (typeof requestAnimationFrame === "function") {
        return requestAnimationFrame.bind(global$1);
      }
      return function(callback) {
        return setTimeout(function() {
          return callback(Date.now());
        }, 1e3 / 60);
      };
    }();
    trailingTimeout = 2;
    throttle = function(callback, delay) {
      var leadingCall = false, trailingCall = false, lastCallTime = 0;
      function resolvePending() {
        if (leadingCall) {
          leadingCall = false;
          callback();
        }
        if (trailingCall) {
          proxy();
        }
      }
      function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
      }
      function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
          if (timeStamp - lastCallTime < trailingTimeout) {
            return;
          }
          trailingCall = true;
        } else {
          leadingCall = true;
          trailingCall = false;
          setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
      }
      return proxy;
    };
    REFRESH_DELAY = 20;
    transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
    mutationObserverSupported = typeof MutationObserver !== "undefined";
    ResizeObserverController = function() {
      this.connected_ = false;
      this.mutationEventsAdded_ = false;
      this.mutationsObserver_ = null;
      this.observers_ = [];
      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
      this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    };
    ResizeObserverController.prototype.addObserver = function(observer) {
      if (!~this.observers_.indexOf(observer)) {
        this.observers_.push(observer);
      }
      if (!this.connected_) {
        this.connect_();
      }
    };
    ResizeObserverController.prototype.removeObserver = function(observer) {
      var observers2 = this.observers_;
      var index5 = observers2.indexOf(observer);
      if (~index5) {
        observers2.splice(index5, 1);
      }
      if (!observers2.length && this.connected_) {
        this.disconnect_();
      }
    };
    ResizeObserverController.prototype.refresh = function() {
      var changesDetected = this.updateObservers_();
      if (changesDetected) {
        this.refresh();
      }
    };
    ResizeObserverController.prototype.updateObservers_ = function() {
      var activeObservers = this.observers_.filter(function(observer) {
        return observer.gatherActive(), observer.hasActive();
      });
      activeObservers.forEach(function(observer) {
        return observer.broadcastActive();
      });
      return activeObservers.length > 0;
    };
    ResizeObserverController.prototype.connect_ = function() {
      if (!isBrowser2 || this.connected_) {
        return;
      }
      document.addEventListener("transitionend", this.onTransitionEnd_);
      window.addEventListener("resize", this.refresh);
      if (mutationObserverSupported) {
        this.mutationsObserver_ = new MutationObserver(this.refresh);
        this.mutationsObserver_.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      } else {
        document.addEventListener("DOMSubtreeModified", this.refresh);
        this.mutationEventsAdded_ = true;
      }
      this.connected_ = true;
    };
    ResizeObserverController.prototype.disconnect_ = function() {
      if (!isBrowser2 || !this.connected_) {
        return;
      }
      document.removeEventListener("transitionend", this.onTransitionEnd_);
      window.removeEventListener("resize", this.refresh);
      if (this.mutationsObserver_) {
        this.mutationsObserver_.disconnect();
      }
      if (this.mutationEventsAdded_) {
        document.removeEventListener("DOMSubtreeModified", this.refresh);
      }
      this.mutationsObserver_ = null;
      this.mutationEventsAdded_ = false;
      this.connected_ = false;
    };
    ResizeObserverController.prototype.onTransitionEnd_ = function(ref) {
      var propertyName = ref.propertyName;
      if (propertyName === void 0)
        propertyName = "";
      var isReflowProperty = transitionKeys.some(function(key2) {
        return !!~propertyName.indexOf(key2);
      });
      if (isReflowProperty) {
        this.refresh();
      }
    };
    ResizeObserverController.getInstance = function() {
      if (!this.instance_) {
        this.instance_ = new ResizeObserverController();
      }
      return this.instance_;
    };
    ResizeObserverController.instance_ = null;
    defineConfigurable = function(target, props) {
      for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {
        var key2 = list[i];
        Object.defineProperty(target, key2, {
          value: props[key2],
          enumerable: false,
          writable: false,
          configurable: true
        });
      }
      return target;
    };
    getWindowOf = function(target) {
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      return ownerGlobal || global$1;
    };
    emptyRect = createRectInit(0, 0, 0, 0);
    isSVGGraphicsElement = function() {
      if (typeof SVGGraphicsElement !== "undefined") {
        return function(target) {
          return target instanceof getWindowOf(target).SVGGraphicsElement;
        };
      }
      return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
      };
    }();
    ResizeObservation = function(target) {
      this.broadcastWidth = 0;
      this.broadcastHeight = 0;
      this.contentRect_ = createRectInit(0, 0, 0, 0);
      this.target = target;
    };
    ResizeObservation.prototype.isActive = function() {
      var rect = getContentRect(this.target);
      this.contentRect_ = rect;
      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    ResizeObservation.prototype.broadcastRect = function() {
      var rect = this.contentRect_;
      this.broadcastWidth = rect.width;
      this.broadcastHeight = rect.height;
      return rect;
    };
    ResizeObserverEntry = function(target, rectInit) {
      var contentRect = createReadOnlyRect(rectInit);
      defineConfigurable(this, { target, contentRect });
    };
    ResizeObserverSPI = function(callback, controller, callbackCtx) {
      this.activeObservations_ = [];
      this.observations_ = new MapShim();
      if (typeof callback !== "function") {
        throw new TypeError("The callback provided as parameter 1 is not a function.");
      }
      this.callback_ = callback;
      this.controller_ = controller;
      this.callbackCtx_ = callbackCtx;
    };
    ResizeObserverSPI.prototype.observe = function(target) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (observations.has(target)) {
        return;
      }
      observations.set(target, new ResizeObservation(target));
      this.controller_.addObserver(this);
      this.controller_.refresh();
    };
    ResizeObserverSPI.prototype.unobserve = function(target) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (!observations.has(target)) {
        return;
      }
      observations.delete(target);
      if (!observations.size) {
        this.controller_.removeObserver(this);
      }
    };
    ResizeObserverSPI.prototype.disconnect = function() {
      this.clearActive();
      this.observations_.clear();
      this.controller_.removeObserver(this);
    };
    ResizeObserverSPI.prototype.gatherActive = function() {
      var this$1 = this;
      this.clearActive();
      this.observations_.forEach(function(observation) {
        if (observation.isActive()) {
          this$1.activeObservations_.push(observation);
        }
      });
    };
    ResizeObserverSPI.prototype.broadcastActive = function() {
      if (!this.hasActive()) {
        return;
      }
      var ctx = this.callbackCtx_;
      var entries = this.activeObservations_.map(function(observation) {
        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
      });
      this.callback_.call(ctx, entries, ctx);
      this.clearActive();
    };
    ResizeObserverSPI.prototype.clearActive = function() {
      this.activeObservations_.splice(0);
    };
    ResizeObserverSPI.prototype.hasActive = function() {
      return this.activeObservations_.length > 0;
    };
    observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
    ResizeObserver = function(callback) {
      if (!(this instanceof ResizeObserver)) {
        throw new TypeError("Cannot call a class as a function.");
      }
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      var controller = ResizeObserverController.getInstance();
      var observer = new ResizeObserverSPI(callback, controller, this);
      observers.set(this, observer);
    };
    ["observe", "unobserve", "disconnect"].forEach(function(method) {
      ResizeObserver.prototype[method] = function() {
        return (ref = observers.get(this))[method].apply(ref, arguments);
        var ref;
      };
    });
    index3 = function() {
      if (typeof global$1.ResizeObserver !== "undefined") {
        return global$1.ResizeObserver;
      }
      return ResizeObserver;
    }();
    ResizeObserver_es_default = index3;
  }
});

// node_modules/d3-axis/src/identity.js
function identity_default4(x3) {
  return x3;
}
var init_identity5 = __esm({
  "node_modules/d3-axis/src/identity.js"() {
  }
});

// node_modules/d3-axis/src/axis.js
function translateX(x3) {
  return "translate(" + x3 + ",0)";
}
function translateY(y3) {
  return "translate(0," + y3 + ")";
}
function number4(scale) {
  return (d) => +scale(d);
}
function center(scale, offset) {
  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
  if (scale.round())
    offset = Math.round(offset);
  return (d) => +scale(d) + offset;
}
function entering() {
  return !this.__axis;
}
function axis(orient, scale) {
  var tickArguments = [], tickValues = null, tickFormat2 = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k = orient === top || orient === left ? -1 : 1, x3 = orient === left || orient === right ? "x" : "y", transform = orient === top || orient === bottom ? translateX : translateY;
  function axis3(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format3 = tickFormat2 == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity_default4 : tickFormat2, spacing = Math.max(tickSizeInner, 0) + tickPadding, range2 = scale.range(), range0 = +range2[0] + offset, range1 = +range2[range2.length - 1] + offset, position2 = (scale.bandwidth ? center : number4)(scale.copy(), offset), selection2 = context.selection ? context.selection() : context, path3 = selection2.selectAll(".domain").data([null]), tick = selection2.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text");
    path3 = path3.merge(path3.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x3 + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x3, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
    if (context !== selection2) {
      path3 = path3.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon3).attr("transform", function(d) {
        return isFinite(d = position2(d)) ? transform(d + offset) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon3).attr("transform", function(d) {
        var p = this.parentNode.__axis;
        return transform((p && isFinite(p = p(d)) ? p : position2(d)) + offset);
      });
    }
    tickExit.remove();
    path3.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
    tick.attr("opacity", 1).attr("transform", function(d) {
      return transform(position2(d) + offset);
    });
    line.attr(x3 + "2", k * tickSizeInner);
    text.attr(x3, k * spacing).text(format3);
    selection2.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection2.each(function() {
      this.__axis = position2;
    });
  }
  axis3.scale = function(_) {
    return arguments.length ? (scale = _, axis3) : scale;
  };
  axis3.ticks = function() {
    return tickArguments = Array.from(arguments), axis3;
  };
  axis3.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis3) : tickArguments.slice();
  };
  axis3.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis3) : tickValues && tickValues.slice();
  };
  axis3.tickFormat = function(_) {
    return arguments.length ? (tickFormat2 = _, axis3) : tickFormat2;
  };
  axis3.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis3) : tickSizeInner;
  };
  axis3.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis3) : tickSizeInner;
  };
  axis3.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis3) : tickSizeOuter;
  };
  axis3.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis3) : tickPadding;
  };
  axis3.offset = function(_) {
    return arguments.length ? (offset = +_, axis3) : offset;
  };
  return axis3;
}
function axisTop(scale) {
  return axis(top, scale);
}
function axisRight(scale) {
  return axis(right, scale);
}
function axisBottom(scale) {
  return axis(bottom, scale);
}
function axisLeft(scale) {
  return axis(left, scale);
}
var top, right, bottom, left, epsilon3;
var init_axis = __esm({
  "node_modules/d3-axis/src/axis.js"() {
    init_identity5();
    top = 1;
    right = 2;
    bottom = 3;
    left = 4;
    epsilon3 = 1e-6;
  }
});

// node_modules/d3-axis/src/index.js
var init_src13 = __esm({
  "node_modules/d3-axis/src/index.js"() {
    init_axis();
  }
});

// node_modules/warning/browser.js
var require_browser2 = __commonJS({
  "node_modules/warning/browser.js"(exports3, module2) {
    "use strict";
    var warning2 = function() {
    };
    if (true) {
      warning2 = function(condition, format3, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key2 = 2; key2 < len; key2++) {
          args[key2 - 2] = arguments[key2];
        }
        if (format3 === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (format3.length < 10 || /^[s\W]*$/.test(format3)) {
          throw new Error(
            "The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: " + format3
          );
        }
        if (!condition) {
          var argIndex = 0;
          var message = "Warning: " + format3.replace(/%s/g, function() {
            return args[argIndex++];
          });
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        }
      };
    }
    module2.exports = warning2;
  }
});

// node_modules/@carbon/utils-position/index.js
var _a, PLACEMENTS, defaultPositions, windowRef, Position, position, utils_position_default;
var init_utils_position = __esm({
  "node_modules/@carbon/utils-position/index.js"() {
    (function(PLACEMENTS2) {
      PLACEMENTS2["LEFT"] = "left";
      PLACEMENTS2["RIGHT"] = "right";
      PLACEMENTS2["TOP"] = "top";
      PLACEMENTS2["BOTTOM"] = "bottom";
    })(PLACEMENTS || (PLACEMENTS = {}));
    defaultPositions = (_a = {}, _a[PLACEMENTS.LEFT] = function(referenceOffset, target, referenceRect) {
      return {
        top: referenceOffset.top - Math.round(target.offsetHeight / 2) + Math.round(referenceRect.height / 2),
        left: Math.round(referenceOffset.left - target.offsetWidth)
      };
    }, _a[PLACEMENTS.RIGHT] = function(referenceOffset, target, referenceRect) {
      return {
        top: referenceOffset.top - Math.round(target.offsetHeight / 2) + Math.round(referenceRect.height / 2),
        left: Math.round(referenceOffset.left + referenceRect.width)
      };
    }, _a[PLACEMENTS.TOP] = function(referenceOffset, target, referenceRect) {
      return {
        top: Math.round(referenceOffset.top - target.offsetHeight),
        left: referenceOffset.left - Math.round(target.offsetWidth / 2) + Math.round(referenceRect.width / 2)
      };
    }, _a[PLACEMENTS.BOTTOM] = function(referenceOffset, target, referenceRect) {
      return {
        top: Math.round(referenceOffset.top + referenceRect.height),
        left: referenceOffset.left - Math.round(target.offsetWidth / 2) + Math.round(referenceRect.width / 2)
      };
    }, _a);
    windowRef = typeof window !== "undefined" ? window : {
      innerHeight: 0,
      scrollY: 0,
      innerWidth: 0,
      scrollX: 0
    };
    Position = function() {
      function Position2(positions) {
        if (positions === void 0) {
          positions = {};
        }
        this.positions = defaultPositions;
        this.positions = Object.assign({}, defaultPositions, positions);
      }
      Position2.prototype.getRelativeOffset = function(target) {
        var offsets = {
          left: target.offsetLeft,
          top: target.offsetTop
        };
        while (target.offsetParent && getComputedStyle(target.offsetParent).position === "static") {
          offsets.left += target.offsetLeft;
          offsets.top += target.offsetTop;
          target = target.offsetParent;
        }
        return offsets;
      };
      Position2.prototype.getAbsoluteOffset = function(target) {
        var currentNode = target;
        var margins = {
          top: 0,
          left: 0
        };
        while (currentNode.offsetParent) {
          var computed = getComputedStyle(currentNode.offsetParent);
          if (computed.position === "static" && computed.marginLeft && computed.marginTop) {
            if (parseInt(computed.marginTop, 10)) {
              margins.top += parseInt(computed.marginTop, 10);
            }
            if (parseInt(computed.marginLeft, 10)) {
              margins.left += parseInt(computed.marginLeft, 10);
            }
          }
          currentNode = currentNode.offsetParent;
        }
        var targetRect = target.getBoundingClientRect();
        var relativeRect = document.body.getBoundingClientRect();
        return {
          top: targetRect.top - relativeRect.top + margins.top,
          left: targetRect.left - relativeRect.left + margins.left
        };
      };
      Position2.prototype.findRelative = function(reference, target, placement) {
        var referenceOffset = this.getRelativeOffset(reference);
        var referenceRect = reference.getBoundingClientRect();
        return this.calculatePosition(referenceOffset, referenceRect, target, placement);
      };
      Position2.prototype.findAbsolute = function(reference, target, placement) {
        var referenceOffset = this.getAbsoluteOffset(reference);
        var referenceRect = reference.getBoundingClientRect();
        return this.calculatePosition(referenceOffset, referenceRect, target, placement);
      };
      Position2.prototype.findPosition = function(reference, target, placement, offsetFunction) {
        if (offsetFunction === void 0) {
          offsetFunction = this.getAbsoluteOffset;
        }
        var referenceOffset = offsetFunction(reference);
        var referenceRect = reference.getBoundingClientRect();
        return this.calculatePosition(referenceOffset, referenceRect, target, placement);
      };
      Position2.prototype.findPositionAt = function(offset, target, placement) {
        return this.calculatePosition(offset, { height: 0, width: 0 }, target, placement);
      };
      Position2.prototype.getPlacementBox = function(target, position2) {
        var targetBottom = target.offsetHeight + position2.top;
        var targetRight = target.offsetWidth + position2.left;
        return {
          top: position2.top,
          bottom: targetBottom,
          left: position2.left,
          right: targetRight
        };
      };
      Position2.prototype.addOffset = function(position2, top2, left3) {
        if (top2 === void 0) {
          top2 = 0;
        }
        if (left3 === void 0) {
          left3 = 0;
        }
        return Object.assign({}, position2, {
          top: position2.top + top2,
          left: position2.left + left3
        });
      };
      Position2.prototype.setElement = function(element, position2) {
        element.style.top = position2.top + "px";
        element.style.left = position2.left + "px";
      };
      Position2.prototype.findBestPlacement = function(reference, target, placements, containerFunction, positionFunction) {
        var _this = this;
        if (containerFunction === void 0) {
          containerFunction = this.defaultContainerFunction;
        }
        if (positionFunction === void 0) {
          positionFunction = this.findPosition;
        }
        var weightedPlacements = placements.map(function(placement) {
          var pos = positionFunction(reference, target, placement);
          var box = _this.getPlacementBox(target, pos);
          var hiddenHeight = box.bottom - containerFunction().height;
          var hiddenWidth = box.right - containerFunction().width;
          hiddenHeight = hiddenHeight < 0 ? target.offsetHeight : hiddenHeight;
          hiddenWidth = hiddenWidth < 0 ? target.offsetWidth : hiddenWidth;
          var area2 = target.offsetHeight * target.offsetWidth;
          var hiddenArea = hiddenHeight * hiddenWidth;
          var visibleArea = area2 - hiddenArea;
          visibleArea = visibleArea === 0 ? area2 : visibleArea;
          var visiblePercent = visibleArea / area2;
          return {
            placement,
            weight: visiblePercent
          };
        });
        weightedPlacements.sort(function(a2, b) {
          return b.weight - a2.weight;
        });
        return weightedPlacements[0].placement;
      };
      Position2.prototype.findBestPlacementAt = function(offset, target, placements, containerFunction) {
        var _this = this;
        if (containerFunction === void 0) {
          containerFunction = this.defaultContainerFunction;
        }
        var positionAt = function(_, target2, placement) {
          return _this.findPositionAt(offset, target2, placement);
        };
        return this.findBestPlacement(null, target, placements, containerFunction, positionAt);
      };
      Position2.prototype.defaultContainerFunction = function() {
        return {
          width: windowRef.innerHeight - windowRef.scrollY,
          height: windowRef.innerWidth - windowRef.scrollX
        };
      };
      Position2.prototype.calculatePosition = function(referenceOffset, referenceRect, target, placement) {
        if (this.positions[placement]) {
          return this.positions[placement](referenceOffset, target, referenceRect);
        }
        console.error("No function found for placement, defaulting to 0,0");
        return { left: 0, top: 0 };
      };
      return Position2;
    }();
    position = new Position();
    utils_position_default = Position;
  }
});

// node_modules/d3-hierarchy/src/cluster.js
function defaultSeparation(a2, b) {
  return a2.parent === b.parent ? 1 : 2;
}
function meanX(children2) {
  return children2.reduce(meanXReduce, 0) / children2.length;
}
function meanXReduce(x3, c2) {
  return x3 + c2.x;
}
function maxY(children2) {
  return 1 + children2.reduce(maxYReduce, 0);
}
function maxYReduce(y3, c2) {
  return Math.max(y3, c2.y);
}
function leafLeft(node) {
  var children2;
  while (children2 = node.children)
    node = children2[0];
  return node;
}
function leafRight(node) {
  var children2;
  while (children2 = node.children)
    node = children2[children2.length - 1];
  return node;
}
function cluster_default() {
  var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
  function cluster(root3) {
    var previousNode, x3 = 0;
    root3.eachAfter(function(node) {
      var children2 = node.children;
      if (children2) {
        node.x = meanX(children2);
        node.y = maxY(children2);
      } else {
        node.x = previousNode ? x3 += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left3 = leafLeft(root3), right3 = leafRight(root3), x0 = left3.x - separation(left3, right3) / 2, x1 = right3.x + separation(right3, left3) / 2;
    return root3.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root3.x) * dx;
      node.y = (root3.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root3.y ? node.y / root3.y : 1)) * dy;
    });
  }
  cluster.separation = function(x3) {
    return arguments.length ? (separation = x3, cluster) : separation;
  };
  cluster.size = function(x3) {
    return arguments.length ? (nodeSize = false, dx = +x3[0], dy = +x3[1], cluster) : nodeSize ? null : [dx, dy];
  };
  cluster.nodeSize = function(x3) {
    return arguments.length ? (nodeSize = true, dx = +x3[0], dy = +x3[1], cluster) : nodeSize ? [dx, dy] : null;
  };
  return cluster;
}
var init_cluster = __esm({
  "node_modules/d3-hierarchy/src/cluster.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/count.js
function count2(node) {
  var sum2 = 0, children2 = node.children, i = children2 && children2.length;
  if (!i)
    sum2 = 1;
  else
    while (--i >= 0)
      sum2 += children2[i].value;
  node.value = sum2;
}
function count_default() {
  return this.eachAfter(count2);
}
var init_count2 = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/count.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default2(callback, that) {
  let index5 = -1;
  for (const node of this) {
    callback.call(that, node, ++index5, this);
  }
  return this;
}
var init_each2 = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/each.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback, that) {
  var node = this, nodes = [node], children2, i, index5 = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index5, this);
    if (children2 = node.children) {
      for (i = children2.length - 1; i >= 0; --i) {
        nodes.push(children2[i]);
      }
    }
  }
  return this;
}
var init_eachBefore = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/eachBefore.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback, that) {
  var node = this, nodes = [node], next = [], children2, i, n, index5 = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children2 = node.children) {
      for (i = 0, n = children2.length; i < n; ++i) {
        nodes.push(children2[i]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index5, this);
  }
  return this;
}
var init_eachAfter = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/eachAfter.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/find.js
function find_default(callback, that) {
  let index5 = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index5, this)) {
      return node;
    }
  }
}
var init_find = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/find.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default(value2) {
  return this.eachAfter(function(node) {
    var sum2 = +value2(node.data) || 0, children2 = node.children, i = children2 && children2.length;
    while (--i >= 0)
      sum2 += children2[i].value;
    node.value = sum2;
  });
}
var init_sum = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/sum.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default2(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
var init_sort3 = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/sort.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default2(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a2, b) {
  if (a2 === b)
    return a2;
  var aNodes = a2.ancestors(), bNodes = b.ancestors(), c2 = null;
  a2 = aNodes.pop();
  b = bNodes.pop();
  while (a2 === b) {
    c2 = a2;
    a2 = aNodes.pop();
    b = bNodes.pop();
  }
  return c2;
}
var init_path2 = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/path.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}
var init_ancestors = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/ancestors.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  return Array.from(this);
}
var init_descendants = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/descendants.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
var init_leaves = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/leaves.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root3 = this, links = [];
  root3.each(function(node) {
    if (node !== root3) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}
var init_links = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/links.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/iterator.js
function* iterator_default2() {
  var node = this, current, next = [node], children2, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      yield node;
      if (children2 = node.children) {
        for (i = 0, n = children2.length; i < n; ++i) {
          next.push(children2[i]);
        }
      }
    }
  } while (next.length);
}
var init_iterator2 = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/iterator.js"() {
  }
});

// node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data, children2) {
  if (data instanceof Map) {
    data = [void 0, data];
    if (children2 === void 0)
      children2 = mapChildren;
  } else if (children2 === void 0) {
    children2 = objectChildren;
  }
  var root3 = new Node2(data), node, nodes = [root3], child, childs, i, n;
  while (node = nodes.pop()) {
    if ((childs = children2(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = childs[i] = new Node2(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root3.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d) {
  return d.children;
}
function mapChildren(d) {
  return Array.isArray(d) ? d[1] : null;
}
function copyData(node) {
  if (node.data.value !== void 0)
    node.value = node.data.value;
  node.data = node.data.data;
}
function computeHeight(node) {
  var height = 0;
  do
    node.height = height;
  while ((node = node.parent) && node.height < ++height);
}
function Node2(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
var init_hierarchy = __esm({
  "node_modules/d3-hierarchy/src/hierarchy/index.js"() {
    init_count2();
    init_each2();
    init_eachBefore();
    init_eachAfter();
    init_find();
    init_sum();
    init_sort3();
    init_path2();
    init_ancestors();
    init_descendants();
    init_leaves();
    init_links();
    init_iterator2();
    Node2.prototype = hierarchy.prototype = {
      constructor: Node2,
      count: count_default,
      each: each_default2,
      eachAfter: eachAfter_default,
      eachBefore: eachBefore_default,
      find: find_default,
      sum: sum_default,
      sort: sort_default2,
      path: path_default2,
      ancestors: ancestors_default,
      descendants: descendants_default,
      leaves: leaves_default,
      links: links_default,
      copy: node_copy,
      [Symbol.iterator]: iterator_default2
    };
  }
});

// node_modules/d3-hierarchy/src/accessors.js
function optional(f) {
  return f == null ? null : required(f);
}
function required(f) {
  if (typeof f !== "function")
    throw new Error();
  return f;
}
var init_accessors = __esm({
  "node_modules/d3-hierarchy/src/accessors.js"() {
  }
});

// node_modules/d3-hierarchy/src/constant.js
function constantZero() {
  return 0;
}
function constant_default5(x3) {
  return function() {
    return x3;
  };
}
var init_constant7 = __esm({
  "node_modules/d3-hierarchy/src/constant.js"() {
  }
});

// node_modules/d3-hierarchy/src/lcg.js
function lcg_default() {
  let s2 = 1;
  return () => (s2 = (a * s2 + c) % m) / m;
}
var a, c, m;
var init_lcg = __esm({
  "node_modules/d3-hierarchy/src/lcg.js"() {
    a = 1664525;
    c = 1013904223;
    m = 4294967296;
  }
});

// node_modules/d3-hierarchy/src/array.js
function array_default2(x3) {
  return typeof x3 === "object" && "length" in x3 ? x3 : Array.from(x3);
}
function shuffle(array4, random) {
  let m2 = array4.length, t, i;
  while (m2) {
    i = random() * m2-- | 0;
    t = array4[m2];
    array4[m2] = array4[i];
    array4[i] = t;
  }
  return array4;
}
var init_array5 = __esm({
  "node_modules/d3-hierarchy/src/array.js"() {
  }
});

// node_modules/d3-hierarchy/src/pack/enclose.js
function packEncloseRandom(circles, random) {
  var i = 0, n = (circles = shuffle(Array.from(circles), random)).length, B = [], p, e;
  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p))
      ++i;
    else
      e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }
  return e;
}
function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B))
    return [p];
  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  }
  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  }
  throw new Error();
}
function enclosesNot(a2, b) {
  var dr = a2.r - b.r, dx = b.x - a2.x, dy = b.y - a2.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}
function enclosesWeak(a2, b) {
  var dr = a2.r - b.r + Math.max(a2.r, b.r, 1) * 1e-9, dx = b.x - a2.x, dy = b.y - a2.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function enclosesWeakAll(a2, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a2, B[i])) {
      return false;
    }
  }
  return true;
}
function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);
    case 2:
      return encloseBasis2(B[0], B[1]);
    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}
function encloseBasis1(a2) {
  return {
    x: a2.x,
    y: a2.y,
    r: a2.r
  };
}
function encloseBasis2(a2, b) {
  var x1 = a2.x, y1 = a2.y, r1 = a2.r, x22 = b.x, y22 = b.y, r2 = b.r, x21 = x22 - x1, y21 = y22 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x22 + x21 / l * r21) / 2,
    y: (y1 + y22 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}
function encloseBasis3(a2, b, c2) {
  var x1 = a2.x, y1 = a2.y, r1 = a2.r, x22 = b.x, y22 = b.y, r2 = b.r, x3 = c2.x, y3 = c2.y, r3 = c2.r, a22 = x1 - x22, a3 = x1 - x3, b2 = y1 - y22, b3 = y1 - y3, c22 = r2 - r1, c3 = r3 - r1, d1 = x1 * x1 + y1 * y1 - r1 * r1, d2 = d1 - x22 * x22 - y22 * y22 + r2 * r2, d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a22 * b3, xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1, xb = (b3 * c22 - b2 * c3) / ab, ya = (a3 * d2 - a22 * d3) / (ab * 2) - y1, yb = (a22 * c3 - a3 * c22) / ab, A = xb * xb + yb * yb - 1, B = 2 * (r1 + xa * xb + ya * yb), C = xa * xa + ya * ya - r1 * r1, r = -(Math.abs(A) > 1e-6 ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r
  };
}
var init_enclose = __esm({
  "node_modules/d3-hierarchy/src/pack/enclose.js"() {
    init_array5();
  }
});

// node_modules/d3-hierarchy/src/pack/siblings.js
function place(b, a2, c2) {
  var dx = b.x - a2.x, x3, a22, dy = b.y - a2.y, y3, b2, d2 = dx * dx + dy * dy;
  if (d2) {
    a22 = a2.r + c2.r, a22 *= a22;
    b2 = b.r + c2.r, b2 *= b2;
    if (a22 > b2) {
      x3 = (d2 + b2 - a22) / (2 * d2);
      y3 = Math.sqrt(Math.max(0, b2 / d2 - x3 * x3));
      c2.x = b.x - x3 * dx - y3 * dy;
      c2.y = b.y - x3 * dy + y3 * dx;
    } else {
      x3 = (d2 + a22 - b2) / (2 * d2);
      y3 = Math.sqrt(Math.max(0, a22 / d2 - x3 * x3));
      c2.x = a2.x + x3 * dx - y3 * dy;
      c2.y = a2.y + x3 * dy + y3 * dx;
    }
  } else {
    c2.x = a2.x + c2.r;
    c2.y = a2.y;
  }
}
function intersects(a2, b) {
  var dr = a2.r + b.r - 1e-6, dx = b.x - a2.x, dy = b.y - a2.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function score(node) {
  var a2 = node._, b = node.next._, ab = a2.r + b.r, dx = (a2.x * b.r + b.x * a2.r) / ab, dy = (a2.y * b.r + b.y * a2.r) / ab;
  return dx * dx + dy * dy;
}
function Node3(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}
function packSiblingsRandom(circles, random) {
  if (!(n = (circles = array_default2(circles)).length))
    return 0;
  var a2, b, c2, n, aa, ca, i, j, k, sj, sk;
  a2 = circles[0], a2.x = 0, a2.y = 0;
  if (!(n > 1))
    return a2.r;
  b = circles[1], a2.x = -b.r, b.x = a2.r, b.y = 0;
  if (!(n > 2))
    return a2.r + b.r;
  place(b, a2, c2 = circles[2]);
  a2 = new Node3(a2), b = new Node3(b), c2 = new Node3(c2);
  a2.next = c2.previous = b;
  b.next = a2.previous = c2;
  c2.next = b.previous = a2;
  pack:
    for (i = 3; i < n; ++i) {
      place(a2._, b._, c2 = circles[i]), c2 = new Node3(c2);
      j = b.next, k = a2.previous, sj = b._.r, sk = a2._.r;
      do {
        if (sj <= sk) {
          if (intersects(j._, c2._)) {
            b = j, a2.next = b, b.previous = a2, --i;
            continue pack;
          }
          sj += j._.r, j = j.next;
        } else {
          if (intersects(k._, c2._)) {
            a2 = k, a2.next = b, b.previous = a2, --i;
            continue pack;
          }
          sk += k._.r, k = k.previous;
        }
      } while (j !== k.next);
      c2.previous = a2, c2.next = b, a2.next = b.previous = b = c2;
      aa = score(a2);
      while ((c2 = c2.next) !== b) {
        if ((ca = score(c2)) < aa) {
          a2 = c2, aa = ca;
        }
      }
      b = a2.next;
    }
  a2 = [b._], c2 = b;
  while ((c2 = c2.next) !== b)
    a2.push(c2._);
  c2 = packEncloseRandom(a2, random);
  for (i = 0; i < n; ++i)
    a2 = circles[i], a2.x -= c2.x, a2.y -= c2.y;
  return c2.r;
}
var init_siblings = __esm({
  "node_modules/d3-hierarchy/src/pack/siblings.js"() {
    init_array5();
    init_enclose();
  }
});

// node_modules/d3-hierarchy/src/pack/index.js
function defaultRadius(d) {
  return Math.sqrt(d.value);
}
function pack_default() {
  var radius = null, dx = 1, dy = 1, padding = constantZero;
  function pack(root3) {
    const random = lcg_default();
    root3.x = dx / 2, root3.y = dy / 2;
    if (radius) {
      root3.eachBefore(radiusLeaf(radius)).eachAfter(packChildrenRandom(padding, 0.5, random)).eachBefore(translateChild(1));
    } else {
      root3.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildrenRandom(constantZero, 1, random)).eachAfter(packChildrenRandom(padding, root3.r / Math.min(dx, dy), random)).eachBefore(translateChild(Math.min(dx, dy) / (2 * root3.r)));
    }
    return root3;
  }
  pack.radius = function(x3) {
    return arguments.length ? (radius = optional(x3), pack) : radius;
  };
  pack.size = function(x3) {
    return arguments.length ? (dx = +x3[0], dy = +x3[1], pack) : [dx, dy];
  };
  pack.padding = function(x3) {
    return arguments.length ? (padding = typeof x3 === "function" ? x3 : constant_default5(+x3), pack) : padding;
  };
  return pack;
}
function radiusLeaf(radius) {
  return function(node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}
function packChildrenRandom(padding, k, random) {
  return function(node) {
    if (children2 = node.children) {
      var children2, i, n = children2.length, r = padding(node) * k || 0, e;
      if (r)
        for (i = 0; i < n; ++i)
          children2[i].r += r;
      e = packSiblingsRandom(children2, random);
      if (r)
        for (i = 0; i < n; ++i)
          children2[i].r -= r;
      node.r = e + r;
    }
  };
}
function translateChild(k) {
  return function(node) {
    var parent = node.parent;
    node.r *= k;
    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
var init_pack = __esm({
  "node_modules/d3-hierarchy/src/pack/index.js"() {
    init_accessors();
    init_constant7();
    init_lcg();
    init_siblings();
  }
});

// node_modules/d3-hierarchy/src/treemap/round.js
function round_default2(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
var init_round2 = __esm({
  "node_modules/d3-hierarchy/src/treemap/round.js"() {
  }
});

// node_modules/d3-hierarchy/src/treemap/dice.js
function dice_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
var init_dice = __esm({
  "node_modules/d3-hierarchy/src/treemap/dice.js"() {
  }
});

// node_modules/d3-hierarchy/src/tree.js
function defaultSeparation2(a2, b) {
  return a2.parent === b.parent ? 1 : 2;
}
function nextLeft(v) {
  var children2 = v.children;
  return children2 ? children2[0] : v.t;
}
function nextRight(v) {
  var children2 = v.children;
  return children2 ? children2[children2.length - 1] : v.t;
}
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}
function executeShifts(v) {
  var shift = 0, change = 0, children2 = v.children, i = children2.length, w;
  while (--i >= 0) {
    w = children2[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}
function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null;
  this.a = this;
  this.z = 0;
  this.m = 0;
  this.c = 0;
  this.s = 0;
  this.t = null;
  this.i = i;
}
function treeRoot(root3) {
  var tree = new TreeNode(root3, 0), node, nodes = [tree], child, children2, i, n;
  while (node = nodes.pop()) {
    if (children2 = node._.children) {
      node.children = new Array(n = children2.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children2[i], i));
        child.parent = node;
      }
    }
  }
  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}
function tree_default() {
  var separation = defaultSeparation2, dx = 1, dy = 1, nodeSize = null;
  function tree(root3) {
    var t = treeRoot(root3);
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);
    if (nodeSize)
      root3.eachBefore(sizeNode);
    else {
      var left3 = root3, right3 = root3, bottom2 = root3;
      root3.eachBefore(function(node) {
        if (node.x < left3.x)
          left3 = node;
        if (node.x > right3.x)
          right3 = node;
        if (node.depth > bottom2.depth)
          bottom2 = node;
      });
      var s2 = left3 === right3 ? 1 : separation(left3, right3) / 2, tx = s2 - left3.x, kx = dx / (right3.x + s2 + tx), ky = dy / (bottom2.depth || 1);
      root3.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }
    return root3;
  }
  function firstWalk(v) {
    var children2 = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
    if (children2) {
      executeShifts(v);
      var midpoint = (children2[0].z + children2[children2.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }
  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }
  tree.separation = function(x3) {
    return arguments.length ? (separation = x3, tree) : separation;
  };
  tree.size = function(x3) {
    return arguments.length ? (nodeSize = false, dx = +x3[0], dy = +x3[1], tree) : nodeSize ? null : [dx, dy];
  };
  tree.nodeSize = function(x3) {
    return arguments.length ? (nodeSize = true, dx = +x3[0], dy = +x3[1], tree) : nodeSize ? [dx, dy] : null;
  };
  return tree;
}
var init_tree = __esm({
  "node_modules/d3-hierarchy/src/tree.js"() {
    init_hierarchy();
    TreeNode.prototype = Object.create(Node2.prototype);
  }
});

// node_modules/d3-hierarchy/src/treemap/slice.js
function slice_default(parent, x0, y0, x1, y1) {
  var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
var init_slice = __esm({
  "node_modules/d3-hierarchy/src/treemap/slice.js"() {
  }
});

// node_modules/d3-hierarchy/src/treemap/squarify.js
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value2 = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0;
    do
      sumValue = nodes[i1++].value;
    while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value2 * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue)
        minValue = nodeValue;
      if (nodeValue > maxValue)
        maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }
      minRatio = newRatio;
    }
    rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
    if (row.dice)
      dice_default(row, x0, y0, x1, value2 ? y0 += dy * sumValue / value2 : y1);
    else
      slice_default(row, x0, y0, value2 ? x0 += dx * sumValue / value2 : x1, y1);
    value2 -= sumValue, i0 = i1;
  }
  return rows;
}
var phi, squarify_default;
var init_squarify = __esm({
  "node_modules/d3-hierarchy/src/treemap/squarify.js"() {
    init_dice();
    init_slice();
    phi = (1 + Math.sqrt(5)) / 2;
    squarify_default = function custom8(ratio) {
      function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
      }
      squarify.ratio = function(x3) {
        return custom8((x3 = +x3) > 1 ? x3 : 1);
      };
      return squarify;
    }(phi);
  }
});

// node_modules/d3-hierarchy/src/treemap/index.js
function treemap_default() {
  var tile = squarify_default, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
  function treemap(root3) {
    root3.x0 = root3.y0 = 0;
    root3.x1 = dx;
    root3.y1 = dy;
    root3.eachBefore(positionNode);
    paddingStack = [0];
    if (round)
      root3.eachBefore(round_default2);
    return root3;
  }
  function positionNode(node) {
    var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
    if (x1 < x0)
      x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0)
      y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0)
        x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0)
        y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }
  treemap.round = function(x3) {
    return arguments.length ? (round = !!x3, treemap) : round;
  };
  treemap.size = function(x3) {
    return arguments.length ? (dx = +x3[0], dy = +x3[1], treemap) : [dx, dy];
  };
  treemap.tile = function(x3) {
    return arguments.length ? (tile = required(x3), treemap) : tile;
  };
  treemap.padding = function(x3) {
    return arguments.length ? treemap.paddingInner(x3).paddingOuter(x3) : treemap.paddingInner();
  };
  treemap.paddingInner = function(x3) {
    return arguments.length ? (paddingInner = typeof x3 === "function" ? x3 : constant_default5(+x3), treemap) : paddingInner;
  };
  treemap.paddingOuter = function(x3) {
    return arguments.length ? treemap.paddingTop(x3).paddingRight(x3).paddingBottom(x3).paddingLeft(x3) : treemap.paddingTop();
  };
  treemap.paddingTop = function(x3) {
    return arguments.length ? (paddingTop = typeof x3 === "function" ? x3 : constant_default5(+x3), treemap) : paddingTop;
  };
  treemap.paddingRight = function(x3) {
    return arguments.length ? (paddingRight = typeof x3 === "function" ? x3 : constant_default5(+x3), treemap) : paddingRight;
  };
  treemap.paddingBottom = function(x3) {
    return arguments.length ? (paddingBottom = typeof x3 === "function" ? x3 : constant_default5(+x3), treemap) : paddingBottom;
  };
  treemap.paddingLeft = function(x3) {
    return arguments.length ? (paddingLeft = typeof x3 === "function" ? x3 : constant_default5(+x3), treemap) : paddingLeft;
  };
  return treemap;
}
var init_treemap = __esm({
  "node_modules/d3-hierarchy/src/treemap/index.js"() {
    init_round2();
    init_squarify();
    init_accessors();
    init_constant7();
  }
});

// node_modules/d3-hierarchy/src/index.js
var init_src14 = __esm({
  "node_modules/d3-hierarchy/src/index.js"() {
    init_cluster();
    init_hierarchy();
    init_pack();
    init_tree();
    init_treemap();
  }
});

// node_modules/@carbon/colors/es/index.js
var black, white, yellow10, yellow20, yellow30, yellow40, yellow50, yellow60, yellow70, yellow80, yellow90, yellow100, yellow, orange10, orange20, orange30, orange40, orange50, orange60, orange70, orange80, orange90, orange100, orange, red10, red20, red30, red40, red50, red60, red70, red80, red90, red100, red, magenta10, magenta20, magenta30, magenta40, magenta50, magenta60, magenta70, magenta80, magenta90, magenta100, magenta, purple10, purple20, purple30, purple40, purple50, purple60, purple70, purple80, purple90, purple100, purple, blue10, blue20, blue30, blue40, blue50, blue60, blue70, blue80, blue90, blue100, blue, cyan10, cyan20, cyan30, cyan40, cyan50, cyan60, cyan70, cyan80, cyan90, cyan100, cyan, teal10, teal20, teal30, teal40, teal50, teal60, teal70, teal80, teal90, teal100, teal, green10, green20, green30, green40, green50, green60, green70, green80, green90, green100, green, coolGray10, coolGray20, coolGray30, coolGray40, coolGray50, coolGray60, coolGray70, coolGray80, coolGray90, coolGray100, coolGray, gray10, gray20, gray30, gray40, gray50, gray60, gray70, gray80, gray90, gray100, gray, warmGray10, warmGray20, warmGray30, warmGray40, warmGray50, warmGray60, warmGray70, warmGray80, warmGray90, warmGray100, warmGray, colors;
var init_es = __esm({
  "node_modules/@carbon/colors/es/index.js"() {
    black = "#000000";
    white = "#ffffff";
    yellow10 = "#fcf4d6";
    yellow20 = "#fddc69";
    yellow30 = "#f1c21b";
    yellow40 = "#d2a106";
    yellow50 = "#b28600";
    yellow60 = "#8e6a00";
    yellow70 = "#684e00";
    yellow80 = "#483700";
    yellow90 = "#302400";
    yellow100 = "#1c1500";
    yellow = {
      10: yellow10,
      20: yellow20,
      30: yellow30,
      40: yellow40,
      50: yellow50,
      60: yellow60,
      70: yellow70,
      80: yellow80,
      90: yellow90,
      100: yellow100
    };
    orange10 = "#fff2e8";
    orange20 = "#ffd9be";
    orange30 = "#ffb784";
    orange40 = "#ff832b";
    orange50 = "#eb6200";
    orange60 = "#ba4e00";
    orange70 = "#8a3800";
    orange80 = "#5e2900";
    orange90 = "#3e1a00";
    orange100 = "#231000";
    orange = {
      10: orange10,
      20: orange20,
      30: orange30,
      40: orange40,
      50: orange50,
      60: orange60,
      70: orange70,
      80: orange80,
      90: orange90,
      100: orange100
    };
    red10 = "#fff1f1";
    red20 = "#ffd7d9";
    red30 = "#ffb3b8";
    red40 = "#ff8389";
    red50 = "#fa4d56";
    red60 = "#da1e28";
    red70 = "#a2191f";
    red80 = "#750e13";
    red90 = "#520408";
    red100 = "#2d0709";
    red = {
      10: red10,
      20: red20,
      30: red30,
      40: red40,
      50: red50,
      60: red60,
      70: red70,
      80: red80,
      90: red90,
      100: red100
    };
    magenta10 = "#fff0f7";
    magenta20 = "#ffd6e8";
    magenta30 = "#ffafd2";
    magenta40 = "#ff7eb6";
    magenta50 = "#ee5396";
    magenta60 = "#d02670";
    magenta70 = "#9f1853";
    magenta80 = "#740937";
    magenta90 = "#510224";
    magenta100 = "#2a0a18";
    magenta = {
      10: magenta10,
      20: magenta20,
      30: magenta30,
      40: magenta40,
      50: magenta50,
      60: magenta60,
      70: magenta70,
      80: magenta80,
      90: magenta90,
      100: magenta100
    };
    purple10 = "#f6f2ff";
    purple20 = "#e8daff";
    purple30 = "#d4bbff";
    purple40 = "#be95ff";
    purple50 = "#a56eff";
    purple60 = "#8a3ffc";
    purple70 = "#6929c4";
    purple80 = "#491d8b";
    purple90 = "#31135e";
    purple100 = "#1c0f30";
    purple = {
      10: purple10,
      20: purple20,
      30: purple30,
      40: purple40,
      50: purple50,
      60: purple60,
      70: purple70,
      80: purple80,
      90: purple90,
      100: purple100
    };
    blue10 = "#edf5ff";
    blue20 = "#d0e2ff";
    blue30 = "#a6c8ff";
    blue40 = "#78a9ff";
    blue50 = "#4589ff";
    blue60 = "#0f62fe";
    blue70 = "#0043ce";
    blue80 = "#002d9c";
    blue90 = "#001d6c";
    blue100 = "#001141";
    blue = {
      10: blue10,
      20: blue20,
      30: blue30,
      40: blue40,
      50: blue50,
      60: blue60,
      70: blue70,
      80: blue80,
      90: blue90,
      100: blue100
    };
    cyan10 = "#e5f6ff";
    cyan20 = "#bae6ff";
    cyan30 = "#82cfff";
    cyan40 = "#33b1ff";
    cyan50 = "#1192e8";
    cyan60 = "#0072c3";
    cyan70 = "#00539a";
    cyan80 = "#003a6d";
    cyan90 = "#012749";
    cyan100 = "#061727";
    cyan = {
      10: cyan10,
      20: cyan20,
      30: cyan30,
      40: cyan40,
      50: cyan50,
      60: cyan60,
      70: cyan70,
      80: cyan80,
      90: cyan90,
      100: cyan100
    };
    teal10 = "#d9fbfb";
    teal20 = "#9ef0f0";
    teal30 = "#3ddbd9";
    teal40 = "#08bdba";
    teal50 = "#009d9a";
    teal60 = "#007d79";
    teal70 = "#005d5d";
    teal80 = "#004144";
    teal90 = "#022b30";
    teal100 = "#081a1c";
    teal = {
      10: teal10,
      20: teal20,
      30: teal30,
      40: teal40,
      50: teal50,
      60: teal60,
      70: teal70,
      80: teal80,
      90: teal90,
      100: teal100
    };
    green10 = "#defbe6";
    green20 = "#a7f0ba";
    green30 = "#6fdc8c";
    green40 = "#42be65";
    green50 = "#24a148";
    green60 = "#198038";
    green70 = "#0e6027";
    green80 = "#044317";
    green90 = "#022d0d";
    green100 = "#071908";
    green = {
      10: green10,
      20: green20,
      30: green30,
      40: green40,
      50: green50,
      60: green60,
      70: green70,
      80: green80,
      90: green90,
      100: green100
    };
    coolGray10 = "#f2f4f8";
    coolGray20 = "#dde1e6";
    coolGray30 = "#c1c7cd";
    coolGray40 = "#a2a9b0";
    coolGray50 = "#878d96";
    coolGray60 = "#697077";
    coolGray70 = "#4d5358";
    coolGray80 = "#343a3f";
    coolGray90 = "#21272a";
    coolGray100 = "#121619";
    coolGray = {
      10: coolGray10,
      20: coolGray20,
      30: coolGray30,
      40: coolGray40,
      50: coolGray50,
      60: coolGray60,
      70: coolGray70,
      80: coolGray80,
      90: coolGray90,
      100: coolGray100
    };
    gray10 = "#f4f4f4";
    gray20 = "#e0e0e0";
    gray30 = "#c6c6c6";
    gray40 = "#a8a8a8";
    gray50 = "#8d8d8d";
    gray60 = "#6f6f6f";
    gray70 = "#525252";
    gray80 = "#393939";
    gray90 = "#262626";
    gray100 = "#161616";
    gray = {
      10: gray10,
      20: gray20,
      30: gray30,
      40: gray40,
      50: gray50,
      60: gray60,
      70: gray70,
      80: gray80,
      90: gray90,
      100: gray100
    };
    warmGray10 = "#f7f3f2";
    warmGray20 = "#e5e0df";
    warmGray30 = "#cac5c4";
    warmGray40 = "#ada8a8";
    warmGray50 = "#8f8b8b";
    warmGray60 = "#726e6e";
    warmGray70 = "#565151";
    warmGray80 = "#3c3838";
    warmGray90 = "#272525";
    warmGray100 = "#171414";
    warmGray = {
      10: warmGray10,
      20: warmGray20,
      30: warmGray30,
      40: warmGray40,
      50: warmGray50,
      60: warmGray60,
      70: warmGray70,
      80: warmGray80,
      90: warmGray90,
      100: warmGray100
    };
    colors = {
      black: {
        100: black
      },
      blue,
      coolGray,
      cyan,
      gray,
      green,
      magenta,
      orange,
      purple,
      red,
      teal,
      warmGray,
      white: {
        0: white
      },
      yellow
    };
  }
});

// node_modules/d3-cloud/node_modules/d3-dispatch/dist/d3-dispatch.js
var require_d3_dispatch = __commonJS({
  "node_modules/d3-cloud/node_modules/d3-dispatch/dist/d3-dispatch.js"(exports3, module2) {
    (function(global2, factory) {
      typeof exports3 === "object" && typeof module2 !== "undefined" ? factory(exports3) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
    })(exports3, function(exports4) {
      "use strict";
      var noop6 = { value: function() {
      } };
      function dispatch2() {
        for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
          if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
            throw new Error("illegal type: " + t);
          _[t] = [];
        }
        return new Dispatch2(_);
      }
      function Dispatch2(_) {
        this._ = _;
      }
      function parseTypenames3(typenames, types) {
        return typenames.trim().split(/^|\s+/).map(function(t) {
          var name = "", i = t.indexOf(".");
          if (i >= 0)
            name = t.slice(i + 1), t = t.slice(0, i);
          if (t && !types.hasOwnProperty(t))
            throw new Error("unknown type: " + t);
          return { type: t, name };
        });
      }
      Dispatch2.prototype = dispatch2.prototype = {
        constructor: Dispatch2,
        on: function(typename, callback) {
          var _ = this._, T = parseTypenames3(typename + "", _), t, i = -1, n = T.length;
          if (arguments.length < 2) {
            while (++i < n)
              if ((t = (typename = T[i]).type) && (t = get5(_[t], typename.name)))
                return t;
            return;
          }
          if (callback != null && typeof callback !== "function")
            throw new Error("invalid callback: " + callback);
          while (++i < n) {
            if (t = (typename = T[i]).type)
              _[t] = set3(_[t], typename.name, callback);
            else if (callback == null)
              for (t in _)
                _[t] = set3(_[t], typename.name, null);
          }
          return this;
        },
        copy: function() {
          var copy2 = {}, _ = this._;
          for (var t in _)
            copy2[t] = _[t].slice();
          return new Dispatch2(copy2);
        },
        call: function(type2, that) {
          if ((n = arguments.length - 2) > 0)
            for (var args = new Array(n), i = 0, n, t; i < n; ++i)
              args[i] = arguments[i + 2];
          if (!this._.hasOwnProperty(type2))
            throw new Error("unknown type: " + type2);
          for (t = this._[type2], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        },
        apply: function(type2, that, args) {
          if (!this._.hasOwnProperty(type2))
            throw new Error("unknown type: " + type2);
          for (var t = this._[type2], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        }
      };
      function get5(type2, name) {
        for (var i = 0, n = type2.length, c2; i < n; ++i) {
          if ((c2 = type2[i]).name === name) {
            return c2.value;
          }
        }
      }
      function set3(type2, name, callback) {
        for (var i = 0, n = type2.length; i < n; ++i) {
          if (type2[i].name === name) {
            type2[i] = noop6, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
            break;
          }
        }
        if (callback != null)
          type2.push({ name, value: callback });
        return type2;
      }
      exports4.dispatch = dispatch2;
      Object.defineProperty(exports4, "__esModule", { value: true });
    });
  }
});

// node_modules/d3-cloud/index.js
var require_d3_cloud = __commonJS({
  "node_modules/d3-cloud/index.js"(exports3, module2) {
    var dispatch2 = require_d3_dispatch().dispatch;
    var cloudRadians = Math.PI / 180;
    var cw = 1 << 11 >> 5;
    var ch = 1 << 11;
    module2.exports = function() {
      var size = [256, 256], text = cloudText, font = cloudFont, fontSize = cloudFontSize, fontStyle = cloudFontNormal, fontWeight = cloudFontNormal, rotate = cloudRotate, padding = cloudPadding, spiral = archimedeanSpiral, words2 = [], timeInterval2 = Infinity, event = dispatch2("word", "end"), timer2 = null, random = Math.random, cloud2 = {}, canvas = cloudCanvas;
      cloud2.canvas = function(_) {
        return arguments.length ? (canvas = functor(_), cloud2) : canvas;
      };
      cloud2.start = function() {
        var contextAndRatio = getContext2(canvas()), board = zeroArray((size[0] >> 5) * size[1]), bounds = null, n = words2.length, i = -1, tags = [], data = words2.map(function(d, i2) {
          d.text = text.call(this, d, i2);
          d.font = font.call(this, d, i2);
          d.style = fontStyle.call(this, d, i2);
          d.weight = fontWeight.call(this, d, i2);
          d.rotate = rotate.call(this, d, i2);
          d.size = ~~fontSize.call(this, d, i2);
          d.padding = padding.call(this, d, i2);
          return d;
        }).sort(function(a2, b) {
          return b.size - a2.size;
        });
        if (timer2)
          clearInterval(timer2);
        timer2 = setInterval(step, 0);
        step();
        return cloud2;
        function step() {
          var start2 = Date.now();
          while (Date.now() - start2 < timeInterval2 && ++i < n && timer2) {
            var d = data[i];
            d.x = size[0] * (random() + 0.5) >> 1;
            d.y = size[1] * (random() + 0.5) >> 1;
            cloudSprite(contextAndRatio, d, data, i);
            if (d.hasText && place2(board, d, bounds)) {
              tags.push(d);
              event.call("word", cloud2, d);
              if (bounds)
                cloudBounds(bounds, d);
              else
                bounds = [{ x: d.x + d.x0, y: d.y + d.y0 }, { x: d.x + d.x1, y: d.y + d.y1 }];
              d.x -= size[0] >> 1;
              d.y -= size[1] >> 1;
            }
          }
          if (i >= n) {
            cloud2.stop();
            event.call("end", cloud2, tags, bounds);
          }
        }
      };
      cloud2.stop = function() {
        if (timer2) {
          clearInterval(timer2);
          timer2 = null;
        }
        return cloud2;
      };
      function getContext2(canvas2) {
        canvas2.width = canvas2.height = 1;
        var ratio = Math.sqrt(canvas2.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
        canvas2.width = (cw << 5) / ratio;
        canvas2.height = ch / ratio;
        var context = canvas2.getContext("2d");
        context.fillStyle = context.strokeStyle = "red";
        context.textAlign = "center";
        return { context, ratio };
      }
      function place2(board, tag, bounds) {
        var perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }], startX = tag.x, startY = tag.y, maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]), s2 = spiral(size), dt = random() < 0.5 ? 1 : -1, t = -dt, dxdy, dx, dy;
        while (dxdy = s2(t += dt)) {
          dx = ~~dxdy[0];
          dy = ~~dxdy[1];
          if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta)
            break;
          tag.x = startX + dx;
          tag.y = startY + dy;
          if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1])
            continue;
          if (!bounds || !cloudCollide(tag, board, size[0])) {
            if (!bounds || collideRects(tag, bounds)) {
              var sprite = tag.sprite, w = tag.width >> 5, sw = size[0] >> 5, lx = tag.x - (w << 4), sx = lx & 127, msx = 32 - sx, h = tag.y1 - tag.y0, x3 = (tag.y + tag.y0) * sw + (lx >> 5), last2;
              for (var j = 0; j < h; j++) {
                last2 = 0;
                for (var i = 0; i <= w; i++) {
                  board[x3 + i] |= last2 << msx | (i < w ? (last2 = sprite[j * w + i]) >>> sx : 0);
                }
                x3 += sw;
              }
              delete tag.sprite;
              return true;
            }
          }
        }
        return false;
      }
      cloud2.timeInterval = function(_) {
        return arguments.length ? (timeInterval2 = _ == null ? Infinity : _, cloud2) : timeInterval2;
      };
      cloud2.words = function(_) {
        return arguments.length ? (words2 = _, cloud2) : words2;
      };
      cloud2.size = function(_) {
        return arguments.length ? (size = [+_[0], +_[1]], cloud2) : size;
      };
      cloud2.font = function(_) {
        return arguments.length ? (font = functor(_), cloud2) : font;
      };
      cloud2.fontStyle = function(_) {
        return arguments.length ? (fontStyle = functor(_), cloud2) : fontStyle;
      };
      cloud2.fontWeight = function(_) {
        return arguments.length ? (fontWeight = functor(_), cloud2) : fontWeight;
      };
      cloud2.rotate = function(_) {
        return arguments.length ? (rotate = functor(_), cloud2) : rotate;
      };
      cloud2.text = function(_) {
        return arguments.length ? (text = functor(_), cloud2) : text;
      };
      cloud2.spiral = function(_) {
        return arguments.length ? (spiral = spirals[_] || _, cloud2) : spiral;
      };
      cloud2.fontSize = function(_) {
        return arguments.length ? (fontSize = functor(_), cloud2) : fontSize;
      };
      cloud2.padding = function(_) {
        return arguments.length ? (padding = functor(_), cloud2) : padding;
      };
      cloud2.random = function(_) {
        return arguments.length ? (random = _, cloud2) : random;
      };
      cloud2.on = function() {
        var value2 = event.on.apply(event, arguments);
        return value2 === event ? cloud2 : value2;
      };
      return cloud2;
    };
    function cloudText(d) {
      return d.text;
    }
    function cloudFont() {
      return "serif";
    }
    function cloudFontNormal() {
      return "normal";
    }
    function cloudFontSize(d) {
      return Math.sqrt(d.value);
    }
    function cloudRotate() {
      return (~~(Math.random() * 6) - 3) * 30;
    }
    function cloudPadding() {
      return 1;
    }
    function cloudSprite(contextAndRatio, d, data, di) {
      if (d.sprite)
        return;
      var c2 = contextAndRatio.context, ratio = contextAndRatio.ratio;
      c2.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
      var x3 = 0, y3 = 0, maxh = 0, n = data.length;
      --di;
      while (++di < n) {
        d = data[di];
        c2.save();
        c2.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
        var w = c2.measureText(d.text + "m").width * ratio, h = d.size << 1;
        if (d.rotate) {
          var sr = Math.sin(d.rotate * cloudRadians), cr = Math.cos(d.rotate * cloudRadians), wcr = w * cr, wsr = w * sr, hcr = h * cr, hsr = h * sr;
          w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 31 >> 5 << 5;
          h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
        } else {
          w = w + 31 >> 5 << 5;
        }
        if (h > maxh)
          maxh = h;
        if (x3 + w >= cw << 5) {
          x3 = 0;
          y3 += maxh;
          maxh = 0;
        }
        if (y3 + h >= ch)
          break;
        c2.translate((x3 + (w >> 1)) / ratio, (y3 + (h >> 1)) / ratio);
        if (d.rotate)
          c2.rotate(d.rotate * cloudRadians);
        c2.fillText(d.text, 0, 0);
        if (d.padding)
          c2.lineWidth = 2 * d.padding, c2.strokeText(d.text, 0, 0);
        c2.restore();
        d.width = w;
        d.height = h;
        d.xoff = x3;
        d.yoff = y3;
        d.x1 = w >> 1;
        d.y1 = h >> 1;
        d.x0 = -d.x1;
        d.y0 = -d.y1;
        d.hasText = true;
        x3 += w;
      }
      var pixels = c2.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data, sprite = [];
      while (--di >= 0) {
        d = data[di];
        if (!d.hasText)
          continue;
        var w = d.width, w32 = w >> 5, h = d.y1 - d.y0;
        for (var i = 0; i < h * w32; i++)
          sprite[i] = 0;
        x3 = d.xoff;
        if (x3 == null)
          return;
        y3 = d.yoff;
        var seen = 0, seenRow = -1;
        for (var j = 0; j < h; j++) {
          for (var i = 0; i < w; i++) {
            var k = w32 * j + (i >> 5), m2 = pixels[(y3 + j) * (cw << 5) + (x3 + i) << 2] ? 1 << 31 - i % 32 : 0;
            sprite[k] |= m2;
            seen |= m2;
          }
          if (seen)
            seenRow = j;
          else {
            d.y0++;
            h--;
            j--;
            y3++;
          }
        }
        d.y1 = d.y0 + seenRow;
        d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
      }
    }
    function cloudCollide(tag, board, sw) {
      sw >>= 5;
      var sprite = tag.sprite, w = tag.width >> 5, lx = tag.x - (w << 4), sx = lx & 127, msx = 32 - sx, h = tag.y1 - tag.y0, x3 = (tag.y + tag.y0) * sw + (lx >> 5), last2;
      for (var j = 0; j < h; j++) {
        last2 = 0;
        for (var i = 0; i <= w; i++) {
          if ((last2 << msx | (i < w ? (last2 = sprite[j * w + i]) >>> sx : 0)) & board[x3 + i])
            return true;
        }
        x3 += sw;
      }
      return false;
    }
    function cloudBounds(bounds, d) {
      var b0 = bounds[0], b1 = bounds[1];
      if (d.x + d.x0 < b0.x)
        b0.x = d.x + d.x0;
      if (d.y + d.y0 < b0.y)
        b0.y = d.y + d.y0;
      if (d.x + d.x1 > b1.x)
        b1.x = d.x + d.x1;
      if (d.y + d.y1 > b1.y)
        b1.y = d.y + d.y1;
    }
    function collideRects(a2, b) {
      return a2.x + a2.x1 > b[0].x && a2.x + a2.x0 < b[1].x && a2.y + a2.y1 > b[0].y && a2.y + a2.y0 < b[1].y;
    }
    function archimedeanSpiral(size) {
      var e = size[0] / size[1];
      return function(t) {
        return [e * (t *= 0.1) * Math.cos(t), t * Math.sin(t)];
      };
    }
    function rectangularSpiral(size) {
      var dy = 4, dx = dy * size[0] / size[1], x3 = 0, y3 = 0;
      return function(t) {
        var sign2 = t < 0 ? -1 : 1;
        switch (Math.sqrt(1 + 4 * sign2 * t) - sign2 & 3) {
          case 0:
            x3 += dx;
            break;
          case 1:
            y3 += dy;
            break;
          case 2:
            x3 -= dx;
            break;
          default:
            y3 -= dy;
            break;
        }
        return [x3, y3];
      };
    }
    function zeroArray(n) {
      var a2 = [], i = -1;
      while (++i < n)
        a2[i] = 0;
      return a2;
    }
    function cloudCanvas() {
      return document.createElement("canvas");
    }
    function functor(d) {
      return typeof d === "function" ? d : function() {
        return d;
      };
    }
    var spirals = {
      archimedean: archimedeanSpiral,
      rectangular: rectangularSpiral
    };
  }
});

// node_modules/d3-sankey/node_modules/d3-array/src/max.js
function max3(values, valueof) {
  let max5;
  if (valueof === void 0) {
    for (const value2 of values) {
      if (value2 != null && (max5 < value2 || max5 === void 0 && value2 >= value2)) {
        max5 = value2;
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if ((value2 = valueof(value2, ++index5, values)) != null && (max5 < value2 || max5 === void 0 && value2 >= value2)) {
        max5 = value2;
      }
    }
  }
  return max5;
}
var init_max2 = __esm({
  "node_modules/d3-sankey/node_modules/d3-array/src/max.js"() {
  }
});

// node_modules/d3-sankey/node_modules/d3-array/src/min.js
function min3(values, valueof) {
  let min5;
  if (valueof === void 0) {
    for (const value2 of values) {
      if (value2 != null && (min5 > value2 || min5 === void 0 && value2 >= value2)) {
        min5 = value2;
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if ((value2 = valueof(value2, ++index5, values)) != null && (min5 > value2 || min5 === void 0 && value2 >= value2)) {
        min5 = value2;
      }
    }
  }
  return min5;
}
var init_min2 = __esm({
  "node_modules/d3-sankey/node_modules/d3-array/src/min.js"() {
  }
});

// node_modules/d3-sankey/node_modules/d3-array/src/sum.js
function sum(values, valueof) {
  let sum2 = 0;
  if (valueof === void 0) {
    for (let value2 of values) {
      if (value2 = +value2) {
        sum2 += value2;
      }
    }
  } else {
    let index5 = -1;
    for (let value2 of values) {
      if (value2 = +valueof(value2, ++index5, values)) {
        sum2 += value2;
      }
    }
  }
  return sum2;
}
var init_sum2 = __esm({
  "node_modules/d3-sankey/node_modules/d3-array/src/sum.js"() {
  }
});

// node_modules/d3-sankey/node_modules/d3-array/src/index.js
var init_src15 = __esm({
  "node_modules/d3-sankey/node_modules/d3-array/src/index.js"() {
    init_max2();
    init_min2();
    init_sum2();
  }
});

// node_modules/d3-sankey/src/align.js
function left2(node) {
  return node.depth;
}
function right2(node, n) {
  return n - 1 - node.height;
}
function justify(node, n) {
  return node.sourceLinks.length ? node.depth : n - 1;
}
var init_align = __esm({
  "node_modules/d3-sankey/src/align.js"() {
  }
});

// node_modules/d3-sankey/src/constant.js
function constant3(x3) {
  return function() {
    return x3;
  };
}
var init_constant8 = __esm({
  "node_modules/d3-sankey/src/constant.js"() {
  }
});

// node_modules/d3-sankey/src/sankey.js
function ascendingSourceBreadth(a2, b) {
  return ascendingBreadth(a2.source, b.source) || a2.index - b.index;
}
function ascendingTargetBreadth(a2, b) {
  return ascendingBreadth(a2.target, b.target) || a2.index - b.index;
}
function ascendingBreadth(a2, b) {
  return a2.y0 - b.y0;
}
function value(d) {
  return d.value;
}
function defaultId(d) {
  return d.index;
}
function defaultNodes(graph) {
  return graph.nodes;
}
function defaultLinks(graph) {
  return graph.links;
}
function find2(nodeById, id2) {
  const node = nodeById.get(id2);
  if (!node)
    throw new Error("missing: " + id2);
  return node;
}
function computeLinkBreadths({ nodes }) {
  for (const node of nodes) {
    let y0 = node.y0;
    let y1 = y0;
    for (const link3 of node.sourceLinks) {
      link3.y0 = y0 + link3.width / 2;
      y0 += link3.width;
    }
    for (const link3 of node.targetLinks) {
      link3.y1 = y1 + link3.width / 2;
      y1 += link3.width;
    }
  }
}
function Sankey() {
  let x0 = 0, y0 = 0, x1 = 1, y1 = 1;
  let dx = 24;
  let dy = 8, py;
  let id2 = defaultId;
  let align = justify;
  let sort;
  let linkSort;
  let nodes = defaultNodes;
  let links = defaultLinks;
  let iterations = 6;
  function sankey() {
    const graph = { nodes: nodes.apply(null, arguments), links: links.apply(null, arguments) };
    computeNodeLinks(graph);
    computeNodeValues(graph);
    computeNodeDepths(graph);
    computeNodeHeights(graph);
    computeNodeBreadths(graph);
    computeLinkBreadths(graph);
    return graph;
  }
  sankey.update = function(graph) {
    computeLinkBreadths(graph);
    return graph;
  };
  sankey.nodeId = function(_) {
    return arguments.length ? (id2 = typeof _ === "function" ? _ : constant3(_), sankey) : id2;
  };
  sankey.nodeAlign = function(_) {
    return arguments.length ? (align = typeof _ === "function" ? _ : constant3(_), sankey) : align;
  };
  sankey.nodeSort = function(_) {
    return arguments.length ? (sort = _, sankey) : sort;
  };
  sankey.nodeWidth = function(_) {
    return arguments.length ? (dx = +_, sankey) : dx;
  };
  sankey.nodePadding = function(_) {
    return arguments.length ? (dy = py = +_, sankey) : dy;
  };
  sankey.nodes = function(_) {
    return arguments.length ? (nodes = typeof _ === "function" ? _ : constant3(_), sankey) : nodes;
  };
  sankey.links = function(_) {
    return arguments.length ? (links = typeof _ === "function" ? _ : constant3(_), sankey) : links;
  };
  sankey.linkSort = function(_) {
    return arguments.length ? (linkSort = _, sankey) : linkSort;
  };
  sankey.size = function(_) {
    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];
  };
  sankey.extent = function(_) {
    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];
  };
  sankey.iterations = function(_) {
    return arguments.length ? (iterations = +_, sankey) : iterations;
  };
  function computeNodeLinks({ nodes: nodes2, links: links2 }) {
    for (const [i, node] of nodes2.entries()) {
      node.index = i;
      node.sourceLinks = [];
      node.targetLinks = [];
    }
    const nodeById = new Map(nodes2.map((d, i) => [id2(d, i, nodes2), d]));
    for (const [i, link3] of links2.entries()) {
      link3.index = i;
      let { source, target } = link3;
      if (typeof source !== "object")
        source = link3.source = find2(nodeById, source);
      if (typeof target !== "object")
        target = link3.target = find2(nodeById, target);
      source.sourceLinks.push(link3);
      target.targetLinks.push(link3);
    }
    if (linkSort != null) {
      for (const { sourceLinks, targetLinks } of nodes2) {
        sourceLinks.sort(linkSort);
        targetLinks.sort(linkSort);
      }
    }
  }
  function computeNodeValues({ nodes: nodes2 }) {
    for (const node of nodes2) {
      node.value = node.fixedValue === void 0 ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value)) : node.fixedValue;
    }
  }
  function computeNodeDepths({ nodes: nodes2 }) {
    const n = nodes2.length;
    let current = new Set(nodes2);
    let next = /* @__PURE__ */ new Set();
    let x3 = 0;
    while (current.size) {
      for (const node of current) {
        node.depth = x3;
        for (const { target } of node.sourceLinks) {
          next.add(target);
        }
      }
      if (++x3 > n)
        throw new Error("circular link");
      current = next;
      next = /* @__PURE__ */ new Set();
    }
  }
  function computeNodeHeights({ nodes: nodes2 }) {
    const n = nodes2.length;
    let current = new Set(nodes2);
    let next = /* @__PURE__ */ new Set();
    let x3 = 0;
    while (current.size) {
      for (const node of current) {
        node.height = x3;
        for (const { source } of node.targetLinks) {
          next.add(source);
        }
      }
      if (++x3 > n)
        throw new Error("circular link");
      current = next;
      next = /* @__PURE__ */ new Set();
    }
  }
  function computeNodeLayers({ nodes: nodes2 }) {
    const x3 = max3(nodes2, (d) => d.depth) + 1;
    const kx = (x1 - x0 - dx) / (x3 - 1);
    const columns = new Array(x3);
    for (const node of nodes2) {
      const i = Math.max(0, Math.min(x3 - 1, Math.floor(align.call(null, node, x3))));
      node.layer = i;
      node.x0 = x0 + i * kx;
      node.x1 = node.x0 + dx;
      if (columns[i])
        columns[i].push(node);
      else
        columns[i] = [node];
    }
    if (sort)
      for (const column of columns) {
        column.sort(sort);
      }
    return columns;
  }
  function initializeNodeBreadths(columns) {
    const ky = min3(columns, (c2) => (y1 - y0 - (c2.length - 1) * py) / sum(c2, value));
    for (const nodes2 of columns) {
      let y3 = y0;
      for (const node of nodes2) {
        node.y0 = y3;
        node.y1 = y3 + node.value * ky;
        y3 = node.y1 + py;
        for (const link3 of node.sourceLinks) {
          link3.width = link3.value * ky;
        }
      }
      y3 = (y1 - y3 + py) / (nodes2.length + 1);
      for (let i = 0; i < nodes2.length; ++i) {
        const node = nodes2[i];
        node.y0 += y3 * (i + 1);
        node.y1 += y3 * (i + 1);
      }
      reorderLinks(nodes2);
    }
  }
  function computeNodeBreadths(graph) {
    const columns = computeNodeLayers(graph);
    py = Math.min(dy, (y1 - y0) / (max3(columns, (c2) => c2.length) - 1));
    initializeNodeBreadths(columns);
    for (let i = 0; i < iterations; ++i) {
      const alpha = Math.pow(0.99, i);
      const beta = Math.max(1 - alpha, (i + 1) / iterations);
      relaxRightToLeft(columns, alpha, beta);
      relaxLeftToRight(columns, alpha, beta);
    }
  }
  function relaxLeftToRight(columns, alpha, beta) {
    for (let i = 1, n = columns.length; i < n; ++i) {
      const column = columns[i];
      for (const target of column) {
        let y3 = 0;
        let w = 0;
        for (const { source, value: value2 } of target.targetLinks) {
          let v = value2 * (target.layer - source.layer);
          y3 += targetTop(source, target) * v;
          w += v;
        }
        if (!(w > 0))
          continue;
        let dy2 = (y3 / w - target.y0) * alpha;
        target.y0 += dy2;
        target.y1 += dy2;
        reorderNodeLinks(target);
      }
      if (sort === void 0)
        column.sort(ascendingBreadth);
      resolveCollisions(column, beta);
    }
  }
  function relaxRightToLeft(columns, alpha, beta) {
    for (let n = columns.length, i = n - 2; i >= 0; --i) {
      const column = columns[i];
      for (const source of column) {
        let y3 = 0;
        let w = 0;
        for (const { target, value: value2 } of source.sourceLinks) {
          let v = value2 * (target.layer - source.layer);
          y3 += sourceTop(source, target) * v;
          w += v;
        }
        if (!(w > 0))
          continue;
        let dy2 = (y3 / w - source.y0) * alpha;
        source.y0 += dy2;
        source.y1 += dy2;
        reorderNodeLinks(source);
      }
      if (sort === void 0)
        column.sort(ascendingBreadth);
      resolveCollisions(column, beta);
    }
  }
  function resolveCollisions(nodes2, alpha) {
    const i = nodes2.length >> 1;
    const subject = nodes2[i];
    resolveCollisionsBottomToTop(nodes2, subject.y0 - py, i - 1, alpha);
    resolveCollisionsTopToBottom(nodes2, subject.y1 + py, i + 1, alpha);
    resolveCollisionsBottomToTop(nodes2, y1, nodes2.length - 1, alpha);
    resolveCollisionsTopToBottom(nodes2, y0, 0, alpha);
  }
  function resolveCollisionsTopToBottom(nodes2, y3, i, alpha) {
    for (; i < nodes2.length; ++i) {
      const node = nodes2[i];
      const dy2 = (y3 - node.y0) * alpha;
      if (dy2 > 1e-6)
        node.y0 += dy2, node.y1 += dy2;
      y3 = node.y1 + py;
    }
  }
  function resolveCollisionsBottomToTop(nodes2, y3, i, alpha) {
    for (; i >= 0; --i) {
      const node = nodes2[i];
      const dy2 = (node.y1 - y3) * alpha;
      if (dy2 > 1e-6)
        node.y0 -= dy2, node.y1 -= dy2;
      y3 = node.y0 - py;
    }
  }
  function reorderNodeLinks({ sourceLinks, targetLinks }) {
    if (linkSort === void 0) {
      for (const { source: { sourceLinks: sourceLinks2 } } of targetLinks) {
        sourceLinks2.sort(ascendingTargetBreadth);
      }
      for (const { target: { targetLinks: targetLinks2 } } of sourceLinks) {
        targetLinks2.sort(ascendingSourceBreadth);
      }
    }
  }
  function reorderLinks(nodes2) {
    if (linkSort === void 0) {
      for (const { sourceLinks, targetLinks } of nodes2) {
        sourceLinks.sort(ascendingTargetBreadth);
        targetLinks.sort(ascendingSourceBreadth);
      }
    }
  }
  function targetTop(source, target) {
    let y3 = source.y0 - (source.sourceLinks.length - 1) * py / 2;
    for (const { target: node, width } of source.sourceLinks) {
      if (node === target)
        break;
      y3 += width + py;
    }
    for (const { source: node, width } of target.targetLinks) {
      if (node === source)
        break;
      y3 -= width;
    }
    return y3;
  }
  function sourceTop(source, target) {
    let y3 = target.y0 - (target.targetLinks.length - 1) * py / 2;
    for (const { source: node, width } of target.targetLinks) {
      if (node === source)
        break;
      y3 += width + py;
    }
    for (const { target: node, width } of source.sourceLinks) {
      if (node === target)
        break;
      y3 -= width;
    }
    return y3;
  }
  return sankey;
}
var init_sankey = __esm({
  "node_modules/d3-sankey/src/sankey.js"() {
    init_src15();
    init_align();
    init_constant8();
  }
});

// node_modules/d3-sankey/node_modules/d3-path/src/path.js
function Path2() {
  this._x0 = this._y0 = this._x1 = this._y1 = null;
  this._ = "";
}
function path2() {
  return new Path2();
}
var pi3, tau3, epsilon4, tauEpsilon2, path_default3;
var init_path3 = __esm({
  "node_modules/d3-sankey/node_modules/d3-path/src/path.js"() {
    pi3 = Math.PI;
    tau3 = 2 * pi3;
    epsilon4 = 1e-6;
    tauEpsilon2 = tau3 - epsilon4;
    Path2.prototype = path2.prototype = {
      constructor: Path2,
      moveTo: function(x3, y3) {
        this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y3);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x3, y3) {
        this._ += "L" + (this._x1 = +x3) + "," + (this._y1 = +y3);
      },
      quadraticCurveTo: function(x1, y1, x3, y3) {
        this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
      },
      bezierCurveTo: function(x1, y1, x22, y22, x3, y3) {
        this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
      },
      arcTo: function(x1, y1, x22, y22, r) {
        x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else if (!(l01_2 > epsilon4))
          ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon4) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } else {
          var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi3 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          if (Math.abs(t01 - 1) > epsilon4) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }
          this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x3, y3, r, a0, a1, ccw) {
        x3 = +x3, y3 = +y3, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x3 + dx, y0 = y3 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        } else if (Math.abs(this._x1 - x0) > epsilon4 || Math.abs(this._y1 - y0) > epsilon4) {
          this._ += "L" + x0 + "," + y0;
        }
        if (!r)
          return;
        if (da < 0)
          da = da % tau3 + tau3;
        if (da > tauEpsilon2) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x3 - dx) + "," + (y3 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        } else if (da > epsilon4) {
          this._ += "A" + r + "," + r + ",0," + +(da >= pi3) + "," + cw + "," + (this._x1 = x3 + r * Math.cos(a1)) + "," + (this._y1 = y3 + r * Math.sin(a1));
        }
      },
      rect: function(x3, y3, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y3) + "h" + +w + "v" + +h + "h" + -w + "Z";
      },
      toString: function() {
        return this._;
      }
    };
    path_default3 = path2;
  }
});

// node_modules/d3-sankey/node_modules/d3-path/src/index.js
var init_src16 = __esm({
  "node_modules/d3-sankey/node_modules/d3-path/src/index.js"() {
    init_path3();
  }
});

// node_modules/d3-sankey/node_modules/d3-shape/src/constant.js
function constant_default6(x3) {
  return function constant4() {
    return x3;
  };
}
var init_constant9 = __esm({
  "node_modules/d3-sankey/node_modules/d3-shape/src/constant.js"() {
  }
});

// node_modules/d3-sankey/node_modules/d3-shape/src/point.js
function x2(p) {
  return p[0];
}
function y2(p) {
  return p[1];
}
var init_point2 = __esm({
  "node_modules/d3-sankey/node_modules/d3-shape/src/point.js"() {
  }
});

// node_modules/d3-sankey/node_modules/d3-shape/src/array.js
var slice3;
var init_array6 = __esm({
  "node_modules/d3-sankey/node_modules/d3-shape/src/array.js"() {
    slice3 = Array.prototype.slice;
  }
});

// node_modules/d3-sankey/node_modules/d3-shape/src/link/index.js
function linkSource2(d) {
  return d.source;
}
function linkTarget2(d) {
  return d.target;
}
function link2(curve) {
  var source = linkSource2, target = linkTarget2, x3 = x2, y3 = y2, context = null;
  function link3() {
    var buffer, argv = slice3.call(arguments), s2 = source.apply(this, argv), t = target.apply(this, argv);
    if (!context)
      context = buffer = path_default3();
    curve(context, +x3.apply(this, (argv[0] = s2, argv)), +y3.apply(this, argv), +x3.apply(this, (argv[0] = t, argv)), +y3.apply(this, argv));
    if (buffer)
      return context = null, buffer + "" || null;
  }
  link3.source = function(_) {
    return arguments.length ? (source = _, link3) : source;
  };
  link3.target = function(_) {
    return arguments.length ? (target = _, link3) : target;
  };
  link3.x = function(_) {
    return arguments.length ? (x3 = typeof _ === "function" ? _ : constant_default6(+_), link3) : x3;
  };
  link3.y = function(_) {
    return arguments.length ? (y3 = typeof _ === "function" ? _ : constant_default6(+_), link3) : y3;
  };
  link3.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, link3) : context;
  };
  return link3;
}
function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}
function linkHorizontal2() {
  return link2(curveHorizontal);
}
var init_link2 = __esm({
  "node_modules/d3-sankey/node_modules/d3-shape/src/link/index.js"() {
    init_src16();
    init_array6();
    init_constant9();
    init_point2();
  }
});

// node_modules/d3-sankey/node_modules/d3-shape/src/index.js
var init_src17 = __esm({
  "node_modules/d3-sankey/node_modules/d3-shape/src/index.js"() {
    init_link2();
  }
});

// node_modules/d3-sankey/src/sankeyLinkHorizontal.js
function horizontalSource(d) {
  return [d.source.x1, d.y0];
}
function horizontalTarget(d) {
  return [d.target.x0, d.y1];
}
function sankeyLinkHorizontal_default() {
  return linkHorizontal2().source(horizontalSource).target(horizontalTarget);
}
var init_sankeyLinkHorizontal = __esm({
  "node_modules/d3-sankey/src/sankeyLinkHorizontal.js"() {
    init_src17();
  }
});

// node_modules/d3-sankey/src/index.js
var init_src18 = __esm({
  "node_modules/d3-sankey/src/index.js"() {
    init_sankey();
    init_align();
    init_sankeyLinkHorizontal();
  }
});

// node_modules/d3-dispatch/src/dispatch.js
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames2(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
function get3(type2, name) {
  for (var i = 0, n = type2.length, c2; i < n; ++i) {
    if ((c2 = type2[i]).name === name) {
      return c2.value;
    }
  }
}
function set(type2, name, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name) {
      type2[i] = noop5, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var noop5, dispatch_default2;
var init_dispatch2 = __esm({
  "node_modules/d3-dispatch/src/dispatch.js"() {
    noop5 = { value: () => {
    } };
    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._, T = parseTypenames2(typename + "", _), t, i = -1, n = T.length;
        if (arguments.length < 2) {
          while (++i < n)
            if ((t = (typename = T[i]).type) && (t = get3(_[t], typename.name)))
              return t;
          return;
        }
        if (callback != null && typeof callback !== "function")
          throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type)
            _[t] = set(_[t], typename.name, callback);
          else if (callback == null)
            for (t in _)
              _[t] = set(_[t], typename.name, null);
        }
        return this;
      },
      copy: function() {
        var copy2 = {}, _ = this._;
        for (var t in _)
          copy2[t] = _[t].slice();
        return new Dispatch(copy2);
      },
      call: function(type2, that) {
        if ((n = arguments.length - 2) > 0)
          for (var args = new Array(n), i = 0, n, t; i < n; ++i)
            args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type2))
          throw new Error("unknown type: " + type2);
        for (t = this._[type2], i = 0, n = t.length; i < n; ++i)
          t[i].value.apply(that, args);
      },
      apply: function(type2, that, args) {
        if (!this._.hasOwnProperty(type2))
          throw new Error("unknown type: " + type2);
        for (var t = this._[type2], i = 0, n = t.length; i < n; ++i)
          t[i].value.apply(that, args);
      }
    };
    dispatch_default2 = dispatch;
  }
});

// node_modules/d3-dispatch/src/index.js
var init_src19 = __esm({
  "node_modules/d3-dispatch/src/index.js"() {
    init_dispatch2();
  }
});

// node_modules/d3-drag/src/noevent.js
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
var nonpassivecapture;
var init_noevent = __esm({
  "node_modules/d3-drag/src/noevent.js"() {
    nonpassivecapture = { capture: true, passive: false };
  }
});

// node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root3) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root3.__noselect = root3.style.MozUserSelect;
    root3.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root3) {
    selection2.on("selectstart.drag", null);
  } else {
    root3.style.MozUserSelect = root3.__noselect;
    delete root3.__noselect;
  }
}
var init_nodrag = __esm({
  "node_modules/d3-drag/src/nodrag.js"() {
    init_src2();
    init_noevent();
  }
});

// node_modules/d3-drag/src/index.js
var init_src20 = __esm({
  "node_modules/d3-drag/src/index.js"() {
    init_nodrag();
  }
});

// node_modules/d3-timer/src/timer.js
function now2() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer2() {
  this._call = this._time = this._next = null;
}
function timer(callback, delay, time2) {
  var t = new Timer2();
  t.restart(callback, delay, time2);
  return t;
}
function timerFlush() {
  now2();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now3 = clock.now(), delay = now3 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now3;
}
function nap() {
  var t02, t12 = taskHead, t2, time2 = Infinity;
  while (t12) {
    if (t12._call) {
      if (time2 > t12._time)
        time2 = t12._time;
      t02 = t12, t12 = t12._next;
    } else {
      t2 = t12._next, t12._next = null;
      t12 = t02 ? t02._next = t2 : taskHead = t2;
    }
  }
  taskTail = t02;
  sleep(time2);
}
function sleep(time2) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity)
      timeout = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
var frame, timeout, interval, pokeDelay, taskHead, taskTail, clockLast, clockNow, clockSkew, clock, setFrame;
var init_timer2 = __esm({
  "node_modules/d3-timer/src/timer.js"() {
    frame = 0;
    timeout = 0;
    interval = 0;
    pokeDelay = 1e3;
    clockLast = 0;
    clockNow = 0;
    clockSkew = 0;
    clock = typeof performance === "object" && performance.now ? performance : Date;
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
      setTimeout(f, 17);
    };
    Timer2.prototype = timer.prototype = {
      constructor: Timer2,
      restart: function(callback, delay, time2) {
        if (typeof callback !== "function")
          throw new TypeError("callback is not a function");
        time2 = (time2 == null ? now2() : +time2) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail)
            taskTail._next = this;
          else
            taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time2;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };
  }
});

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time2) {
  var t = new Timer2();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t;
}
var init_timeout = __esm({
  "node_modules/d3-timer/src/timeout.js"() {
    init_timer2();
  }
});

// node_modules/d3-timer/src/index.js
var init_src21 = __esm({
  "node_modules/d3-timer/src/index.js"() {
    init_timer2();
    init_timeout();
  }
});

// node_modules/d3-transition/src/transition/schedule.js
function schedule_default(node, name, id2, index5, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index: index5,
    group,
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init2(node, id2) {
  var schedule = get4(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get4(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get4(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}
var emptyOn, emptyTween, CREATED, SCHEDULED, STARTING, STARTED, RUNNING, ENDING, ENDED;
var init_schedule = __esm({
  "node_modules/d3-transition/src/transition/schedule.js"() {
    init_src19();
    init_src21();
    emptyOn = dispatch_default2("start", "end", "cancel", "interrupt");
    emptyTween = [];
    CREATED = 0;
    SCHEDULED = 1;
    STARTING = 2;
    STARTED = 3;
    RUNNING = 4;
    ENDING = 5;
    ENDED = 6;
  }
});

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty3 = true, i;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty3 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty3)
    delete node.__transition;
}
var init_interrupt = __esm({
  "node_modules/d3-transition/src/interrupt.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}
var init_interrupt2 = __esm({
  "node_modules/d3-transition/src/selection/interrupt.js"() {
    init_interrupt();
  }
});

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value2) {
  var tween0, tween1;
  if (typeof value2 !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value: value2 }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n)
        tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value2) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get4(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value2 == null ? tweenRemove : tweenFunction)(id2, name, value2));
}
function tweenValue(transition2, name, value2) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value2.apply(this, arguments);
  });
  return function(node) {
    return get4(node, id2).value[name];
  };
}
var init_tween = __esm({
  "node_modules/d3-transition/src/transition/tween.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a2, b) {
  var c2;
  return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c2 = color(b)) ? (b = c2, rgb_default) : string_default)(a2, b);
}
var init_interpolate = __esm({
  "node_modules/d3-transition/src/transition/interpolate.js"() {
    init_src5();
    init_src6();
  }
});

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value2) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value2(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value2) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value2(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value2) {
  var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value2 === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value2)) : value2 == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value2));
}
var init_attr2 = __esm({
  "node_modules/d3-transition/src/transition/attr.js"() {
    init_src6();
    init_src2();
    init_tween();
    init_interpolate();
  }
});

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value2) {
  var t02, i0;
  function tween() {
    var i = value2.apply(this, arguments);
    if (i !== i0)
      t02 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t02;
  }
  tween._value = value2;
  return tween;
}
function attrTween(name, value2) {
  var t02, i0;
  function tween() {
    var i = value2.apply(this, arguments);
    if (i !== i0)
      t02 = (i0 = i) && attrInterpolate(name, i);
    return t02;
  }
  tween._value = value2;
  return tween;
}
function attrTween_default(name, value2) {
  var key2 = "attr." + name;
  if (arguments.length < 2)
    return (key2 = this.tween(key2)) && key2._value;
  if (value2 == null)
    return this.tween(key2, null);
  if (typeof value2 !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key2, (fullname.local ? attrTweenNS : attrTween)(fullname, value2));
}
var init_attrTween = __esm({
  "node_modules/d3-transition/src/transition/attrTween.js"() {
    init_src2();
  }
});

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value2) {
  return function() {
    init2(this, id2).delay = +value2.apply(this, arguments);
  };
}
function delayConstant(id2, value2) {
  return value2 = +value2, function() {
    init2(this, id2).delay = value2;
  };
}
function delay_default(value2) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value2 === "function" ? delayFunction : delayConstant)(id2, value2)) : get4(this.node(), id2).delay;
}
var init_delay = __esm({
  "node_modules/d3-transition/src/transition/delay.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value2) {
  return function() {
    set2(this, id2).duration = +value2.apply(this, arguments);
  };
}
function durationConstant(id2, value2) {
  return value2 = +value2, function() {
    set2(this, id2).duration = value2;
  };
}
function duration_default(value2) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value2 === "function" ? durationFunction : durationConstant)(id2, value2)) : get4(this.node(), id2).duration;
}
var init_duration2 = __esm({
  "node_modules/d3-transition/src/transition/duration.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value2) {
  if (typeof value2 !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value2;
  };
}
function ease_default(value2) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value2)) : get4(this.node(), id2).ease;
}
var init_ease = __esm({
  "node_modules/d3-transition/src/transition/ease.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value2) {
  return function() {
    var v = value2.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set2(this, id2).ease = v;
  };
}
function easeVarying_default(value2) {
  if (typeof value2 !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value2));
}
var init_easeVarying = __esm({
  "node_modules/d3-transition/src/transition/easeVarying.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match2) {
  if (typeof match2 !== "function")
    match2 = matcher_default(match2);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match2.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}
var init_filter2 = __esm({
  "node_modules/d3-transition/src/transition/filter.js"() {
    init_src2();
    init_transition2();
  }
});

// node_modules/d3-transition/src/transition/merge.js
function merge_default3(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge2 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge2[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}
var init_merge3 = __esm({
  "node_modules/d3-transition/src/transition/merge.js"() {
    init_transition2();
  }
});

// node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0)
      t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init2 : set2;
  return function() {
    var schedule = sit(this, id2), on2 = schedule.on;
    if (on2 !== on0)
      (on1 = (on0 = on2).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get4(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}
var init_on2 = __esm({
  "node_modules/d3-transition/src/transition/on.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}
var init_remove2 = __esm({
  "node_modules/d3-transition/src/transition/remove.js"() {
  }
});

// node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name, id2, i, subgroup, get4(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}
var init_select3 = __esm({
  "node_modules/d3-transition/src/transition/select.js"() {
    init_src2();
    init_transition2();
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get4(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule_default(child, name, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}
var init_selectAll2 = __esm({
  "node_modules/d3-transition/src/transition/selectAll.js"() {
    init_src2();
    init_transition2();
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/selection.js
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}
var Selection2;
var init_selection2 = __esm({
  "node_modules/d3-transition/src/transition/selection.js"() {
    init_src2();
    Selection2 = selection_default.prototype.constructor;
  }
});

// node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value2) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value2(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key2 = "style." + name, event = "end." + key2, remove3;
  return function() {
    var schedule = set2(this, id2), on2 = schedule.on, listener = schedule.value[key2] == null ? remove3 || (remove3 = styleRemove2(name)) : void 0;
    if (on2 !== on0 || listener0 !== listener)
      (on1 = (on0 = on2).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value2, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value2 == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value2 === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value2))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value2), priority).on("end.style." + name, null);
}
var init_style2 = __esm({
  "node_modules/d3-transition/src/transition/style.js"() {
    init_src6();
    init_src2();
    init_schedule();
    init_tween();
    init_interpolate();
  }
});

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value2, priority) {
  var t, i0;
  function tween() {
    var i = value2.apply(this, arguments);
    if (i !== i0)
      t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value2;
  return tween;
}
function styleTween_default(name, value2, priority) {
  var key2 = "style." + (name += "");
  if (arguments.length < 2)
    return (key2 = this.tween(key2)) && key2._value;
  if (value2 == null)
    return this.tween(key2, null);
  if (typeof value2 !== "function")
    throw new Error();
  return this.tween(key2, styleTween(name, value2, priority == null ? "" : priority));
}
var init_styleTween = __esm({
  "node_modules/d3-transition/src/transition/styleTween.js"() {
  }
});

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value2) {
  return function() {
    this.textContent = value2;
  };
}
function textFunction2(value2) {
  return function() {
    var value1 = value2(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value2) {
  return this.tween("text", typeof value2 === "function" ? textFunction2(tweenValue(this, "text", value2)) : textConstant2(value2 == null ? "" : value2 + ""));
}
var init_text2 = __esm({
  "node_modules/d3-transition/src/transition/text.js"() {
    init_tween();
  }
});

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value2) {
  var t02, i0;
  function tween() {
    var i = value2.apply(this, arguments);
    if (i !== i0)
      t02 = (i0 = i) && textInterpolate(i);
    return t02;
  }
  tween._value = value2;
  return tween;
}
function textTween_default(value2) {
  var key2 = "text";
  if (arguments.length < 1)
    return (key2 = this.tween(key2)) && key2._value;
  if (value2 == null)
    return this.tween(key2, null);
  if (typeof value2 !== "function")
    throw new Error();
  return this.tween(key2, textTween(value2));
}
var init_textTween = __esm({
  "node_modules/d3-transition/src/transition/textTween.js"() {
  }
});

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get4(node, id0);
        schedule_default(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}
var init_transition = __esm({
  "node_modules/d3-transition/src/transition/transition.js"() {
    init_transition2();
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on2 = schedule.on;
      if (on2 !== on0) {
        on1 = (on0 = on2).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}
var init_end = __esm({
  "node_modules/d3-transition/src/transition/end.js"() {
    init_schedule();
  }
});

// node_modules/d3-transition/src/transition/index.js
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var id, selection_prototype;
var init_transition2 = __esm({
  "node_modules/d3-transition/src/transition/index.js"() {
    init_src2();
    init_attr2();
    init_attrTween();
    init_delay();
    init_duration2();
    init_ease();
    init_easeVarying();
    init_filter2();
    init_merge3();
    init_on2();
    init_remove2();
    init_select3();
    init_selectAll2();
    init_selection2();
    init_style2();
    init_styleTween();
    init_text2();
    init_textTween();
    init_transition();
    init_tween();
    init_end();
    id = 0;
    selection_prototype = selection_default.prototype;
    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: select_default3,
      selectAll: selectAll_default2,
      selectChild: selection_prototype.selectChild,
      selectChildren: selection_prototype.selectChildren,
      filter: filter_default2,
      merge: merge_default3,
      selection: selection_default2,
      transition: transition_default,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: on_default2,
      attr: attr_default2,
      attrTween: attrTween_default,
      style: style_default2,
      styleTween: styleTween_default,
      text: text_default2,
      textTween: textTween_default,
      remove: remove_default2,
      tween: tween_default,
      delay: delay_default,
      duration: duration_default,
      ease: ease_default,
      easeVarying: easeVarying_default,
      end: end_default,
      [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };
  }
});

// node_modules/d3-transition/src/selection/transition.js
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now2(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}
var defaultTiming;
var init_transition3 = __esm({
  "node_modules/d3-transition/src/selection/transition.js"() {
    init_transition2();
    init_schedule();
    init_src();
    init_src21();
    defaultTiming = {
      time: null,
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };
  }
});

// node_modules/d3-transition/src/selection/index.js
var init_selection3 = __esm({
  "node_modules/d3-transition/src/selection/index.js"() {
    init_src2();
    init_interrupt2();
    init_transition3();
    selection_default.prototype.interrupt = interrupt_default2;
    selection_default.prototype.transition = transition_default2;
  }
});

// node_modules/d3-transition/src/index.js
var init_src22 = __esm({
  "node_modules/d3-transition/src/index.js"() {
    init_selection3();
    init_interrupt();
  }
});

// node_modules/d3-brush/src/constant.js
var constant_default7;
var init_constant10 = __esm({
  "node_modules/d3-brush/src/constant.js"() {
    constant_default7 = (x3) => () => x3;
  }
});

// node_modules/d3-brush/src/event.js
function BrushEvent(type2, {
  sourceEvent,
  target,
  selection: selection2,
  mode,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    selection: { value: selection2, enumerable: true, configurable: true },
    mode: { value: mode, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}
var init_event = __esm({
  "node_modules/d3-brush/src/event.js"() {
  }
});

// node_modules/d3-brush/src/noevent.js
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default2(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
var init_noevent2 = __esm({
  "node_modules/d3-brush/src/noevent.js"() {
  }
});

// node_modules/d3-brush/src/brush.js
function number1(e) {
  return [+e[0], +e[1]];
}
function number22(e) {
  return [number1(e[0]), number1(e[1])];
}
function type(t) {
  return { type: t };
}
function defaultFilter(event) {
  return !event.ctrlKey && !event.button;
}
function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function local(node) {
  while (!node.__brush)
    if (!(node = node.parentNode))
      return;
  return node.__brush;
}
function empty2(extent2) {
  return extent2[0][0] === extent2[1][0] || extent2[0][1] === extent2[1][1];
}
function brushX() {
  return brush(X);
}
function brush(dim) {
  var extent2 = defaultExtent, filter2 = defaultFilter, touchable = defaultTouchable, keys2 = true, listeners = dispatch_default2("start", "brush", "end"), handleSize = 6, touchending;
  function brush2(group) {
    var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
      var extent3 = local(this).extent;
      select_default2(this).attr("x", extent3[0][0]).attr("y", extent3[0][1]).attr("width", extent3[1][0] - extent3[0][0]).attr("height", extent3[1][1] - extent3[0][1]);
    });
    group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group.selectAll(".handle").data(dim.handles, function(d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function(d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function(d) {
      return cursors[d.type];
    });
    group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  brush2.move = function(group, selection2, event) {
    if (group.tween) {
      group.on("start.brush", function(event2) {
        emitter(this, arguments).beforestart().start(event2);
      }).on("interrupt.brush end.brush", function(event2) {
        emitter(this, arguments).end(event2);
      }).tween("brush", function() {
        var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection2 === "function" ? selection2.apply(this, arguments) : selection2, state.extent), i = value_default(selection0, selection1);
        function tween(t) {
          state.selection = t === 1 && selection1 === null ? null : i(t);
          redraw.call(that);
          emit.brush();
        }
        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group.each(function() {
        var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection2 === "function" ? selection2.apply(that, args) : selection2, state.extent), emit = emitter(that, args).beforestart();
        interrupt_default(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start(event).brush(event).end(event);
      });
    }
  };
  brush2.clear = function(group, event) {
    brush2.move(group, null, event);
  };
  function redraw() {
    var group = select_default2(this), selection2 = local(this).selection;
    if (selection2) {
      group.selectAll(".selection").style("display", null).attr("x", selection2[0][0]).attr("y", selection2[0][1]).attr("width", selection2[1][0] - selection2[0][0]).attr("height", selection2[1][1] - selection2[0][1]);
      group.selectAll(".handle").style("display", null).attr("x", function(d) {
        return d.type[d.type.length - 1] === "e" ? selection2[1][0] - handleSize / 2 : selection2[0][0] - handleSize / 2;
      }).attr("y", function(d) {
        return d.type[0] === "s" ? selection2[1][1] - handleSize / 2 : selection2[0][1] - handleSize / 2;
      }).attr("width", function(d) {
        return d.type === "n" || d.type === "s" ? selection2[1][0] - selection2[0][0] + handleSize : handleSize;
      }).attr("height", function(d) {
        return d.type === "e" || d.type === "w" ? selection2[1][1] - selection2[0][1] + handleSize : handleSize;
      });
    } else {
      group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }
  function emitter(that, args, clean) {
    var emit = that.__brush.emitter;
    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
  }
  function Emitter(that, args, clean) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
    this.clean = clean;
  }
  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1)
        this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function(event, mode) {
      if (this.starting)
        this.starting = false, this.emit("start", event, mode);
      else
        this.emit("brush", event);
      return this;
    },
    brush: function(event, mode) {
      this.emit("brush", event, mode);
      return this;
    },
    end: function(event, mode) {
      if (--this.active === 0)
        delete this.state.emitter, this.emit("end", event, mode);
      return this;
    },
    emit: function(type2, event, mode) {
      var d = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new BrushEvent(type2, {
          sourceEvent: event,
          target: brush2,
          selection: dim.output(this.state.selection),
          mode,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function started(event) {
    if (touchending && !event.touches)
      return;
    if (!filter2.apply(this, arguments))
      return;
    var that = this, type2 = event.target.__data__.type, mode = (keys2 && event.metaKey ? type2 = "overlay" : type2) === "selection" ? MODE_DRAG : keys2 && event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type2], signY = dim === X ? null : signsY[type2], state = local(that), extent3 = state.extent, selection2 = state.selection, W = extent3[0][0], w0, w1, N = extent3[0][1], n0, n1, E = extent3[1][0], e0, e1, S = extent3[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys2 && event.shiftKey, lockX, lockY, points = Array.from(event.touches || [event], (t) => {
      const i = t.identifier;
      t = pointer_default(t, that);
      t.point0 = t.slice();
      t.identifier = i;
      return t;
    });
    interrupt_default(that);
    var emit = emitter(that, arguments, true).beforestart();
    if (type2 === "overlay") {
      if (selection2)
        moving = true;
      const pts = [points[0], points[1] || points[0]];
      state.selection = selection2 = [[
        w0 = dim === Y ? W : min4(pts[0][0], pts[1][0]),
        n0 = dim === X ? N : min4(pts[0][1], pts[1][1])
      ], [
        e0 = dim === Y ? E : max4(pts[0][0], pts[1][0]),
        s0 = dim === X ? S : max4(pts[0][1], pts[1][1])
      ]];
      if (points.length > 1)
        move(event);
    } else {
      w0 = selection2[0][0];
      n0 = selection2[0][1];
      e0 = selection2[1][0];
      s0 = selection2[1][1];
    }
    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = select_default2(that).attr("pointer-events", "none");
    var overlay = group.selectAll(".overlay").attr("cursor", cursors[type2]);
    if (event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = select_default2(event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys2)
        view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      nodrag_default(event.view);
    }
    redraw.call(that);
    emit.start(event, mode.name);
    function moved(event2) {
      for (const p of event2.changedTouches || [event2]) {
        for (const d of points)
          if (d.identifier === p.identifier)
            d.cur = pointer_default(p, that);
      }
      if (shifting && !lockX && !lockY && points.length === 1) {
        const point6 = points[0];
        if (abs2(point6.cur[0] - point6[0]) > abs2(point6.cur[1] - point6[1]))
          lockY = true;
        else
          lockX = true;
      }
      for (const point6 of points)
        if (point6.cur)
          point6[0] = point6.cur[0], point6[1] = point6.cur[1];
      moving = true;
      noevent_default2(event2);
      move(event2);
    }
    function move(event2) {
      const point6 = points[0], point0 = point6.point0;
      var t;
      dx = point6[0] - point0[0];
      dy = point6[1] - point0[1];
      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX)
            dx = max4(W - w0, min4(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY)
            dy = max4(N - n0, min4(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (points[1]) {
            if (signX)
              w1 = max4(W, min4(E, points[0][0])), e1 = max4(W, min4(E, points[1][0])), signX = 1;
            if (signY)
              n1 = max4(N, min4(S, points[0][1])), s1 = max4(N, min4(S, points[1][1])), signY = 1;
          } else {
            if (signX < 0)
              dx = max4(W - w0, min4(E - w0, dx)), w1 = w0 + dx, e1 = e0;
            else if (signX > 0)
              dx = max4(W - e0, min4(E - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0)
              dy = max4(N - n0, min4(S - n0, dy)), n1 = n0 + dy, s1 = s0;
            else if (signY > 0)
              dy = max4(N - s0, min4(S - s0, dy)), n1 = n0, s1 = s0 + dy;
          }
          break;
        }
        case MODE_CENTER: {
          if (signX)
            w1 = max4(W, min4(E, w0 - dx * signX)), e1 = max4(W, min4(E, e0 + dx * signX));
          if (signY)
            n1 = max4(N, min4(S, n0 - dy * signY)), s1 = max4(N, min4(S, s0 + dy * signY));
          break;
        }
      }
      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type2 in flipX)
          overlay.attr("cursor", cursors[type2 = flipX[type2]]);
      }
      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type2 in flipY)
          overlay.attr("cursor", cursors[type2 = flipY[type2]]);
      }
      if (state.selection)
        selection2 = state.selection;
      if (lockX)
        w1 = selection2[0][0], e1 = selection2[1][0];
      if (lockY)
        n1 = selection2[0][1], s1 = selection2[1][1];
      if (selection2[0][0] !== w1 || selection2[0][1] !== n1 || selection2[1][0] !== e1 || selection2[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush(event2, mode.name);
      }
    }
    function ended(event2) {
      nopropagation(event2);
      if (event2.touches) {
        if (event2.touches.length)
          return;
        if (touchending)
          clearTimeout(touchending);
        touchending = setTimeout(function() {
          touchending = null;
        }, 500);
      } else {
        yesdrag(event2.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection)
        selection2 = state.selection;
      if (empty2(selection2))
        state.selection = null, redraw.call(that);
      emit.end(event2, mode.name);
    }
    function keydowned(event2) {
      switch (event2.keyCode) {
        case 16: {
          shifting = signX && signY;
          break;
        }
        case 18: {
          if (mode === MODE_HANDLE) {
            if (signX)
              e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY)
              s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode = MODE_CENTER;
            move(event2);
          }
          break;
        }
        case 32: {
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
            if (signX < 0)
              e0 = e1 - dx;
            else if (signX > 0)
              w0 = w1 - dx;
            if (signY < 0)
              s0 = s1 - dy;
            else if (signY > 0)
              n0 = n1 - dy;
            mode = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move(event2);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event2);
    }
    function keyupped(event2) {
      switch (event2.keyCode) {
        case 16: {
          if (shifting) {
            lockX = lockY = shifting = false;
            move(event2);
          }
          break;
        }
        case 18: {
          if (mode === MODE_CENTER) {
            if (signX < 0)
              e0 = e1;
            else if (signX > 0)
              w0 = w1;
            if (signY < 0)
              s0 = s1;
            else if (signY > 0)
              n0 = n1;
            mode = MODE_HANDLE;
            move(event2);
          }
          break;
        }
        case 32: {
          if (mode === MODE_SPACE) {
            if (event2.altKey) {
              if (signX)
                e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY)
                s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
            } else {
              if (signX < 0)
                e0 = e1;
              else if (signX > 0)
                w0 = w1;
              if (signY < 0)
                s0 = s1;
              else if (signY > 0)
                n0 = n1;
              mode = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type2]);
            move(event2);
          }
          break;
        }
        default:
          return;
      }
      noevent_default2(event2);
    }
  }
  function touchmoved(event) {
    emitter(this, arguments).moved(event);
  }
  function touchended(event) {
    emitter(this, arguments).ended(event);
  }
  function initialize() {
    var state = this.__brush || { selection: null };
    state.extent = number22(extent2.apply(this, arguments));
    state.dim = dim;
    return state;
  }
  brush2.extent = function(_) {
    return arguments.length ? (extent2 = typeof _ === "function" ? _ : constant_default7(number22(_)), brush2) : extent2;
  };
  brush2.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default7(!!_), brush2) : filter2;
  };
  brush2.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default7(!!_), brush2) : touchable;
  };
  brush2.handleSize = function(_) {
    return arguments.length ? (handleSize = +_, brush2) : handleSize;
  };
  brush2.keyModifiers = function(_) {
    return arguments.length ? (keys2 = !!_, brush2) : keys2;
  };
  brush2.on = function() {
    var value2 = listeners.on.apply(listeners, arguments);
    return value2 === listeners ? brush2 : value2;
  };
  return brush2;
}
var MODE_DRAG, MODE_SPACE, MODE_HANDLE, MODE_CENTER, abs2, max4, min4, X, Y, XY, cursors, flipX, flipY, signsX, signsY;
var init_brush = __esm({
  "node_modules/d3-brush/src/brush.js"() {
    init_src19();
    init_src20();
    init_src6();
    init_src2();
    init_src22();
    init_constant10();
    init_event();
    init_noevent2();
    MODE_DRAG = { name: "drag" };
    MODE_SPACE = { name: "space" };
    MODE_HANDLE = { name: "handle" };
    MODE_CENTER = { name: "center" };
    ({ abs: abs2, max: max4, min: min4 } = Math);
    X = {
      name: "x",
      handles: ["w", "e"].map(type),
      input: function(x3, e) {
        return x3 == null ? null : [[+x3[0], e[0][1]], [+x3[1], e[1][1]]];
      },
      output: function(xy) {
        return xy && [xy[0][0], xy[1][0]];
      }
    };
    Y = {
      name: "y",
      handles: ["n", "s"].map(type),
      input: function(y3, e) {
        return y3 == null ? null : [[e[0][0], +y3[0]], [e[1][0], +y3[1]]];
      },
      output: function(xy) {
        return xy && [xy[0][1], xy[1][1]];
      }
    };
    XY = {
      name: "xy",
      handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
      input: function(xy) {
        return xy == null ? null : number22(xy);
      },
      output: function(xy) {
        return xy;
      }
    };
    cursors = {
      overlay: "crosshair",
      selection: "move",
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };
    flipX = {
      e: "w",
      w: "e",
      nw: "ne",
      ne: "nw",
      se: "sw",
      sw: "se"
    };
    flipY = {
      n: "s",
      s: "n",
      nw: "sw",
      ne: "se",
      se: "ne",
      sw: "nw"
    };
    signsX = {
      overlay: 1,
      selection: 1,
      n: null,
      e: 1,
      s: null,
      w: -1,
      nw: -1,
      ne: 1,
      se: 1,
      sw: -1
    };
    signsY = {
      overlay: 1,
      selection: 1,
      n: -1,
      e: null,
      s: 1,
      w: null,
      nw: -1,
      ne: -1,
      se: 1,
      sw: 1
    };
  }
});

// node_modules/d3-brush/src/index.js
var init_src23 = __esm({
  "node_modules/d3-brush/src/index.js"() {
    init_brush();
  }
});

// .svelte-kit/output/server/entries/pages/_page.svelte.js
var page_svelte_exports = {};
__export(page_svelte_exports, {
  default: () => Page
});
function isTickPrimary(tick, i, allTicks, interval2, showDayName) {
  var isFirstTick = i === 0;
  var hasANewWeekStarted = Number(format2(new Date(tick), "c")) === 2;
  var isFirstQuarter = Number(format2(new Date(tick), "q")) === 1;
  var previousTick = i !== 0 ? allTicks[i - 1] : null;
  switch (interval2) {
    case "15seconds":
      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);
    case "minute":
      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);
    case "30minutes":
      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);
    case "hourly":
      return isFirstTick || isDayOfMonthChanged(tick) || isMonthChanged(tick, previousTick) || isYearChanged(tick);
    case "daily":
      if (!showDayName) {
        return isFirstTick || isMonthChanged(tick, previousTick) || isYearChanged(tick);
      } else {
        return isFirstTick || hasANewWeekStarted || isYearChanged(tick);
      }
    case "monthly":
      return isFirstTick || isYearChanged(tick);
    case "quarterly":
      return isFirstTick || isFirstQuarter;
    case "yearly":
      return false;
    default:
      throw new Error(interval2 + " is not a valid time interval.");
  }
}
function formatTick(tick, i, allTicks, interval2, timeScaleOptions) {
  var showDayName = timeScaleOptions.showDayName;
  var intervalConsideringAlsoShowDayNameOption = interval2 === "daily" && showDayName ? "weekly" : interval2;
  var date2 = new Date(tick);
  var formats = Tools.getProperty(timeScaleOptions, "timeIntervalFormats")[intervalConsideringAlsoShowDayNameOption];
  var primary = Tools.getProperty(formats, "primary");
  var secondary = Tools.getProperty(formats, "secondary");
  var formatString = isTickPrimary(tick, i, allTicks, interval2, showDayName) ? primary : secondary;
  if (interval2 === "15seconds" && date2.getMilliseconds() !== 0) {
    formatString = formatString.replace("pp", "h:mm:ss.SSS a");
  }
  var locale4 = timeScaleOptions.localeObject;
  return format2(date2, formatString, { locale: locale4 });
}
function getTimeformats(timestamp) {
  var date2 = new Date(timestamp);
  return {
    M: date2.getMonth() + 1,
    d: date2.getDate(),
    H: date2.getHours(),
    m: date2.getMinutes(),
    s: date2.getSeconds()
  };
}
function getConsecutiveDifferences(elements) {
  if (!elements) {
    return;
  }
  return elements.slice(1).map(function(elem, i) {
    return elem - elements[i];
  });
}
function closestTimeIntervalName(duration) {
  var index5 = TIME_INTERVALS.reduce(function(nearestIndex, _a22, i) {
    _a22[0];
    var delta = _a22[1];
    var deltaNearest = TIME_INTERVALS[nearestIndex][1];
    var oldNearestSpan = Math.abs(deltaNearest - duration);
    var currentSpan = Math.abs(delta - duration);
    return oldNearestSpan < currentSpan ? nearestIndex : i;
  }, 0);
  return TIME_INTERVALS[index5][0];
}
function computeTimeIntervalName(ticks2) {
  if (ticks2.length === 1) {
    return "15seconds";
  }
  var differences = getConsecutiveDifferences(ticks2);
  var minDifference = min(differences);
  return closestTimeIntervalName(minDifference);
}
function isDayOfMonthChanged(timestamp) {
  var _a22 = getTimeformats(timestamp), s2 = _a22.s, m2 = _a22.m, H = _a22.H;
  return H === 0 && m2 === 0 && s2 === 0;
}
function isMonthChanged(timestamp, previousTimestamp) {
  var currentMonth = getTimeformats(timestamp).M;
  var previousMonth = getTimeformats(previousTimestamp).M;
  return currentMonth !== previousMonth;
}
function isYearChanged(timestamp) {
  var _a22 = getTimeformats(timestamp), M = _a22.M, d = _a22.d, s2 = _a22.s, m2 = _a22.m, H = _a22.H;
  return M === 1 && d === 1 && H === 0 && m2 === 0 && s2 === 0;
}
function formatDateTillMilliSeconds(date2) {
  if (date2 === void 0) {
    return "";
  }
  return date2.toISOString();
}
function addSpacingToTimeDomain(domain, spaceToAddToEdges) {
  var startDate = new Date(domain[0]);
  var endDate = new Date(domain[1]);
  if (differenceInYears(endDate, startDate) > 1) {
    return [
      subYears(startDate, spaceToAddToEdges),
      addYears(endDate, spaceToAddToEdges)
    ];
  }
  if (differenceInMonths(endDate, startDate) > 1) {
    return [
      subMonths(startDate, spaceToAddToEdges),
      addMonths(endDate, spaceToAddToEdges)
    ];
  }
  if (differenceInDays(endDate, startDate) > 1) {
    return [
      subDays(startDate, spaceToAddToEdges),
      addDays(endDate, spaceToAddToEdges)
    ];
  }
  if (differenceInHours(endDate, startDate) > 1) {
    return [
      subHours(startDate, spaceToAddToEdges),
      addHours(endDate, spaceToAddToEdges)
    ];
  }
  if (differenceInMinutes(endDate, startDate) > 30) {
    return [
      subMinutes(startDate, spaceToAddToEdges * 30),
      addMinutes(endDate, spaceToAddToEdges * 30)
    ];
  }
  if (differenceInMinutes(endDate, startDate) > 1) {
    return [
      subMinutes(startDate, spaceToAddToEdges),
      addMinutes(endDate, spaceToAddToEdges)
    ];
  }
  if (differenceInSeconds(endDate, startDate) > 15) {
    return [
      subSeconds(startDate, spaceToAddToEdges * 15),
      addSeconds(endDate, spaceToAddToEdges * 15)
    ];
  }
  if (differenceInSeconds(endDate, startDate) > 1) {
    return [
      subSeconds(startDate, spaceToAddToEdges),
      addSeconds(endDate, spaceToAddToEdges)
    ];
  }
  return [startDate, endDate];
}
function addSpacingToContinuousDomain(_a22, paddingRatio, scaleType) {
  var lower2 = _a22[0], upper = _a22[1];
  var domainLength = upper - lower2;
  var padding = domainLength * paddingRatio;
  var newUpper = upper <= 0 && upper + padding > 0 ? 0 : upper + padding;
  var newLower = lower2 >= 0 && lower2 - padding < 0 ? 0 : lower2 - padding;
  if (scaleType === ScaleTypes.LOG && newLower <= 0) {
    if (lower2 <= 0) {
      throw Error("Data must have values greater than 0 if log scale type is used.");
    }
    newLower = lower2;
  }
  return [newLower, newUpper];
}
function _defineProperties$6(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$6(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck$6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
}
function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _iterableToArray$1(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$1(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$1(arr);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function flatten2(a2) {
  return a2.reduce(function(result, item) {
    if (Array.isArray(item)) {
      result.push.apply(result, _toConsumableArray$1(flatten2(item)));
    } else {
      result.push(item);
    }
    return result;
  }, []);
}
function mixin() {
  for (var _len = arguments.length, mixinfns = new Array(_len), _key = 0; _key < _len; _key++) {
    mixinfns[_key] = arguments[_key];
  }
  return flatten2(mixinfns).reduce(function(Class, mixinfn) {
    return mixinfn(Class);
  }, /* @__PURE__ */ function() {
    function _class() {
      _classCallCheck$6(this, _class);
    }
    return _createClass$6(_class);
  }());
}
function _typeof$5(obj) {
  "@babel/helpers - typeof";
  return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$5(obj);
}
function _classCallCheck$5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$5(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$5(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits$5(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf$5(subClass, superClass);
}
function _setPrototypeOf$5(o, p) {
  _setPrototypeOf$5 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$5(o, p);
}
function _createSuper$5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$5(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$5(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$5(this, result);
  };
}
function _possibleConstructorReturn$5(self2, call) {
  if (call && (_typeof$5(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$5(self2);
}
function _assertThisInitialized$5(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$5(o) {
  _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$5(o);
}
function createComponent(ToMix) {
  var CreateComponent = /* @__PURE__ */ function(_ToMix) {
    _inherits$5(CreateComponent2, _ToMix);
    var _super = _createSuper$5(CreateComponent2);
    function CreateComponent2(element) {
      var _this;
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck$5(this, CreateComponent2);
      _this = _super.call(this, element, options2);
      _this.children = [];
      if (!element || element.nodeType !== Node.ELEMENT_NODE) {
        throw new TypeError("DOM element should be given to initialize this widget.");
      }
      _this.element = element;
      _this.options = Object.assign(Object.create(_this.constructor.options), options2);
      _this.constructor.components.set(_this.element, _assertThisInitialized$5(_this));
      return _this;
    }
    _createClass$5(CreateComponent2, [{
      key: "release",
      value: function release() {
        for (var child = this.children.pop(); child; child = this.children.pop()) {
          child.release();
        }
        this.constructor.components.delete(this.element);
        return null;
      }
    }], [{
      key: "create",
      value: function create2(element, options2) {
        return this.components.get(element) || new this(element, options2);
      }
    }]);
    return CreateComponent2;
  }(ToMix);
  return CreateComponent;
}
function _typeof$4(obj) {
  "@babel/helpers - typeof";
  return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$4(obj);
}
function _classCallCheck$4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$4(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get2(target, property2, receiver) {
      var base2 = _superPropBase(target, property2);
      if (!base2)
        return;
      var desc = Object.getOwnPropertyDescriptor(base2, property2);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}
function _superPropBase(object, property2) {
  while (!Object.prototype.hasOwnProperty.call(object, property2)) {
    object = _getPrototypeOf$4(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf$4(subClass, superClass);
}
function _setPrototypeOf$4(o, p) {
  _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$4(o, p);
}
function _createSuper$4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$4(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$4(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$4(this, result);
  };
}
function _possibleConstructorReturn$4(self2, call) {
  if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$4(self2);
}
function _assertThisInitialized$4(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$4(o) {
  _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$4(o);
}
function handles(ToMix) {
  var Handles = /* @__PURE__ */ function(_ToMix) {
    _inherits$4(Handles2, _ToMix);
    var _super = _createSuper$4(Handles2);
    function Handles2() {
      var _this;
      _classCallCheck$4(this, Handles2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this.handles = /* @__PURE__ */ new Set();
      return _this;
    }
    _createClass$4(Handles2, [{
      key: "manage",
      value: function manage(handle) {
        this.handles.add(handle);
        return handle;
      }
    }, {
      key: "unmanage",
      value: function unmanage(handle) {
        this.handles.delete(handle);
        return handle;
      }
    }, {
      key: "release",
      value: function release() {
        var _this2 = this;
        this.handles.forEach(function(handle) {
          handle.release();
          _this2.handles.delete(handle);
        });
        return _get(_getPrototypeOf$4(Handles2.prototype), "release", this).call(this);
      }
    }]);
    return Handles2;
  }(ToMix);
  return Handles;
}
function on(element) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  element.addEventListener.apply(element, args);
  return {
    release: function release() {
      element.removeEventListener.apply(element, args);
      return null;
    }
  };
}
function _typeof$3(obj) {
  "@babel/helpers - typeof";
  return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$3(obj);
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits$3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf$3(subClass, superClass);
}
function _setPrototypeOf$3(o, p) {
  _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$3(o, p);
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$3(this, result);
  };
}
function _possibleConstructorReturn$3(self2, call) {
  if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$3(self2);
}
function _assertThisInitialized$3(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$3(o) {
  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$3(o);
}
function eventedState(ToMix) {
  var EventedState = /* @__PURE__ */ function(_ToMix) {
    _inherits$3(EventedState2, _ToMix);
    var _super = _createSuper$3(EventedState2);
    function EventedState2() {
      _classCallCheck$3(this, EventedState2);
      return _super.apply(this, arguments);
    }
    _createClass$3(EventedState2, [{
      key: "_changeState",
      value: function _changeState() {
        throw new Error("_changeState() should be overridden to perform actual change in state.");
      }
    }, {
      key: "changeState",
      value: function changeState() {
        var _this = this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var state = typeof args[0] === "string" ? args.shift() : void 0;
        var detail = Object(args[0]) === args[0] && typeof args[0] !== "function" ? args.shift() : void 0;
        var callback = typeof args[0] === "function" ? args.shift() : void 0;
        if (typeof this.shouldStateBeChanged === "function" && !this.shouldStateBeChanged(state, detail)) {
          if (callback) {
            callback(null, true);
          }
          return;
        }
        var data = {
          group: detail && detail.group,
          state
        };
        var eventNameSuffix = [data.group, state].filter(Boolean).join("-").split("-").map(function(item) {
          return item[0].toUpperCase() + item.substr(1);
        }).join("");
        var eventStart = new CustomEvent(this.options["eventBefore".concat(eventNameSuffix)], {
          bubbles: true,
          cancelable: true,
          detail
        });
        var fireOnNode = detail && detail.delegatorNode || this.element;
        var canceled = !fireOnNode.dispatchEvent(eventStart);
        if (canceled) {
          if (callback) {
            var error2 = new Error("Changing state (".concat(JSON.stringify(data), ") has been canceled."));
            error2.canceled = true;
            callback(error2);
          }
        } else {
          var changeStateArgs = [state, detail].filter(Boolean);
          this._changeState.apply(this, _toConsumableArray(changeStateArgs).concat([function() {
            fireOnNode.dispatchEvent(new CustomEvent(_this.options["eventAfter".concat(eventNameSuffix)], {
              bubbles: true,
              cancelable: true,
              detail
            }));
            if (callback) {
              callback();
            }
          }]));
        }
      }
    }]);
    return EventedState2;
  }(ToMix);
  return EventedState;
}
function eventMatches(event, selector) {
  var target = event.target, currentTarget = event.currentTarget;
  if (typeof target.matches === "function") {
    if (target.matches(selector)) {
      return target;
    }
    if (target.matches("".concat(selector, " *"))) {
      var closest = target.closest(selector);
      if ((currentTarget.nodeType === Node.DOCUMENT_NODE ? currentTarget.documentElement : currentTarget).contains(closest)) {
        return closest;
      }
    }
  }
  return void 0;
}
function getLaunchingDetails(evt) {
  if (!evt || typeof evt === "function") {
    return {
      launchingElement: null,
      launchingEvent: null
    };
  }
  var launchingElement = evt.delegateTarget || evt.currentTarget || evt;
  var launchingEvent = evt.currentTarget && evt;
  if (launchingElement && !launchingElement.nodeType) {
    throw new TypeError("DOM Node should be given for launching element.");
  }
  if (launchingEvent && !launchingEvent.type) {
    throw new TypeError("DOM event should be given for launching event.");
  }
  return {
    launchingElement,
    launchingEvent
  };
}
function _typeof$2(obj) {
  "@babel/helpers - typeof";
  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$2(obj);
}
function _classCallCheck$2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits$2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf$2(subClass, superClass);
}
function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$2(o, p);
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$2(this, result);
  };
}
function _possibleConstructorReturn$2(self2, call) {
  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$2(self2);
}
function _assertThisInitialized$2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$2(o) {
  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$2(o);
}
function eventedShowHideState(ToMix) {
  var EventedShowHideState = /* @__PURE__ */ function(_ToMix) {
    _inherits$2(EventedShowHideState2, _ToMix);
    var _super = _createSuper$2(EventedShowHideState2);
    function EventedShowHideState2() {
      _classCallCheck$2(this, EventedShowHideState2);
      return _super.apply(this, arguments);
    }
    _createClass$2(EventedShowHideState2, [{
      key: "show",
      value: function show(evtOrElem, callback) {
        if (!evtOrElem || typeof evtOrElem === "function") {
          callback = evtOrElem;
        }
        this.changeState("shown", getLaunchingDetails(evtOrElem), callback);
      }
    }, {
      key: "hide",
      value: function hide(evtOrElem, callback) {
        if (!evtOrElem || typeof evtOrElem === "function") {
          callback = evtOrElem;
        }
        this.changeState("hidden", getLaunchingDetails(evtOrElem), callback);
      }
    }]);
    return EventedShowHideState2;
  }(ToMix);
  return EventedShowHideState;
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$1(obj);
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf$1(subClass, superClass);
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$1(o, p);
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$1(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$1(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$1(this, result);
  };
}
function _possibleConstructorReturn$1(self2, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self2);
}
function _assertThisInitialized$1(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$1(o);
}
function initComponentByLauncher(ToMix) {
  var InitComponentByLauncher = /* @__PURE__ */ function(_ToMix) {
    _inherits$1(InitComponentByLauncher2, _ToMix);
    var _super = _createSuper$1(InitComponentByLauncher2);
    function InitComponentByLauncher2() {
      _classCallCheck$1(this, InitComponentByLauncher2);
      return _super.apply(this, arguments);
    }
    _createClass$1(InitComponentByLauncher2, null, [{
      key: "init",
      value: function init3() {
        var _this = this;
        var target = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
        var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var effectiveOptions = Object.assign(Object.create(this.options), options2);
        if (!target || target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {
          throw new TypeError("DOM document or DOM element should be given to search for and initialize this widget.");
        }
        if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {
          this.create(target, options2);
        } else {
          var handles2 = effectiveOptions.initEventNames.map(function(name) {
            return on(target, name, function(event) {
              var launcher = eventMatches(event, "[".concat(effectiveOptions.attribInitTarget, "]"));
              if (launcher) {
                event.delegateTarget = launcher;
                var elements = launcher.ownerDocument.querySelectorAll(launcher.getAttribute(effectiveOptions.attribInitTarget));
                if (elements.length > 1) {
                  throw new Error("Target widget must be unique.");
                }
                if (elements.length === 1) {
                  if (launcher.tagName === "A") {
                    event.preventDefault();
                  }
                  var component4 = _this.create(elements[0], options2);
                  if (typeof component4.createdByLauncher === "function") {
                    component4.createdByLauncher(event);
                  }
                }
              }
            });
          });
          return {
            release: function release() {
              for (var handle = handles2.pop(); handle; handle = handles2.pop()) {
                handle.release();
              }
            }
          };
        }
        return "";
      }
    }]);
    InitComponentByLauncher2.forLazyInit = true;
    return InitComponentByLauncher2;
  }(ToMix);
  return InitComponentByLauncher;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function arcTween(a2, arcFunc) {
  var _this = this;
  var i = value_default(this._current, a2);
  return function(t) {
    _this._current = i(t);
    return arcFunc(_this._current);
  };
}
function radialLabelPlacement(angleRadians) {
  var angle = mod(radToDeg(angleRadians), 360);
  if (isInRange(angle, [0, 10]) || isInRange(angle, [350, 0])) {
    return {
      textAnchor: TextAnchor.START,
      dominantBaseline: DominantBaseline.MIDDLE
    };
  } else if (isInRange(angle, [10, 80])) {
    return {
      textAnchor: TextAnchor.START,
      dominantBaseline: DominantBaseline.HANGING
    };
  } else if (isInRange(angle, [80, 100])) {
    return {
      textAnchor: TextAnchor.MIDDLE,
      dominantBaseline: DominantBaseline.HANGING
    };
  } else if (isInRange(angle, [100, 170])) {
    return {
      textAnchor: TextAnchor.END,
      dominantBaseline: DominantBaseline.HANGING
    };
  } else if (isInRange(angle, [170, 190])) {
    return {
      textAnchor: TextAnchor.END,
      dominantBaseline: DominantBaseline.MIDDLE
    };
  } else if (isInRange(angle, [190, 260])) {
    return {
      textAnchor: TextAnchor.END,
      dominantBaseline: DominantBaseline.BASELINE
    };
  } else if (isInRange(angle, [260, 280])) {
    return {
      textAnchor: TextAnchor.MIDDLE,
      dominantBaseline: DominantBaseline.BASELINE
    };
  } else {
    return {
      textAnchor: TextAnchor.START,
      dominantBaseline: DominantBaseline.BASELINE
    };
  }
}
function mod(n, m2) {
  return (n % m2 + m2) % m2;
}
function isInRange(x3, _a22) {
  var min22 = _a22[0], max22 = _a22[1];
  return x3 >= min22 && x3 <= max22;
}
function radToDeg(rad) {
  return rad * (180 / Math.PI);
}
function polarToCartesianCoords(a2, r, t) {
  if (t === void 0) {
    t = { x: 0, y: 0 };
  }
  var x3 = r * Math.cos(a2) + t.x;
  var y3 = r * Math.sin(a2) + t.y;
  return { x: isNaN(x3) ? 0 : x3, y: isNaN(y3) ? 0 : y3 };
}
function distanceBetweenPointOnCircAndVerticalDiameter(a2, r) {
  return r * Math.sin(a2 - Math.PI / 2);
}
function pointIsWithinThreshold(dx, x3) {
  return dx > x3 - THRESHOLD && dx < x3 + THRESHOLD;
}
function compareTranslations(translationFrom, translationTo) {
  let translationNeeded = "no";
  const uipLanguages = translationFrom.split(",");
  const nationalLanguages = translationTo.split(",");
  for (const language of nationalLanguages) {
    if (!uipLanguages.includes(language)) {
      translationNeeded = "yes";
      break;
    }
  }
  return translationNeeded;
}
var import_en_US2, import_warning, import_d3_cloud, ButtonSkeleton, ButtonSkeleton$1, Button, Button$1, Add, Add$1, Subtract, Subtract$1, EditOff, EditOff$1, NumberInput, NumberInput$1, Select, Select$1, SelectItem, SelectItem$1, StructuredList, StructuredList$1, StructuredListBody, StructuredListBody$1, StructuredListHead, StructuredListHead$1, StructuredListCell, StructuredListCell$1, StructuredListRow, StructuredListRow$1, storeTableData, storeUserVal, Roles, Chart$1, Modal$2, Model, Toolbar$1, ZoomBar$1, ZoomDomain, CanvasZoom$1, Axis$1, Area$1, WordCloud$1, Pie$1, Gauge$1, Bar$1, Boxplot$1, Scatter$1, Line$1, Radar$1, Tree$1, Treemap$1, Tooltip$1, Threshold$1, Legend$1, CirclePack$1, Alluvial$1, Meter$1, Heatmap$1, EventEnums, Events$1, RenderTypes, ChartTheme, ColorClassNameTypes, AxisPositions, ZoomBarTypes, TruncationTypes, CartesianOrientations, ScaleTypes, LegendPositions, Alignments, LegendOrientations, TreeTypes, LayoutDirection, LayoutGrowth, LayoutAlignItems, CalloutDirections, Skeletons, TextAnchor, DominantBaseline, GaugeTypes, ArrowDirections, Statuses, TickRotations, ChartTypes, ToolbarControlTypes, AxisTitleOrientations, LegendItemType, ColorLegendType, DividerStatus, AxisFlavor, _a$1, carbonPrefix, area, axis2, canvasZoomSettings, circlePack, color2, boxplot, histogram, legend$1, lines, meter, pie, radar, alluvial, heatmap, spacers, tooltips, transitions, toolbar, zoomBar, defaultLegendAdditionalItems, Tools, __spreadArrays$k, standardTruncationOptions, legend, grid, ruler, baseTooltip, axes, timeScale, isFullScreenEnabled, chart, axisChart, baseBarChart, simpleBarChart, groupedBarChart, stackedBarChart, boxplotChart, scatterChart, lollipopChart, lineChart, areaChart, stackedAreaChart, bubbleChart, bulletChart, histogramChart, wordCloudChart, pieChart, gaugeChart, donutChart, meterChart, proportionalMeterChart, radarChart, comboChart, treeChart, treemapChart, circlePackChart, alluvialChart, heatmapChart, options, Configuration, TIME_INTERVALS, __assign$3, ChartModel, Service, domToImage$1, domToImage, __extends$1y, CSS_VERIFIER_ELEMENT_CLASSNAME, DOMUtils, __extends$1x, Events, __extends$1w, Files, __extends$1v, Transitions, __extends$1u, GradientUtils, __extends$1t, __rest$1, __spreadArrays$j, CartesianScales, __extends$1s, Curves, __extends$1r, Zoom, __extends$1q, CanvasZoom, Component, __extends$1p, Legend, __extends$1o, ColorScaleLegend, settings, settings_1, exports2, eventedShowHideState$1, Modal$1, CarbonModalComponent, __extends$1n, Modal, __extends$1m, Threshold, __extends$1l, Title, __extends$1k, MeterTitle, __extends$1j, Tooltip, __extends$1i, __spreadArrays$i, AxisChartsTooltip, __extends$1h, ChartClip, __extends$1g, CanvasChartClip, __extends$1f, __rest3, Highlight, __extends$1e, Area, __extends$1d, StackedArea, __extends$1c, Bar, __extends$1b, SimpleBar, __extends$1a, GroupedBar, __extends$19, StackedBar, __extends$18, Boxplot, __extends$17, Scatter, __extends$16, Bubble, __extends$15, Bullet, __extends$14, Histogram, __extends$13, Line, __extends$12, Lollipop, __extends$11, StackedScatter, __extends$10, Pie, __extends$$, ARROW_UP_PATH_STRING, ARROW_DOWN_PATH_STRING, Gauge, __extends$_, Donut, __extends$Z, Skeleton, __extends$Y, SkeletonLines, __extends$X, NODE_OFFSET, Tree, __extends$W, findColorShade, textFillColor, uidCounter, Treemap, __extends$V, Radar, __extends$U, __spreadArrays$h, CirclePack, __extends$T, WordCloud, __extends$S, Alluvial, __extends$R, Heatmap, __extends$Q, Spacer, __extends$P, LayoutComponent, __extends$O, Axis, __extends$N, __assign$2, HoverAxis, __extends$M, TwoDimensionalAxes, __extends$L, ChartBrush, __extends$K, Grid2, __extends$J, THRESHOLD, Ruler, __extends$I, __spreadArrays$g, BinnedRuler, __extends$H, StackedRuler, __extends$G, Toolbar, __extends$F, ZeroLine, __extends$E, ZoomBar, __spreadArrays$f, Chart, __extends$D, __spreadArrays$e, ChartModelCartesian, __extends$C, __spreadArrays$d, AxisChart, __extends$B, __extends$A, __extends$z, __extends$y, __extends$x, __extends$w, __spreadArrays$c, BoxplotChartModel, __extends$v, __extends$u, __extends$t, __spreadArrays$b, BulletChartModel, __extends$s, __extends$r, __spreadArrays$a, ChartModelBinned, __extends$q, __extends$p, LineChart, __extends$o, __extends$n, __extends$m, __spreadArrays$9, PieChartModel, __extends$l, PieChart, __extends$k, __extends$j, __spreadArrays$8, MeterChartModel, __extends$i, __assign$1, Meter, __extends$h, __spreadArrays$7, __extends$g, __spreadArrays$6, RadarChartModel, __extends$f, __extends$e, __spreadArrays$5, GaugeChartModel, __extends$d, __extends$c, __spreadArrays$4, _a2, graphComponentsMap, __extends$b, TreeChartModel, __extends$a, __extends$9, TreemapChartModel, __extends$8, __extends$7, __assign, CirclePackChartModel, __extends$6, __extends$5, __spreadArrays$3, WordCloudModel, __extends$4, __extends$3, __spreadArrays$2, AlluvialChartModel, __extends$2, __extends$1, __spreadArrays$1, HeatmapModel, __extends, __spreadArrays, BaseChart, LineChart_1, AppResult, Page;
var init_page_svelte = __esm({
  ".svelte-kit/output/server/entries/pages/_page.svelte.js"() {
    init_chunks();
    init_g10();
    init_index3();
    init_src();
    init_lodash();
    init_src2();
    import_en_US2 = __toESM(require_en_US(), 1);
    init_src10();
    init_src12();
    init_src4();
    init_esm();
    init_ResizeObserver_es();
    init_src13();
    init_src6();
    import_warning = __toESM(require_browser2(), 1);
    init_utils_position();
    init_src14();
    init_src5();
    init_es();
    import_d3_cloud = __toESM(require_d3_cloud(), 1);
    init_src18();
    init_src23();
    init_Close();
    ButtonSkeleton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["href", "size"]);
      let { href = void 0 } = $$props;
      let { size = "default" } = $$props;
      if ($$props.href === void 0 && $$bindings.href && href !== void 0)
        $$bindings.href(href);
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      return `
${href ? `<a${spread(
        [
          { href: escape_attribute_value(href) },
          {
            rel: escape_attribute_value($$restProps.target === "_blank" ? "noopener noreferrer" : void 0)
          },
          { role: "button" },
          escape_object($$restProps)
        ],
        {
          classes: "bx--skeleton bx--btn " + (size === "field" ? "bx--btn--field" : "") + " " + (size === "small" ? "bx--btn--sm" : "") + " " + (size === "lg" ? "bx--btn--lg" : "") + " " + (size === "xl" ? "bx--btn--xl" : "")
        }
      )}>${escape("")}</a>` : `<div${spread([escape_object($$restProps)], {
        classes: "bx--skeleton bx--btn " + (size === "field" ? "bx--btn--field" : "") + " " + (size === "small" ? "bx--btn--sm" : "") + " " + (size === "lg" ? "bx--btn--lg" : "") + " " + (size === "xl" ? "bx--btn--xl" : "")
      })}></div>`}`;
    });
    ButtonSkeleton$1 = ButtonSkeleton;
    Button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let hasIconOnly;
      let buttonProps;
      let $$restProps = compute_rest_props($$props, [
        "kind",
        "size",
        "expressive",
        "isSelected",
        "icon",
        "iconDescription",
        "tooltipAlignment",
        "tooltipPosition",
        "as",
        "skeleton",
        "disabled",
        "href",
        "tabindex",
        "type",
        "ref"
      ]);
      let $$slots = compute_slots(slots);
      let { kind = "primary" } = $$props;
      let { size = "default" } = $$props;
      let { expressive = false } = $$props;
      let { isSelected = false } = $$props;
      let { icon = void 0 } = $$props;
      let { iconDescription = void 0 } = $$props;
      let { tooltipAlignment = "center" } = $$props;
      let { tooltipPosition = "bottom" } = $$props;
      let { as = false } = $$props;
      let { skeleton = false } = $$props;
      let { disabled = false } = $$props;
      let { href = void 0 } = $$props;
      let { tabindex = "0" } = $$props;
      let { type: type2 = "button" } = $$props;
      let { ref = null } = $$props;
      const ctx = getContext("ComposedModal");
      if ($$props.kind === void 0 && $$bindings.kind && kind !== void 0)
        $$bindings.kind(kind);
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.expressive === void 0 && $$bindings.expressive && expressive !== void 0)
        $$bindings.expressive(expressive);
      if ($$props.isSelected === void 0 && $$bindings.isSelected && isSelected !== void 0)
        $$bindings.isSelected(isSelected);
      if ($$props.icon === void 0 && $$bindings.icon && icon !== void 0)
        $$bindings.icon(icon);
      if ($$props.iconDescription === void 0 && $$bindings.iconDescription && iconDescription !== void 0)
        $$bindings.iconDescription(iconDescription);
      if ($$props.tooltipAlignment === void 0 && $$bindings.tooltipAlignment && tooltipAlignment !== void 0)
        $$bindings.tooltipAlignment(tooltipAlignment);
      if ($$props.tooltipPosition === void 0 && $$bindings.tooltipPosition && tooltipPosition !== void 0)
        $$bindings.tooltipPosition(tooltipPosition);
      if ($$props.as === void 0 && $$bindings.as && as !== void 0)
        $$bindings.as(as);
      if ($$props.skeleton === void 0 && $$bindings.skeleton && skeleton !== void 0)
        $$bindings.skeleton(skeleton);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.href === void 0 && $$bindings.href && href !== void 0)
        $$bindings.href(href);
      if ($$props.tabindex === void 0 && $$bindings.tabindex && tabindex !== void 0)
        $$bindings.tabindex(tabindex);
      if ($$props.type === void 0 && $$bindings.type && type2 !== void 0)
        $$bindings.type(type2);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      {
        if (ctx && ref) {
          ctx.declareRef(ref);
        }
      }
      hasIconOnly = icon && !$$slots.default;
      buttonProps = {
        type: href && !disabled ? void 0 : type2,
        tabindex,
        disabled: disabled === true ? true : void 0,
        href,
        "aria-pressed": hasIconOnly && kind === "ghost" && !href ? isSelected : void 0,
        ...$$restProps,
        class: [
          "bx--btn",
          expressive && "bx--btn--expressive",
          (size === "small" && !expressive || size === "sm" && !expressive || size === "small" && !expressive) && "bx--btn--sm",
          size === "field" && !expressive || size === "md" && !expressive && "bx--btn--md",
          size === "field" && "bx--btn--field",
          size === "small" && "bx--btn--sm",
          size === "lg" && "bx--btn--lg",
          size === "xl" && "bx--btn--xl",
          kind && `bx--btn--${kind}`,
          disabled && "bx--btn--disabled",
          hasIconOnly && "bx--btn--icon-only",
          hasIconOnly && "bx--tooltip__trigger",
          hasIconOnly && "bx--tooltip--a11y",
          hasIconOnly && tooltipPosition && `bx--btn--icon-only--${tooltipPosition}`,
          hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
          hasIconOnly && isSelected && kind === "ghost" && "bx--btn--selected",
          $$restProps.class
        ].filter(Boolean).join(" ")
      };
      return `
${skeleton ? `${validate_component(ButtonSkeleton$1, "ButtonSkeleton").$$render($$result, Object.assign({ href }, { size }, $$restProps, { style: hasIconOnly && "width: 3rem;" }), {}, {})}` : `${as ? `${slots.default ? slots.default({ props: buttonProps }) : ``}` : `${href && !disabled ? `
  <a${spread([escape_object(buttonProps)], {})}${add_attribute("this", ref, 0)}>${hasIconOnly ? `<span${add_classes("bx--assistive-text".trim())}>${escape(iconDescription)}</span>` : ``}
    ${slots.default ? slots.default({}) : ``}${validate_component(icon || missing_component, "svelte:component").$$render(
        $$result,
        {
          "aria-hidden": "true",
          class: "bx--btn__icon",
          "aria-label": iconDescription
        },
        {},
        {}
      )}</a>` : `<button${spread([escape_object(buttonProps)], {})}${add_attribute("this", ref, 0)}>${hasIconOnly ? `<span${add_classes("bx--assistive-text".trim())}>${escape(iconDescription)}</span>` : ``}
    ${slots.default ? slots.default({}) : ``}${validate_component(icon || missing_component, "svelte:component").$$render(
        $$result,
        {
          "aria-hidden": "true",
          class: "bx--btn__icon",
          style: hasIconOnly ? "margin-left: 0" : void 0,
          "aria-label": iconDescription
        },
        {},
        {}
      )}</button>`}`}`}`;
    });
    Button$1 = Button;
    Add = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path d="${"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z"}"></path></svg>`;
    });
    Add$1 = Add;
    Subtract = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path d="${"M8 15H24V17H8z"}"></path></svg>`;
    });
    Subtract$1 = Subtract;
    EditOff = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let labelled;
      let attributes;
      let $$restProps = compute_rest_props($$props, ["size", "title"]);
      let { size = 16 } = $$props;
      let { title = void 0 } = $$props;
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.title === void 0 && $$bindings.title && title !== void 0)
        $$bindings.title(title);
      labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title;
      attributes = {
        "aria-hidden": labelled ? void 0 : true,
        role: labelled ? "img" : void 0,
        focusable: Number($$props["tabindex"]) === 0 ? true : void 0
      };
      return `<svg${spread(
        [
          { xmlns: "http://www.w3.org/2000/svg" },
          { viewBox: "0 0 32 32" },
          { fill: "currentColor" },
          { preserveAspectRatio: "xMidYMid meet" },
          { width: escape_attribute_value(size) },
          { height: escape_attribute_value(size) },
          escape_object(attributes),
          escape_object($$restProps)
        ],
        {}
      )}>${title ? `<title>${escape(title)}</title>` : ``}<path d="${"M30 28.6L3.4 2 2 3.4l10.1 10.1L4 21.6V28h6.4l8.1-8.1L28.6 30 30 28.6zM9.6 26H6v-3.6l7.5-7.5 3.6 3.6L9.6 26zM29.4 6.2L29.4 6.2l-3.6-3.6c-.8-.8-2-.8-2.8 0l0 0 0 0-8 8 1.4 1.4L20 8.4l3.6 3.6L20 15.6l1.4 1.4 8-8C30.2 8.2 30.2 7 29.4 6.2L29.4 6.2zM25 10.6L21.4 7l3-3L28 7.6 25 10.6z"}"></path></svg>`;
    });
    EditOff$1 = EditOff;
    NumberInput = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let incrementLabel;
      let decrementLabel;
      let error2;
      let errorId;
      let ariaLabel;
      let $$restProps = compute_rest_props($$props, [
        "size",
        "value",
        "step",
        "max",
        "min",
        "light",
        "readonly",
        "allowEmpty",
        "disabled",
        "hideSteppers",
        "iconDescription",
        "invalid",
        "invalidText",
        "warn",
        "warnText",
        "helperText",
        "label",
        "hideLabel",
        "translateWithId",
        "translationIds",
        "id",
        "name",
        "ref"
      ]);
      let $$slots = compute_slots(slots);
      let { size = void 0 } = $$props;
      let { value: value2 = null } = $$props;
      let { step = 1 } = $$props;
      let { max: max22 = void 0 } = $$props;
      let { min: min22 = void 0 } = $$props;
      let { light = false } = $$props;
      let { readonly = false } = $$props;
      let { allowEmpty = false } = $$props;
      let { disabled = false } = $$props;
      let { hideSteppers = false } = $$props;
      let { iconDescription = "" } = $$props;
      let { invalid = false } = $$props;
      let { invalidText = "" } = $$props;
      let { warn = false } = $$props;
      let { warnText = "" } = $$props;
      let { helperText = "" } = $$props;
      let { label = "" } = $$props;
      let { hideLabel = false } = $$props;
      let { translateWithId = (id22) => defaultTranslations[id22] } = $$props;
      const translationIds = {
        increment: "increment",
        decrement: "decrement"
      };
      let { id: id2 = "ccs-" + Math.random().toString(36) } = $$props;
      let { name = void 0 } = $$props;
      let { ref = null } = $$props;
      const defaultTranslations = {
        [translationIds.increment]: "Increment number",
        [translationIds.decrement]: "Decrement number"
      };
      createEventDispatcher();
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.value === void 0 && $$bindings.value && value2 !== void 0)
        $$bindings.value(value2);
      if ($$props.step === void 0 && $$bindings.step && step !== void 0)
        $$bindings.step(step);
      if ($$props.max === void 0 && $$bindings.max && max22 !== void 0)
        $$bindings.max(max22);
      if ($$props.min === void 0 && $$bindings.min && min22 !== void 0)
        $$bindings.min(min22);
      if ($$props.light === void 0 && $$bindings.light && light !== void 0)
        $$bindings.light(light);
      if ($$props.readonly === void 0 && $$bindings.readonly && readonly !== void 0)
        $$bindings.readonly(readonly);
      if ($$props.allowEmpty === void 0 && $$bindings.allowEmpty && allowEmpty !== void 0)
        $$bindings.allowEmpty(allowEmpty);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.hideSteppers === void 0 && $$bindings.hideSteppers && hideSteppers !== void 0)
        $$bindings.hideSteppers(hideSteppers);
      if ($$props.iconDescription === void 0 && $$bindings.iconDescription && iconDescription !== void 0)
        $$bindings.iconDescription(iconDescription);
      if ($$props.invalid === void 0 && $$bindings.invalid && invalid !== void 0)
        $$bindings.invalid(invalid);
      if ($$props.invalidText === void 0 && $$bindings.invalidText && invalidText !== void 0)
        $$bindings.invalidText(invalidText);
      if ($$props.warn === void 0 && $$bindings.warn && warn !== void 0)
        $$bindings.warn(warn);
      if ($$props.warnText === void 0 && $$bindings.warnText && warnText !== void 0)
        $$bindings.warnText(warnText);
      if ($$props.helperText === void 0 && $$bindings.helperText && helperText !== void 0)
        $$bindings.helperText(helperText);
      if ($$props.label === void 0 && $$bindings.label && label !== void 0)
        $$bindings.label(label);
      if ($$props.hideLabel === void 0 && $$bindings.hideLabel && hideLabel !== void 0)
        $$bindings.hideLabel(hideLabel);
      if ($$props.translateWithId === void 0 && $$bindings.translateWithId && translateWithId !== void 0)
        $$bindings.translateWithId(translateWithId);
      if ($$props.translationIds === void 0 && $$bindings.translationIds && translationIds !== void 0)
        $$bindings.translationIds(translationIds);
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      if ($$props.name === void 0 && $$bindings.name && name !== void 0)
        $$bindings.name(name);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      incrementLabel = translateWithId("increment");
      decrementLabel = translateWithId("decrement");
      error2 = invalid || !allowEmpty && value2 == null || value2 > max22 || typeof value2 === "number" && value2 < min22;
      errorId = `error-${id2}`;
      ariaLabel = $$props["aria-label"] || "Numeric input field with increment and decrement buttons";
      return `

<div${add_classes("bx--form-item".trim())}><div${add_attribute("data-invalid", error2 || void 0, 0)}${add_classes(("bx--number bx--number--helpertext " + (readonly ? "bx--number--readonly" : "") + " " + (light ? "bx--number--light" : "") + " " + (hideLabel ? "bx--number--nolabel" : "") + " " + (hideSteppers ? "bx--number--nosteppers" : "") + " " + (size === "sm" ? "bx--number--sm" : "") + " " + (size === "xl" ? "bx--number--xl" : "")).trim())}>${$$slots.label || label ? `<label${add_attribute("for", id2, 0)}${add_classes(("bx--label " + (disabled ? "bx--label--disabled" : "") + " " + (hideLabel ? "bx--visually-hidden" : "")).trim())}>${slots.label ? slots.label({}) : `${escape(label)}`}</label>` : ``}
    <div${add_classes(("bx--number__input-wrapper " + (!invalid && warn ? "bx--number__input-wrapper--warning" : "")).trim())}><input${spread(
        [
          { type: "number" },
          { pattern: "[0-9]*" },
          {
            "aria-describedby": escape_attribute_value(errorId)
          },
          {
            "data-invalid": escape_attribute_value(invalid || void 0)
          },
          {
            "aria-invalid": escape_attribute_value(invalid || void 0)
          },
          {
            "aria-label": escape_attribute_value(label ? void 0 : ariaLabel)
          },
          { disabled: disabled || null },
          { id: escape_attribute_value(id2) },
          { name: escape_attribute_value(name) },
          { max: escape_attribute_value(max22) },
          { min: escape_attribute_value(min22) },
          { step: escape_attribute_value(step) },
          {
            value: escape_attribute_value(value2 ?? "")
          },
          { readonly: readonly || null },
          escape_object($$restProps)
        ],
        {}
      )}${add_attribute("this", ref, 0)}>
      ${invalid ? `${validate_component(WarningFilled$1, "WarningFilled").$$render($$result, { class: "bx--number__invalid" }, {}, {})}` : ``}
      ${!invalid && warn ? `${validate_component(WarningAltFilled$1, "WarningAltFilled").$$render(
        $$result,
        {
          class: "bx--number__invalid bx--number__invalid--warning"
        },
        {},
        {}
      )}` : ``}
      ${readonly ? `${validate_component(EditOff$1, "EditOff").$$render($$result, { class: "bx--text-input__readonly-icon" }, {}, {})}` : ``}
      ${!hideSteppers ? `<div${add_classes("bx--number__controls".trim())}><button type="${"button"}" tabindex="${"-1"}"${add_attribute("title", decrementLabel || iconDescription, 0)}${add_attribute("aria-label", decrementLabel || iconDescription, 0)} ${disabled ? "disabled" : ""}${add_classes("bx--number__control-btn down-icon".trim())}>${validate_component(Subtract$1, "Subtract").$$render($$result, { class: "down-icon" }, {}, {})}</button>
          <div${add_classes("bx--number__rule-divider".trim())}></div>
          <button type="${"button"}" tabindex="${"-1"}"${add_attribute("title", incrementLabel || iconDescription, 0)}${add_attribute("aria-label", incrementLabel || iconDescription, 0)} ${disabled ? "disabled" : ""}${add_classes("bx--number__control-btn up-icon".trim())}>${validate_component(Add$1, "Add").$$render($$result, { class: "up-icon" }, {}, {})}</button>
          <div${add_classes("bx--number__rule-divider".trim())}></div></div>` : ``}</div>
    ${!error2 && !warn && helperText ? `<div${add_classes(("bx--form__helper-text " + (disabled ? "bx--form__helper-text--disabled" : "")).trim())}>${escape(helperText)}</div>` : ``}
    ${error2 ? `<div${add_attribute("id", errorId, 0)}${add_classes("bx--form-requirement".trim())}>${escape(invalidText)}</div>` : ``}
    ${!error2 && warn ? `<div${add_attribute("id", errorId, 0)}${add_classes("bx--form-requirement".trim())}>${escape(warnText)}</div>` : ``}</div></div>`;
    });
    NumberInput$1 = NumberInput;
    Select = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let errorId;
      let $$restProps = compute_rest_props($$props, [
        "selected",
        "size",
        "inline",
        "light",
        "disabled",
        "id",
        "name",
        "invalid",
        "invalidText",
        "warn",
        "warnText",
        "helperText",
        "noLabel",
        "labelText",
        "hideLabel",
        "ref",
        "required"
      ]);
      let $defaultValue, $$unsubscribe_defaultValue;
      let $$unsubscribe_selectedValue;
      let $$unsubscribe_itemTypesByValue;
      let $defaultSelectId, $$unsubscribe_defaultSelectId;
      let { selected = void 0 } = $$props;
      let { size = void 0 } = $$props;
      let { inline = false } = $$props;
      let { light = false } = $$props;
      let { disabled = false } = $$props;
      let { id: id2 = "ccs-" + Math.random().toString(36) } = $$props;
      let { name = void 0 } = $$props;
      let { invalid = false } = $$props;
      let { invalidText = "" } = $$props;
      let { warn = false } = $$props;
      let { warnText = "" } = $$props;
      let { helperText = "" } = $$props;
      let { noLabel = false } = $$props;
      let { labelText = "" } = $$props;
      let { hideLabel = false } = $$props;
      let { ref = null } = $$props;
      let { required: required2 = false } = $$props;
      createEventDispatcher();
      const selectedValue = writable(selected);
      $$unsubscribe_selectedValue = subscribe(selectedValue, (value2) => value2);
      const defaultSelectId = writable(null);
      $$unsubscribe_defaultSelectId = subscribe(defaultSelectId, (value2) => $defaultSelectId = value2);
      const defaultValue = writable(null);
      $$unsubscribe_defaultValue = subscribe(defaultValue, (value2) => $defaultValue = value2);
      const itemTypesByValue = writable({});
      $$unsubscribe_itemTypesByValue = subscribe(itemTypesByValue, (value2) => value2);
      setContext("Select", {
        selectedValue,
        setDefaultValue: (id22, value2) => {
          if ($defaultValue === null) {
            defaultSelectId.set(id22);
            defaultValue.set(value2);
          } else {
            if ($defaultSelectId === id22) {
              selectedValue.set(value2);
            }
          }
          itemTypesByValue.update((types) => ({ ...types, [value2]: typeof value2 }));
        }
      });
      if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0)
        $$bindings.selected(selected);
      if ($$props.size === void 0 && $$bindings.size && size !== void 0)
        $$bindings.size(size);
      if ($$props.inline === void 0 && $$bindings.inline && inline !== void 0)
        $$bindings.inline(inline);
      if ($$props.light === void 0 && $$bindings.light && light !== void 0)
        $$bindings.light(light);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      if ($$props.name === void 0 && $$bindings.name && name !== void 0)
        $$bindings.name(name);
      if ($$props.invalid === void 0 && $$bindings.invalid && invalid !== void 0)
        $$bindings.invalid(invalid);
      if ($$props.invalidText === void 0 && $$bindings.invalidText && invalidText !== void 0)
        $$bindings.invalidText(invalidText);
      if ($$props.warn === void 0 && $$bindings.warn && warn !== void 0)
        $$bindings.warn(warn);
      if ($$props.warnText === void 0 && $$bindings.warnText && warnText !== void 0)
        $$bindings.warnText(warnText);
      if ($$props.helperText === void 0 && $$bindings.helperText && helperText !== void 0)
        $$bindings.helperText(helperText);
      if ($$props.noLabel === void 0 && $$bindings.noLabel && noLabel !== void 0)
        $$bindings.noLabel(noLabel);
      if ($$props.labelText === void 0 && $$bindings.labelText && labelText !== void 0)
        $$bindings.labelText(labelText);
      if ($$props.hideLabel === void 0 && $$bindings.hideLabel && hideLabel !== void 0)
        $$bindings.hideLabel(hideLabel);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      if ($$props.required === void 0 && $$bindings.required && required2 !== void 0)
        $$bindings.required(required2);
      errorId = `error-${id2}`;
      {
        selectedValue.set(selected ?? $defaultValue);
      }
      $$unsubscribe_defaultValue();
      $$unsubscribe_selectedValue();
      $$unsubscribe_itemTypesByValue();
      $$unsubscribe_defaultSelectId();
      return `<div${spread([escape_object($$restProps)], { classes: "bx--form-item" })}><div${add_classes(("bx--select " + (inline ? "bx--select--inline" : "") + " " + (light ? "bx--select--light" : "") + " " + (invalid ? "bx--select--invalid" : "") + " " + (disabled ? "bx--select--disabled" : "") + " " + (warn ? "bx--select--warning" : "")).trim())}>${!noLabel ? `<label${add_attribute("for", id2, 0)}${add_classes(("bx--label " + (hideLabel ? "bx--visually-hidden" : "") + " " + (disabled ? "bx--label--disabled" : "")).trim())}>${slots.labelText ? slots.labelText({}) : `
          ${escape(labelText)}
        `}</label>` : ``}
    ${inline ? `<div${add_classes("bx--select-input--inline__wrapper".trim())}><div${add_attribute("data-invalid", invalid || void 0, 0)}${add_classes("bx--select-input__wrapper".trim())}><select${add_attribute("aria-describedby", invalid ? errorId : void 0, 0)}${add_attribute("aria-invalid", invalid || void 0, 0)} ${disabled || void 0 ? "disabled" : ""} ${required2 || void 0 ? "required" : ""}${add_attribute("id", id2, 0)}${add_attribute("name", name, 0)}${add_classes(("bx--select-input " + (size === "sm" ? "bx--select-input--sm" : "") + " " + (size === "xl" ? "bx--select-input--xl" : "")).trim())}${add_attribute("this", ref, 0)}>${slots.default ? slots.default({}) : ``}</select>
          ${validate_component(ChevronDown$1, "ChevronDown").$$render($$result, { class: "bx--select__arrow" }, {}, {})}
          ${invalid ? `${validate_component(WarningFilled$1, "WarningFilled").$$render($$result, { class: "bx--select__invalid-icon" }, {}, {})}` : ``}</div>
        ${invalid ? `<div${add_attribute("id", errorId, 0)}${add_classes("bx--form-requirement".trim())}>${escape(invalidText)}</div>` : ``}</div>
      ${helperText ? `<div${add_classes(("bx--form__helper-text " + (disabled ? "bx--form__helper-text--disabled" : "")).trim())}>${escape(helperText)}</div>` : ``}` : ``}
    ${!inline ? `<div${add_attribute("data-invalid", invalid || void 0, 0)}${add_classes("bx--select-input__wrapper".trim())}><select${add_attribute("id", id2, 0)}${add_attribute("name", name, 0)}${add_attribute("aria-describedby", invalid ? errorId : void 0, 0)} ${disabled || void 0 ? "disabled" : ""} ${required2 || void 0 ? "required" : ""}${add_attribute("aria-invalid", invalid || void 0, 0)}${add_classes(("bx--select-input " + (size === "sm" ? "bx--select-input--sm" : "") + " " + (size === "xl" ? "bx--select-input--xl" : "")).trim())}${add_attribute("this", ref, 0)}>${slots.default ? slots.default({}) : ``}</select>
        ${validate_component(ChevronDown$1, "ChevronDown").$$render($$result, { class: "bx--select__arrow" }, {}, {})}
        ${invalid ? `${validate_component(WarningFilled$1, "WarningFilled").$$render($$result, { class: "bx--select__invalid-icon" }, {}, {})}` : ``}
        ${!invalid && warn ? `${validate_component(WarningAltFilled$1, "WarningAltFilled").$$render(
        $$result,
        {
          class: "bx--select__invalid-icon bx--select__invalid-icon--warning"
        },
        {},
        {}
      )}` : ``}</div>
      ${!invalid && helperText ? `<div${add_classes(("bx--form__helper-text " + (disabled ? "bx--form__helper-text--disabled" : "")).trim())}>${escape(helperText)}</div>` : ``}
      ${invalid ? `<div${add_attribute("id", errorId, 0)}${add_classes("bx--form-requirement".trim())}>${escape(invalidText)}</div>` : ``}
      ${!invalid && warn ? `<div${add_attribute("id", errorId, 0)}${add_classes("bx--form-requirement".trim())}>${escape(warnText)}</div>` : ``}` : ``}</div></div>`;
    });
    Select$1 = Select;
    SelectItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["value", "text", "hidden", "disabled"]);
      let { value: value2 = "" } = $$props;
      let { text = "" } = $$props;
      let { hidden = false } = $$props;
      let { disabled = false } = $$props;
      const id2 = "ccs-" + Math.random().toString(36);
      const ctx = getContext("Select") || getContext("TimePickerSelect");
      let selected = false;
      ctx.selectedValue.subscribe((currentValue) => {
        selected = currentValue === value2;
      });
      if ($$props.value === void 0 && $$bindings.value && value2 !== void 0)
        $$bindings.value(value2);
      if ($$props.text === void 0 && $$bindings.text && text !== void 0)
        $$bindings.text(text);
      if ($$props.hidden === void 0 && $$bindings.hidden && hidden !== void 0)
        $$bindings.hidden(hidden);
      if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
        $$bindings.disabled(disabled);
      {
        ctx?.setDefaultValue?.(id2, value2);
      }
      return `<option${add_attribute("value", value2, 0)} ${disabled ? "disabled" : ""} ${hidden ? "hidden" : ""} ${selected ? "selected" : ""} class="${[escape($$restProps.class, true), "bx--select-option"].join(" ").trim()}"${add_attribute("style", $$restProps.style, 0)}>${escape(text || value2)}</option>`;
    });
    SelectItem$1 = SelectItem;
    StructuredList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["selected", "condensed", "flush", "selection"]);
      let $selectedValue, $$unsubscribe_selectedValue;
      let { selected = void 0 } = $$props;
      let { condensed = false } = $$props;
      let { flush = false } = $$props;
      let { selection: selection2 = false } = $$props;
      const dispatch2 = createEventDispatcher();
      const selectedValue = writable(selected);
      $$unsubscribe_selectedValue = subscribe(selectedValue, (value2) => $selectedValue = value2);
      setContext("StructuredListWrapper", {
        selectedValue,
        update: (value2) => {
          selectedValue.set(value2);
        }
      });
      if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0)
        $$bindings.selected(selected);
      if ($$props.condensed === void 0 && $$bindings.condensed && condensed !== void 0)
        $$bindings.condensed(condensed);
      if ($$props.flush === void 0 && $$bindings.flush && flush !== void 0)
        $$bindings.flush(flush);
      if ($$props.selection === void 0 && $$bindings.selection && selection2 !== void 0)
        $$bindings.selection(selection2);
      selected = $selectedValue;
      {
        dispatch2("change", $selectedValue);
      }
      $$unsubscribe_selectedValue();
      return `
<div${spread([{ role: "table" }, escape_object($$restProps)], {
        classes: "bx--structured-list " + (selection2 ? "bx--structured-list--selection" : "") + " " + (condensed ? "bx--structured-list--condensed" : "") + " " + (flush ? "bx--structured-list--flush" : "")
      })}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    StructuredList$1 = StructuredList;
    StructuredListBody = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, []);
      return `
<div${spread([{ role: "rowgroup" }, escape_object($$restProps)], {
        classes: "bx--structured-list-tbody"
      })}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    StructuredListBody$1 = StructuredListBody;
    StructuredListHead = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, []);
      return `
<div${spread([{ role: "rowgroup" }, escape_object($$restProps)], {
        classes: "bx--structured-list-thead"
      })}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    StructuredListHead$1 = StructuredListHead;
    StructuredListCell = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["head", "noWrap"]);
      let { head = false } = $$props;
      let { noWrap = false } = $$props;
      if ($$props.head === void 0 && $$bindings.head && head !== void 0)
        $$bindings.head(head);
      if ($$props.noWrap === void 0 && $$bindings.noWrap && noWrap !== void 0)
        $$bindings.noWrap(noWrap);
      return `
<div${spread(
        [
          {
            role: escape_attribute_value(head ? "columnheader" : "cell")
          },
          escape_object($$restProps)
        ],
        {
          classes: (head ? "bx--structured-list-th" : "") + " " + (!head ? "bx--structured-list-td" : "") + " " + (noWrap ? "bx--structured-list-content--nowrap" : "")
        }
      )}>${slots.default ? slots.default({}) : ``}</div>`;
    });
    StructuredListCell$1 = StructuredListCell;
    StructuredListRow = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["head", "label", "tabindex"]);
      let { head = false } = $$props;
      let { label = false } = $$props;
      let { tabindex = "0" } = $$props;
      if ($$props.head === void 0 && $$bindings.head && head !== void 0)
        $$bindings.head(head);
      if ($$props.label === void 0 && $$bindings.label && label !== void 0)
        $$bindings.label(label);
      if ($$props.tabindex === void 0 && $$bindings.tabindex && tabindex !== void 0)
        $$bindings.tabindex(tabindex);
      return `
${label ? `
  
  <label${spread(
        [
          {
            tabindex: escape_attribute_value(tabindex)
          },
          escape_object($$restProps)
        ],
        {
          classes: "bx--structured-list-row " + (head ? "bx--structured-list-row--header-row" : "")
        }
      )}>${slots.default ? slots.default({}) : ``}</label>` : `<div${spread([{ role: "row" }, escape_object($$restProps)], {
        classes: "bx--structured-list-row " + (head ? "bx--structured-list-row--header-row" : "")
      })}>${slots.default ? slots.default({}) : ``}</div>`}`;
    });
    StructuredListRow$1 = StructuredListRow;
    storeTableData = writable(0);
    storeUserVal = writable(0);
    (function(Roles2) {
      Roles2["GRAPHICS_DOCUMENT"] = "graphics-document";
      Roles2["GRAPHICS_OBJECT"] = "graphics-object";
      Roles2["GRAPHICS_SYMBOL"] = "graphics-symbol";
      Roles2["GROUP"] = "group";
      Roles2["DOCUMENT"] = "document";
      Roles2["CHECKBOX"] = "checkbox";
      Roles2["BUTTON"] = "button";
      Roles2["MENU"] = "menu";
      Roles2["MENU_ITEM"] = "menuitem";
      Roles2["IMG"] = "img";
    })(Roles || (Roles = {}));
    (function(Chart2) {
      Chart2["RENDER_FINISHED"] = "render-finished";
      Chart2["RESIZE"] = "chart-resize";
      Chart2["MOUSEOVER"] = "chart-mouseover";
      Chart2["MOUSEOUT"] = "chart-mouseout";
    })(Chart$1 || (Chart$1 = {}));
    (function(Modal2) {
      Modal2["SHOW"] = "show-modal";
      Modal2["HIDE"] = "hide-modal";
    })(Modal$2 || (Modal$2 = {}));
    (function(Model2) {
      Model2["UPDATE"] = "model-update";
    })(Model || (Model = {}));
    (function(Toolbar2) {
      Toolbar2["SHOW_OVERFLOW_MENU"] = "show-toolbar-overflow-menu";
      Toolbar2["HIDE_OVERFLOW_MENU"] = "hide-toolbar-overflow-menu";
      Toolbar2["BUTTON_CLICK"] = "toolbar-button-click";
    })(Toolbar$1 || (Toolbar$1 = {}));
    (function(ZoomBar2) {
      ZoomBar2["UPDATE"] = "zoom-bar-update";
      ZoomBar2["SELECTION_START"] = "zoom-bar-selection-start";
      ZoomBar2["SELECTION_IN_PROGRESS"] = "zoom-bar-selection-in-progress";
      ZoomBar2["SELECTION_END"] = "zoom-bar-selection-end";
    })(ZoomBar$1 || (ZoomBar$1 = {}));
    (function(ZoomDomain2) {
      ZoomDomain2["CHANGE"] = "zoom-domain-change";
    })(ZoomDomain || (ZoomDomain = {}));
    (function(CanvasZoom2) {
      CanvasZoom2["CANVAS_ZOOM_IN"] = "canvas-zoom-in";
      CanvasZoom2["CANVAS_ZOOM_OUT"] = "canvas-zoom-out";
    })(CanvasZoom$1 || (CanvasZoom$1 = {}));
    (function(Axis2) {
      Axis2["LABEL_MOUSEOVER"] = "axis-label-mouseover";
      Axis2["LABEL_MOUSEMOVE"] = "axis-label-mousemove";
      Axis2["LABEL_CLICK"] = "axis-label-click";
      Axis2["LABEL_MOUSEOUT"] = "axis-label-mouseout";
      Axis2["LABEL_FOCUS"] = "axis-label-focus";
      Axis2["LABEL_BLUR"] = "axis-label-blur";
      Axis2["RENDER_COMPLETE"] = "axis-render-complete";
    })(Axis$1 || (Axis$1 = {}));
    (function(Area2) {
      Area2["POINT_MOUSEOVER"] = "scatter-mouseover";
      Area2["POINT_MOUSEMOVE"] = "scatter-mousemove";
      Area2["POINT_CLICK"] = "scatter-click";
      Area2["POINT_MOUSEOUT"] = "scatter-mouseout";
    })(Area$1 || (Area$1 = {}));
    (function(WordCloud2) {
      WordCloud2["WORD_MOUSEOVER"] = "wordcloud-word-mouseover";
      WordCloud2["WORD_MOUSEMOVE"] = "wordcloud-word-mousemove";
      WordCloud2["WORD_CLICK"] = "wordcloud-word-click";
      WordCloud2["WORD_MOUSEOUT"] = "wordcloud-word-mouseout";
    })(WordCloud$1 || (WordCloud$1 = {}));
    (function(Pie2) {
      Pie2["SLICE_MOUSEOVER"] = "pie-slice-mouseover";
      Pie2["SLICE_MOUSEMOVE"] = "pie-slice-mousemove";
      Pie2["SLICE_CLICK"] = "pie-slice-click";
      Pie2["SLICE_MOUSEOUT"] = "pie-slice-mouseout";
    })(Pie$1 || (Pie$1 = {}));
    (function(Gauge2) {
      Gauge2["ARC_MOUSEOVER"] = "gauge-arc-mouseover";
      Gauge2["ARC_MOUSEMOVE"] = "gauge-arc-mousemove";
      Gauge2["ARC_CLICK"] = "gauge-arc-click";
      Gauge2["ARC_MOUSEOUT"] = "gauge-arc-mouseout";
    })(Gauge$1 || (Gauge$1 = {}));
    (function(Bar2) {
      Bar2["BAR_MOUSEOVER"] = "bar-mouseover";
      Bar2["BAR_MOUSEMOVE"] = "bar-mousemove";
      Bar2["BAR_CLICK"] = "bar-click";
      Bar2["BAR_MOUSEOUT"] = "bar-mouseout";
    })(Bar$1 || (Bar$1 = {}));
    (function(Boxplot2) {
      Boxplot2["BOX_MOUSEOVER"] = "box-mouseover";
      Boxplot2["BOX_MOUSEMOVE"] = "box-mousemove";
      Boxplot2["BOX_CLICK"] = "box-click";
      Boxplot2["BOX_MOUSEOUT"] = "box-mouseout";
      Boxplot2["OUTLIER_MOUSEOVER"] = "outlier-mouseover";
      Boxplot2["OUTLIER_MOUSEMOVE"] = "outlier-mousemove";
      Boxplot2["OUTLIER_CLICK"] = "outlier-click";
      Boxplot2["OUTLIER_MOUSEOUT"] = "outlier-mouseout";
    })(Boxplot$1 || (Boxplot$1 = {}));
    (function(Scatter2) {
      Scatter2["SCATTER_MOUSEOVER"] = "scatter-mouseover";
      Scatter2["SCATTER_MOUSEMOVE"] = "scatter-mousemove";
      Scatter2["SCATTER_CLICK"] = "scatter-click";
      Scatter2["SCATTER_MOUSEOUT"] = "scatter-mouseout";
    })(Scatter$1 || (Scatter$1 = {}));
    (function(Line2) {
      Line2["POINT_MOUSEOVER"] = "scatter-mouseover";
      Line2["POINT_MOUSEMOVE"] = "scatter-mousemove";
      Line2["POINT_CLICK"] = "scatter-click";
      Line2["POINT_MOUSEOUT"] = "scatter-mouseout";
    })(Line$1 || (Line$1 = {}));
    (function(Radar2) {
      Radar2["X_AXIS_MOUSEOVER"] = "radar-x-axis-mouseover";
      Radar2["X_AXIS_MOUSEMOVE"] = "radar-x-axis-mousemove";
      Radar2["X_AXIS_CLICK"] = "radar-x-axis-click";
      Radar2["X_AXIS_MOUSEOUT"] = "radar-x-axis-mouseout";
    })(Radar$1 || (Radar$1 = {}));
    (function(Tree2) {
      Tree2["NODE_MOUSEOVER"] = "tree-node-mouseover";
      Tree2["NODE_CLICK"] = "tree-node-click";
      Tree2["NODE_MOUSEOUT"] = "tree-node-mouseout";
    })(Tree$1 || (Tree$1 = {}));
    (function(Treemap2) {
      Treemap2["LEAF_MOUSEOVER"] = "leaf-mouseover";
      Treemap2["LEAF_MOUSEMOVE"] = "leaf-mousemove";
      Treemap2["LEAF_CLICK"] = "leaf-click";
      Treemap2["LEAF_MOUSEOUT"] = "leaf-mouseout";
    })(Treemap$1 || (Treemap$1 = {}));
    (function(Tooltip2) {
      Tooltip2["SHOW"] = "show-tooltip";
      Tooltip2["MOVE"] = "move-tooltip";
      Tooltip2["HIDE"] = "hide-tooltip";
    })(Tooltip$1 || (Tooltip$1 = {}));
    (function(Threshold2) {
      Threshold2["SHOW"] = "show-threshold";
      Threshold2["HIDE"] = "hide-threshold";
    })(Threshold$1 || (Threshold$1 = {}));
    (function(Legend2) {
      Legend2["ITEM_HOVER"] = "legend-item-onhover";
      Legend2["ITEM_CLICK"] = "legend-item-onclick";
      Legend2["ITEM_MOUSEOUT"] = "legend-item-onmouseout";
      Legend2["ITEMS_UPDATE"] = "legend-items-update";
    })(Legend$1 || (Legend$1 = {}));
    (function(CirclePack2) {
      CirclePack2["CIRCLE_MOUSEOVER"] = "circle-leaf-mouseover";
      CirclePack2["CIRCLE_CLICK"] = "circle-leaf-click";
      CirclePack2["CIRCLE_MOUSEOUT"] = "circle-leaf-mouseout";
      CirclePack2["CIRCLE_MOUSEMOVE"] = "circle-leaf-mousemove";
    })(CirclePack$1 || (CirclePack$1 = {}));
    (function(Alluvial2) {
      Alluvial2["NODE_MOUSEOVER"] = "alluvial-node-mouseover";
      Alluvial2["NODE_CLICK"] = "alluvial-node-click";
      Alluvial2["NODE_MOUSEOUT"] = "alluvial-node-mouseout";
      Alluvial2["NODE_MOUSEMOVE"] = "alluvial-node-mousemove";
      Alluvial2["LINE_MOUSEOVER"] = "alluvial-line-mouseover";
      Alluvial2["LINE_CLICK"] = "alluvial-line-click";
      Alluvial2["LINE_MOUSEOUT"] = "alluvial-line-mouseout";
      Alluvial2["LINE_MOUSEMOVE"] = "alluvial-line-mousemove";
    })(Alluvial$1 || (Alluvial$1 = {}));
    (function(Meter2) {
      Meter2["METER_MOUSEOVER"] = "meter-mouseover";
      Meter2["METER_CLICK"] = "meter-click";
      Meter2["METER_MOUSEOUT"] = "meter-mouseout";
      Meter2["METER_MOUSEMOVE"] = "meter-mousemove";
    })(Meter$1 || (Meter$1 = {}));
    (function(Heatmap2) {
      Heatmap2["HEATMAP_MOUSEOVER"] = "heatmap-mouseover";
      Heatmap2["HEATMAP_CLICK"] = "heatmap-click";
      Heatmap2["HEATMAP_MOUSEOUT"] = "heatmap-mouseout";
      Heatmap2["HEATMAP_MOUSEMOVE"] = "hetmap-mousemove";
    })(Heatmap$1 || (Heatmap$1 = {}));
    EventEnums = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      get Chart() {
        return Chart$1;
      },
      get Modal() {
        return Modal$2;
      },
      get Model() {
        return Model;
      },
      get Toolbar() {
        return Toolbar$1;
      },
      get ZoomBar() {
        return ZoomBar$1;
      },
      get ZoomDomain() {
        return ZoomDomain;
      },
      get CanvasZoom() {
        return CanvasZoom$1;
      },
      get Axis() {
        return Axis$1;
      },
      get Area() {
        return Area$1;
      },
      get WordCloud() {
        return WordCloud$1;
      },
      get Pie() {
        return Pie$1;
      },
      get Gauge() {
        return Gauge$1;
      },
      get Bar() {
        return Bar$1;
      },
      get Boxplot() {
        return Boxplot$1;
      },
      get Scatter() {
        return Scatter$1;
      },
      get Line() {
        return Line$1;
      },
      get Radar() {
        return Radar$1;
      },
      get Tree() {
        return Tree$1;
      },
      get Treemap() {
        return Treemap$1;
      },
      get Tooltip() {
        return Tooltip$1;
      },
      get Threshold() {
        return Threshold$1;
      },
      get Legend() {
        return Legend$1;
      },
      get CirclePack() {
        return CirclePack$1;
      },
      get Alluvial() {
        return Alluvial$1;
      },
      get Meter() {
        return Meter$1;
      },
      get Heatmap() {
        return Heatmap$1;
      }
    }, Symbol.toStringTag, { value: "Module" }));
    Events$1 = EventEnums;
    (function(RenderTypes2) {
      RenderTypes2["HTML"] = "html";
      RenderTypes2["SVG"] = "svg";
    })(RenderTypes || (RenderTypes = {}));
    (function(ChartTheme2) {
      ChartTheme2["WHITE"] = "white";
      ChartTheme2["G100"] = "g100";
      ChartTheme2["G90"] = "g90";
      ChartTheme2["G10"] = "g10";
    })(ChartTheme || (ChartTheme = {}));
    (function(ColorClassNameTypes2) {
      ColorClassNameTypes2["BACKGROUND"] = "background";
      ColorClassNameTypes2["FILL"] = "fill";
      ColorClassNameTypes2["STROKE"] = "stroke";
      ColorClassNameTypes2["TOOLTIP"] = "tooltip";
    })(ColorClassNameTypes || (ColorClassNameTypes = {}));
    (function(AxisPositions2) {
      AxisPositions2["LEFT"] = "left";
      AxisPositions2["RIGHT"] = "right";
      AxisPositions2["TOP"] = "top";
      AxisPositions2["BOTTOM"] = "bottom";
    })(AxisPositions || (AxisPositions = {}));
    (function(ZoomBarTypes2) {
      ZoomBarTypes2["GRAPH_VIEW"] = "graph_view";
      ZoomBarTypes2["SLIDER_VIEW"] = "slider_view";
    })(ZoomBarTypes || (ZoomBarTypes = {}));
    (function(TruncationTypes2) {
      TruncationTypes2["END_LINE"] = "end_line";
      TruncationTypes2["MID_LINE"] = "mid_line";
      TruncationTypes2["FRONT_LINE"] = "front_line";
      TruncationTypes2["NONE"] = "none";
    })(TruncationTypes || (TruncationTypes = {}));
    (function(CartesianOrientations2) {
      CartesianOrientations2["VERTICAL"] = "vertical";
      CartesianOrientations2["HORIZONTAL"] = "horizontal";
    })(CartesianOrientations || (CartesianOrientations = {}));
    (function(ScaleTypes2) {
      ScaleTypes2["TIME"] = "time";
      ScaleTypes2["LINEAR"] = "linear";
      ScaleTypes2["LOG"] = "log";
      ScaleTypes2["LABELS"] = "labels";
      ScaleTypes2["LABELS_RATIO"] = "labels-ratio";
    })(ScaleTypes || (ScaleTypes = {}));
    (function(LegendPositions2) {
      LegendPositions2["RIGHT"] = "right";
      LegendPositions2["LEFT"] = "left";
      LegendPositions2["TOP"] = "top";
      LegendPositions2["BOTTOM"] = "bottom";
    })(LegendPositions || (LegendPositions = {}));
    (function(Alignments2) {
      Alignments2["LEFT"] = "left";
      Alignments2["CENTER"] = "center";
      Alignments2["RIGHT"] = "right";
    })(Alignments || (Alignments = {}));
    (function(LegendOrientations2) {
      LegendOrientations2["HORIZONTAL"] = "horizontal";
      LegendOrientations2["VERTICAL"] = "vertical";
    })(LegendOrientations || (LegendOrientations = {}));
    (function(TreeTypes2) {
      TreeTypes2["TREE"] = "tree";
      TreeTypes2["DENDROGRAM"] = "dendrogram";
    })(TreeTypes || (TreeTypes = {}));
    (function(LayoutDirection2) {
      LayoutDirection2["ROW"] = "row";
      LayoutDirection2["COLUMN"] = "column";
      LayoutDirection2["ROW_REVERSE"] = "row-reverse";
      LayoutDirection2["COLUMN_REVERSE"] = "column-reverse";
    })(LayoutDirection || (LayoutDirection = {}));
    (function(LayoutGrowth2) {
      LayoutGrowth2["FIXED"] = "fixed";
      LayoutGrowth2["PREFERRED"] = "preferred";
      LayoutGrowth2["STRETCH"] = "stretch";
    })(LayoutGrowth || (LayoutGrowth = {}));
    (function(LayoutAlignItems2) {
      LayoutAlignItems2["CENTER"] = "center";
    })(LayoutAlignItems || (LayoutAlignItems = {}));
    (function(CalloutDirections2) {
      CalloutDirections2["LEFT"] = "left";
      CalloutDirections2["RIGHT"] = "right";
    })(CalloutDirections || (CalloutDirections = {}));
    (function(Skeletons2) {
      Skeletons2["GRID"] = "grid";
      Skeletons2["VERT_OR_HORIZ"] = "vertOrHoriz";
      Skeletons2["PIE"] = "pie";
      Skeletons2["DONUT"] = "donut";
    })(Skeletons || (Skeletons = {}));
    (function(TextAnchor2) {
      TextAnchor2["START"] = "start";
      TextAnchor2["MIDDLE"] = "middle";
      TextAnchor2["END"] = "end";
    })(TextAnchor || (TextAnchor = {}));
    (function(DominantBaseline2) {
      DominantBaseline2["BASELINE"] = "baseline";
      DominantBaseline2["MIDDLE"] = "middle";
      DominantBaseline2["HANGING"] = "hanging";
    })(DominantBaseline || (DominantBaseline = {}));
    (function(GaugeTypes2) {
      GaugeTypes2["SEMI"] = "semi";
      GaugeTypes2["FULL"] = "full";
    })(GaugeTypes || (GaugeTypes = {}));
    (function(ArrowDirections2) {
      ArrowDirections2["UP"] = "up";
      ArrowDirections2["DOWN"] = "down";
    })(ArrowDirections || (ArrowDirections = {}));
    (function(Statuses2) {
      Statuses2["SUCCESS"] = "success";
      Statuses2["WARNING"] = "warning";
      Statuses2["DANGER"] = "danger";
    })(Statuses || (Statuses = {}));
    (function(TickRotations2) {
      TickRotations2["ALWAYS"] = "always";
      TickRotations2["AUTO"] = "auto";
      TickRotations2["NEVER"] = "never";
    })(TickRotations || (TickRotations = {}));
    (function(ChartTypes2) {
      ChartTypes2["SCATTER"] = "scatter";
      ChartTypes2["LINE"] = "line";
      ChartTypes2["SIMPLE_BAR"] = "simple-bar";
      ChartTypes2["STACKED_BAR"] = "stacked-bar";
      ChartTypes2["GROUPED_BAR"] = "grouped-bar";
      ChartTypes2["AREA"] = "area";
      ChartTypes2["STACKED_AREA"] = "stacked-area";
    })(ChartTypes || (ChartTypes = {}));
    (function(ToolbarControlTypes2) {
      ToolbarControlTypes2["EXPORT_CSV"] = "Export as CSV";
      ToolbarControlTypes2["EXPORT_PNG"] = "Export as PNG";
      ToolbarControlTypes2["EXPORT_JPG"] = "Export as JPG";
      ToolbarControlTypes2["ZOOM_IN"] = "Zoom in";
      ToolbarControlTypes2["ZOOM_OUT"] = "Zoom out";
      ToolbarControlTypes2["RESET_ZOOM"] = "Reset zoom";
      ToolbarControlTypes2["MAKE_FULLSCREEN"] = "Make fullscreen";
      ToolbarControlTypes2["SHOW_AS_DATATABLE"] = "Show as data-table";
      ToolbarControlTypes2["CUSTOM"] = "Custom";
    })(ToolbarControlTypes || (ToolbarControlTypes = {}));
    (function(AxisTitleOrientations2) {
      AxisTitleOrientations2["LEFT"] = "left";
      AxisTitleOrientations2["RIGHT"] = "right";
    })(AxisTitleOrientations || (AxisTitleOrientations = {}));
    (function(LegendItemType2) {
      LegendItemType2["CHECKBOX"] = "checkbox";
      LegendItemType2["RADIUS"] = "radius";
      LegendItemType2["AREA"] = "area";
      LegendItemType2["SIZE"] = "size";
      LegendItemType2["LINE"] = "line";
      LegendItemType2["QUARTILE"] = "quartile";
      LegendItemType2["ZOOM"] = "zoom";
    })(LegendItemType || (LegendItemType = {}));
    (function(ColorLegendType2) {
      ColorLegendType2["LINEAR"] = "linear";
      ColorLegendType2["QUANTIZE"] = "quantize";
    })(ColorLegendType || (ColorLegendType = {}));
    (function(DividerStatus2) {
      DividerStatus2["ON"] = "on";
      DividerStatus2["AUTO"] = "auto";
      DividerStatus2["OFF"] = "off";
    })(DividerStatus || (DividerStatus = {}));
    (function(AxisFlavor2) {
      AxisFlavor2["DEFAULT"] = "default";
      AxisFlavor2["HOVERABLE"] = "hoverable";
    })(AxisFlavor || (AxisFlavor = {}));
    carbonPrefix = "cds";
    area = {
      opacity: {
        unselected: 0.05,
        selected: 0.4
      }
    };
    axis2 = {
      ticks: {
        number: 7,
        rotateIfSmallerThan: 30,
        verticalSpaceRatio: 2.5,
        horizontalSpaceRatio: 3.5
      },
      ratio: {
        reference: "value",
        compareTo: "marker"
      },
      paddingRatio: 0.1,
      hover: {
        rectanglePadding: 4
      }
    };
    canvasZoomSettings = {
      duration: 1e3,
      ease: cubicInOut,
      zoomLevel: 3
    };
    circlePack = {
      circles: {
        fillOpacity: 0.3,
        hover: {
          stroke: "#FFF"
        }
      },
      padding: {
        mainGroup: 4,
        children: 2
      },
      hierarchyLevel: 2
    };
    color2 = {
      pairingOptions: {
        "1-color": 4,
        "2-color": 5,
        "3-color": 5,
        "4-color": 3,
        "5-color": 2,
        "14-color": 1
      }
    };
    boxplot = {
      circle: {
        radius: 4,
        opacity: {
          hovered: 1,
          default: 0.3
        }
      },
      box: {
        opacity: {
          hovered: 0.5,
          default: 0.3
        }
      },
      strokeWidth: {
        default: 1,
        thicker: 2
      }
    };
    histogram = {
      defaultBins: 10
    };
    legend$1 = {
      items: {
        status: {
          ACTIVE: 1,
          DISABLED: 0
        },
        horizontalSpace: 12,
        verticalSpace: 24,
        textYOffset: 8,
        spaceAfter: 4
      },
      checkbox: {
        radius: 6.5
      },
      radius: {
        iconData: [
          { cx: 7, cy: 7, r: 6.5 },
          { cx: 7, cy: 10, r: 3.5 }
        ],
        fill: null,
        stroke: "#8c8c8c"
      },
      line: {
        yPosition: 6,
        width: 24,
        strokeWidth: 1.4,
        fill: null,
        stroke: "#999999"
      },
      area: {
        width: 24,
        height: 14,
        fill: "#6f6f6f",
        stroke: null
      },
      size: {
        iconData: [
          { width: 23, height: 12 },
          { width: 13, height: 6 }
        ],
        fill: null,
        stroke: "#8D8D8D"
      },
      quartile: {
        iconData: [
          { x: 0, y: 0, width: 24, height: 13 },
          { x: 11, y: 4, width: 1, height: 4 }
        ]
      },
      zoom: {
        iconData: [{ x: 0, y: 0, width: 12, height: 12 }],
        color: "#8D8D8D"
      },
      color: {
        barWidth: 300,
        barHeight: 8,
        axisYTranslation: 10
      }
    };
    lines = {
      opacity: {
        unselected: 0.3,
        selected: 1
      },
      weight: {
        selected: 2,
        unselected: 1
      }
    };
    meter = {
      statusBar: {
        paddingRight: 5
      },
      status: {
        indicatorSize: 16,
        paddingLeft: 15
      },
      total: {
        paddingLeft: 36,
        paddingRight: 24
      },
      height: {
        default: 8,
        proportional: 16
      },
      dividerWidth: 2
    };
    pie = {
      radiusOffset: -15,
      innerRadius: 2,
      padAngle: 7e-3,
      hoverArc: {
        outerRadiusOffset: 3
      },
      xOffset: 30,
      yOffset: 20,
      yOffsetCallout: 10,
      callout: {
        minSliceDegree: 5,
        offsetX: 15,
        offsetY: 12,
        horizontalLineLength: 8,
        textMargin: 2
      }
    };
    radar = {
      opacity: {
        unselected: 0.1,
        selected: 0.3
      },
      xLabelPadding: 10,
      yLabelPadding: 8,
      yTicksNumber: 4,
      minRange: 10,
      xAxisRectHeight: 50,
      dotsRadius: 5
    };
    alluvial = {
      nodeWidth: 4,
      nodeHoveredWidth: 8,
      minNodePadding: 24,
      opacity: {
        unfocus: 0.3,
        default: 0.8,
        selected: 1
      }
    };
    heatmap = {
      minCellDividerDimension: 16,
      chartPadding: 0.5
    };
    spacers = {
      default: {
        size: 24
      }
    };
    tooltips = {
      horizontalOffset: 10
    };
    transitions = {
      default: {
        duration: 300
      },
      pie_slice_mouseover: {
        duration: 100
      },
      pie_chart_titles: {
        duration: 375
      },
      graph_element_mouseover_fill_update: {
        duration: 100
      },
      graph_element_mouseout_fill_update: {
        duration: 100
      }
    };
    toolbar = {
      buttonSize: 32,
      iconSize: 20,
      height: 32,
      spacerHeight: 10,
      iconPadding: 6
    };
    zoomBar = {
      height: (_a$1 = {}, _a$1[ZoomBarTypes.GRAPH_VIEW] = 32, _a$1[ZoomBarTypes.SLIDER_VIEW] = 10, _a$1),
      spacerHeight: 8,
      handleWidth: 5,
      handleBarWidth: 1,
      handleBarHeight: 12
    };
    defaultLegendAdditionalItems = [
      {
        type: LegendItemType.RADIUS,
        name: "Radius"
      },
      {
        type: LegendItemType.AREA,
        name: "Poor area"
      },
      {
        type: LegendItemType.AREA,
        name: "Satisfactory area"
      },
      {
        type: LegendItemType.AREA,
        name: "Great area"
      },
      {
        type: LegendItemType.QUARTILE,
        name: "Quartiles"
      }
    ];
    (function(Tools2) {
      Tools2.debounce = debounce_default;
      Tools2.clone = cloneDeep_default;
      Tools2.merge = merge_default;
      Tools2.unionBy = unionBy_default;
      Tools2.removeArrayDuplicates = uniq_default;
      Tools2.clamp = clamp_default;
      Tools2.flatten = flatten_default;
      Tools2.groupBy = groupBy_default;
      Tools2.camelCase = camelCase_default;
      Tools2.isEmpty = isEmpty_default;
      Tools2.isEqual = isEqual_default;
      Tools2.flatMapDeep = flatMapDeep_default;
      Tools2.kebabCase = kebabCase_default;
      Tools2.fromPairs = fromPairs_default;
      Tools2.some = some_default;
      function debounceWithD3MousePosition(fn, delay, holder) {
        var timer2 = null;
        return function() {
          var context = this;
          var args = arguments;
          context.mousePosition = pointer_default(args[0], holder);
          clearTimeout(timer2);
          timer2 = setTimeout(function() {
            fn.apply(context, args);
          }, delay);
        };
      }
      Tools2.debounceWithD3MousePosition = debounceWithD3MousePosition;
      function mergeDefaultChartOptions(defaultOptions, providedOptions) {
        var _a22, _b;
        var clonedDefaultOptions = Tools2.clone(defaultOptions);
        var providedAxesNames = Object.keys(providedOptions.axes || {});
        if ((_b = (_a22 = providedOptions) === null || _a22 === void 0 ? void 0 : _a22.toolbar) === null || _b === void 0 ? void 0 : _b.controls) {
          delete clonedDefaultOptions.toolbar.controls;
        }
        if (providedAxesNames.length === 0) {
          delete clonedDefaultOptions.axes;
        }
        for (var axisName in clonedDefaultOptions.axes) {
          if (providedAxesNames.includes(axisName)) {
            var providedAxisOptions = providedOptions.axes[axisName];
            if (providedAxisOptions["primary"] || providedAxisOptions["secondary"]) {
              console.warn("`primary` & `secondary` are no longer needed for axis configurations. Read more here https://carbon-design-system.github.io/carbon-charts/?path=/story/docs-tutorials--tabular-data-format");
            }
            var identifier = providedAxisOptions["mapsTo"];
            if (identifier === void 0 || identifier === null) {
              var scaleType = providedAxisOptions["scaleType"];
              if (scaleType === void 0 || scaleType === null) {
                providedAxisOptions["mapsTo"] = "value";
              } else if (scaleType === ScaleTypes.TIME) {
                providedAxisOptions["mapsTo"] = "date";
              } else if (scaleType === ScaleTypes.LABELS) {
                providedAxisOptions["mapsTo"] = "key";
              }
            }
          } else {
            delete clonedDefaultOptions.axes[axisName];
          }
        }
        updateLegendAdditionalItems(clonedDefaultOptions, providedOptions);
        return Tools2.merge(clonedDefaultOptions, providedOptions);
      }
      Tools2.mergeDefaultChartOptions = mergeDefaultChartOptions;
      function getDimensions(el) {
        return {
          width: parseFloat(el.style.width.replace("px", "") || el.offsetWidth),
          height: parseFloat(el.style.height.replace("px", "") || el.offsetHeight)
        };
      }
      Tools2.getDimensions = getDimensions;
      function getTranslationValues(elementRef) {
        if (!elementRef) {
          return;
        }
        var translateRegex = /translate\([0-9]+\.?[0-9]*,[0-9]+\.?[0-9]*\)/;
        var transformStr = elementRef.getAttribute("transform").match(translateRegex);
        if (!transformStr) {
          return null;
        }
        if (transformStr[0]) {
          var transforms = transformStr[0].replace(/translate\(/, "").replace(/\)/, "").split(",");
          return {
            tx: transforms[0],
            ty: transforms[1]
          };
        }
        return null;
      }
      Tools2.getTranslationValues = getTranslationValues;
      function getTranformOffsets(string) {
        var regExp = /\(([^)]+)\)/;
        var match2 = regExp.exec(string)[1];
        var xyString = match2.split(",");
        return {
          x: parseFloat(xyString[0]),
          y: parseFloat(xyString[1])
        };
      }
      Tools2.getTranformOffsets = getTranformOffsets;
      function formatWidthHeightValues(value2) {
        var stringValue = value2.toString();
        if (stringValue.match(/[a-z]/i)) {
          return stringValue;
        }
        return stringValue + "px";
      }
      Tools2.formatWidthHeightValues = formatWidthHeightValues;
      function capitalizeFirstLetter(string) {
        return string[0].toUpperCase() + string.slice(1);
      }
      Tools2.capitalizeFirstLetter = capitalizeFirstLetter;
      function convertValueToPercentage(item, fullData, key2) {
        if (key2 === void 0) {
          key2 = "value";
        }
        var percentage = item / fullData.reduce(function(accum, val) {
          return accum + val[key2];
        }, 0) * 100;
        return percentage % 1 !== 0 ? parseFloat(percentage.toFixed(1)) : percentage;
      }
      Tools2.convertValueToPercentage = convertValueToPercentage;
      function truncateLabel(fullText, truncationType, numCharacter) {
        if (numCharacter > fullText.length) {
          return fullText;
        }
        if (truncationType === TruncationTypes.MID_LINE) {
          return fullText.substr(0, numCharacter / 2) + "..." + fullText.substr(-numCharacter / 2);
        } else if (truncationType === TruncationTypes.FRONT_LINE) {
          return "..." + fullText.substr(-numCharacter);
        } else if (truncationType === TruncationTypes.END_LINE) {
          return fullText.substr(0, numCharacter) + "...";
        }
      }
      Tools2.truncateLabel = truncateLabel;
      function updateLegendAdditionalItems(defaultOptions, providedOptions) {
        var defaultAdditionalItems = Tools2.getProperty(defaultOptions, "legend", "additionalItems");
        var userProvidedAdditionalItems = Tools2.getProperty(providedOptions, "legend", "additionalItems");
        if (defaultAdditionalItems && userProvidedAdditionalItems) {
          var providedTypes_1 = userProvidedAdditionalItems.map(function(item) {
            return item.type;
          });
          var defaultTypes_1 = defaultAdditionalItems.map(function(item) {
            return item.type;
          });
          var updatedDefaultItems = defaultLegendAdditionalItems.filter(function(item) {
            return defaultTypes_1.includes(item.type) && !providedTypes_1.includes(item.type);
          });
          defaultOptions.legend.additionalItems = updatedDefaultItems;
          providedOptions.legend.additionalItems = Tools2.unionBy(updatedDefaultItems, userProvidedAdditionalItems, "name");
        }
      }
      Tools2.updateLegendAdditionalItems = updateLegendAdditionalItems;
      function arrayDifferences(oldArray, newArray) {
        var difference = {
          missing: [],
          added: []
        };
        oldArray.forEach(function(element) {
          if (newArray.indexOf(element) === -1) {
            difference.missing.push(element);
          }
        });
        newArray.forEach(function(element) {
          if (oldArray.indexOf(element) === -1) {
            difference.added.push(element);
          }
        });
        return difference;
      }
      Tools2.arrayDifferences = arrayDifferences;
      function getDuplicateValues(arr) {
        var values = [];
        var duplicateValues = [];
        arr.forEach(function(value2) {
          if (values.indexOf(value2) !== -1 && duplicateValues.indexOf(value2) === -1) {
            duplicateValues.push(value2);
          }
          values.push(value2);
        });
        return duplicateValues;
      }
      Tools2.getDuplicateValues = getDuplicateValues;
      function moveToFront(element) {
        return element.each(function() {
          this.parentNode.appendChild(this);
        });
      }
      Tools2.moveToFront = moveToFront;
      Tools2.getProperty = function(object) {
        var propPath = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          propPath[_i - 1] = arguments[_i];
        }
        var position2 = object;
        if (position2) {
          for (var _a22 = 0, propPath_1 = propPath; _a22 < propPath_1.length; _a22++) {
            var prop = propPath_1[_a22];
            if (position2[prop] !== null && position2[prop] !== void 0) {
              position2 = position2[prop];
            } else {
              return null;
            }
          }
          return position2;
        }
        return null;
      };
      Tools2.flipSVGCoordinatesBasedOnOrientation = function(verticalCoordinates, orientation) {
        if (orientation === CartesianOrientations.HORIZONTAL) {
          return {
            y0: verticalCoordinates.x0,
            y1: verticalCoordinates.x1,
            x0: verticalCoordinates.y0,
            x1: verticalCoordinates.y1
          };
        }
        return verticalCoordinates;
      };
      Tools2.generateSVGPathString = function(verticalCoordinates, orientation) {
        var _a22 = Tools2.flipSVGCoordinatesBasedOnOrientation(verticalCoordinates, orientation), x0 = _a22.x0, x1 = _a22.x1, y0 = _a22.y0, y1 = _a22.y1;
        return "M" + x0 + "," + y0 + "L" + x0 + "," + y1 + "L" + x1 + "," + y1 + "L" + x1 + "," + y0 + "L" + x0 + "," + y0;
      };
      function flipDomainAndRangeBasedOnOrientation(domain, range2, orientation) {
        return orientation === CartesianOrientations.VERTICAL ? [domain, range2] : [range2, domain];
      }
      Tools2.flipDomainAndRangeBasedOnOrientation = flipDomainAndRangeBasedOnOrientation;
      Tools2.compareNumeric = function(a2, b) {
        return Number(a2) === Number(b);
      };
    })(Tools || (Tools = {}));
    __spreadArrays$k = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    standardTruncationOptions = {
      type: TruncationTypes.END_LINE,
      threshold: 16,
      numCharacter: 14
    };
    legend = {
      enabled: true,
      position: LegendPositions.BOTTOM,
      clickable: true,
      truncation: standardTruncationOptions,
      alignment: Alignments.LEFT,
      order: null,
      additionalItems: []
    };
    grid = {
      x: {
        enabled: true,
        numberOfTicks: 15,
        alignWithAxisTicks: false
      },
      y: {
        enabled: true,
        numberOfTicks: 5,
        alignWithAxisTicks: false
      }
    };
    ruler = {
      enabled: true
    };
    baseTooltip = {
      enabled: true,
      showTotal: true,
      truncation: standardTruncationOptions,
      groupLabel: "Group"
    };
    axes = {
      top: {
        visible: true,
        includeZero: true,
        truncation: standardTruncationOptions
      },
      bottom: {
        visible: true,
        includeZero: true,
        truncation: standardTruncationOptions
      },
      left: {
        visible: true,
        includeZero: true,
        truncation: standardTruncationOptions
      },
      right: {
        visible: true,
        includeZero: true,
        truncation: standardTruncationOptions
      }
    };
    timeScale = {
      addSpaceOnEdges: 1,
      showDayName: false,
      localeObject: import_en_US2.default,
      timeIntervalFormats: {
        "15seconds": { primary: "MMM d, pp", secondary: "pp" },
        minute: { primary: "MMM d, p", secondary: "p" },
        "30minutes": { primary: "MMM d, p", secondary: "p" },
        hourly: { primary: "MMM d, hh a", secondary: "hh a" },
        daily: { primary: "MMM d", secondary: "d" },
        weekly: { primary: "eee, MMM d", secondary: "eee" },
        monthly: { primary: "MMM yyyy", secondary: "MMM" },
        quarterly: { primary: "QQQ ''yy", secondary: "QQQ" },
        yearly: { primary: "yyyy", secondary: "yyyy" }
      }
    };
    isFullScreenEnabled = typeof document !== "undefined" && (document["fullscreenEnabled"] || document["webkitFullscreenEnabled"] || document["mozFullScreenEnabled"] || document["msFullscreenEnabled"]);
    chart = {
      width: null,
      height: null,
      resizable: true,
      theme: ChartTheme.WHITE,
      tooltip: baseTooltip,
      legend,
      style: {
        prefix: "cc"
      },
      data: {
        groupMapsTo: "group",
        loading: false,
        selectedGroups: []
      },
      color: {
        scale: null,
        pairing: {
          numberOfVariants: null,
          option: 1
        },
        gradient: {
          enabled: false
        }
      },
      toolbar: {
        enabled: true,
        numberOfIcons: 3,
        controls: __spreadArrays$k([
          {
            type: ToolbarControlTypes.SHOW_AS_DATATABLE
          }
        ], isFullScreenEnabled ? [
          {
            type: ToolbarControlTypes.MAKE_FULLSCREEN
          }
        ] : [], [
          {
            type: ToolbarControlTypes.EXPORT_CSV
          },
          {
            type: ToolbarControlTypes.EXPORT_PNG
          },
          {
            type: ToolbarControlTypes.EXPORT_JPG
          }
        ])
      }
    };
    axisChart = Tools.merge({}, chart, {
      axes,
      timeScale,
      grid,
      ruler,
      zoomBar: {
        zoomRatio: 0.4,
        minZoomRatio: 0.01,
        top: {
          enabled: false,
          type: ZoomBarTypes.GRAPH_VIEW
        }
      }
    });
    baseBarChart = Tools.merge({}, axisChart, {
      bars: {
        maxWidth: 16,
        spacingFactor: 0.25
      },
      timeScale: Tools.merge(timeScale, {
        addSpaceOnEdges: 1
      })
    });
    simpleBarChart = Tools.merge({}, baseBarChart, {});
    groupedBarChart = Tools.merge({}, baseBarChart, {});
    stackedBarChart = Tools.merge({}, baseBarChart, {
      bars: Tools.merge({}, baseBarChart.bars, {
        dividerSize: 1.5
      })
    });
    boxplotChart = Tools.merge({}, baseBarChart, {});
    scatterChart = Tools.merge({}, axisChart, {
      points: {
        radius: 4,
        fillOpacity: 0.3,
        filled: true,
        enabled: true
      }
    });
    lollipopChart = scatterChart;
    lineChart = Tools.merge({}, scatterChart, {
      points: {
        radius: 3,
        filled: false,
        enabled: true
      }
    });
    areaChart = Tools.merge({}, lineChart, {
      timeScale: Tools.merge(timeScale, {
        addSpaceOnEdges: 0
      })
    });
    stackedAreaChart = areaChart;
    bubbleChart = Tools.merge({}, axisChart, {
      bubble: {
        radiusMapsTo: "radius",
        radiusLabel: "Radius",
        radiusRange: function(chartSize, data) {
          var smallerChartDimension = Math.min(chartSize.width, chartSize.height);
          return [
            smallerChartDimension * 3 / 400,
            smallerChartDimension * 25 / 400
          ];
        },
        fillOpacity: 0.2,
        enabled: true
      },
      points: {
        filled: true
      },
      legend: {
        additionalItems: [
          {
            type: LegendItemType.RADIUS,
            name: "Radius"
          }
        ]
      }
    });
    bulletChart = Tools.merge({}, axisChart, {
      bullet: {
        performanceAreaTitles: ["Poor", "Satisfactory", "Great"]
      },
      grid: {
        x: {
          enabled: false
        },
        y: {
          enabled: false
        }
      },
      legend: {
        additionalItems: [
          {
            type: LegendItemType.AREA,
            name: "Poor area"
          },
          {
            type: LegendItemType.AREA,
            name: "Satisfactory area"
          },
          {
            type: LegendItemType.AREA,
            name: "Great area"
          },
          {
            type: LegendItemType.QUARTILE,
            name: "Quartiles"
          }
        ]
      }
    });
    histogramChart = Tools.merge({}, baseBarChart, {
      bars: {
        dividerSize: 1.5
      },
      timeScale: Tools.merge(timeScale, {
        addSpaceOnEdges: 0
      })
    });
    wordCloudChart = Tools.merge({}, chart, {
      tooltip: Tools.merge({}, baseTooltip, {
        wordLabel: "Word",
        valueLabel: "Value"
      }),
      wordCloud: {
        fontSizeMapsTo: "value",
        fontSizeRange: function(chartSize, data) {
          var smallerChartDimension = Math.min(chartSize.width, chartSize.height);
          return [
            smallerChartDimension * 20 / 400,
            smallerChartDimension * 75 / 400
          ];
        },
        wordMapsTo: "word"
      }
    });
    pieChart = Tools.merge({}, chart, {
      pie: {
        labels: {
          formatter: null,
          enabled: true
        },
        alignment: Alignments.LEFT,
        sortFunction: null,
        valueMapsTo: "value"
      }
    });
    gaugeChart = Tools.merge({}, chart, {
      legend: {
        enabled: false
      },
      gauge: {
        type: GaugeTypes.SEMI,
        arcWidth: 16,
        deltaArrow: {
          size: function(radius) {
            return radius / 8;
          },
          enabled: true
        },
        showPercentageSymbol: true,
        status: null,
        numberSpacing: 10,
        deltaFontSize: function(radius) {
          return radius / 8;
        },
        valueFontSize: function(radius) {
          return radius / 2.5;
        },
        numberFormatter: function(number5) {
          return number5.toFixed(2) % 1 !== 0 ? number5.toFixed(2).toLocaleString() : number5.toFixed().toLocaleString();
        },
        alignment: Alignments.LEFT
      }
    });
    donutChart = Tools.merge({}, pieChart, {
      donut: {
        center: {
          numberFontSize: function(radius) {
            return Math.min(radius / 100 * 24, 24) + "px";
          },
          titleFontSize: function(radius) {
            return Math.min(radius / 100 * 15, 15) + "px";
          },
          titleYPosition: function(radius) {
            return Math.min(radius / 80 * 20, 20);
          },
          numberFormatter: function(number5) {
            return Math.floor(number5).toLocaleString();
          }
        },
        alignment: Alignments.LEFT
      }
    });
    meterChart = Tools.merge({}, chart, {
      legend: {
        enabled: false,
        clickable: false
      },
      meter: {
        showLabels: true,
        proportional: null,
        statusBar: {
          percentageIndicator: {
            enabled: true
          }
        }
      }
    });
    proportionalMeterChart = Tools.merge({}, meterChart, {
      legend: {
        enabled: true
      }
    });
    radarChart = Tools.merge({}, chart, {
      radar: {
        axes: {
          angle: "key",
          value: "value"
        },
        alignment: Alignments.LEFT
      },
      tooltip: {
        gridline: {
          enabled: true
        },
        valueFormatter: function(value2) {
          return value2 !== null && value2 !== void 0 ? value2 : "N/A";
        }
      }
    });
    comboChart = Tools.merge({}, baseBarChart, {
      comboChartTypes: []
    });
    treeChart = Tools.merge({
      tree: {
        type: TreeTypes.TREE
      }
    }, chart, {});
    treemapChart = Tools.merge({}, chart, {
      data: Tools.merge(chart.data, {
        groupMapsTo: "name"
      })
    });
    circlePackChart = Tools.merge({}, chart, circlePack, {
      data: Tools.merge(chart.data, {
        groupMapsTo: "name"
      })
    });
    alluvialChart = Tools.merge({}, chart, {
      alluvial: {
        data: Tools.merge(chart.data, {
          groupMapsTo: "source"
        }),
        nodeAlignment: Alignments.CENTER,
        nodePadding: 24,
        monochrome: false,
        nodes: []
      }
    });
    heatmapChart = Tools.merge({}, chart, {
      axes,
      heatmap: {
        divider: {
          state: DividerStatus.AUTO
        },
        colorLegend: {
          type: "linear"
        }
      }
    });
    options = {
      chart,
      axisChart,
      simpleBarChart,
      groupedBarChart,
      stackedBarChart,
      boxplotChart,
      bubbleChart,
      bulletChart,
      histogramChart,
      lineChart,
      areaChart,
      stackedAreaChart,
      scatterChart,
      lollipopChart,
      pieChart,
      donutChart,
      meterChart,
      proportionalMeterChart,
      radarChart,
      gaugeChart,
      comboChart,
      treeChart,
      treemapChart,
      circlePackChart,
      wordCloudChart,
      alluvialChart,
      heatmapChart
    };
    Configuration = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      grid,
      ruler,
      baseTooltip,
      timeScale,
      options,
      carbonPrefix,
      area,
      axis: axis2,
      canvasZoomSettings,
      circlePack,
      color: color2,
      boxplot,
      histogram,
      legend: legend$1,
      lines,
      meter,
      pie,
      radar,
      alluvial,
      heatmap,
      spacers,
      tooltips,
      transitions,
      toolbar,
      zoomBar,
      defaultLegendAdditionalItems
    }, Symbol.toStringTag, { value: "Module" }));
    TIME_INTERVALS = [
      ["15seconds", 15 * 1e3],
      ["minute", 60 * 1e3],
      ["30minutes", 30 * 60 * 1e3],
      ["hourly", 60 * 60 * 1e3],
      ["daily", 24 * 60 * 60 * 1e3],
      ["monthly", 30 * 24 * 60 * 60 * 1e3],
      ["quarterly", 3 * 30 * 24 * 60 * 60 * 1e3],
      ["yearly", 12 * 30 * 24 * 60 * 60 * 1e3]
    ];
    __assign$3 = globalThis && globalThis.__assign || function() {
      __assign$3 = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      return __assign$3.apply(this, arguments);
    };
    ChartModel = function() {
      function ChartModel2(services) {
        this.state = {
          options: {}
        };
        this.colorScale = {};
        this.colorClassNames = {};
        this.services = services;
      }
      ChartModel2.prototype.getAllDataFromDomain = function(groups) {
        if (!this.getData()) {
          return null;
        }
        var options2 = this.getOptions();
        var allData = this.getData();
        var dataGroups = this.getDataGroups();
        var groupMapsTo = Tools.getProperty(options2, "data").groupMapsTo;
        var axesOptions = Tools.getProperty(options2, "axes");
        if (groups) {
          allData = allData.filter(function(item) {
            return groups.includes(item[groupMapsTo]);
          });
        }
        if (axesOptions) {
          Object.keys(axesOptions).forEach(function(axis22) {
            var mapsTo = axesOptions[axis22].mapsTo;
            var scaleType = axesOptions[axis22].scaleType;
            if (scaleType === ScaleTypes.LINEAR || scaleType === ScaleTypes.LOG) {
              allData = allData.map(function(datum2) {
                var _a3;
                return __assign$3(__assign$3({}, datum2), (_a3 = {}, _a3[mapsTo] = datum2[mapsTo] === null ? datum2[mapsTo] : Number(datum2[mapsTo]), _a3));
              });
            }
            if (mapsTo && axesOptions[axis22].domain) {
              if (scaleType === ScaleTypes.LABELS) {
                allData = allData.filter(function(datum2) {
                  return axesOptions[axis22].domain.includes(datum2[mapsTo]);
                });
              } else {
                var _a22 = axesOptions[axis22].domain, start_1 = _a22[0], end_1 = _a22[1];
                allData = allData.filter(function(datum2) {
                  return !(mapsTo in datum2) || datum2[mapsTo] >= start_1 && datum2[mapsTo] <= end_1;
                });
              }
            }
          });
        }
        return allData.filter(function(datum2) {
          return dataGroups.find(function(group) {
            return group.name === datum2[groupMapsTo];
          });
        });
      };
      ChartModel2.prototype.getDisplayData = function(groups) {
        if (!this.get("data")) {
          return null;
        }
        var ACTIVE = legend$1.items.status.ACTIVE;
        var dataGroups = this.getDataGroups(groups);
        var groupMapsTo = this.getOptions().data.groupMapsTo;
        var allDataFromDomain = this.getAllDataFromDomain(groups);
        return allDataFromDomain.filter(function(datum2) {
          return dataGroups.find(function(dataGroup) {
            return dataGroup.name === datum2[groupMapsTo] && dataGroup.status === ACTIVE;
          });
        });
      };
      ChartModel2.prototype.getData = function() {
        return this.get("data");
      };
      ChartModel2.prototype.isDataEmpty = function() {
        return !this.getData().length;
      };
      ChartModel2.prototype.setData = function(newData) {
        var sanitizedData = this.sanitize(Tools.clone(newData));
        var dataGroups = this.generateDataGroups(sanitizedData);
        this.set({
          data: sanitizedData,
          dataGroups
        });
        return sanitizedData;
      };
      ChartModel2.prototype.getDataGroups = function(groups) {
        var isDataLoading = Tools.getProperty(this.getOptions(), "data", "loading");
        if (isDataLoading) {
          return [];
        }
        if (groups) {
          return this.get("dataGroups").filter(function(dataGroup) {
            return groups.includes(dataGroup.name);
          });
        }
        return this.get("dataGroups");
      };
      ChartModel2.prototype.getActiveDataGroups = function(groups) {
        var ACTIVE = legend$1.items.status.ACTIVE;
        return this.getDataGroups(groups).filter(function(dataGroup) {
          return dataGroup.status === ACTIVE;
        });
      };
      ChartModel2.prototype.getDataGroupNames = function(groups) {
        var dataGroups = this.getDataGroups(groups);
        return dataGroups.map(function(dataGroup) {
          return dataGroup.name;
        });
      };
      ChartModel2.prototype.getActiveDataGroupNames = function(groups) {
        var activeDataGroups = this.getActiveDataGroups(groups);
        return activeDataGroups.map(function(dataGroup) {
          return dataGroup.name;
        });
      };
      ChartModel2.prototype.aggregateBinDataByGroup = function(bin2) {
        return Tools.groupBy(bin2, "group");
      };
      ChartModel2.prototype.getBinConfigurations = function() {
        var _this = this;
        var data = this.getDisplayData();
        var options2 = this.getOptions();
        var mainXPos = this.services.cartesianScales.getMainXAxisPosition();
        var domainIdentifier = this.services.cartesianScales.getDomainIdentifier();
        var axisOptions = options2.axes[mainXPos];
        var groupMapsTo = options2.data.groupMapsTo;
        var _a22 = axisOptions.bins, axisBins = _a22 === void 0 ? histogram.defaultBins : _a22;
        var areBinsDefined = Array.isArray(axisBins);
        var bins = bin().value(function(d) {
          return d[domainIdentifier];
        }).thresholds(axisBins)(data);
        if (!areBinsDefined) {
          var binsWidth = bins[0].x1 - bins[0].x0;
          bins[bins.length - 1].x1 = +bins[bins.length - 1].x0 + binsWidth;
        } else {
          bins[bins.length - 1].x1 = axisBins[axisBins.length - 1];
        }
        var binsDomain = areBinsDefined ? [axisBins[0], axisBins[axisBins.length - 1]] : [bins[0].x0, bins[bins.length - 1].x1];
        var groupsKeys = Array.from(new Set(data.map(function(d) {
          return d[groupMapsTo];
        })));
        var histogramData = [];
        bins.forEach(function(bin2) {
          var key2 = bin2.x0 + "-" + bin2.x1;
          var aggregateDataByGroup = _this.aggregateBinDataByGroup(bin2);
          groupsKeys.forEach(function(group) {
            histogramData.push({
              group,
              key: key2,
              value: aggregateDataByGroup[group] || 0,
              bin: bin2.x0
            });
          });
        });
        return {
          bins,
          binsDomain
        };
      };
      ChartModel2.prototype.getBinnedStackedData = function() {
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var dataGroupNames = this.getActiveDataGroupNames();
        var bins = this.getBinConfigurations().bins;
        var dataValuesGroupedByKeys = this.getDataValuesGroupedByKeys({
          bins
        });
        return stack_default().keys(dataGroupNames)(dataValuesGroupedByKeys).map(function(series, i) {
          return Object.keys(series).filter(function(key2) {
            return !isNaN(key2);
          }).map(function(key2) {
            var element = series[key2];
            element[groupMapsTo] = dataGroupNames[i];
            return element;
          });
        });
      };
      ChartModel2.prototype.getGroupedData = function(groups) {
        var displayData = this.getDisplayData(groups);
        var groupedData = {};
        var groupMapsTo = this.getOptions().data.groupMapsTo;
        displayData.map(function(datum2) {
          var group = datum2[groupMapsTo];
          if (groupedData[group] !== null && groupedData[group] !== void 0) {
            groupedData[group].push(datum2);
          } else {
            groupedData[group] = [datum2];
          }
        });
        return Object.keys(groupedData).map(function(groupName) {
          return {
            name: groupName,
            data: groupedData[groupName]
          };
        });
      };
      ChartModel2.prototype.getStackKeys = function(_a22) {
        var _this = this;
        var _b = _a22 === void 0 ? { bins: null, groups: null } : _a22, _c = _b.bins, bins = _c === void 0 ? null : _c, _d = _b.groups, groups = _d === void 0 ? null : _d;
        var options2 = this.getOptions();
        var displayData = this.getDisplayData(groups);
        var stackKeys;
        if (bins) {
          stackKeys = bins.map(function(bin2) {
            return bin2.x0 + "-" + bin2.x1;
          });
        } else {
          stackKeys = Tools.removeArrayDuplicates(displayData.map(function(datum2) {
            var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(datum2);
            if (datum2[domainIdentifier] instanceof Date) {
              return formatDateTillMilliSeconds(datum2[domainIdentifier]);
            }
            return datum2[domainIdentifier] && typeof datum2[domainIdentifier].toString === "function" ? datum2[domainIdentifier].toString() : datum2[domainIdentifier];
          }));
        }
        var axisPosition = this.services.cartesianScales.domainAxisPosition;
        var scaleType = options2.axes[axisPosition].scaleType;
        if (scaleType === ScaleTypes.TIME) {
          stackKeys.sort(function(a2, b) {
            var dateA = new Date(a2);
            var dateB = new Date(b);
            return dateA - dateB;
          });
        } else if (scaleType === ScaleTypes.LOG || scaleType === ScaleTypes.LINEAR) {
          stackKeys.sort(function(a2, b) {
            return a2 - b;
          });
        }
        return stackKeys;
      };
      ChartModel2.prototype.getDataValuesGroupedByKeys = function(_a22) {
        var _this = this;
        var _b = _a22.bins, bins = _b === void 0 ? null : _b, _c = _a22.groups, groups = _c === void 0 ? null : _c;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var displayData = this.getDisplayData(groups);
        var dataGroupNames = this.getDataGroupNames();
        var stackKeys = this.getStackKeys({ bins, groups });
        if (bins) {
          return stackKeys.map(function(key2) {
            var _a3 = key2.split("-"), binStart = _a3[0], binEnd = _a3[1];
            var correspondingValues = { x0: binStart, x1: binEnd };
            var correspondingBin = bins.find(function(bin2) {
              return bin2.x0.toString() === binStart.toString();
            });
            dataGroupNames.forEach(function(dataGroupName) {
              correspondingValues[dataGroupName] = correspondingBin.filter(function(binItem) {
                return binItem[groupMapsTo] === dataGroupName;
              }).length;
            });
            return correspondingValues;
          });
        }
        return stackKeys.map(function(key2) {
          var correspondingValues = { sharedStackKey: key2 };
          dataGroupNames.forEach(function(dataGroupName) {
            var correspondingDatum = displayData.find(function(datum2) {
              var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(datum2);
              return datum2[groupMapsTo] === dataGroupName && datum2.hasOwnProperty(domainIdentifier) && (datum2[domainIdentifier] instanceof Date ? formatDateTillMilliSeconds(datum2[domainIdentifier]) === key2 : datum2[domainIdentifier].toString() === key2);
            });
            var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(correspondingValues);
            correspondingValues[dataGroupName] = correspondingDatum ? correspondingDatum[rangeIdentifier] : null;
          });
          return correspondingValues;
        });
      };
      ChartModel2.prototype.getStackedData = function(_a22) {
        var _b = _a22.percentage, percentage = _b === void 0 ? false : _b, _c = _a22.groups, groups = _c === void 0 ? null : _c, _d = _a22.divergent, divergent = _d === void 0 ? false : _d;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var dataGroupNames = this.getActiveDataGroupNames(groups);
        var dataValuesGroupedByKeys = this.getDataValuesGroupedByKeys({
          groups
        });
        if (percentage) {
          var maxByKey_1 = Tools.fromPairs(dataValuesGroupedByKeys.map(function(d) {
            return [d.sharedStackKey, 0];
          }));
          dataValuesGroupedByKeys.forEach(function(d) {
            dataGroupNames.forEach(function(name) {
              maxByKey_1[d.sharedStackKey] += d[name];
            });
          });
          dataValuesGroupedByKeys.forEach(function(d) {
            dataGroupNames.forEach(function(name) {
              if (maxByKey_1[d.sharedStackKey]) {
                d[name] = d[name] / maxByKey_1[d.sharedStackKey] * 100;
              } else {
                d[name] = 0;
              }
            });
          });
        }
        var stackToUse = divergent ? stack_default().offset(diverging_default) : stack_default();
        return stackToUse.keys(dataGroupNames)(dataValuesGroupedByKeys).map(function(series, i) {
          return Object.keys(series).filter(function(key2) {
            return !isNaN(key2);
          }).map(function(key2) {
            var element = series[key2];
            element[groupMapsTo] = dataGroupNames[i];
            return element;
          });
        });
      };
      ChartModel2.prototype.getOptions = function() {
        return this.state.options;
      };
      ChartModel2.prototype.set = function(newState, configs) {
        this.state = Object.assign({}, this.state, newState);
        var newConfig = Object.assign(
          { skipUpdate: false, animate: true },
          configs
        );
        if (!newConfig.skipUpdate) {
          this.update(newConfig.animate);
        }
      };
      ChartModel2.prototype.get = function(property2) {
        if (property2) {
          return this.state[property2];
        } else {
          return this.state;
        }
      };
      ChartModel2.prototype.setOptions = function(newOptions) {
        var options2 = this.getOptions();
        Tools.updateLegendAdditionalItems(options2, newOptions);
        this.set({
          options: Tools.merge(options2, newOptions)
        });
      };
      ChartModel2.prototype.update = function(animate) {
        if (animate === void 0) {
          animate = true;
        }
        if (!this.getDisplayData()) {
          return;
        }
        this.updateAllDataGroups();
        this.setCustomColorScale();
        this.setColorClassNames();
        this.services.events.dispatchEvent(Events$1.Model.UPDATE, { animate });
      };
      ChartModel2.prototype.toggleDataLabel = function(changedLabel) {
        var _a22 = legend$1.items.status, ACTIVE = _a22.ACTIVE, DISABLED = _a22.DISABLED;
        var dataGroups = this.getDataGroups();
        var hasDeactivatedItems = dataGroups.some(function(group) {
          return group.status === DISABLED;
        });
        var activeItems = dataGroups.filter(function(group) {
          return group.status === ACTIVE;
        });
        if (hasDeactivatedItems) {
          if (activeItems.length === 1 && activeItems[0].name === changedLabel) {
            dataGroups.forEach(function(group, i) {
              dataGroups[i].status = ACTIVE;
            });
          } else {
            var indexToChange = dataGroups.findIndex(function(group) {
              return group.name === changedLabel;
            });
            dataGroups[indexToChange].status = dataGroups[indexToChange].status === DISABLED ? ACTIVE : DISABLED;
          }
        } else {
          dataGroups.forEach(function(group, i) {
            dataGroups[i].status = group.name === changedLabel ? ACTIVE : DISABLED;
          });
        }
        var updatedActiveItems = dataGroups.filter(function(group) {
          return group.status === ACTIVE;
        });
        var options2 = this.getOptions();
        var hasUpdatedDeactivatedItems = dataGroups.some(function(group) {
          return group.status === DISABLED;
        });
        if (hasUpdatedDeactivatedItems) {
          options2.data.selectedGroups = updatedActiveItems.map(function(activeItem) {
            return activeItem.name;
          });
        } else {
          options2.data.selectedGroups = [];
        }
        this.services.events.dispatchEvent(Events$1.Legend.ITEMS_UPDATE, {
          dataGroups
        });
        this.set({
          dataGroups
        });
      };
      ChartModel2.prototype.getIsFilled = function(group, key2, data, defaultFilled) {
        var options2 = this.getOptions();
        if (options2.getIsFilled) {
          return options2.getIsFilled(group, key2, data, defaultFilled);
        } else {
          return defaultFilled;
        }
      };
      ChartModel2.prototype.getFillColor = function(group, key2, data) {
        var options2 = this.getOptions();
        var defaultFillColor = Tools.getProperty(this.colorScale, group);
        if (options2.getFillColor) {
          return options2.getFillColor(group, key2, data, defaultFillColor);
        } else {
          return defaultFillColor;
        }
      };
      ChartModel2.prototype.getStrokeColor = function(group, key2, data) {
        var options2 = this.getOptions();
        var defaultStrokeColor = Tools.getProperty(this.colorScale, group);
        if (options2.getStrokeColor) {
          return options2.getStrokeColor(group, key2, data, defaultStrokeColor);
        } else {
          return defaultStrokeColor;
        }
      };
      ChartModel2.prototype.isUserProvidedColorScaleValid = function() {
        var userProvidedScale = Tools.getProperty(this.getOptions(), "color", "scale");
        var dataGroups = this.getDataGroups();
        if (userProvidedScale == null || Object.keys(userProvidedScale).length == 0) {
          return false;
        }
        return dataGroups.some(function(dataGroup) {
          return Object.keys(userProvidedScale).includes(dataGroup.name);
        });
      };
      ChartModel2.prototype.getColorClassName = function(configs) {
        var colorPairingTag = this.colorClassNames(configs.dataGroupName);
        var className = configs.originalClassName;
        configs.classNameTypes.forEach(function(type2) {
          return className = configs.originalClassName ? className + " " + type2 + "-" + colorPairingTag : type2 + "-" + colorPairingTag;
        });
        return className;
      };
      ChartModel2.prototype.getStatus = function() {
        return null;
      };
      ChartModel2.prototype.getAllDataGroupsNames = function() {
        return this.allDataGroups;
      };
      ChartModel2.prototype.transformToTabularData = function(data) {
        console.warn("We've updated the charting data format to be tabular by default. The current format you're using is deprecated and will be removed in v1.0, read more here https://carbon-design-system.github.io/carbon-charts/?path=/story/docs-tutorials--tabular-data-format");
        var tabularData = [];
        var datasets = data.datasets, labels = data.labels;
        datasets.forEach(function(dataset) {
          dataset.data.forEach(function(datum2, i) {
            var group;
            var datasetLabel = Tools.getProperty(dataset, "label");
            if (datasetLabel === null) {
              var correspondingLabel = Tools.getProperty(labels, i);
              if (correspondingLabel) {
                group = correspondingLabel;
              } else {
                group = "Ungrouped";
              }
            } else {
              group = datasetLabel;
            }
            var updatedDatum = {
              group,
              key: labels[i]
            };
            if (isNaN(datum2)) {
              updatedDatum["value"] = datum2.value;
              updatedDatum["date"] = datum2.date;
            } else {
              updatedDatum["value"] = datum2;
            }
            tabularData.push(updatedDatum);
          });
        });
        return tabularData;
      };
      ChartModel2.prototype.getTabularDataArray = function() {
        return [];
      };
      ChartModel2.prototype.exportToCSV = function() {
        var data = this.getTabularDataArray().map(function(row) {
          return row.map(function(column) {
            return '"' + column + '"';
          });
        });
        var csvString = "", csvData = "";
        data.forEach(function(d, i) {
          csvData = d.join(",");
          csvString += i < data.length ? csvData + "\n" : csvData;
        });
        this.services.files.downloadCSV(csvString, "myChart.csv");
      };
      ChartModel2.prototype.getTabularData = function(data) {
        if (!Array.isArray(data)) {
          return this.transformToTabularData(data);
        }
        return data;
      };
      ChartModel2.prototype.sanitize = function(data) {
        data = this.getTabularData(data);
        return data;
      };
      ChartModel2.prototype.updateAllDataGroups = function() {
        var _this = this;
        if (!this.allDataGroups) {
          this.allDataGroups = this.getDataGroupNames();
        } else {
          this.getDataGroupNames().forEach(function(dataGroupName) {
            if (_this.allDataGroups.indexOf(dataGroupName) === -1) {
              _this.allDataGroups.push(dataGroupName);
            }
          });
        }
      };
      ChartModel2.prototype.generateDataGroups = function(data) {
        var groupMapsTo = this.getOptions().data.groupMapsTo;
        var _a22 = legend$1.items.status, ACTIVE = _a22.ACTIVE, DISABLED = _a22.DISABLED;
        var options2 = this.getOptions();
        var uniqueDataGroups = Tools.removeArrayDuplicates(data.map(function(datum2) {
          return datum2[groupMapsTo];
        }));
        if (options2.data.selectedGroups.length) {
          var hasAllSelectedGroups = options2.data.selectedGroups.every(function(groupName) {
            return uniqueDataGroups.includes(groupName);
          });
          if (!hasAllSelectedGroups) {
            options2.data.selectedGroups = [];
          }
        }
        var getStatus = function(groupName) {
          return !options2.data.selectedGroups.length || options2.data.selectedGroups.includes(groupName) ? ACTIVE : DISABLED;
        };
        return uniqueDataGroups.map(function(groupName) {
          return {
            name: groupName,
            status: getStatus(groupName)
          };
        });
      };
      ChartModel2.prototype.setCustomColorScale = function() {
        var _this = this;
        if (!this.isUserProvidedColorScaleValid()) {
          return;
        }
        var options2 = this.getOptions();
        var userProvidedScale = Tools.getProperty(options2, "color", "scale");
        Object.keys(userProvidedScale).forEach(function(dataGroup) {
          if (!_this.allDataGroups.includes(dataGroup)) {
            console.warn('"' + dataGroup + '" does not exist in data groups.');
          }
        });
        var providedDataGroups = this.allDataGroups.filter(function(dataGroup) {
          return userProvidedScale[dataGroup];
        });
        providedDataGroups.forEach(function(dataGroup) {
          return _this.colorScale[dataGroup] = userProvidedScale[dataGroup];
        });
      };
      ChartModel2.prototype.setColorClassNames = function() {
        var colorPairingOptions = Tools.getProperty(this.getOptions(), "color", "pairing");
        var numberOfVariants = Tools.getProperty(colorPairingOptions, "numberOfVariants");
        if (!numberOfVariants || numberOfVariants < this.allDataGroups.length) {
          numberOfVariants = this.allDataGroups.length;
        }
        var pairingOption = Tools.getProperty(colorPairingOptions, "option");
        var colorPairingCounts = color2.pairingOptions;
        var numberOfColors = numberOfVariants > 5 ? 14 : numberOfVariants;
        pairingOption = pairingOption <= colorPairingCounts[numberOfColors + "-color"] ? pairingOption : 1;
        var colorPairing = this.allDataGroups.map(function(dataGroup, index5) {
          return numberOfColors + "-" + pairingOption + "-" + (index5 % 14 + 1);
        });
        this.colorClassNames = ordinal().range(colorPairing).domain(this.allDataGroups);
      };
      return ChartModel2;
    }();
    Service = function() {
      function Service2(model, services) {
        this.model = model;
        this.services = services;
        this.init();
      }
      Service2.prototype.init = function() {
      };
      Service2.prototype.update = function() {
      };
      Service2.prototype.setModel = function(newObj) {
        this.model = newObj;
      };
      Service2.prototype.setServices = function(newObj) {
        this.services = newObj;
      };
      return Service2;
    }();
    domToImage$1 = { exports: {} };
    (function(module2) {
      (function(global2) {
        var util = newUtil();
        var inliner = newInliner();
        var fontFaces = newFontFaces();
        var images = newImages();
        var defaultOptions = {
          imagePlaceholder: void 0,
          cacheBust: false
        };
        var domtoimage = {
          toSvg,
          toPng,
          toJpeg,
          toBlob,
          toPixelData,
          impl: {
            fontFaces,
            images,
            util,
            inliner,
            options: {}
          }
        };
        module2.exports = domtoimage;
        function toSvg(node, options2) {
          options2 = options2 || {};
          copyOptions(options2);
          return Promise.resolve(node).then(function(node2) {
            return cloneNode(node2, options2.filter, true);
          }).then(embedFonts).then(inlineImages).then(applyOptions).then(function(clone) {
            return makeSvgDataUri(clone, options2.width || util.width(node), options2.height || util.height(node));
          });
          function applyOptions(clone) {
            if (options2.bgcolor)
              clone.style.backgroundColor = options2.bgcolor;
            if (options2.width)
              clone.style.width = options2.width + "px";
            if (options2.height)
              clone.style.height = options2.height + "px";
            if (options2.style)
              Object.keys(options2.style).forEach(function(property2) {
                clone.style[property2] = options2.style[property2];
              });
            return clone;
          }
        }
        function toPixelData(node, options2) {
          return draw(node, options2 || {}).then(function(canvas) {
            return canvas.getContext("2d").getImageData(0, 0, util.width(node), util.height(node)).data;
          });
        }
        function toPng(node, options2) {
          return draw(node, options2 || {}).then(function(canvas) {
            return canvas.toDataURL();
          });
        }
        function toJpeg(node, options2) {
          options2 = options2 || {};
          return draw(node, options2).then(function(canvas) {
            return canvas.toDataURL("image/jpeg", options2.quality || 1);
          });
        }
        function toBlob(node, options2) {
          return draw(node, options2 || {}).then(util.canvasToBlob);
        }
        function copyOptions(options2) {
          if (typeof options2.imagePlaceholder === "undefined") {
            domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;
          } else {
            domtoimage.impl.options.imagePlaceholder = options2.imagePlaceholder;
          }
          if (typeof options2.cacheBust === "undefined") {
            domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;
          } else {
            domtoimage.impl.options.cacheBust = options2.cacheBust;
          }
        }
        function draw(domNode, options2) {
          return toSvg(domNode, options2).then(util.makeImage).then(util.delay(100)).then(function(image) {
            var canvas = newCanvas(domNode);
            canvas.getContext("2d").drawImage(image, 0, 0);
            return canvas;
          });
          function newCanvas(domNode2) {
            var canvas = document.createElement("canvas");
            canvas.width = options2.width || util.width(domNode2);
            canvas.height = options2.height || util.height(domNode2);
            if (options2.bgcolor) {
              var ctx = canvas.getContext("2d");
              ctx.fillStyle = options2.bgcolor;
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            }
            return canvas;
          }
        }
        function cloneNode(node, filter2, root3) {
          if (!root3 && filter2 && !filter2(node))
            return Promise.resolve();
          return Promise.resolve(node).then(makeNodeCopy).then(function(clone) {
            return cloneChildren(node, clone, filter2);
          }).then(function(clone) {
            return processClone(node, clone);
          });
          function makeNodeCopy(node2) {
            if (node2 instanceof HTMLCanvasElement)
              return util.makeImage(node2.toDataURL());
            return node2.cloneNode(false);
          }
          function cloneChildren(original, clone, filter22) {
            var children2 = original.childNodes;
            if (children2.length === 0)
              return Promise.resolve(clone);
            return cloneChildrenInOrder(clone, util.asArray(children2), filter22).then(function() {
              return clone;
            });
            function cloneChildrenInOrder(parent, children22, filter3) {
              var done = Promise.resolve();
              children22.forEach(function(child) {
                done = done.then(function() {
                  return cloneNode(child, filter3);
                }).then(function(childClone) {
                  if (childClone)
                    parent.appendChild(childClone);
                });
              });
              return done;
            }
          }
          function processClone(original, clone) {
            if (!(clone instanceof Element))
              return clone;
            return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function() {
              return clone;
            });
            function cloneStyle() {
              copyStyle(window.getComputedStyle(original), clone.style);
              function copyStyle(source, target) {
                if (source.cssText)
                  target.cssText = source.cssText;
                else
                  copyProperties(source, target);
                function copyProperties(source2, target2) {
                  util.asArray(source2).forEach(function(name) {
                    target2.setProperty(name, source2.getPropertyValue(name), source2.getPropertyPriority(name));
                  });
                }
              }
            }
            function clonePseudoElements() {
              [":before", ":after"].forEach(function(element) {
                clonePseudoElement(element);
              });
              function clonePseudoElement(element) {
                var style = window.getComputedStyle(original, element);
                var content = style.getPropertyValue("content");
                if (content === "" || content === "none")
                  return;
                var className = util.uid();
                clone.className = clone.className + " " + className;
                var styleElement = document.createElement("style");
                styleElement.appendChild(formatPseudoElementStyle(className, element, style));
                clone.appendChild(styleElement);
                function formatPseudoElementStyle(className2, element2, style2) {
                  var selector = "." + className2 + ":" + element2;
                  var cssText = style2.cssText ? formatCssText(style2) : formatCssProperties(style2);
                  return document.createTextNode(selector + "{" + cssText + "}");
                  function formatCssText(style3) {
                    var content2 = style3.getPropertyValue("content");
                    return style3.cssText + " content: " + content2 + ";";
                  }
                  function formatCssProperties(style3) {
                    return util.asArray(style3).map(formatProperty).join("; ") + ";";
                    function formatProperty(name) {
                      return name + ": " + style3.getPropertyValue(name) + (style3.getPropertyPriority(name) ? " !important" : "");
                    }
                  }
                }
              }
            }
            function copyUserInput() {
              if (original instanceof HTMLTextAreaElement)
                clone.innerHTML = original.value;
              if (original instanceof HTMLInputElement)
                clone.setAttribute("value", original.value);
            }
            function fixSvg() {
              if (!(clone instanceof SVGElement))
                return;
              clone.setAttribute("xmlns", "http://www.w3.org/2000/svg");
              if (!(clone instanceof SVGRectElement))
                return;
              ["width", "height"].forEach(function(attribute) {
                var value2 = clone.getAttribute(attribute);
                if (!value2)
                  return;
                clone.style.setProperty(attribute, value2);
              });
            }
          }
        }
        function embedFonts(node) {
          return fontFaces.resolveAll().then(function(cssText) {
            var styleNode = document.createElement("style");
            node.appendChild(styleNode);
            styleNode.appendChild(document.createTextNode(cssText));
            return node;
          });
        }
        function inlineImages(node) {
          return images.inlineAll(node).then(function() {
            return node;
          });
        }
        function makeSvgDataUri(node, width, height) {
          return Promise.resolve(node).then(function(node2) {
            node2.setAttribute("xmlns", "http://www.w3.org/1999/xhtml");
            return new XMLSerializer().serializeToString(node2);
          }).then(util.escapeXhtml).then(function(xhtml2) {
            return '<foreignObject x="0" y="0" width="100%" height="100%">' + xhtml2 + "</foreignObject>";
          }).then(function(foreignObject) {
            return '<svg xmlns="http://www.w3.org/2000/svg" width="' + width + '" height="' + height + '">' + foreignObject + "</svg>";
          }).then(function(svg) {
            return "data:image/svg+xml;charset=utf-8," + svg;
          });
        }
        function newUtil() {
          return {
            escape: escape2,
            parseExtension,
            mimeType,
            dataAsUrl,
            isDataUrl,
            canvasToBlob,
            resolveUrl,
            getAndEncode,
            uid: uid(),
            delay,
            asArray,
            escapeXhtml,
            makeImage,
            width,
            height
          };
          function mimes() {
            var WOFF = "application/font-woff";
            var JPEG = "image/jpeg";
            return {
              woff: WOFF,
              woff2: WOFF,
              ttf: "application/font-truetype",
              eot: "application/vnd.ms-fontobject",
              png: "image/png",
              jpg: JPEG,
              jpeg: JPEG,
              gif: "image/gif",
              tiff: "image/tiff",
              svg: "image/svg+xml"
            };
          }
          function parseExtension(url) {
            var match2 = /\.([^\.\/]*?)$/g.exec(url);
            if (match2)
              return match2[1];
            else
              return "";
          }
          function mimeType(url) {
            var extension = parseExtension(url).toLowerCase();
            return mimes()[extension] || "";
          }
          function isDataUrl(url) {
            return url.search(/^(data:)/) !== -1;
          }
          function toBlob2(canvas) {
            return new Promise(function(resolve) {
              var binaryString = window.atob(canvas.toDataURL().split(",")[1]);
              var length = binaryString.length;
              var binaryArray = new Uint8Array(length);
              for (var i = 0; i < length; i++)
                binaryArray[i] = binaryString.charCodeAt(i);
              resolve(new Blob([binaryArray], {
                type: "image/png"
              }));
            });
          }
          function canvasToBlob(canvas) {
            if (canvas.toBlob)
              return new Promise(function(resolve) {
                canvas.toBlob(resolve);
              });
            return toBlob2(canvas);
          }
          function resolveUrl(url, baseUrl) {
            var doc = document.implementation.createHTMLDocument();
            var base2 = doc.createElement("base");
            doc.head.appendChild(base2);
            var a2 = doc.createElement("a");
            doc.body.appendChild(a2);
            base2.href = baseUrl;
            a2.href = url;
            return a2.href;
          }
          function uid() {
            var index5 = 0;
            return function() {
              return "u" + fourRandomChars() + index5++;
              function fourRandomChars() {
                return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
              }
            };
          }
          function makeImage(uri) {
            return new Promise(function(resolve, reject) {
              var image = new Image();
              image.onload = function() {
                resolve(image);
              };
              image.onerror = reject;
              image.src = uri;
            });
          }
          function getAndEncode(url) {
            var TIMEOUT = 3e4;
            if (domtoimage.impl.options.cacheBust) {
              url += (/\?/.test(url) ? "&" : "?") + new Date().getTime();
            }
            return new Promise(function(resolve) {
              var request = new XMLHttpRequest();
              request.onreadystatechange = done;
              request.ontimeout = timeout2;
              request.responseType = "blob";
              request.timeout = TIMEOUT;
              request.open("GET", url, true);
              request.send();
              var placeholder;
              if (domtoimage.impl.options.imagePlaceholder) {
                var split = domtoimage.impl.options.imagePlaceholder.split(/,/);
                if (split && split[1]) {
                  placeholder = split[1];
                }
              }
              function done() {
                if (request.readyState !== 4)
                  return;
                if (request.status !== 200) {
                  if (placeholder) {
                    resolve(placeholder);
                  } else {
                    fail("cannot fetch resource: " + url + ", status: " + request.status);
                  }
                  return;
                }
                var encoder2 = new FileReader();
                encoder2.onloadend = function() {
                  var content = encoder2.result.split(/,/)[1];
                  resolve(content);
                };
                encoder2.readAsDataURL(request.response);
              }
              function timeout2() {
                if (placeholder) {
                  resolve(placeholder);
                } else {
                  fail("timeout of " + TIMEOUT + "ms occured while fetching resource: " + url);
                }
              }
              function fail(message) {
                console.error(message);
                resolve("");
              }
            });
          }
          function dataAsUrl(content, type2) {
            return "data:" + type2 + ";base64," + content;
          }
          function escape2(string) {
            return string.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
          }
          function delay(ms) {
            return function(arg) {
              return new Promise(function(resolve) {
                setTimeout(function() {
                  resolve(arg);
                }, ms);
              });
            };
          }
          function asArray(arrayLike) {
            var array4 = [];
            var length = arrayLike.length;
            for (var i = 0; i < length; i++)
              array4.push(arrayLike[i]);
            return array4;
          }
          function escapeXhtml(string) {
            return string.replace(/#/g, "%23").replace(/\n/g, "%0A");
          }
          function width(node) {
            var leftBorder = px(node, "border-left-width");
            var rightBorder = px(node, "border-right-width");
            return node.scrollWidth + leftBorder + rightBorder;
          }
          function height(node) {
            var topBorder = px(node, "border-top-width");
            var bottomBorder = px(node, "border-bottom-width");
            return node.scrollHeight + topBorder + bottomBorder;
          }
          function px(node, styleProperty) {
            var value2 = window.getComputedStyle(node).getPropertyValue(styleProperty);
            return parseFloat(value2.replace("px", ""));
          }
        }
        function newInliner() {
          var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;
          return {
            inlineAll,
            shouldProcess,
            impl: {
              readUrls,
              inline
            }
          };
          function shouldProcess(string) {
            return string.search(URL_REGEX) !== -1;
          }
          function readUrls(string) {
            var result = [];
            var match2;
            while ((match2 = URL_REGEX.exec(string)) !== null) {
              result.push(match2[1]);
            }
            return result.filter(function(url) {
              return !util.isDataUrl(url);
            });
          }
          function inline(string, url, baseUrl, get22) {
            return Promise.resolve(url).then(function(url2) {
              return baseUrl ? util.resolveUrl(url2, baseUrl) : url2;
            }).then(get22 || util.getAndEncode).then(function(data) {
              return util.dataAsUrl(data, util.mimeType(url));
            }).then(function(dataUrl) {
              return string.replace(urlAsRegex(url), "$1" + dataUrl + "$3");
            });
            function urlAsRegex(url2) {
              return new RegExp(`(url\\(['"]?)(` + util.escape(url2) + `)(['"]?\\))`, "g");
            }
          }
          function inlineAll(string, baseUrl, get22) {
            if (nothingToInline())
              return Promise.resolve(string);
            return Promise.resolve(string).then(readUrls).then(function(urls) {
              var done = Promise.resolve(string);
              urls.forEach(function(url) {
                done = done.then(function(string2) {
                  return inline(string2, url, baseUrl, get22);
                });
              });
              return done;
            });
            function nothingToInline() {
              return !shouldProcess(string);
            }
          }
        }
        function newFontFaces() {
          return {
            resolveAll,
            impl: {
              readAll
            }
          };
          function resolveAll() {
            return readAll().then(function(webFonts) {
              return Promise.all(webFonts.map(function(webFont) {
                return webFont.resolve();
              }));
            }).then(function(cssStrings) {
              return cssStrings.join("\n");
            });
          }
          function readAll() {
            return Promise.resolve(util.asArray(document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function(rules) {
              return rules.map(newWebFont);
            });
            function selectWebFontRules(cssRules) {
              return cssRules.filter(function(rule) {
                return rule.type === CSSRule.FONT_FACE_RULE;
              }).filter(function(rule) {
                return inliner.shouldProcess(rule.style.getPropertyValue("src"));
              });
            }
            function getCssRules(styleSheets) {
              var cssRules = [];
              styleSheets.forEach(function(sheet) {
                try {
                  util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
                } catch (e) {
                  console.log("Error while reading CSS rules from " + sheet.href, e.toString());
                }
              });
              return cssRules;
            }
            function newWebFont(webFontRule) {
              return {
                resolve: function resolve() {
                  var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                  return inliner.inlineAll(webFontRule.cssText, baseUrl);
                },
                src: function() {
                  return webFontRule.style.getPropertyValue("src");
                }
              };
            }
          }
        }
        function newImages() {
          return {
            inlineAll,
            impl: {
              newImage
            }
          };
          function newImage(element) {
            return {
              inline
            };
            function inline(get22) {
              if (util.isDataUrl(element.src))
                return Promise.resolve();
              return Promise.resolve(element.src).then(get22 || util.getAndEncode).then(function(data) {
                return util.dataAsUrl(data, util.mimeType(element.src));
              }).then(function(dataUrl) {
                return new Promise(function(resolve, reject) {
                  element.onload = resolve;
                  element.onerror = reject;
                  element.src = dataUrl;
                });
              });
            }
          }
          function inlineAll(node) {
            if (!(node instanceof Element))
              return Promise.resolve(node);
            return inlineBackground(node).then(function() {
              if (node instanceof HTMLImageElement)
                return newImage(node).inline();
              else
                return Promise.all(util.asArray(node.childNodes).map(function(child) {
                  return inlineAll(child);
                }));
            });
            function inlineBackground(node2) {
              var background = node2.style.getPropertyValue("background");
              if (!background)
                return Promise.resolve(node2);
              return inliner.inlineAll(background).then(function(inlined) {
                node2.style.setProperty("background", inlined, node2.style.getPropertyPriority("background"));
              }).then(function() {
                return node2;
              });
            }
          }
        }
      })();
    })(domToImage$1);
    domToImage = domToImage$1.exports;
    __extends$1y = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CSS_VERIFIER_ELEMENT_CLASSNAME = "DONT_STYLE_ME_css_styles_verifier";
    DOMUtils = function(_super) {
      __extends$1y(DOMUtils2, _super);
      function DOMUtils2(model, services) {
        return _super.call(this, model, services) || this;
      }
      DOMUtils2.getHTMLElementSize = function(element) {
        return {
          width: element.clientWidth,
          height: element.clientHeight
        };
      };
      DOMUtils2.getSVGElementSize = function(svgSelector, options2) {
        if (options2 === void 0) {
          options2 = {
            useAttrs: false,
            useClientDimensions: false,
            useBBox: false,
            useBoundingRect: false
          };
        }
        if (!svgSelector.attr) {
          svgSelector = select_default2(svgSelector);
        }
        var finalDimensions = {
          width: 0,
          height: 0
        };
        var validateAndSetDimensions = function(dimensions) {
          if (dimensions) {
            Object.keys(finalDimensions).forEach(function(dimensionKey) {
              if (dimensions[dimensionKey]) {
                var dimension = dimensions[dimensionKey];
                var dimensionNumber = parseFloat(dimension);
                if (dimension && dimensionNumber > finalDimensions[dimensionKey] && ("" + dimension).indexOf("%") === -1) {
                  finalDimensions[dimensionKey] = dimensionNumber;
                }
              }
            });
          }
        };
        var attrDimensions = {
          width: svgSelector.attr("width"),
          height: svgSelector.attr("height")
        };
        var bbox, bboxDimensions, boundingRect, boundingRectDimensions;
        try {
          bbox = svgSelector.node().getBBox();
          bboxDimensions = {
            width: bbox.width,
            height: bbox.height
          };
        } catch (e) {
        }
        try {
          boundingRect = svgSelector.node().getBoundingClientRect();
          boundingRectDimensions = {
            width: boundingRect.width,
            height: boundingRect.height
          };
        } catch (e) {
        }
        var clientDimensions = {
          width: svgSelector.node().clientWidth,
          height: svgSelector.node().clientHeight
        };
        if (options2) {
          if (options2.useAttrs) {
            validateAndSetDimensions(attrDimensions);
            if (finalDimensions.width > 0 && finalDimensions.height > 0) {
              return finalDimensions;
            }
          }
          if (options2.useClientDimensions) {
            validateAndSetDimensions(clientDimensions);
            if (finalDimensions.width > 0 && finalDimensions.height > 0) {
              return clientDimensions;
            }
          }
          if (options2.useBBox) {
            validateAndSetDimensions(bboxDimensions);
            if (finalDimensions.width > 0 && finalDimensions.height > 0) {
              return bboxDimensions;
            }
          }
          if (options2.useBoundingRect) {
            validateAndSetDimensions(boundingRectDimensions);
            if (finalDimensions.width > 0 && finalDimensions.height > 0) {
              return boundingRectDimensions;
            }
          }
        }
        try {
          var nativeDimensions = {
            width: Tools.getProperty(svgSelector.node(), "width", "baseVal", "value"),
            height: Tools.getProperty(svgSelector.node(), "height", "baseVal", "value")
          };
          validateAndSetDimensions(nativeDimensions);
        } catch (e) {
          validateAndSetDimensions(clientDimensions);
          validateAndSetDimensions(bboxDimensions);
          validateAndSetDimensions(attrDimensions);
        }
        return finalDimensions;
      };
      DOMUtils2.appendOrSelect = function(parent, query) {
        var selection2 = parent.select("" + query);
        if (selection2.empty()) {
          var querySections = query.split("#");
          var elementToAppend = void 0;
          var id2 = void 0;
          if (querySections.length === 2) {
            elementToAppend = querySections[0];
            querySections = querySections[1].split(".");
            id2 = querySections[0];
          } else {
            querySections = query.split(".");
            elementToAppend = querySections[0];
          }
          return parent.append(elementToAppend).attr("id", id2).attr("class", querySections.slice(1).join(" "));
        }
        return selection2;
      };
      DOMUtils2.prototype.init = function() {
        this.styleHolderElement();
        this.initializeID();
        this.addMainContainer();
        this.verifyCSSStylesBeingApplied();
        if (this.model.getOptions().resizable) {
          this.addResizeListener();
        }
        this.addHolderListeners();
        this.handleFullscreenChange();
      };
      DOMUtils2.prototype.getChartID = function() {
        return this.chartID;
      };
      DOMUtils2.prototype.generateElementIDString = function(originalID) {
        return "chart-" + this.chartID + "-" + originalID;
      };
      DOMUtils2.prototype.initializeID = function() {
        this.chartID = Math.floor((1 + Math.random()) * 281474976710656).toString(16);
      };
      DOMUtils2.prototype.addMainContainer = function() {
        var options2 = this.model.getOptions();
        var chartsprefix = Tools.getProperty(options2, "style", "prefix");
        var mainContainer = select_default2(this.getHolder()).append("div").classed(carbonPrefix + "--" + chartsprefix + "--chart-wrapper", true).attr("id", "chart-" + this.getChartID()).style("height", "100%").style("width", "100%");
        mainContainer.append("g").attr("class", CSS_VERIFIER_ELEMENT_CLASSNAME);
        this.mainContainer = mainContainer.node();
      };
      DOMUtils2.prototype.update = function() {
        this.styleHolderElement();
      };
      DOMUtils2.prototype.styleHolderElement = function() {
        var holderElement = this.getHolder();
        var _a22 = this.model.getOptions(), width = _a22.width, height = _a22.height, theme = _a22.theme;
        if (width !== this.width) {
          holderElement.style.width = width;
          this.width = width;
        }
        if (height !== this.height) {
          holderElement.style.height = height;
          this.height = height;
        }
        select_default2(this.getHolder()).classed(carbonPrefix + "--chart-holder", true).attr("data-carbon-theme", theme);
      };
      DOMUtils2.prototype.getHolder = function() {
        return this.model.get("holder");
      };
      DOMUtils2.prototype.exportToJPG = function() {
        var self2 = this;
        var holder = this.getHolder();
        var holderSelection = select_default2(holder);
        holderSelection.classed("filled", true);
        domToImage.toJpeg(this.getMainContainer(), {
          bgcolor: typeof window !== "undefined" ? window.getComputedStyle(holder).getPropertyValue("background-color") : void 0,
          quality: 1,
          filter: function(node) {
            if (node.classList && node.classList.contains("cds--cc--toolbar")) {
              return false;
            }
            return true;
          }
        }).then(function(dataUrl) {
          self2.services.files.downloadImage(dataUrl, "myChart.jpg");
          holderSelection.classed("filled", false);
        });
      };
      DOMUtils2.prototype.exportToPNG = function() {
        var self2 = this;
        var holder = this.getHolder();
        var holderSelection = select_default2(holder);
        holderSelection.classed("filled", true);
        domToImage.toPng(this.getMainContainer(), {
          bgcolor: typeof window !== "undefined" ? window.getComputedStyle(holder).getPropertyValue("background-color") : void 0,
          quality: 1,
          filter: function(node) {
            if (node.classList && node.classList.contains("cds--cc--toolbar")) {
              return false;
            }
            return true;
          }
        }).then(function(dataUrl) {
          self2.services.files.downloadImage(dataUrl, "myChart.png");
          holderSelection.classed("filled", false);
        }).catch(function(error2) {
          console.error("oops, something went wrong!", error2);
        });
      };
      DOMUtils2.prototype.toggleFullscreen = function() {
        var holder = this.getHolder();
        var holderSelection = select_default2(holder);
        var isFullScreen = holderSelection.classed("fullscreen");
        if (isFullScreen && (document.fullscreenElement || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"])) {
          if (document.exitFullscreen) {
            document.exitFullscreen();
          } else if (document["webkitExitFullscreen"]) {
            document["webkitExitFullscreen"]();
          } else if (document["mozCancelFullScreen"]) {
            document["mozCancelFullScreen"]();
          } else if (document["msExitFullscreen"]) {
            document["msExitFullscreen"]();
          }
        } else {
          if (holder.requestFullscreen) {
            holder.requestFullscreen();
          } else if (holder.webkitRequestFullscreen) {
            holder.webkitRequestFullscreen();
          } else if (holder.mozRequestFullScreen) {
            holder.mozRequestFullScreen();
          } else if (holder.msRequestFullscreen) {
            holder.msRequestFullscreen();
          }
        }
      };
      DOMUtils2.prototype.handleFullscreenChange = function() {
        var _this = this;
        document.addEventListener("fullscreenchange", function() {
          var holderSelection = select_default2(_this.getHolder());
          var isFullScreen = holderSelection.classed("fullscreen");
          holderSelection.classed("fullscreen", !isFullScreen);
        });
      };
      DOMUtils2.prototype.verifyCSSStylesBeingApplied = function() {
        var _this = this;
        setTimeout(function() {
          var cssVerifierElement = select_default2(_this.mainContainer).select("g." + CSS_VERIFIER_ELEMENT_CLASSNAME).node();
          var computedStyles = getComputedStyle(cssVerifierElement);
          if (computedStyles.getPropertyValue("overflow") !== "hidden" || computedStyles.getPropertyValue("opacity") !== "0") {
            console.error("Missing CSS styles for Carbon Charts. Please read the Carbon Charts getting started guide.");
          }
        });
      };
      DOMUtils2.prototype.setSVGMaxHeight = function() {
        if (!this.model.getOptions().height) {
          var chartHeight = DOMUtils2.getSVGElementSize(select_default2(this.mainContainer), { useBBox: true }).height;
          var chartSVGSelector = select_default2(this.mainContainer).attr("class");
          var children2 = select_default2(this.mainContainer).selectAll("." + chartSVGSelector + " > svg");
          var childrenHeight_1 = 0;
          children2.nodes().forEach(function(childSVG) {
            childrenHeight_1 += Number(DOMUtils2.getSVGElementSize(select_default2(childSVG), {
              useBBox: true
            }).height);
          });
          childrenHeight_1 <= chartHeight ? select_default2(this.mainContainer).attr("height", childrenHeight_1) : select_default2(this.mainContainer).attr("height", "100%");
        }
      };
      DOMUtils2.prototype.getMainContainer = function() {
        return this.mainContainer;
      };
      DOMUtils2.prototype.addHolderListeners = function() {
        var _this = this;
        var holder = this.getHolder();
        if (!holder) {
          return;
        }
        select_default2(holder).on("mouseover", function() {
          _this.services.events.dispatchEvent(Events$1.Chart.MOUSEOVER);
        }).on("mouseout", function() {
          _this.services.events.dispatchEvent(Events$1.Chart.MOUSEOUT);
        });
      };
      DOMUtils2.prototype.addResizeListener = function() {
        var _this = this;
        var holder = this.getHolder();
        if (!holder) {
          return;
        }
        var containerWidth = holder.clientWidth;
        var containerHeight = holder.clientHeight;
        var resizeCallback = Tools.debounce(function(entries, observer) {
          if (!holder) {
            return;
          }
          if (Math.abs(containerWidth - holder.clientWidth) > 1 || Math.abs(containerHeight - holder.clientHeight) > 1) {
            containerWidth = holder.clientWidth;
            containerHeight = holder.clientHeight;
            _this.services.events.dispatchEvent(Events$1.Chart.RESIZE);
          }
        }, 12.5);
        var resizeObserver = new ResizeObserver_es_default(resizeCallback);
        resizeObserver.observe(holder);
      };
      return DOMUtils2;
    }(Service);
    __extends$1x = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Events = function(_super) {
      __extends$1x(Events2, _super);
      function Events2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Events2.prototype.init = function() {
        this.documentFragment = document.createDocumentFragment();
      };
      Events2.prototype.addEventListener = function(type2, listener) {
        this.documentFragment.addEventListener(type2, listener);
      };
      Events2.prototype.removeEventListener = function(type2, listener) {
        this.documentFragment.removeEventListener(type2, listener);
      };
      Events2.prototype.dispatchEvent = function(eventType, eventDetail) {
        var newEvent;
        if (eventDetail) {
          newEvent = new CustomEvent(eventType, {
            detail: eventDetail
          });
        } else {
          newEvent = document.createEvent("Event");
          newEvent.initEvent(eventType, false, true);
        }
        this.documentFragment.dispatchEvent(newEvent);
      };
      return Events2;
    }(Service);
    __extends$1w = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Files = function(_super) {
      __extends$1w(Files2, _super);
      function Files2(model, services) {
        return _super.call(this, model, services) || this;
      }
      Files2.prototype.downloadCSV = function(content, filename) {
        var anchor = document.createElement("a");
        var mimeType = "text/csv;encoding:utf-8";
        if (navigator["msSaveBlob"]) {
          navigator["msSaveBlob"](new Blob([content], {
            type: mimeType
          }), filename);
        } else if (URL && "download" in anchor) {
          var href = URL.createObjectURL(new Blob([content], {
            type: mimeType
          }));
          anchor.href = href;
          anchor.setAttribute("download", filename);
          document.body.appendChild(anchor);
          anchor.click();
          document.body.removeChild(anchor);
          URL.revokeObjectURL(href);
        } else {
          location.href = "data:application/octet-stream," + encodeURIComponent(content);
        }
      };
      Files2.prototype.downloadImage = function(uri, name) {
        var link3 = document.createElement("a");
        link3.download = name;
        link3.href = uri;
        document.body.appendChild(link3);
        link3.click();
        document.body.removeChild(link3);
      };
      return Files2;
    }(Service);
    __extends$1v = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Transitions = function(_super) {
      __extends$1v(Transitions2, _super);
      function Transitions2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pendingTransitions = {};
        return _this;
      }
      Transitions2.prototype.init = function() {
        var _this = this;
        this.services.events.addEventListener(Events$1.Model.UPDATE, function() {
          _this.pendingTransitions = {};
        });
      };
      Transitions2.prototype.setupTransition = function(_a22) {
        var _this = this;
        var t = _a22.transition, name = _a22.name, animate = _a22.animate;
        this.pendingTransitions[t._id] = t;
        t.on("end interrupt cancel", function() {
          delete _this.pendingTransitions[t._id];
        });
        if (this.model.getOptions().animations === false || animate === false) {
          return t.duration(0);
        }
        return t.duration(Tools.getProperty(transitions, name, "duration") || transitions.default.duration);
      };
      Transitions2.prototype.getPendingTransitions = function() {
        return this.pendingTransitions;
      };
      return Transitions2;
    }(Service);
    __extends$1u = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    GradientUtils = function(_super) {
      __extends$1u(GradientUtils2, _super);
      function GradientUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GradientUtils2.appendOrUpdateLinearGradient = function(configs) {
        var lg = configs.svg.select("defs linearGradient#" + configs.id);
        if (lg.empty()) {
          lg = configs.svg.append("defs").append("linearGradient").attr("id", configs.id).attr("x1", configs.x1).attr("x2", configs.x2).attr("y1", configs.y1).attr("y2", configs.y2);
        }
        lg.selectAll("stop").remove();
        lg.selectAll("stop").data(configs.stops).enter().append("stop").attr("offset", function(d) {
          return d.offset;
        }).style("stop-color", function(d) {
          return d.color;
        }).style("stop-opacity", function(d) {
          return d.opacity;
        });
      };
      GradientUtils2.getOffsetRatio = function(domain) {
        var offsetRatio = (Math.abs(domain[1]) * 100 / Math.abs(domain[0] - domain[1])).toFixed(2) + "%";
        return offsetRatio;
      };
      GradientUtils2.getStops = function(domain, color22) {
        var need3Stops = domain[0] < 0 && domain[1] > 0;
        var stops = [
          {
            offset: "0%",
            color: color22,
            opacity: "0.6"
          },
          {
            offset: "80%",
            color: color22,
            opacity: "0"
          }
        ];
        if (need3Stops) {
          stops = [
            {
              offset: "0%",
              color: color22,
              opacity: "0.6"
            },
            {
              offset: GradientUtils2.getOffsetRatio(domain),
              color: color22,
              opacity: "0"
            },
            {
              offset: "100%",
              color: color22,
              opacity: "0.6"
            }
          ];
        }
        return stops;
      };
      return GradientUtils2;
    }(Service);
    __extends$1t = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __rest$1 = globalThis && globalThis.__rest || function(s2, e) {
      var t = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
          t[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
            t[p[i]] = s2[p[i]];
        }
      return t;
    };
    __spreadArrays$j = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    CartesianScales = function(_super) {
      __extends$1t(CartesianScales2, _super);
      function CartesianScales2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scaleTypes = {
          top: null,
          right: null,
          bottom: null,
          left: null
        };
        _this.scales = {
          top: null,
          right: null,
          bottom: null,
          left: null
        };
        return _this;
      }
      CartesianScales2.prototype.getDomainAxisPosition = function(_a22) {
        var _b = (_a22 === void 0 ? {} : _a22).datum, datum2 = _b === void 0 ? null : _b;
        var _c;
        if (this.dualAxes && datum2) {
          var options2 = this.model.getOptions();
          var groupMapsTo = options2.data.groupMapsTo;
          var axesOptions = Tools.getProperty(options2, "axes", this.secondaryDomainAxisPosition);
          var dataset = datum2[groupMapsTo];
          if (((_c = axesOptions) === null || _c === void 0 ? void 0 : _c.correspondingDatasets) && axesOptions.correspondingDatasets.includes(dataset)) {
            return this.secondaryDomainAxisPosition;
          }
        }
        return this.domainAxisPosition;
      };
      CartesianScales2.prototype.getRangeAxisPosition = function(_a22) {
        var _b = _a22 === void 0 ? {} : _a22, _c = _b.datum, datum2 = _c === void 0 ? null : _c, _d = _b.groups, groups = _d === void 0 ? null : _d;
        var _e;
        if (this.dualAxes) {
          var options2 = this.model.getOptions();
          var groupMapsTo = options2.data.groupMapsTo;
          var axisOptions = Tools.getProperty(options2, "axes", this.secondaryRangeAxisPosition);
          var dataset = void 0;
          if (datum2 !== null) {
            dataset = datum2[groupMapsTo];
          } else if (groups && groups.length > 0) {
            dataset = groups[0];
          }
          if (((_e = axisOptions) === null || _e === void 0 ? void 0 : _e.correspondingDatasets) && axisOptions.correspondingDatasets.includes(dataset)) {
            return this.secondaryRangeAxisPosition;
          }
        }
        return this.rangeAxisPosition;
      };
      CartesianScales2.prototype.getAxisOptions = function(position2) {
        return Tools.getProperty(this.model.getOptions(), "axes", position2);
      };
      CartesianScales2.prototype.getDomainAxisOptions = function() {
        var domainAxisPosition = this.getDomainAxisPosition();
        return this.getAxisOptions(domainAxisPosition);
      };
      CartesianScales2.prototype.getRangeAxisOptions = function() {
        var rangeAxisPosition = this.getRangeAxisPosition();
        return this.getAxisOptions(rangeAxisPosition);
      };
      CartesianScales2.prototype.getScaleLabel = function(position2) {
        var axisOptions = this.getAxisOptions(position2);
        var title = axisOptions.title;
        if (!title) {
          if (position2 === AxisPositions.BOTTOM || position2 === AxisPositions.TOP) {
            return "x-value";
          }
          return "y-value";
        }
        return title;
      };
      CartesianScales2.prototype.getDomainLabel = function() {
        return this.getScaleLabel(this.getDomainAxisPosition());
      };
      CartesianScales2.prototype.getRangeLabel = function() {
        return this.getScaleLabel(this.getRangeAxisPosition());
      };
      CartesianScales2.prototype.update = function(animate) {
        var _this = this;
        this.determineAxisDuality();
        this.findDomainAndRangeAxes();
        this.determineOrientation();
        var axisPositions = Object.keys(AxisPositions).map(function(axisPositionKey) {
          return AxisPositions[axisPositionKey];
        });
        axisPositions.forEach(function(axisPosition) {
          _this.scales[axisPosition] = _this.createScale(axisPosition);
        });
      };
      CartesianScales2.prototype.findDomainAndRangeAxes = function() {
        var verticalAxesPositions = this.findVerticalAxesPositions();
        var horizontalAxesPositions = this.findHorizontalAxesPositions();
        var domainAndRangeAxesPositions = this.findDomainAndRangeAxesPositions(verticalAxesPositions, horizontalAxesPositions);
        this.domainAxisPosition = domainAndRangeAxesPositions.primaryDomainAxisPosition;
        this.rangeAxisPosition = domainAndRangeAxesPositions.primaryRangeAxisPosition;
        if (this.isDualAxes()) {
          this.secondaryDomainAxisPosition = domainAndRangeAxesPositions.secondaryDomainAxisPosition;
          this.secondaryRangeAxisPosition = domainAndRangeAxesPositions.secondaryRangeAxisPosition;
        }
      };
      CartesianScales2.prototype.determineOrientation = function() {
        if ((this.rangeAxisPosition === AxisPositions.LEFT || this.rangeAxisPosition === AxisPositions.RIGHT) && (this.domainAxisPosition === AxisPositions.BOTTOM || this.domainAxisPosition === AxisPositions.TOP)) {
          this.orientation = CartesianOrientations.VERTICAL;
        } else {
          this.orientation = CartesianOrientations.HORIZONTAL;
        }
      };
      CartesianScales2.prototype.isDualAxes = function() {
        return this.dualAxes;
      };
      CartesianScales2.prototype.determineAxisDuality = function() {
        var _a22, _b, _c, _d;
        var options2 = this.model.getOptions();
        var axesOptions = Tools.getProperty(options2, "axes");
        if (((_a22 = axesOptions[AxisPositions.LEFT]) === null || _a22 === void 0 ? void 0 : _a22.correspondingDatasets) && axesOptions[AxisPositions.RIGHT] || ((_b = axesOptions[AxisPositions.RIGHT]) === null || _b === void 0 ? void 0 : _b.correspondingDatasets) && axesOptions[AxisPositions.LEFT] || ((_c = axesOptions[AxisPositions.TOP]) === null || _c === void 0 ? void 0 : _c.correspondingDatasets) && axesOptions[AxisPositions.BOTTOM] || ((_d = axesOptions[AxisPositions.BOTTOM]) === null || _d === void 0 ? void 0 : _d.correspondingDatasets) && axesOptions[AxisPositions.TOP]) {
          this.dualAxes = true;
        }
      };
      CartesianScales2.prototype.getCustomDomainValuesByposition = function(axisPosition) {
        var domain = Tools.getProperty(this.model.getOptions(), "axes", axisPosition, "domain");
        if (domain && !Array.isArray(domain)) {
          throw new Error("Domain in " + axisPosition + " axis is not a valid array");
        }
        if (Array.isArray(domain)) {
          if ((this.scaleTypes[axisPosition] === ScaleTypes.LINEAR || this.scaleTypes[axisPosition] === ScaleTypes.TIME) && domain.length !== 2) {
            throw new Error("There can only be 2 elements in domain for scale type: " + this.scaleTypes[axisPosition]);
          }
        }
        return domain;
      };
      CartesianScales2.prototype.getOrientation = function() {
        return this.orientation;
      };
      CartesianScales2.prototype.getScaleByPosition = function(axisPosition) {
        return this.scales[axisPosition];
      };
      CartesianScales2.prototype.getScaleTypeByPosition = function(axisPosition) {
        return this.scaleTypes[axisPosition];
      };
      CartesianScales2.prototype.getDomainAxisScaleType = function() {
        var domainAxisPosition = this.getDomainAxisPosition();
        return this.getScaleTypeByPosition(domainAxisPosition);
      };
      CartesianScales2.prototype.getRangeAxisScaleType = function() {
        var rangeAxisPosition = this.getRangeAxisPosition();
        return this.getScaleTypeByPosition(rangeAxisPosition);
      };
      CartesianScales2.prototype.getDomainScale = function() {
        return this.scales[this.domainAxisPosition];
      };
      CartesianScales2.prototype.getRangeScale = function() {
        return this.scales[this.rangeAxisPosition];
      };
      CartesianScales2.prototype.getMainXAxisPosition = function() {
        var possibleXAxisPositions = [
          AxisPositions.BOTTOM,
          AxisPositions.TOP
        ];
        return [this.domainAxisPosition, this.rangeAxisPosition].find(function(position2) {
          return possibleXAxisPositions.indexOf(position2) > -1;
        });
      };
      CartesianScales2.prototype.getMainYAxisPosition = function() {
        var possibleYAxisPositions = [
          AxisPositions.LEFT,
          AxisPositions.RIGHT
        ];
        return [this.domainAxisPosition, this.rangeAxisPosition].find(function(position2) {
          return possibleYAxisPositions.indexOf(position2) > -1;
        });
      };
      CartesianScales2.prototype.getMainXScale = function() {
        return this.scales[this.getMainXAxisPosition()];
      };
      CartesianScales2.prototype.getMainYScale = function() {
        return this.scales[this.getMainYAxisPosition()];
      };
      CartesianScales2.prototype.getValueFromScale = function(scale, scaleType, axisPosition, datum2, index5) {
        var options2 = this.model.getOptions();
        var axesOptions = Tools.getProperty(options2, "axes");
        var axisOptions = axesOptions[axisPosition];
        var mapsTo = axisOptions.mapsTo;
        var value2 = Tools.getProperty(datum2, mapsTo) !== null ? datum2[mapsTo] : datum2;
        var scaledValue;
        switch (scaleType) {
          case ScaleTypes.LABELS:
            scaledValue = scale(value2) + scale.step() / 2;
            break;
          case ScaleTypes.TIME:
            scaledValue = scale(new Date(value2));
            break;
          default:
            scaledValue = scale(value2);
        }
        return scaledValue;
      };
      CartesianScales2.prototype.getBoundedScaledValues = function(datum2, index5) {
        var bounds = this.model.getOptions().bounds;
        var axisPosition = this.getRangeAxisPosition({ datum: datum2 });
        var scale = this.scales[axisPosition];
        var options2 = this.model.getOptions();
        var axesOptions = Tools.getProperty(options2, "axes");
        var axisOptions = axesOptions[axisPosition];
        var mapsTo = axisOptions.mapsTo;
        var value2 = datum2[mapsTo] !== void 0 ? datum2[mapsTo] : datum2;
        var boundedValues = [
          scale(Tools.getProperty(datum2, bounds.upperBoundMapsTo) !== null ? datum2[bounds.upperBoundMapsTo] : value2),
          scale(Tools.getProperty(datum2, bounds.lowerBoundMapsTo) !== null ? datum2[bounds.lowerBoundMapsTo] : value2)
        ];
        return boundedValues;
      };
      CartesianScales2.prototype.getValueThroughAxisPosition = function(axisPosition, datum2, index5) {
        var scaleType = this.scaleTypes[axisPosition];
        var scale = this.scales[axisPosition];
        return this.getValueFromScale(scale, scaleType, axisPosition, datum2, index5);
      };
      CartesianScales2.prototype.getDomainValue = function(d, i) {
        var axisPosition = this.getDomainAxisPosition({ datum: d });
        return this.getValueThroughAxisPosition(axisPosition, d, i);
      };
      CartesianScales2.prototype.getRangeValue = function(d, i) {
        var axisPosition = this.getRangeAxisPosition({ datum: d });
        return this.getValueThroughAxisPosition(axisPosition, d, i);
      };
      CartesianScales2.prototype.getMainXScaleType = function() {
        return this.getScaleTypeByPosition(this.getMainXAxisPosition());
      };
      CartesianScales2.prototype.getMainYScaleType = function() {
        return this.getScaleTypeByPosition(this.getMainYAxisPosition());
      };
      CartesianScales2.prototype.getDomainIdentifier = function(datum2) {
        var options2 = this.model.getOptions();
        return Tools.getProperty(options2, "axes", this.getDomainAxisPosition({ datum: datum2 }), "mapsTo");
      };
      CartesianScales2.prototype.getRangeIdentifier = function(datum2) {
        var options2 = this.model.getOptions();
        return Tools.getProperty(options2, "axes", this.getRangeAxisPosition({ datum: datum2 }), "mapsTo");
      };
      CartesianScales2.prototype.extendsDomain = function(axisPosition, domain) {
        var options2 = this.model.getOptions();
        var axisOptions = Tools.getProperty(options2, "axes", axisPosition);
        if (axisOptions.scaleType === ScaleTypes.TIME) {
          var spaceToAddToEdges = Tools.getProperty(options2, "timeScale", "addSpaceOnEdges");
          return addSpacingToTimeDomain(domain, spaceToAddToEdges);
        } else {
          return addSpacingToContinuousDomain(domain, axis2.paddingRatio, axisOptions.scaleType);
        }
      };
      CartesianScales2.prototype.findVerticalAxesPositions = function() {
        var options2 = this.model.getOptions();
        var axesOptions = Tools.getProperty(options2, "axes");
        var dualAxes = this.isDualAxes();
        if (Tools.getProperty(axesOptions, AxisPositions.LEFT) === null && Tools.getProperty(axesOptions, AxisPositions.RIGHT) !== null || Tools.getProperty(axesOptions, AxisPositions.RIGHT, "main") === true || dualAxes && Tools.getProperty(axesOptions, AxisPositions.LEFT, "correspondingDatasets")) {
          return {
            primary: AxisPositions.RIGHT,
            secondary: AxisPositions.LEFT
          };
        }
        return { primary: AxisPositions.LEFT, secondary: AxisPositions.RIGHT };
      };
      CartesianScales2.prototype.findHorizontalAxesPositions = function() {
        var options2 = this.model.getOptions();
        var axesOptions = Tools.getProperty(options2, "axes");
        var dualAxes = this.isDualAxes();
        if (Tools.getProperty(axesOptions, AxisPositions.BOTTOM) === null && Tools.getProperty(axesOptions, AxisPositions.TOP) !== null || Tools.getProperty(axesOptions, AxisPositions.TOP, "main") === true || dualAxes && Tools.getProperty(axesOptions, AxisPositions.BOTTOM, "correspondingDatasets")) {
          return {
            primary: AxisPositions.TOP,
            secondary: AxisPositions.BOTTOM
          };
        }
        return { primary: AxisPositions.BOTTOM, secondary: AxisPositions.TOP };
      };
      CartesianScales2.prototype.findDomainAndRangeAxesPositions = function(verticalAxesPositions, horizontalAxesPositions) {
        var options2 = this.model.getOptions();
        var mainVerticalAxisOptions = Tools.getProperty(options2, "axes", verticalAxesPositions.primary);
        var mainHorizontalAxisOptions = Tools.getProperty(options2, "axes", horizontalAxesPositions.primary);
        var mainVerticalScaleType = mainVerticalAxisOptions.scaleType || ScaleTypes.LINEAR;
        var mainHorizontalScaleType = mainHorizontalAxisOptions.scaleType || ScaleTypes.LINEAR;
        var result = {
          primaryDomainAxisPosition: null,
          secondaryDomainAxisPosition: null,
          primaryRangeAxisPosition: null,
          secondaryRangeAxisPosition: null
        };
        result.primaryDomainAxisPosition = horizontalAxesPositions.primary;
        result.primaryRangeAxisPosition = verticalAxesPositions.primary;
        result.secondaryDomainAxisPosition = horizontalAxesPositions.secondary;
        result.secondaryRangeAxisPosition = verticalAxesPositions.secondary;
        if (!(mainHorizontalScaleType === ScaleTypes.LABELS || mainHorizontalScaleType === ScaleTypes.TIME) && mainVerticalScaleType === ScaleTypes.LABELS || mainVerticalScaleType === ScaleTypes.TIME) {
          result.primaryDomainAxisPosition = verticalAxesPositions.primary;
          result.primaryRangeAxisPosition = horizontalAxesPositions.primary;
          result.secondaryDomainAxisPosition = verticalAxesPositions.secondary;
          result.secondaryRangeAxisPosition = horizontalAxesPositions.secondary;
        }
        return result;
      };
      CartesianScales2.prototype.getScaleDomain = function(axisPosition) {
        var options2 = this.model.getOptions();
        var axisOptions = Tools.getProperty(options2, "axes", axisPosition);
        var bounds = Tools.getProperty(options2, "bounds");
        var includeZero = axisOptions.includeZero;
        var scaleType = Tools.getProperty(axisOptions, "scaleType") || ScaleTypes.LINEAR;
        if (this.model.isDataEmpty()) {
          return [];
        }
        if (axisOptions.binned) {
          var bins = this.model.getBinConfigurations().bins;
          return [0, max(bins, function(d) {
            return d.length;
          })];
        } else if (axisOptions.limitDomainToBins) {
          var bins = this.model.getBinConfigurations().bins;
          var stackKeys = this.model.getStackKeys({ bins });
          return [
            stackKeys[0].split("-")[0],
            stackKeys[stackKeys.length - 1].split("-")[1]
          ];
        }
        var displayData = this.model.getDisplayData();
        var extendLinearDomainBy = axisOptions.extendLinearDomainBy, mapsTo = axisOptions.mapsTo, percentage = axisOptions.percentage, thresholds = axisOptions.thresholds;
        var _a22 = axis2.ratio, ratioReference = _a22.reference, ratioCompareTo = _a22.compareTo;
        if (axisOptions.domain) {
          if (scaleType === ScaleTypes.LABELS) {
            return axisOptions.domain;
          } else if (scaleType === ScaleTypes.TIME) {
            axisOptions.domain = axisOptions.domain.map(function(d) {
              return d.getTime === void 0 ? new Date(d) : d;
            });
          }
          return this.extendsDomain(axisPosition, axisOptions.domain);
        }
        if (percentage) {
          return [0, 100];
        }
        if (axisOptions && scaleType === ScaleTypes.LABELS) {
          return Tools.removeArrayDuplicates(displayData.map(function(d) {
            return d[mapsTo];
          }));
        }
        var domain;
        var allDataValues;
        var dataGroupNames = this.model.getDataGroupNames();
        if (scaleType === ScaleTypes.LABELS_RATIO) {
          return displayData.map(function(datum2) {
            return datum2[ratioReference] + "/" + datum2[ratioCompareTo];
          });
        } else if (scaleType === ScaleTypes.TIME) {
          allDataValues = displayData.map(function(datum2) {
            return +new Date(datum2[mapsTo]);
          });
        } else if (bounds && options2.axes) {
          allDataValues = [];
          displayData.forEach(function(datum2) {
            allDataValues.push(datum2[mapsTo]);
            if (datum2[bounds.upperBoundMapsTo]) {
              allDataValues.push(datum2[bounds.upperBoundMapsTo]);
            }
            if (datum2[bounds.lowerBoundMapsTo]) {
              allDataValues.push(datum2[bounds.lowerBoundMapsTo]);
            }
          });
        } else if (axisOptions.stacked === true && dataGroupNames && axisPosition === this.getRangeAxisPosition()) {
          var groupMapsTo_1 = options2.data.groupMapsTo;
          var dataValuesGroupedByKeys = this.model.getDataValuesGroupedByKeys({
            groups: dataGroupNames
          });
          var nonStackedGroupsData = displayData.filter(function(datum2) {
            return !dataGroupNames.includes(datum2[groupMapsTo_1]);
          });
          var stackedValues_1 = [];
          dataValuesGroupedByKeys.forEach(function(dataValues) {
            dataValues.sharedStackKey;
            var numericalValues = __rest$1(dataValues, ["sharedStackKey"]);
            var positiveSum = 0, negativeSum = 0;
            Object.values(numericalValues).forEach(function(value2) {
              if (!isNaN(value2)) {
                if (value2 < 0) {
                  negativeSum += value2;
                } else {
                  positiveSum += value2;
                }
              }
            });
            stackedValues_1.push([negativeSum, positiveSum]);
          });
          allDataValues = __spreadArrays$j(Tools.flatten(stackedValues_1), nonStackedGroupsData.map(function(datum2) {
            return datum2[mapsTo];
          }));
        } else {
          allDataValues = [];
          displayData.forEach(function(datum2) {
            var value2 = datum2[mapsTo];
            if (Array.isArray(value2) && value2.length === 2) {
              allDataValues.push(value2[0]);
              allDataValues.push(value2[1]);
            } else {
              if (extendLinearDomainBy) {
                allDataValues.push(Math.max(datum2[mapsTo], datum2[extendLinearDomainBy]));
              }
              allDataValues.push(value2);
            }
          });
        }
        if (scaleType !== ScaleTypes.TIME && scaleType !== ScaleTypes.LOG && includeZero) {
          allDataValues.push(0);
        }
        if (thresholds && thresholds.length > 0) {
          thresholds.forEach(function(threshold) {
            var thresholdValue = Tools.getProperty(threshold, "value");
            if (thresholdValue !== null)
              allDataValues.push(thresholdValue);
          });
        }
        domain = extent(allDataValues);
        domain = this.extendsDomain(axisPosition, domain);
        return domain;
      };
      CartesianScales2.prototype.createScale = function(axisPosition) {
        var options2 = this.model.getOptions();
        var axisOptions = Tools.getProperty(options2, "axes", axisPosition);
        if (!axisOptions) {
          return null;
        }
        var scaleType = Tools.getProperty(axisOptions, "scaleType") || ScaleTypes.LINEAR;
        this.scaleTypes[axisPosition] = scaleType;
        var scale;
        if (scaleType === ScaleTypes.TIME) {
          scale = time();
        } else if (scaleType === ScaleTypes.LOG) {
          scale = log().base(axisOptions.base || 10);
        } else if (scaleType === ScaleTypes.LABELS || scaleType === ScaleTypes.LABELS_RATIO) {
          scale = band();
        } else {
          scale = linear3();
        }
        scale.domain(this.getScaleDomain(axisPosition));
        return scale;
      };
      CartesianScales2.prototype.getHighestDomainThreshold = function() {
        var axesOptions = Tools.getProperty(this.model.getOptions(), "axes");
        var domainAxisPosition = this.getDomainAxisPosition();
        var thresholds = axesOptions[domainAxisPosition].thresholds;
        if (!Array.isArray(thresholds) || Array.isArray(thresholds) && !thresholds.length) {
          return null;
        }
        var domainScale = this.getDomainScale();
        var highestThreshold = thresholds.sort(function(a2, b) {
          return b.value - a2.value;
        })[0];
        var scaleType = this.getScaleTypeByPosition(domainAxisPosition);
        if (scaleType === ScaleTypes.TIME && (typeof highestThreshold.value === "string" || highestThreshold.value.getTime === void 0)) {
          highestThreshold.value = new Date(highestThreshold.value);
        }
        return {
          threshold: highestThreshold,
          scaleValue: domainScale(highestThreshold.value)
        };
      };
      CartesianScales2.prototype.getHighestRangeThreshold = function() {
        var axesOptions = Tools.getProperty(this.model.getOptions(), "axes");
        var rangeAxisPosition = this.getRangeAxisPosition();
        var thresholds = axesOptions[rangeAxisPosition].thresholds;
        if (!Array.isArray(thresholds) || Array.isArray(thresholds) && !thresholds.length) {
          return null;
        }
        var rangeScale = this.getRangeScale();
        var highestThreshold = thresholds.sort(function(a2, b) {
          return b.value - a2.value;
        })[0];
        return {
          threshold: highestThreshold,
          scaleValue: rangeScale(highestThreshold.value)
        };
      };
      return CartesianScales2;
    }(Service);
    __extends$1s = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Curves = function(_super) {
      __extends$1s(Curves2, _super);
      function Curves2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.curveTypes = {
          curveLinear: linear_default,
          curveLinearClosed: linearClosed_default,
          curveBasis: basis_default2,
          curveBasisClosed: basisClosed_default2,
          curveBasisOpen: basisOpen_default,
          curveBundle: bundle_default,
          curveCardinal: cardinal_default,
          curveCardinalClosed: cardinalClosed_default,
          curveCardinalOpen: cardinalOpen_default,
          curveCatmullRom: catmullRom_default,
          curveCatmullRomClosed: catmullRomClosed_default,
          curveCatmullRomOpen: catmullRomOpen_default,
          curveMonotoneX: monotoneX,
          curveMonotoneY: monotoneY,
          curveNatural: natural_default,
          curveStep: step_default,
          curveStepAfter: stepAfter,
          curveStepBefore: stepBefore
        };
        return _this;
      }
      Curves2.prototype.getD3Curve = function() {
        var curveName = "curveLinear";
        var curveOptions = this.model.getOptions().curve;
        if (curveOptions) {
          if (typeof curveOptions === "string") {
            curveName = curveOptions;
          } else {
            curveName = curveOptions.name;
          }
        }
        if (this.curveTypes[curveName]) {
          var curve_1 = this.curveTypes[curveName];
          if (curveOptions) {
            Object.keys(curveOptions).forEach(function(optionName) {
              if (curve_1[optionName]) {
                curve_1 = curve_1[optionName](curveOptions[optionName]);
              }
            });
          }
          return curve_1;
        }
        console.warn("The curve type '" + curveName + "' is invalid, using 'curveLinear' instead");
        return this.curveTypes["curveLinear"];
      };
      return Curves2;
    }(Service);
    __extends$1r = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Zoom = function(_super) {
      __extends$1r(Zoom2, _super);
      function Zoom2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Zoom2.prototype.isZoomBarEnabled = function() {
        if (!this.services.cartesianScales) {
          return false;
        }
        if (!Tools.getProperty(this.model.getOptions(), "zoomBar", "top", "enabled")) {
          return false;
        }
        this.services.cartesianScales.findDomainAndRangeAxes();
        var mainXAxisPosition = this.services.cartesianScales.getMainXAxisPosition();
        var mainXScaleType = Tools.getProperty(this.model.getOptions(), "axes", mainXAxisPosition, "scaleType");
        return mainXAxisPosition === AxisPositions.BOTTOM && mainXScaleType === ScaleTypes.TIME;
      };
      Zoom2.prototype.getZoomBarData = function() {
        var customZoomBarData = this.model.getZoomBarData();
        if (customZoomBarData && customZoomBarData.length > 1) {
          return customZoomBarData;
        } else {
          return this.model.getDisplayData();
        }
      };
      Zoom2.prototype.getDefaultZoomBarDomain = function(zoomBarData) {
        var allZoomBarData = zoomBarData || this.services.zoom.getZoomBarData();
        var cartesianScales = this.services.cartesianScales;
        var mainXAxisPosition = cartesianScales.getMainXAxisPosition();
        var domainIdentifier = cartesianScales.getDomainIdentifier();
        var customDomain = Tools.getProperty(this.model.getOptions(), "axes", mainXAxisPosition, "domain");
        if (Array.isArray(customDomain) && customDomain.length === 2) {
          return customDomain;
        }
        return cartesianScales.extendsDomain(mainXAxisPosition, extent(allZoomBarData, function(d) {
          return d[domainIdentifier];
        }));
      };
      Zoom2.prototype.handleDomainChange = function(newDomain, configs) {
        if (configs === void 0) {
          configs = { dispatchEvent: true };
        }
        this.model.set({ zoomDomain: newDomain }, { animate: false });
        if (configs.dispatchEvent) {
          this.services.events.dispatchEvent(Events$1.ZoomDomain.CHANGE, {
            newDomain
          });
        }
      };
      Zoom2.prototype.getZoomRatio = function() {
        return Tools.getProperty(this.model.getOptions(), "zoomBar", "zoomRatio");
      };
      Zoom2.prototype.filterDataForRangeAxis = function(displayData, configs) {
        var zoomDomain = this.model.get("zoomDomain");
        var mergedConfigs = Object.assign(
          { stacked: false },
          configs
        );
        var shouldUpdateRangeAxis = Tools.getProperty(this.model.getOptions(), "zoomBar", "updateRangeAxis");
        if (this.isZoomBarEnabled() && shouldUpdateRangeAxis && zoomDomain) {
          var domainIdentifier_1 = mergedConfigs.stacked ? "sharedStackKey" : this.services.cartesianScales.getDomainIdentifier();
          var filteredData = displayData.filter(function(datum2) {
            return new Date(datum2[domainIdentifier_1]) >= zoomDomain[0] && new Date(datum2[domainIdentifier_1]) <= zoomDomain[1];
          });
          if (filteredData.length > 0) {
            return filteredData;
          }
        }
        return displayData;
      };
      Zoom2.prototype.zoomIn = function(zoomRatio) {
        if (zoomRatio === void 0) {
          zoomRatio = this.getZoomRatio();
        }
        var currentZoomDomain = this.model.get("zoomDomain");
        var handleWidth = zoomBar.handleWidth;
        var xScale = this.services.cartesianScales.getMainXScale().copy();
        xScale.domain(this.getDefaultZoomBarDomain());
        var currentX0 = xScale(currentZoomDomain[0]);
        var currentX1 = xScale(currentZoomDomain[1]);
        if (currentX1 - currentX0 < handleWidth + 1) {
          return;
        }
        var fullRange = xScale.range();
        var gap = currentX1 - currentX0;
        var diff = Math.min((fullRange[1] - fullRange[0]) / 2 * (zoomRatio / 2), gap / 2);
        var newX0 = currentX0 + diff;
        var newX1 = currentX1 - diff;
        if (newX0 >= newX1) {
          newX0 = currentX0 + gap / 2 - handleWidth / 2;
          newX1 = currentX1 - gap / 2 + handleWidth / 2;
        }
        var newDomain = [xScale.invert(newX0), xScale.invert(newX1)];
        if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() || currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {
          this.handleDomainChange(newDomain);
        }
      };
      Zoom2.prototype.zoomOut = function(zoomRatio) {
        if (zoomRatio === void 0) {
          zoomRatio = this.getZoomRatio();
        }
        var currentZoomDomain = this.model.get("zoomDomain");
        var xScale = this.services.cartesianScales.getMainXScale().copy();
        xScale.domain(this.getDefaultZoomBarDomain());
        var currentX0 = xScale(currentZoomDomain[0]);
        var currentX1 = xScale(currentZoomDomain[1]);
        var fullRange = xScale.range();
        var diff = (fullRange[1] - fullRange[0]) / 2 * (zoomRatio / 2);
        var newX0 = Math.max(currentX0 - diff, fullRange[0]);
        var newX1 = Math.min(currentX1 + diff, fullRange[1]);
        var newDomain = [xScale.invert(newX0), xScale.invert(newX1)];
        if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() || currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {
          this.handleDomainChange(newDomain);
        }
      };
      Zoom2.prototype.resetZoomDomain = function() {
        var currentZoomDomain = this.model.get("zoomDomain");
        var newDomain = this.getDefaultZoomBarDomain();
        if (currentZoomDomain[0].valueOf() !== newDomain[0].valueOf() || currentZoomDomain[1].valueOf() !== newDomain[1].valueOf()) {
          this.handleDomainChange(newDomain);
        }
      };
      Zoom2.prototype.isMinZoomDomain = function() {
        var currentZoomDomain = this.model.get("zoomDomain");
        var maxZoomDomain = this.getDefaultZoomBarDomain();
        if (!currentZoomDomain || !maxZoomDomain) {
          return false;
        }
        var currentZoomDomainPeriod = currentZoomDomain[1].valueOf() - currentZoomDomain[0].valueOf();
        var maxZoomDomainPeriod = maxZoomDomain[1].valueOf() - maxZoomDomain[0].valueOf();
        var minZoomRatio = Tools.getProperty(this.model.getOptions(), "zoomBar", "minZoomRatio");
        if (currentZoomDomainPeriod / maxZoomDomainPeriod < minZoomRatio) {
          return true;
        }
        return false;
      };
      Zoom2.prototype.isMaxZoomDomain = function() {
        var currentZoomDomain = this.model.get("zoomDomain");
        var maxZoomDomain = this.getDefaultZoomBarDomain();
        if (currentZoomDomain && maxZoomDomain && currentZoomDomain[0].valueOf() === maxZoomDomain[0].valueOf() && currentZoomDomain[1].valueOf() === maxZoomDomain[1].valueOf()) {
          return true;
        }
        return false;
      };
      Zoom2.prototype.isEmptyState = function() {
        return this.getZoomBarData().length === 0;
      };
      Zoom2.prototype.isZoomBarLoading = function(position2) {
        return Tools.getProperty(this.model.getOptions(), "zoomBar", position2, "loading");
      };
      Zoom2.prototype.isZoomBarLocked = function(position2) {
        return Tools.getProperty(this.model.getOptions(), "zoomBar", position2, "locked");
      };
      return Zoom2;
    }(Service);
    __extends$1q = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CanvasZoom = function(_super) {
      __extends$1q(CanvasZoom2, _super);
      function CanvasZoom2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CanvasZoom2.prototype.zoomIn = function(focal, canvasElements, zoomSettings) {
        var x3;
        var y3;
        var zoomLevel;
        var settings2 = zoomSettings ? zoomSettings : canvasZoomSettings;
        if (focal) {
          x3 = focal.x;
          y3 = focal.y;
          zoomLevel = 2;
        }
        var _a22 = DOMUtils.getSVGElementSize(this.services.domUtils.getHolder(), {
          useClientDimensions: true
        }), width = _a22.width, height = _a22.height;
        canvasElements.transition().duration(settings2.duration).ease(settings2.ease).attr("transform", "translate(" + width / 2 + ", " + height / 2 + ") scale(" + zoomLevel + ") translate(" + -x3 + "," + -y3 + ")");
        this.services.events.dispatchEvent(Events$1.CanvasZoom.CANVAS_ZOOM_IN, {
          element: select_default2(focal)
        });
      };
      CanvasZoom2.prototype.zoomOut = function(canvasElements, zoomSettings) {
        var settings2 = zoomSettings ? zoomSettings : canvasZoomSettings;
        canvasElements.transition().duration(settings2.duration).ease(settings2.ease).attr("transform", "");
        this.services.events.dispatchEvent(Events$1.CanvasZoom.CANVAS_ZOOM_OUT);
      };
      return CanvasZoom2;
    }(Service);
    Component = function() {
      function Component2(model, services, configs) {
        this.renderType = RenderTypes.HTML;
        this.configs = {};
        this.model = model;
        this.services = services;
        if (configs) {
          this.configs = configs;
          if (this.configs.id) {
            var chartprefix = Tools.getProperty(this.model.getOptions(), "style", "prefix");
            this.id = chartprefix + "--" + this.configs.id;
          }
        }
        if (!this.parent) {
          this.setParent(select_default2(this.services.domUtils.getMainContainer()));
        }
      }
      Component2.prototype.init = function() {
      };
      Component2.prototype.render = function(animate) {
        console.error("render() method is not implemented");
      };
      Component2.prototype.destroy = function() {
      };
      Component2.prototype.setModel = function(newObj) {
        this.model = newObj;
      };
      Component2.prototype.setServices = function(newObj) {
        this.services = newObj;
      };
      Component2.prototype.setParent = function(parent) {
        var oldParent = this.parent;
        this.parent = parent;
        if (oldParent && oldParent.node() === parent.node()) {
          return;
        }
        if (this.type) {
          var chartprefix = Tools.getProperty(this.model.getOptions(), "style", "prefix");
          this.parent.classed(carbonPrefix + "--" + chartprefix + "--" + this.type, true);
          if (oldParent) {
            oldParent.classed(carbonPrefix + "--" + chartprefix + "--" + this.type, false);
          }
        }
      };
      Component2.prototype.getParent = function() {
        return this.parent;
      };
      Component2.prototype.getComponentContainer = function(configs) {
        if (configs === void 0) {
          configs = { withinChartClip: false };
        }
        if (this.type) {
          var chartprefix = Tools.getProperty(this.model.getOptions(), "style", "prefix");
          var idSelector = this.id ? "#" + this.id : "";
          var container = DOMUtils.appendOrSelect(this.parent, (this.renderType === RenderTypes.SVG ? "svg" : "div") + idSelector + "." + carbonPrefix + "--" + chartprefix + "--" + this.type);
          if (configs.withinChartClip) {
            var chartClipId = this.model.get("chartClipId");
            if (chartClipId) {
              var chartClipSelection = select_default2("#" + chartClipId);
              var chartClipRectSelection = chartClipSelection.select("rect");
              if (chartClipRectSelection.size() !== 0 && parseFloat(chartClipRectSelection.attr("height")) > 0) {
                container.attr("clip-path", "url(#" + chartClipId + ")");
              }
            }
          }
          return container.attr("width", "100%").attr("height", "100%");
        }
        return this.parent;
      };
      Component2.prototype.getOptions = function() {
        if (this.configs.options) {
          var options2 = Tools.merge({}, this.model.getOptions(), this.configs.options);
          return options2;
        }
        return this.model.getOptions();
      };
      return Component2;
    }();
    __extends$1p = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Legend = function(_super) {
      __extends$1p(Legend2, _super);
      function Legend2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "legend";
        _this.renderType = RenderTypes.HTML;
        return _this;
      }
      Legend2.prototype.render = function() {
        var _this = this;
        var options2 = this.getOptions();
        var legendOptions = Tools.getProperty(options2, "legend");
        var alignment = Tools.getProperty(legendOptions, "alignment");
        var legendOrientation = Tools.getProperty(options2, "legend", "orientation");
        var dataGroups = this.model.getDataGroups();
        var DISABLED = legend$1.items.status.DISABLED;
        var hasDeactivatedItems = dataGroups.some(function(dataGroup) {
          return dataGroup.status === DISABLED;
        });
        var userProvidedOrder = Tools.getProperty(legendOptions, "order");
        var svg = this.getComponentContainer().classed("center-aligned", alignment === Alignments.CENTER).classed("right-aligned", alignment === Alignments.RIGHT).classed(legendOrientation, true).classed("has-deactivated-items", hasDeactivatedItems).attr("role", Roles.GROUP).attr("aria-label", "Data groups").attr("data-name", "legend-items");
        if (userProvidedOrder) {
          dataGroups = this.sortDataGroups(dataGroups, userProvidedOrder);
        }
        var legendItems = svg.selectAll("div.legend-item").data(dataGroups, function(dataGroup) {
          return dataGroup.name;
        });
        var addedLegendItems = legendItems.enter().append("div").attr("class", "legend-item");
        addedLegendItems.merge(svg.selectAll("div.legend-item")).classed("active", function(d, i) {
          return d.status === legend$1.items.status.ACTIVE;
        });
        var legendClickable = Tools.getProperty(this.getOptions(), "legend", "clickable");
        svg.classed("clickable", legendClickable && dataGroups.length > 1);
        var checkboxRadius = legend$1.checkbox.radius;
        var addedCheckboxes = addedLegendItems.append("div").classed("checkbox", true);
        var allCheckboxes = addedCheckboxes.merge(legendItems.select("div.checkbox")).attr("role", Roles.CHECKBOX).attr("tabindex", legendClickable ? 0 : -1).attr("aria-labelledby", function(d, i) {
          return _this.services.domUtils.generateElementIDString("legend-datagroup-" + i + "-title");
        }).attr("aria-checked", function(_a22) {
          var status = _a22.status;
          return status === legend$1.items.status.ACTIVE;
        }).attr("width", checkboxRadius * 2).attr("height", checkboxRadius * 2).attr("class", function(d, i) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.BACKGROUND],
            dataGroupName: d.name,
            originalClassName: "checkbox"
          });
        }).style("background", function(d) {
          return d.status === legend$1.items.status.ACTIVE ? _this.model.getFillColor(d.name) || _this.model.getStrokeColor(d.name) : null;
        }).classed("active", function(d, i) {
          return d.status === legend$1.items.status.ACTIVE;
        });
        addedCheckboxes.append("svg").attr("focusable", false).attr("preserveAspectRatio", "xMidYMid meet").attr("xmlns", "http://www.w3.org/2000/svg").attr("width", "11").attr("height", "11").attr("viewBox", "0 0 31 28").attr("aria-hidden", true).style("will-change", "transform").append("path").attr("d", "M13 21.2l-7.1-7.1-1.4 1.4 7.1 7.1L13 24 27.1 9.9l-1.4-1.5z");
        addedLegendItems.append("p").merge(legendItems.select("p"));
        var additionalItemsOption = Tools.getProperty(options2, "legend", "additionalItems");
        if (additionalItemsOption && dataGroups.length) {
          var self_1 = this;
          var additionalItems = svg.selectAll("div.additional-item").data(additionalItemsOption);
          additionalItems.exit().remove();
          var addedAdditionalItems = additionalItems.enter().append("div").merge(additionalItems).classed("legend-item", true).classed("additional", true).attr("aria-labelledby", function(d, i) {
            return _this.services.domUtils.generateElementIDString("legend-datagroup-" + (allCheckboxes.size() + i) + "-title");
          });
          addedAdditionalItems.selectAll("*").remove();
          var previousType_1;
          var indexOfItem_1 = 1;
          addedAdditionalItems.append("svg").classed("icon", true).each(function(d, i) {
            var additionalItem = select_default2(this);
            if (!previousType_1 || previousType_1 != d.type) {
              previousType_1 = d.type;
              indexOfItem_1 = 1;
            } else {
              indexOfItem_1++;
            }
            self_1.addAdditionalItem(additionalItem, d, indexOfItem_1);
          });
          addedAdditionalItems.append("p").merge(addedAdditionalItems.select("p"));
          this.truncateLegendText();
        }
        legendItems.exit().on("mouseover", null).on("click", null).on("mouseout", null).remove();
        if (legendClickable && addedLegendItems.size() > 1) {
          this.addEventListeners();
        }
      };
      Legend2.prototype.sortDataGroups = function(dataGroups, legendOrder) {
        dataGroups.sort(function(dataA, dataB) {
          return legendOrder.indexOf(dataA.name) - legendOrder.indexOf(dataB.name);
        });
        if (legendOrder.length < dataGroups.length) {
          var definedOrderIndex = dataGroups.length - legendOrder.length;
          var definedOrder = dataGroups.slice(definedOrderIndex);
          return definedOrder.concat(dataGroups.slice(0, definedOrderIndex));
        }
        return dataGroups;
      };
      Legend2.prototype.addAdditionalItem = function(additionalItem, itemConfig, indexOfItem) {
        var _a22 = legend$1.area, width = _a22.width, height = _a22.height;
        if (itemConfig.type === LegendItemType.RADIUS) {
          additionalItem.style("width", height + "px").style("height", height + "px");
        } else {
          additionalItem.style("width", width + "px").style("height", height + "px");
        }
        if (itemConfig.type === LegendItemType.RADIUS) {
          var _b = legend$1.radius, iconData = _b.iconData, fill = _b.fill, stroke = _b.stroke;
          var circleEnter = additionalItem.attr("fill", "none").selectAll("circle").data(iconData).enter();
          circleEnter.append("circle").classed("radius", true).attr("role", Roles.IMG).attr("aria-label", "radius").attr("cx", function(d) {
            return d.cx;
          }).attr("cy", function(d) {
            return d.cy;
          }).attr("r", function(d) {
            return d.r;
          }).style("fill", itemConfig.fill ? itemConfig.fill : fill).style("stroke", itemConfig.stroke ? itemConfig.stroke : stroke);
        } else if (itemConfig.type === LegendItemType.LINE) {
          var lineConfig = legend$1.line;
          if (additionalItem.select("line.line").empty()) {
            additionalItem.append("line").classed("line-" + indexOfItem, true).attr("role", Roles.IMG).attr("aria-label", "line").attr("x1", 0).attr("y1", lineConfig.yPosition).attr("x2", width).attr("y2", lineConfig.yPosition).style("stroke", itemConfig.stroke ? itemConfig.stroke : lineConfig.stroke).style("stroke-width", lineConfig.strokeWidth);
          }
        } else if (itemConfig.type === LegendItemType.AREA) {
          if (additionalItem.select("rect.area").empty()) {
            additionalItem.append("rect").classed("area-" + indexOfItem, true).attr("role", Roles.IMG).attr("aria-label", "area").attr("width", width).attr("height", height).style("fill", indexOfItem > 3 && !itemConfig.fill ? legend$1.area.fill : itemConfig.fill).style("stroke", itemConfig.stroke);
          }
        } else if (itemConfig.type === LegendItemType.SIZE) {
          var _c = legend$1.size, iconData = _c.iconData, fill = _c.fill, stroke = _c.stroke;
          var sizeEnter = additionalItem.attr("fill", "none").attr("role", Roles.IMG).attr("aria-label", "size").selectAll("rect").data(iconData).enter();
          sizeEnter.append("rect").classed("size", true).attr("width", function(d) {
            return d.width;
          }).attr("height", function(d) {
            return d.height;
          }).attr("y", function(d) {
            return 0;
          }).style("fill", itemConfig.fill ? itemConfig.fill : fill).style("stroke", itemConfig.stroke ? itemConfig.stroke : stroke).style("stroke-width", 1);
        } else if (itemConfig.type === LegendItemType.QUARTILE) {
          var iconData = legend$1.quartile.iconData;
          var quartileEnter = additionalItem.selectAll("rect").attr("role", Roles.IMG).attr("aria-label", "quartile").data(iconData).enter();
          quartileEnter.append("rect").attr("class", function(d, i) {
            return "quartile-" + (i === 0 ? "wrapper" : "line");
          }).attr("x", function(d) {
            return d.x;
          }).attr("y", function(d) {
            return d.y;
          }).attr("width", function(d) {
            return d.width;
          }).attr("height", function(d) {
            return d.height;
          });
        } else if (itemConfig.type === LegendItemType.ZOOM) {
          var _d = Tools.getProperty(Configuration, "legend", "zoom"), iconData = _d.iconData, color_1 = _d.color;
          var zoomEnter = additionalItem.attr("role", Roles.IMG).attr("aria-label", "zoom").selectAll("g.icon").data(iconData).enter();
          zoomEnter.append("g").attr("x", function(d) {
            return d.x;
          }).attr("y", function(d) {
            return d.y;
          }).attr("width", function(d) {
            return d.width;
          }).attr("height", function(d) {
            return d.height;
          }).append("polygon").attr("points", "7.7 4.82 5.78 4.82 5.78 2.89 4.82 2.89 4.82 4.82 2.89 4.82 2.89 5.78 4.82 5.78 4.82 7.7 5.78 7.7 5.78 5.78 7.7 5.78 7.7 4.82").attr("fill", function(d) {
            return itemConfig.color ? itemConfig.color : color_1;
          });
          zoomEnter.append("path").attr("d", "M9.36,8.67A5.22,5.22,0,0,0,10.59,5.3,5.3,5.3,0,1,0,5.3,10.59,5.22,5.22,0,0,0,8.67,9.36L12.32,13l.68-.68Zm-4.06,1A4.34,4.34,0,1,1,9.63,5.3,4.33,4.33,0,0,1,5.3,9.63Z").attr("fill", function(d) {
            return itemConfig.color ? itemConfig.color : color_1;
          });
        }
      };
      Legend2.prototype.truncateLegendText = function() {
        var svg = this.getComponentContainer();
        var truncationOptions = Tools.getProperty(this.getOptions(), "legend", "truncation");
        var truncationType = Tools.getProperty(truncationOptions, "type");
        var truncationThreshold = Tools.getProperty(truncationOptions, "threshold");
        var truncationNumCharacter = Tools.getProperty(truncationOptions, "numCharacter");
        var addedLegendItemsText = svg.selectAll("div.legend-item p");
        addedLegendItemsText.attr("id", function(d, i) {
          var elementToReference = this.parentNode.querySelector("div.checkbox") || this.parentNode;
          return elementToReference.getAttribute("aria-labelledby");
        });
        if (truncationType !== TruncationTypes.NONE) {
          addedLegendItemsText.html(function(d) {
            if (d.name.length > truncationThreshold) {
              return Tools.truncateLabel(d.name, truncationType, truncationNumCharacter);
            } else {
              return d.name;
            }
          });
        } else {
          addedLegendItemsText.html(function(d) {
            return d.name;
          });
        }
      };
      Legend2.prototype.addEventListeners = function() {
        var self2 = this;
        var svg = this.getComponentContainer();
        var options2 = this.getOptions();
        var legendOptions = Tools.getProperty(options2, "legend");
        var truncation = Tools.getProperty(legendOptions, "truncation");
        svg.selectAll("div.legend-item").on("mouseover", function(event) {
          self2.services.events.dispatchEvent(Events$1.Legend.ITEM_HOVER, {
            hoveredElement: select_default2(this)
          });
          var hoveredItem = select_default2(this);
          hoveredItem.select("div.checkbox").classed("hovered", true);
          var hoveredItemData = hoveredItem.datum();
          if (hoveredItemData.name.length > truncation.threshold && truncation.type !== TruncationTypes.NONE) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              hoveredElement: hoveredItem,
              content: hoveredItemData.name
            });
          }
        }).on("mousemove", function(event) {
          var hoveredItemData = select_default2(this).datum();
          if (hoveredItemData.name.length > truncation.threshold && truncation.type !== TruncationTypes.NONE) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
              event
            });
          }
        }).on("click", function() {
          self2.services.events.dispatchEvent(Events$1.Legend.ITEM_CLICK, {
            clickedElement: select_default2(this)
          });
          var clickedItem = select_default2(this);
          var clickedItemData = clickedItem.datum();
          self2.model.toggleDataLabel(clickedItemData.name);
        }).on("mouseout", function() {
          var hoveredItem = select_default2(this);
          hoveredItem.select("div.checkbox").classed("hovered", false);
          var hoveredItemData = hoveredItem.datum();
          if (hoveredItemData.name.length > truncation.threshold && truncation.type !== TruncationTypes.NONE) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
          }
          self2.services.events.dispatchEvent(Events$1.Legend.ITEM_MOUSEOUT, {
            hoveredElement: hoveredItem
          });
        });
        svg.selectAll("div.legend-item div.checkbox").on("keyup", function(event) {
          if (event.key && event.key === "Tab") {
            self2.services.events.dispatchEvent(Events$1.Legend.ITEM_HOVER, {
              hoveredElement: select_default2(this)
            });
          }
        });
        svg.selectAll("div.legend-item div.checkbox").on("keydown", function(event, d) {
          if (event.key && event.key === " ") {
            event.preventDefault();
            self2.model.toggleDataLabel(d.name);
          } else if (event.key && event.key === "Tab") {
            self2.services.events.dispatchEvent(Events$1.Legend.ITEM_MOUSEOUT, {
              hoveredElement: select_default2(this)
            });
          }
        });
        svg.selectAll("g.additional-item").on("mouseover", function(event) {
          var hoveredItem = select_default2(this);
          var hoveredItemData = hoveredItem.datum();
          if (hoveredItemData.name.length > truncation.threshold) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              hoveredElement: hoveredItem,
              content: hoveredItemData.name
            });
          }
        });
      };
      return Legend2;
    }(Component);
    __extends$1o = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ColorScaleLegend = function(_super) {
      __extends$1o(ColorScaleLegend2, _super);
      function ColorScaleLegend2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "color-legend";
        _this.renderType = RenderTypes.SVG;
        _this.gradient_id = "gradient-id-" + Math.floor(Math.random() * 99999999999);
        _this.handleAxisCompleteEvent = function(event) {
          var svg = _this.getComponentContainer();
          var width = DOMUtils.getSVGElementSize(svg, {
            useAttrs: true
          }).width;
          var isDataLoading = Tools.getProperty(_this.getOptions(), "data", "loading");
          if (width > legend$1.color.barWidth && !isDataLoading) {
            var title = Tools.getProperty(_this.getOptions(), "heatmap", "colorLegend", "title");
            var cartesianScales = _this.services.cartesianScales;
            var mainXScale = cartesianScales.getMainXScale();
            var xDimensions = mainXScale.range();
            if (xDimensions[0] > 1) {
              svg.select("g.legend").attr("transform", "translate(" + xDimensions[0] + ", 0)");
              if (title) {
                var textWidth = DOMUtils.getSVGElementSize(svg.select("g.legend-title").select("text"), { useBBox: true }).width;
                var availableSpace = xDimensions[0] - textWidth - 9;
                if (availableSpace > 1) {
                  svg.select("g.legend-title").attr("transform", "translate(" + availableSpace + ", 0)");
                } else {
                  svg.select("g.legend").attr("transform", "translate(" + xDimensions[0] + ", 16)");
                  svg.select("g.legend-title").attr("transform", "translate(" + xDimensions[0] + ", 0)");
                }
              }
            }
          } else {
            svg.select("g.legend-title").attr("transform", "translate(0, 0)");
          }
        };
        return _this;
      }
      ColorScaleLegend2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Axis.RENDER_COMPLETE, this.handleAxisCompleteEvent);
      };
      ColorScaleLegend2.prototype.render = function(animate) {
        var options2 = this.getOptions();
        var svg = this.getComponentContainer();
        var width = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }).width;
        var customColors = Tools.getProperty(options2, "color", "gradient", "colors");
        var colorScaleType = Tools.getProperty(options2, "heatmap", "colorLegend", "type");
        var colorPairingOption = Tools.getProperty(options2, "color", "pairing", "option");
        var title = Tools.getProperty(options2, "heatmap", "colorLegend", "title");
        var isDataLoading = Tools.getProperty(this.getOptions(), "data", "loading");
        if (isDataLoading) {
          svg.html("");
          return;
        }
        var customColorsEnabled = !Tools.isEmpty(customColors);
        var domain = this.model.getValueDomain();
        var useDefaultBarWidth = !(width <= legend$1.color.barWidth);
        var barWidth = useDefaultBarWidth ? legend$1.color.barWidth : width;
        var legendGroupElement = DOMUtils.appendOrSelect(svg, "g.legend");
        var axisElement = DOMUtils.appendOrSelect(legendGroupElement, "g.legend-axis");
        if (title) {
          var legendTitleGroup = DOMUtils.appendOrSelect(svg, "g.legend-title");
          var legendTitle = DOMUtils.appendOrSelect(legendTitleGroup, "text");
          legendTitle.text(title).attr("dy", "0.7em");
          legendGroupElement.attr("transform", "translate(0, 16)");
        }
        var colorScheme = domain[0] < 0 && domain[1] > 0 ? "diverge" : "mono";
        if (colorPairingOption < 1 && colorPairingOption > 4 && colorScheme === "mono") {
          colorPairingOption = 1;
        } else if (colorPairingOption < 1 && colorPairingOption > 2 && colorScheme === "diverge") {
          colorPairingOption = 1;
        }
        var colorPairing = [];
        var colorGroupingLength = colorScheme === "diverge" ? 17 : 11;
        if (!customColorsEnabled) {
          for (var i = 1; i < colorGroupingLength + 1; i++) {
            colorPairing.push(colorScaleType === ColorLegendType.LINEAR ? "stop-color-" + colorScheme + "-" + colorPairingOption + "-" + i : "fill-" + colorScheme + "-" + colorPairingOption + "-" + i);
          }
        } else {
          colorPairing = customColors;
        }
        var interpolator = number_default(domain[0], domain[1]);
        var quant = quantize_default(interpolator, 3);
        var linearScale = linear3().domain(domain).range([0, barWidth]);
        var legendAxis = axisBottom(linearScale).tickSize(0).tickValues(quant);
        switch (colorScaleType) {
          case ColorLegendType.LINEAR:
            this.drawLinear(colorPairing, legendGroupElement, barWidth);
            break;
          case ColorLegendType.QUANTIZE:
            var rangeStart = this.drawQuantize(colorPairing, colorScheme, customColorsEnabled, legendGroupElement, barWidth);
            linearScale.range([rangeStart, barWidth]);
            break;
          default:
            throw Error("Entered color legend type is not supported.");
        }
        axisElement.attr("transform", "translate(0," + legend$1.color.axisYTranslation + ")").call(legendAxis);
        axisElement.select(".domain").remove();
        axisElement.select("g.tick:last-of-type text").style("text-anchor", useDefaultBarWidth ? "middle" : "end");
        axisElement.select("g.tick:first-of-type text").style("text-anchor", useDefaultBarWidth ? "middle" : "start");
      };
      ColorScaleLegend2.prototype.drawLinear = function(colorPairing, legendGroupElement, barWidth) {
        var stopLengthPercentage = 100 / (colorPairing.length - 1);
        var linearGradient = DOMUtils.appendOrSelect(legendGroupElement, "linearGradient");
        linearGradient.attr("id", this.gradient_id + "-legend").selectAll("stop").data(colorPairing).enter().append("stop").attr("offset", function(_, i) {
          return i * stopLengthPercentage + "%";
        }).attr("class", function(_, i) {
          return colorPairing[i];
        }).attr("stop-color", function(d) {
          return d;
        });
        var rectangle = DOMUtils.appendOrSelect(legendGroupElement, "rect");
        rectangle.attr("width", barWidth).attr("height", legend$1.color.barHeight).style("fill", "url(#" + this.gradient_id + "-legend)");
      };
      ColorScaleLegend2.prototype.drawQuantize = function(colorPairing, colorScheme, customColorsEnabled, legendGroupElement, barWidth) {
        if (!customColorsEnabled && colorScheme === "diverge") {
          colorPairing.splice(colorPairing.length / 2, 1);
        }
        var colorScaleBand = band().domain(colorPairing).range([0, barWidth]);
        var rectangle = DOMUtils.appendOrSelect(legendGroupElement, "g.quantized-rect");
        rectangle.selectAll("rect").data(colorScaleBand.domain()).join("rect").attr("x", function(d) {
          return colorScaleBand(d);
        }).attr("y", 0).attr("width", Math.max(0, colorScaleBand.bandwidth() - 1)).attr("height", legend$1.color.barHeight).attr("class", function(d) {
          return d;
        }).attr("fill", function(d) {
          return d;
        });
        return (!customColorsEnabled && colorScheme) === "mono" ? colorScaleBand.bandwidth() - 1 : 0;
      };
      ColorScaleLegend2.prototype.destroy = function() {
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Axis.RENDER_COMPLETE, this.handleAxisCompleteEvent);
      };
      return ColorScaleLegend2;
    }(Legend);
    settings = {
      prefix: "bx",
      selectorTabbable: "\n    a[href], area[href], input:not([disabled]):not([tabindex='-1']),\n    button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),\n    textarea:not([disabled]):not([tabindex='-1']),\n    iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]\n  ",
      selectorFocusable: "\n    a[href], area[href], input:not([disabled]),\n    button:not([disabled]),select:not([disabled]),\n    textarea:not([disabled]),\n    iframe, object, embed, *[tabindex], *[contenteditable=true]\n  "
    };
    settings_1 = settings;
    exports2 = [eventedState, eventedShowHideState];
    eventedShowHideState$1 = exports2;
    Modal$1 = /* @__PURE__ */ function(_mixin) {
      _inherits(Modal2, _mixin);
      var _super = _createSuper(Modal2);
      function Modal2(element, options2) {
        var _this;
        _classCallCheck(this, Modal2);
        _this = _super.call(this, element, options2);
        _this._handleFocusinListener = void 0;
        _this._handleKeydownListener = void 0;
        _this._handleFocusin = function(evt) {
          var focusWrapNode = _this.element.querySelector(_this.options.selectorModalContainer) || _this.element;
          if (_this.element.classList.contains(_this.options.classVisible) && !focusWrapNode.contains(evt.target) && _this.options.selectorsFloatingMenus.every(function(selector) {
            return !eventMatches(evt, selector);
          })) {
            _this.element.querySelector(settings_1.selectorTabbable).focus();
          }
        };
        _this._hookCloseActions();
        return _this;
      }
      _createClass(Modal2, [{
        key: "createdByLauncher",
        value: function createdByLauncher(evt) {
          this.show(evt);
        }
      }, {
        key: "shouldStateBeChanged",
        value: function shouldStateBeChanged(state) {
          if (state === "shown") {
            return !this.element.classList.contains(this.options.classVisible);
          }
          return this.element.classList.contains(this.options.classVisible);
        }
      }, {
        key: "_changeState",
        value: function _changeState(state, detail, callback) {
          var _this2 = this;
          var handleTransitionEnd;
          var transitionEnd = function transitionEnd2() {
            if (handleTransitionEnd) {
              handleTransitionEnd = _this2.unmanage(handleTransitionEnd).release();
            }
            if (state === "shown" && _this2.element.offsetWidth > 0 && _this2.element.offsetHeight > 0) {
              _this2.previouslyFocusedNode = _this2.element.ownerDocument.activeElement;
              var focusableItem = _this2.element.querySelector(_this2.options.selectorPrimaryFocus) || _this2.element.querySelector(settings_1.selectorTabbable);
              focusableItem.focus();
              if (true) {
                true ? (0, import_warning.default)(focusableItem, "Modals need to contain a focusable element by either using " + "`".concat(_this2.options.selectorPrimaryFocus, "` or settings.selectorTabbable.")) : void 0;
              }
            }
            callback();
          };
          if (this._handleFocusinListener) {
            this._handleFocusinListener = this.unmanage(this._handleFocusinListener).release();
          }
          if (state === "shown") {
            var hasFocusin = "onfocusin" in this.element.ownerDocument.defaultView;
            var focusinEventName = hasFocusin ? "focusin" : "focus";
            this._handleFocusinListener = this.manage(on(this.element.ownerDocument, focusinEventName, this._handleFocusin, !hasFocusin));
          }
          if (state === "hidden") {
            this.element.classList.toggle(this.options.classVisible, false);
            this.element.ownerDocument.body.classList.toggle(this.options.classBody, false);
            if (this.options.selectorFocusOnClose || this.previouslyFocusedNode) {
              (this.element.ownerDocument.querySelector(this.options.selectorFocusOnClose) || this.previouslyFocusedNode).focus();
            }
          } else if (state === "shown") {
            this.element.classList.toggle(this.options.classVisible, true);
            this.element.ownerDocument.body.classList.toggle(this.options.classBody, true);
          }
          handleTransitionEnd = this.manage(on(this.element, "transitionend", transitionEnd));
        }
      }, {
        key: "_hookCloseActions",
        value: function _hookCloseActions() {
          var _this3 = this;
          this.manage(on(this.element, "click", function(evt) {
            var closeButton = eventMatches(evt, _this3.options.selectorModalClose);
            if (closeButton) {
              evt.delegateTarget = closeButton;
            }
            if (closeButton || evt.target === _this3.element) {
              _this3.hide(evt);
            }
          }));
          if (this._handleKeydownListener) {
            this._handleKeydownListener = this.unmanage(this._handleKeydownListener).release();
          }
          this._handleKeydownListener = this.manage(on(this.element.ownerDocument.body, "keydown", function(evt) {
            if (evt.which === 27 && _this3.shouldStateBeChanged("hidden")) {
              evt.stopPropagation();
              _this3.hide(evt);
            }
          }));
        }
      }], [{
        key: "options",
        get: function get22() {
          var prefix = settings_1.prefix;
          return {
            selectorInit: "[data-modal]",
            selectorModalClose: "[data-modal-close]",
            selectorPrimaryFocus: "[data-modal-primary-focus]",
            selectorsFloatingMenus: [".".concat(prefix, "--overflow-menu-options"), ".".concat(prefix, "--tooltip"), ".flatpickr-calendar"],
            selectorModalContainer: ".".concat(prefix, "--modal-container"),
            classVisible: "is-visible",
            classBody: "".concat(prefix, "--body--with-modal-open"),
            attribInitTarget: "data-modal-target",
            initEventNames: ["click"],
            eventBeforeShown: "modal-beingshown",
            eventAfterShown: "modal-shown",
            eventBeforeHidden: "modal-beinghidden",
            eventAfterHidden: "modal-hidden"
          };
        }
      }]);
      Modal2.components = /* @__PURE__ */ new WeakMap();
      return Modal2;
    }(mixin(createComponent, initComponentByLauncher, eventedShowHideState$1, handles));
    CarbonModalComponent = Modal$1;
    __extends$1n = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Modal = function(_super) {
      __extends$1n(Modal2, _super);
      function Modal2(model, services, configs) {
        var _this = _super.call(this, model, services, configs) || this;
        _this.type = "modal";
        _this.isEventListenerAdded = false;
        _this.handleShowModal = function() {
          _this.modal.html(_this.getModalHTML());
          _this.modal.select("div.cds--modal-footer button.cds--btn").on("click", function() {
            return _this.model.exportToCSV();
          });
          var modalInstance = CarbonModalComponent.create(_this.modal.node());
          modalInstance.show();
        };
        _this.init();
        return _this;
      }
      Modal2.prototype.addEventListeners = function() {
        this.services.events.addEventListener(Events$1.Modal.SHOW, this.handleShowModal);
      };
      Modal2.prototype.removeEventListeners = function() {
        this.services.events.removeEventListener(Events$1.Modal.SHOW, this.handleShowModal);
      };
      Modal2.prototype.getModalHTML = function() {
        var options2 = this.model.getOptions();
        var chartprefix = Tools.getProperty(options2, "style", "prefix");
        var tableArray = this.model.getTabularDataArray();
        return '\n		<div class="cds--modal-container cds--modal-container">\n			<div class="cds--modal-header cds--modal-header">\n				<p class="cds--modal-header__label cds--type-delta cds--modal-header__label cds--type-delta" id="modal-title">Tabular representation</p>\n\n				<p class="cds--modal-header__heading cds--type-beta cds--modal-header__heading cds--type-beta" id="modal-description">' + options2.title + '</p>\n\n				<button class="cds--modal-close cds--modal-close" type="button" data-modal-close aria-label="close modal"  data-modal-primary-focus>\n					<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" aria-label="Close" width="20" height="20" viewBox="0 0 32 32" role="img" class="cds--modal-close__icon cds--modal-close__icon">\n						<path d="M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z"></path>\n					</svg>\n				</button>\n			</div>\n\n			<div class="cds--modal-content cds--modal-content">\n				<table class="cds--data-table cds--data-table--no-border cds--data-table cds--data-table--no-border">\n					<thead>\n						<tr>\n							' + get_default(tableArray, 0).map(function(heading) {
          return '<th scope="col">\n								<div class="cds--table-header-label cds--table-header-label">' + heading + "</div>\n							</th>";
        }).join("") + "\n						</tr>\n					</thead>\n\n					<tbody>" + tableArray.slice(1).map(function(row) {
          return "\n							<tr>\n								" + row.map(function(column) {
            return "<td>" + column + "</td>";
          }).join("") + "\n							</tr>";
        }).join("") + '\n					</tbody>\n				</table>\n			</div>\n\n			<div class="cds--modal-footer cds--modal-footer">\n			  <div class="' + carbonPrefix + "--" + chartprefix + '-modal-footer-spacer"></div>\n			  <button class="cds--btn cds--btn--primary cds--btn cds--btn--primary" type="button" data-modal-primary-focus>Download as CSV</button>\n			</div>\n		</div>';
      };
      Modal2.prototype.render = function() {
        var options2 = this.model.getOptions();
        if (!this.isEventListenerAdded) {
          var holder = select_default2(this.services.domUtils.getHolder());
          var chartprefix = Tools.getProperty(options2, "style", "prefix");
          this.modal = DOMUtils.appendOrSelect(holder, "div." + carbonPrefix + "--" + chartprefix + "--modal");
          this.addEventListeners();
          this.isEventListenerAdded = true;
          this.modal.attr("data-modal", true).attr("class", "cds--modal cds--modal").attr("role", "dialog").attr("aria-modal", true).attr("aria-labelledby", "modal-title").attr("aria-describedby", "modal-description").attr("tabindex", -1);
        }
      };
      Modal2.prototype.destroy = function() {
        this.removeEventListeners();
        this.isEventListenerAdded = false;
      };
      return Modal2;
    }(Component);
    __extends$1m = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Threshold = function(_super) {
      __extends$1m(Threshold2, _super);
      function Threshold2(model, services) {
        var _this = _super.call(this, model, services) || this;
        _this.type = "threshold";
        _this.renderType = RenderTypes.SVG;
        _this.positionService = new utils_position_default();
        return _this;
      }
      Threshold2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = false;
        }
        var axesOptions = Tools.getProperty(this.getOptions(), "axes");
        var thresholdData = [];
        Object.keys(axesOptions).forEach(function(axisPosition) {
          var _a22, _b;
          if (Object.values(AxisPositions).includes(axisPosition)) {
            var axisOptions = axesOptions[axisPosition];
            if (axisOptions.thresholds && axisOptions.thresholds.length > 0) {
              thresholdData.push({
                axisPosition,
                thresholds: axisOptions.thresholds,
                correspondingDatasets: (_a22 = axisOptions) === null || _a22 === void 0 ? void 0 : _a22.correspondingDatasets,
                mapsTo: (_b = axisOptions) === null || _b === void 0 ? void 0 : _b.mapsTo
              });
            }
          }
        });
        var svg = this.getComponentContainer({ withinChartClip: true });
        var thresholdAxisGroups = svg.selectAll("g.axis-thresholds").data(thresholdData, function(thresholdData2) {
          return thresholdData2.axisPosition;
        });
        thresholdAxisGroups.exit().attr("opacity", 0).remove();
        var thresholdAxisGroupsEnter = thresholdAxisGroups.enter().append("g");
        var thresholdAxisGroupsMerge = thresholdAxisGroupsEnter.merge(thresholdAxisGroups);
        thresholdAxisGroupsMerge.attr("class", function(d) {
          return "axis-thresholds " + d.axisPosition;
        });
        var thresholdGroups = thresholdAxisGroupsMerge.selectAll("g.threshold-group").data(function(d) {
          return d.thresholds.map(function(threshold) {
            threshold.axisPosition = d.axisPosition;
            threshold.datum = _this.constructDatumObj(d, threshold);
            return threshold;
          });
        });
        thresholdGroups.exit().attr("opacity", 0).remove();
        var thresholdGroupsEnter = thresholdGroups.enter().append("g");
        thresholdGroupsEnter.append("line").attr("class", "threshold-line");
        thresholdGroupsEnter.append("rect").attr("class", "threshold-hoverable-area");
        var thresholdGroupsMerge = thresholdGroupsEnter.merge(thresholdGroups);
        thresholdGroupsMerge.attr("class", "threshold-group");
        var self2 = this;
        thresholdAxisGroupsMerge.each(function(_a22) {
          var axisPosition = _a22.axisPosition;
          var scale = self2.services.cartesianScales.getScaleByPosition(axisPosition);
          var scaleType = self2.services.cartesianScales.getScaleTypeByPosition(axisPosition);
          var xScale = null;
          var yScale = null;
          if (axisPosition === AxisPositions.LEFT || axisPosition === AxisPositions.RIGHT) {
            yScale = scale;
            xScale = self2.services.cartesianScales.getMainXScale();
          } else {
            xScale = scale;
            yScale = self2.services.cartesianScales.getMainYScale();
          }
          var isScaleTypeLabels = scaleType === ScaleTypes.LABELS;
          var _b = xScale.range(), xScaleStart = _b[0], xScaleEnd = _b[1];
          var _c = yScale.range(), yScaleEnd = _c[0], yScaleStart = _c[1];
          var cartesianScales = self2.services.cartesianScales;
          var orientation = cartesianScales.getOrientation();
          var getDomainValue = function(d) {
            return cartesianScales.getDomainValue(d);
          };
          var getRangeValue = function(d) {
            return cartesianScales.getRangeValue(d);
          };
          var _d = Tools.flipDomainAndRangeBasedOnOrientation(getDomainValue, getRangeValue, orientation), getXValue = _d[0], getYValue = _d[1];
          var group = select_default2(this);
          if (axisPosition === AxisPositions.TOP || axisPosition === AxisPositions.BOTTOM) {
            group.selectAll("line.threshold-line").transition().call(function(t) {
              return self2.services.transitions.setupTransition({
                transition: t,
                name: "threshold-line-update",
                animate
              });
            }).attr("y1", yScaleStart).attr("y2", yScaleEnd).attr("x1", function(_a3) {
              var datum2 = _a3.datum;
              return getXValue(datum2) + (isScaleTypeLabels ? scale.step() / 2 : 0);
            }).attr("x2", function(_a3) {
              var datum2 = _a3.datum;
              return getXValue(datum2) + (isScaleTypeLabels ? scale.step() / 2 : 0);
            }).style("stroke", function(_a3) {
              var fillColor = _a3.fillColor;
              return fillColor;
            });
            group.selectAll("rect.threshold-hoverable-area").attr("x", 0).attr("y", function(_a3) {
              var datum2 = _a3.datum;
              return -getXValue(datum2);
            }).attr("width", Math.abs(yScaleEnd - yScaleStart)).classed("rotate", true);
          } else {
            group.selectAll("line.threshold-line").transition().call(function(t) {
              return self2.services.transitions.setupTransition({
                transition: t,
                name: "threshold-line-update",
                animate
              });
            }).attr("x1", xScaleStart).attr("x2", xScaleEnd).attr("y1", function(_a3) {
              var datum2 = _a3.datum;
              return getYValue(datum2) + (isScaleTypeLabels ? scale.step() / 2 : 0);
            }).attr("y2", function(_a3) {
              var datum2 = _a3.datum;
              return getYValue(datum2) + (isScaleTypeLabels ? scale.step() / 2 : 0);
            }).style("stroke", function(_a3) {
              var fillColor = _a3.fillColor;
              return fillColor;
            });
            group.selectAll("rect.threshold-hoverable-area").attr("x", xScaleStart).attr("y", function(_a3) {
              var datum2 = _a3.datum;
              return getYValue(datum2);
            }).attr("width", Math.abs(xScaleEnd - xScaleStart)).classed("rotate", false);
          }
        });
        this.services.events.addEventListener(Events$1.Threshold.SHOW, function(e) {
          _this.setThresholdLabelPosition(e.detail);
          _this.label.classed("hidden", false);
        });
        this.services.events.addEventListener(Events$1.Threshold.HIDE, function(e) {
          _this.label.classed("hidden", true);
        });
        this.appendThresholdLabel();
        this.addEventListeners();
      };
      Threshold2.prototype.getFormattedValue = function(datum2) {
        var value2 = datum2.value, axisPosition = datum2.axisPosition;
        var options2 = this.getOptions();
        var scaleType = this.services.cartesianScales.getScaleTypeByPosition(axisPosition);
        if (scaleType === ScaleTypes.TIME) {
          var isVertical = [
            AxisPositions.LEFT,
            AxisPositions.RIGHT
          ].includes(axisPosition);
          var mainXScale = this.services.cartesianScales.getMainXScale();
          var mainYScale = this.services.cartesianScales.getMainYScale();
          var scale = isVertical ? mainYScale : mainXScale;
          var timeScaleOptions = Tools.getProperty(options2, "timeScale");
          var timeInterval2 = computeTimeIntervalName(scale.ticks());
          return formatTick(value2, 0, scale.ticks(), timeInterval2, timeScaleOptions);
        }
        return value2.toLocaleString("en");
      };
      Threshold2.prototype.appendThresholdLabel = function() {
        var holder = select_default2(this.services.domUtils.getHolder());
        var chartprefix = Tools.getProperty(this.getOptions(), "style", "prefix");
        this.label = DOMUtils.appendOrSelect(holder, "div." + carbonPrefix + "--" + chartprefix + "--threshold--label").classed("hidden", true);
      };
      Threshold2.prototype.setThresholdLabelPosition = function(_a22) {
        var event = _a22.event, datum2 = _a22.datum;
        var holder = this.services.domUtils.getHolder();
        var mouseRelativePos = pointer_default(event, holder);
        var formattedValue = datum2.valueFormatter ? datum2.valueFormatter(datum2.value) : this.getFormattedValue(datum2);
        this.label.html((datum2.label || "Threshold") + ": " + formattedValue).style("background-color", datum2.fillColor);
        var target = this.label.node();
        var bestPlacementOption = this.positionService.findBestPlacementAt({
          left: mouseRelativePos[0],
          top: mouseRelativePos[1]
        }, target, [
          PLACEMENTS.RIGHT,
          PLACEMENTS.LEFT,
          PLACEMENTS.TOP,
          PLACEMENTS.BOTTOM
        ], function() {
          return {
            width: holder.offsetWidth,
            height: holder.offsetHeight
          };
        });
        var pos = this.positionService.findPositionAt({
          left: mouseRelativePos[0],
          top: mouseRelativePos[1]
        }, target, bestPlacementOption);
        this.positionService.setElement(target, pos);
      };
      Threshold2.prototype.constructDatumObj = function(d, element) {
        var datum2 = {};
        if (d.correspondingDatasets) {
          datum2["group"] = Tools.getProperty(d, "correspondingDatasets", 0);
        }
        datum2[d["mapsTo"]] = element.value;
        return datum2;
      };
      Threshold2.prototype.addEventListeners = function() {
        var self2 = this;
        var svg = this.getComponentContainer({ withinChartClip: true });
        svg.selectAll("rect.threshold-hoverable-area").on("mouseover mousemove", function(event) {
          select_default2(this.parentNode).select("line.threshold-line").classed("active", true);
          self2.services.events.dispatchEvent(Events$1.Threshold.SHOW, {
            event,
            hoveredElement: select_default2(this),
            datum: select_default2(this).datum()
          });
        }).on("mouseout", function(event) {
          select_default2(this.parentNode).select("line.threshold-line").classed("active", false);
          self2.services.events.dispatchEvent(Events$1.Threshold.HIDE, {
            event,
            hoveredElement: select_default2(this),
            datum: select_default2(this).datum()
          });
        });
      };
      return Threshold2;
    }(Component);
    __extends$1l = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Title = function(_super) {
      __extends$1l(Title2, _super);
      function Title2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "title";
        _this.renderType = RenderTypes.HTML;
        return _this;
      }
      Title2.prototype.render = function() {
        var svg = this.getComponentContainer();
        var title = Tools.getProperty(this.getOptions(), "title");
        var text = svg.selectAll("p.title").data([title]);
        text.enter().append("p").classed("title", true).attr("role", "heading").attr("aria-level", 2).merge(text).html(function(d) {
          return d;
        });
        if (text.node() && text.node().offsetWidth < text.node().scrollWidth) {
          var self_1 = this;
          text.on("mouseover", function(event) {
            self_1.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              hoveredElement: text,
              content: text.text()
            });
          }).on("mousemove", function(event) {
            self_1.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
              event
            });
          }).on("mouseout", function() {
            self_1.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
          });
        }
        text.exit().remove();
      };
      Title2.prototype.truncateTitle = function(title, maxWidth) {
        if (maxWidth <= 0) {
          return;
        }
        var untruncatedTitle = title.text();
        if (title.node().getComputedTextLength() > maxWidth) {
          title.append("tspan").text("...");
          var tspanLength = DOMUtils.appendOrSelect(title, "tspan").node().getComputedTextLength();
          var titleString = title.text();
          var substringIndex = this.getSubstringIndex(title.node(), 0, titleString.length - 1, maxWidth - tspanLength);
          title.html(titleString.substring(0, substringIndex - 1)).append("tspan").text("...");
          var self_2 = this;
          title.on("mouseover", function(event) {
            self_2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              hoveredElement: title,
              content: untruncatedTitle
            });
          }).on("mousemove", function(event) {
            self_2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
              event
            });
          }).on("mouseout", function() {
            self_2.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
          });
        }
      };
      Title2.prototype.getMaxTitleWidth = function() {
        return DOMUtils.getSVGElementSize(this.parent.node(), {
          useAttrs: true
        }).width;
      };
      Title2.prototype.getSubstringIndex = function(title, start2, end, width) {
        var mid = Math.floor((end + start2) / 2);
        if (title.getSubStringLength(0, mid) > width) {
          return this.getSubstringIndex(title, start2, mid, width);
        } else if (title.getSubStringLength(0, mid) < width) {
          if (title.getSubStringLength(0, mid + 1) > width) {
            return mid;
          }
          return this.getSubstringIndex(title, mid, end, width);
        } else {
          return mid;
        }
      };
      return Title2;
    }(Component);
    __extends$1k = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    MeterTitle = function(_super) {
      __extends$1k(MeterTitle2, _super);
      function MeterTitle2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "meter-title";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      MeterTitle2.prototype.render = function() {
        var dataset = Tools.getProperty(this.model.getDisplayData(), 0);
        var options2 = this.getOptions();
        var svg = this.getComponentContainer();
        var groupMapsTo = options2.data.groupMapsTo;
        var proportional = Tools.getProperty(options2, "meter", "proportional");
        if (proportional) {
          this.displayTotal();
          this.displayBreakdownTitle();
        } else {
          var title = svg.selectAll("text.meter-title").data([dataset[groupMapsTo]]);
          title.enter().append("text").classed("meter-title", true).merge(title).attr("x", 0).attr("y", "1em").text(function(d) {
            return d;
          });
          title.exit().remove();
          this.appendPercentage();
        }
        this.displayStatus();
        var maxWidth = this.getMaxTitleWidth();
        var titleElement = DOMUtils.appendOrSelect(svg, "text.meter-title");
        if (maxWidth > 0 && titleElement.node().getComputedTextLength() > maxWidth) {
          this.truncateTitle(titleElement, maxWidth);
        }
      };
      MeterTitle2.prototype.displayBreakdownTitle = function() {
        var svg = this.getComponentContainer();
        var options2 = this.getOptions();
        var datasetsTotal = this.model.getMaximumDomain(this.model.getDisplayData());
        var total = Tools.getProperty(options2, "meter", "proportional", "total");
        var unit2 = Tools.getProperty(options2, "meter", "proportional", "unit") ? Tools.getProperty(options2, "meter", "proportional", "unit") : "";
        var data;
        if (datasetsTotal === total) {
          data = null;
        } else {
          var difference = total !== null ? total - datasetsTotal : datasetsTotal;
          var breakdownFormatter = Tools.getProperty(options2, "meter", "proportional", "breakdownFormatter");
          data = breakdownFormatter !== null ? breakdownFormatter({
            datasetsTotal,
            total
          }) : datasetsTotal + " " + unit2 + " used (" + difference + " " + unit2 + " available)";
        }
        var title = svg.selectAll("text.proportional-meter-title").data([data]);
        title.enter().append("text").classed("proportional-meter-title", true).merge(title).attr("x", 0).attr("y", "1em").text(function(d) {
          return d;
        });
        title.exit().remove();
        var maxWidth = this.getMaxTitleWidth();
        var titleElement = DOMUtils.appendOrSelect(svg, "text.proportional-meter-title");
        if (maxWidth > 0 && titleElement.node().getComputedTextLength() > maxWidth) {
          this.truncateTitle(titleElement, maxWidth);
        }
      };
      MeterTitle2.prototype.displayTotal = function() {
        var svg = this.getComponentContainer();
        var options2 = this.getOptions();
        var total = Tools.getProperty(options2, "meter", "proportional", "total");
        var totalValue = total ? Tools.getProperty(options2, "meter", "proportional", "total") : this.model.getMaximumDomain(this.model.getDisplayData());
        var unit2 = Tools.getProperty(options2, "meter", "proportional", "unit") ? Tools.getProperty(options2, "meter", "proportional", "unit") : "";
        var totalFormatter = Tools.getProperty(options2, "meter", "proportional", "totalFormatter");
        var totalString = totalFormatter !== null ? totalFormatter(totalValue) : total + " " + unit2 + " total";
        var containerBounds = DOMUtils.getHTMLElementSize(this.services.domUtils.getMainContainer());
        var containerWidth = containerBounds.width ? containerBounds.width : this.parent.node().getAttribute("width");
        var title = svg.selectAll("text.proportional-meter-total").data([totalString]);
        title.enter().append("text").classed("proportional-meter-total", true).merge(title).attr("x", this.model.getStatus() ? containerWidth - meter.total.paddingRight : containerWidth).attr("y", "1em").attr("text-anchor", "end").text(function(d) {
          return d;
        });
        title.exit().remove();
      };
      MeterTitle2.prototype.displayStatus = function() {
        var self2 = this;
        var svg = this.getComponentContainer();
        var containerBounds = DOMUtils.getHTMLElementSize(this.services.domUtils.getMainContainer());
        var containerWidth = containerBounds.width ? containerBounds.width : 0;
        var status = this.model.getStatus();
        var radius = meter.status.indicatorSize / 2;
        var statusGroup = DOMUtils.appendOrSelect(svg, "g.status-indicator").attr("class", status !== null ? "status-indicator status--" + status : "").attr("transform", "translate(" + (containerWidth - radius) + ", 0)");
        var data = status ? [status] : [];
        var icon = statusGroup.selectAll("circle.status").data(data);
        icon.enter().append("circle").merge(icon).attr("class", "status").attr("r", radius).attr("cx", 0).attr("cy", "calc(1em / 2)");
        var innerIcon = statusGroup.selectAll("path.innerFill").data(data);
        innerIcon.enter().append("path").merge(innerIcon).attr("d", self2.getStatusIconPathString(status)).attr("transform", "translate(-" + radius + ", 0)").attr("class", "innerFill");
        innerIcon.exit().remove();
        icon.exit().remove();
      };
      MeterTitle2.prototype.appendPercentage = function() {
        var dataValue = Tools.getProperty(this.model.getDisplayData(), 0, "value");
        var svg = this.getComponentContainer();
        var title = DOMUtils.appendOrSelect(svg, "text.meter-title");
        var data = Tools.getProperty(this.getOptions(), "meter", "statusBar", "percentageIndicator", "enabled") === true ? [dataValue] : [];
        var percentage = svg.selectAll("text.percent-value").data(data);
        var offset = meter.statusBar.paddingRight;
        percentage.enter().append("text").classed("percent-value", true).merge(percentage).text(function(d) {
          return d + "%";
        }).attr("x", +title.attr("x") + title.node().getComputedTextLength() + offset).attr("y", title.attr("y"));
        percentage.exit().remove();
      };
      MeterTitle2.prototype.truncateTitle = function(title, maxWidth) {
        _super.prototype.truncateTitle.call(this, title, maxWidth);
        var tspan = DOMUtils.appendOrSelect(this.parent, "tspan");
        var offset = meter.statusBar.paddingRight;
        var tspanLength = Math.ceil(tspan.node().getComputedTextLength());
        var percentage = DOMUtils.appendOrSelect(this.parent, "text.percent-value");
        percentage.attr("x", +title.attr("x") + title.node().getComputedTextLength() + tspanLength + offset);
      };
      MeterTitle2.prototype.getMaxTitleWidth = function() {
        var containerBounds = DOMUtils.getHTMLElementSize(this.services.domUtils.getMainContainer());
        var proportional = Tools.getProperty(this.getOptions(), "meter", "proportional");
        var containerWidth = containerBounds.width ? containerBounds.width : this.parent.node().getAttribute("width");
        if (proportional !== null) {
          var total = DOMUtils.appendOrSelect(this.parent, "text.proportional-meter-total").node();
          var totalWidth = DOMUtils.getSVGElementSize(total, {
            useBBox: true
          }).width;
          return containerWidth - totalWidth - meter.total.paddingLeft;
        } else {
          var percentage = DOMUtils.appendOrSelect(this.parent, "text.percent-value");
          var offset = meter.statusBar.paddingRight;
          var percentageWidth = percentage.node().getComputedTextLength();
          var statusGroup = DOMUtils.appendOrSelect(this.parent, "g.status-indicator").node();
          var statusWidth = DOMUtils.getSVGElementSize(statusGroup, { useBBox: true }).width + meter.status.paddingLeft;
          return containerWidth - percentageWidth - offset - statusWidth;
        }
      };
      MeterTitle2.prototype.getStatusIconPathString = function(status) {
        switch (status) {
          case Statuses.SUCCESS:
            return "M6.875 11.3125 3.75 8.1875 4.74375 7.25 6.875 9.34375 11.50625 4.75 12.5 5.7375 Z";
          case Statuses.DANGER:
            return "M10.7 11.5 4.5 5.3 5.3 4.5 11.5 10.7 Z";
          case Statuses.WARNING:
            return "M7.9375,11.125 C7.41973305,11.125 7,11.544733 7,12.0625 C7,12.580267 7.41973305,13 7.9375,13 C8.45526695,13 8.875,12.580267 8.875,12.0625 C8.875,11.544733 8.45526695,11.125 7.9375,11.125 M7.3125, 3 8.5625, 3 8.5625, 9.875 7.3125, 9.875, 7.3125, 3 Z";
        }
      };
      return MeterTitle2;
    }(Title);
    __extends$1j = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Tooltip = function(_super) {
      __extends$1j(Tooltip2, _super);
      function Tooltip2(model, services, configs) {
        var _this = _super.call(this, model, services, configs) || this;
        _this.type = "tooltip";
        _this.renderType = RenderTypes.HTML;
        _this.isEventListenerAdded = false;
        _this.positionService = new utils_position_default();
        _this.handleShowTooltip = function(e) {
          var data = e.detail.data || e.detail.items;
          var defaultHTML = _this.getTooltipHTML(e);
          var tooltipTextContainer = DOMUtils.appendOrSelect(_this.tooltip, "div.content-box");
          if (Tools.getProperty(_this.getOptions(), "tooltip", "customHTML")) {
            if (e.detail.content) {
              var labelHTML = '<div class="title-tooltip"><p>' + e.detail.content + "</p></div>";
              tooltipTextContainer.html(labelHTML);
            } else {
              tooltipTextContainer.html(_this.model.getOptions().tooltip.customHTML(data, defaultHTML));
            }
          } else {
            tooltipTextContainer.html(defaultHTML);
          }
          _this.positionTooltip(e);
          _this.tooltip.classed("hidden", false).attr("aria-hidden", false);
        };
        _this.handleHideTooltip = function() {
          _this.tooltip.classed("hidden", true).attr("aria-hidden", true);
        };
        _this.init();
        return _this;
      }
      Tooltip2.prototype.addTooltipEventListener = function() {
        var _this = this;
        this.services.events.addEventListener(Events$1.Tooltip.MOVE, function(e) {
          if (_this.tooltip.classed("hidden") === false) {
            _this.positionTooltip(e);
          }
        });
        this.services.events.addEventListener(Events$1.Tooltip.SHOW, this.handleShowTooltip);
        this.services.events.addEventListener(Events$1.Tooltip.HIDE, this.handleHideTooltip);
        this.services.events.addEventListener(Events$1.Chart.MOUSEOUT, this.handleHideTooltip);
      };
      Tooltip2.prototype.removeTooltipEventListener = function() {
        this.services.events.removeEventListener(Events$1.Tooltip.MOVE, null);
        this.services.events.removeEventListener(Events$1.Tooltip.SHOW, this.handleShowTooltip);
        this.services.events.removeEventListener(Events$1.Tooltip.HIDE, this.handleHideTooltip);
        this.services.events.removeEventListener(Events$1.Chart.MOUSEOUT, this.handleHideTooltip);
      };
      Tooltip2.prototype.getItems = function(e) {
        if (e.detail.items) {
          return e.detail.items;
        }
        return [];
      };
      Tooltip2.prototype.formatItems = function(items) {
        var _this = this;
        var options2 = this.getOptions();
        var truncationType = Tools.getProperty(options2, "tooltip", "truncation", "type");
        var truncationThreshold = Tools.getProperty(options2, "tooltip", "truncation", "threshold");
        var truncationNumCharacter = Tools.getProperty(options2, "tooltip", "truncation", "numCharacter");
        if (truncationType !== TruncationTypes.NONE) {
          return items.map(function(item) {
            var labelIconSize = item.labelIcon ? 12 : 0;
            item.value = item.value ? _this.valueFormatter(item.value, item.label) : item.value;
            if (item.label && item.label.length + labelIconSize > truncationThreshold) {
              item.label = Tools.truncateLabel(item.label, truncationType, truncationNumCharacter);
            }
            if (item.value && item.value.length > truncationThreshold) {
              item.value = Tools.truncateLabel(item.value, truncationType, truncationNumCharacter);
            }
            return item;
          });
        }
        return items;
      };
      Tooltip2.prototype.getTooltipHTML = function(e) {
        var defaultHTML;
        if (e.detail.content) {
          defaultHTML = '<div class="title-tooltip"><p>' + e.detail.content + "</p></div>";
        } else {
          var items = this.getItems(e);
          var formattedItems = this.formatItems(items);
          defaultHTML = '<ul class="multi-tooltip">' + formattedItems.map(function(item) {
            return '<li>\n							<div class="datapoint-tooltip ' + (item.bold ? "bold" : "") + '">\n								' + (item.class ? '<div class="tooltip-color ' + item.class + '"></div>' : "") + "\n								" + (item.color ? '<div style="background-color: ' + item.color + '" class="tooltip-color"></div>' : "") + '\n								<div class="label">\n								<p>' + (item.label || "") + "</p>\n								" + (item.labelIcon ? '<span class="label-icon"/>' + item.labelIcon + "</span>" : "") + "\n								</div>\n								" + (item.value === void 0 || item.value === null ? "" : '<p class="value"/>' + item.value + "</p>") + "\n							</div>\n						</li>";
          }).join("") + "</ul>";
        }
        return defaultHTML;
      };
      Tooltip2.prototype.valueFormatter = function(value2, label) {
        var options2 = this.getOptions();
        var valueFormatter = Tools.getProperty(options2, "tooltip", "valueFormatter");
        if (valueFormatter) {
          return valueFormatter(value2, label);
        }
        if (typeof value2.getTime === "function") {
          return format2(value2, "MMM d, yyyy");
        }
        try {
          if (typeof value2 === "string" && /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(value2)) {
            return format2(Date.parse(value2), "MMM d, yyyy");
          }
        } catch (e) {
        }
        return value2.toLocaleString();
      };
      Tooltip2.prototype.render = function() {
        var options2 = this.getOptions();
        var isTooltipEnabled = Tools.getProperty(options2, "tooltip", "enabled");
        if (isTooltipEnabled) {
          var holder = select_default2(this.services.domUtils.getHolder());
          var chartprefix = Tools.getProperty(options2, "style", "prefix");
          this.tooltip = DOMUtils.appendOrSelect(holder, "div." + carbonPrefix + "--" + chartprefix + "--tooltip");
          this.tooltip.style("max-width", null).attr("role", "tooltip");
          if (!this.isEventListenerAdded) {
            this.addTooltipEventListener();
            this.isEventListenerAdded = true;
          }
          this.tooltip.classed("hidden", true);
        } else if (!isTooltipEnabled && this.isEventListenerAdded) {
          this.removeTooltipEventListener();
          this.isEventListenerAdded = false;
        }
      };
      Tooltip2.prototype.positionTooltip = function(e) {
        var holder = this.services.domUtils.getHolder();
        var target = this.tooltip.node();
        var options2 = this.getOptions();
        var isTopZoomBarEnabled = Tools.getProperty(options2, "zoomBar", "top", "enabled");
        var mouseRelativePos = Tools.getProperty(e, "detail", "mousePosition");
        if (!mouseRelativePos) {
          mouseRelativePos = pointer_default(Tools.getProperty(e, "detail", "event"), holder);
        } else {
          var zoombarType = Tools.getProperty(options2, "zoomBar", "top", "type");
          var zoombarHeight = zoomBar.height[zoombarType];
          if (isTopZoomBarEnabled) {
            mouseRelativePos[1] += zoombarHeight + zoomBar.spacerHeight;
          }
        }
        var pos;
        var holderWidth = holder.offsetWidth;
        var holderHeight = holder.offsetHeight;
        var bestPlacementOption;
        if (mouseRelativePos[0] / holderWidth > 0.9) {
          bestPlacementOption = PLACEMENTS.LEFT;
        } else if (mouseRelativePos[0] / holderWidth < 0.1) {
          bestPlacementOption = PLACEMENTS.RIGHT;
        } else {
          bestPlacementOption = this.positionService.findBestPlacementAt({
            left: mouseRelativePos[0],
            top: mouseRelativePos[1]
          }, target, [
            PLACEMENTS.RIGHT,
            PLACEMENTS.LEFT,
            PLACEMENTS.TOP,
            PLACEMENTS.BOTTOM
          ], function() {
            return {
              width: holderWidth,
              height: holderHeight
            };
          });
        }
        var horizontalOffset = tooltips.horizontalOffset;
        if (bestPlacementOption === PLACEMENTS.LEFT) {
          horizontalOffset *= -1;
        }
        pos = this.positionService.findPositionAt({
          left: mouseRelativePos[0] + horizontalOffset,
          top: mouseRelativePos[1]
        }, target, bestPlacementOption);
        this.positionService.setElement(target, pos);
      };
      return Tooltip2;
    }(Component);
    __extends$1i = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$i = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    AxisChartsTooltip = function(_super) {
      __extends$1i(AxisChartsTooltip2, _super);
      function AxisChartsTooltip2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AxisChartsTooltip2.prototype.getItems = function(e) {
        var _this = this;
        if (e.detail.items) {
          return e.detail.items;
        }
        var data = e.detail.data;
        if (!data.length || !data[0]) {
          return [];
        }
        var options2 = this.getOptions();
        var cartesianScales = this.services.cartesianScales;
        var domainIdentifier = cartesianScales.getDomainIdentifier();
        var dualAxes = cartesianScales.isDualAxes();
        var groupMapsTo = options2.data.groupMapsTo;
        var domainLabel = cartesianScales.getDomainLabel();
        var rangeLabel = cartesianScales.getRangeLabel();
        var domainValue = data[0][domainIdentifier];
        var items;
        if (data.length === 1) {
          var datum2 = data[0];
          var rangeIdentifier = cartesianScales.getRangeIdentifier(datum2);
          if (dualAxes) {
            var position2 = cartesianScales.getRangeAxisPosition({
              datum: datum2,
              groups: [datum2[groupMapsTo]]
            });
            rangeLabel = cartesianScales.getScaleLabel(position2);
          }
          var value2 = datum2[rangeIdentifier];
          items = __spreadArrays$i([
            {
              label: domainLabel,
              value: domainValue
            }
          ], Array.isArray(value2) && value2.length === 2 ? [
            {
              label: "Start",
              value: value2[0]
            },
            {
              label: "End",
              value: value2[1]
            }
          ] : [
            {
              label: rangeLabel,
              value: datum2[rangeIdentifier]
            }
          ]);
          if (e.detail.additionalItems) {
            e.detail.additionalItems.forEach(function(additionalItem) {
              return items.push({
                label: additionalItem.label,
                value: additionalItem.value
              });
            });
          }
          items.push({
            label: options2.tooltip.groupLabel,
            value: datum2[groupMapsTo],
            color: this.model.getFillColor(datum2[groupMapsTo]),
            class: this.model.getColorClassName({
              classNameTypes: [ColorClassNameTypes.TOOLTIP],
              dataGroupName: datum2[groupMapsTo]
            })
          });
        } else if (data.length > 1) {
          items = [
            {
              label: domainLabel,
              value: domainValue
            }
          ];
          items = items.concat(data.map(function(datum22) {
            var value22 = datum22[cartesianScales.getRangeIdentifier(datum22)];
            return {
              label: datum22[groupMapsTo],
              value: Array.isArray(value22) && value22.length === 2 ? value22[0] + " - " + value22[1] : value22,
              color: _this.model.getFillColor(datum22[groupMapsTo]),
              class: _this.model.getColorClassName({
                classNameTypes: [ColorClassNameTypes.TOOLTIP],
                dataGroupName: datum22[groupMapsTo]
              })
            };
          }).sort(function(a2, b) {
            return b.value - a2.value;
          }));
          if (!dualAxes && Tools.getProperty(options2, "tooltip", "showTotal") === true) {
            var rangeIdentifier_1 = cartesianScales.getRangeIdentifier();
            items.push({
              label: get_default(options2, "tooltip.totalLabel") || "Total",
              value: data.reduce(function(accumulator, datum22) {
                return accumulator + datum22[rangeIdentifier_1];
              }, 0),
              bold: true
            });
          }
        }
        return items;
      };
      return AxisChartsTooltip2;
    }(Tooltip);
    __extends$1h = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ChartClip = function(_super) {
      __extends$1h(ChartClip2, _super);
      function ChartClip2(model, services, configs) {
        var _this = _super.call(this, model, services, configs) || this;
        _this.type = "chart-clip";
        _this.renderType = RenderTypes.SVG;
        _this.chartClipId = "chart-clip-id-" + Math.floor(Math.random() * 99999999999);
        _this.init();
        return _this;
      }
      ChartClip2.prototype.init = function() {
        this.model.set({ chartClipId: this.chartClipId }, { skipUpdate: true });
      };
      ChartClip2.prototype.render = function(animate) {
        this.createClipPath();
      };
      ChartClip2.prototype.createClipPath = function() {
        var svg = this.parent;
        var cartesianScales = this.services.cartesianScales;
        var mainXScale = cartesianScales.getMainXScale();
        var mainYScale = cartesianScales.getMainYScale();
        var _a22 = mainXScale.range(), xScaleStart = _a22[0], xScaleEnd = _a22[1];
        var _b = mainYScale.range(), yScaleEnd = _b[0], yScaleStart = _b[1];
        this.chartClipPath = DOMUtils.appendOrSelect(svg, "clipPath." + this.type).attr("id", this.chartClipId);
        var clipRect = DOMUtils.appendOrSelect(this.chartClipPath, "rect." + this.type);
        clipRect.attr("x", xScaleStart).attr("y", yScaleStart).attr("width", xScaleEnd - xScaleStart).attr("height", yScaleEnd - yScaleStart);
        this.chartClipPath.merge(clipRect).lower();
      };
      return ChartClip2;
    }(Component);
    __extends$1g = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CanvasChartClip = function(_super) {
      __extends$1g(CanvasChartClip2, _super);
      function CanvasChartClip2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "canvas-chart-clip";
        _this.chartClipId = "canvas-chart-clip-id-" + Math.floor(Math.random() * 99999999999);
        return _this;
      }
      CanvasChartClip2.prototype.createClipPath = function() {
        var svg = this.parent;
        var _a22 = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        this.chartClipPath = DOMUtils.appendOrSelect(svg, "clipPath." + this.type).attr("id", this.chartClipId);
        var clipRect = DOMUtils.appendOrSelect(this.chartClipPath, "rect." + this.type);
        clipRect.attr("x", 0).attr("y", 0).attr("width", width).attr("height", height);
        this.chartClipPath.merge(clipRect).lower();
      };
      return CanvasChartClip2;
    }(ChartClip);
    __extends$1f = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __rest3 = globalThis && globalThis.__rest || function(s2, e) {
      var t = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
          t[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
            t[p[i]] = s2[p[i]];
        }
      return t;
    };
    Highlight = function(_super) {
      __extends$1f(Highlight2, _super);
      function Highlight2(model, services) {
        var _this = _super.call(this, model, services) || this;
        _this.type = "highlight";
        _this.renderType = RenderTypes.SVG;
        _this.positionService = new utils_position_default();
        _this.highlightStrokeWidth = 1;
        return _this;
      }
      Highlight2.prototype.render = function(animate) {
        if (animate === void 0) {
          animate = false;
        }
        var axesOptions = Tools.getProperty(this.getOptions(), "axes");
        var highlightData = [];
        Object.keys(axesOptions).forEach(function(axisPosition) {
          if (Object.values(AxisPositions).includes(axisPosition)) {
            var axisOptions = axesOptions[axisPosition];
            if (axisOptions.highlights && axisOptions.highlights.data.length > 0) {
              highlightData.push({
                axisPosition,
                highlightStartMapsTo: axisOptions.highlights.highlightStartMapsTo,
                highlightEndMapsTo: axisOptions.highlights.highlightEndMapsTo,
                labelMapsTo: axisOptions.highlights.labelMapsTo,
                highlight: axisOptions.highlights.data,
                color: axisOptions.highlights.color
              });
            }
          }
        });
        var svg = this.getComponentContainer({ withinChartClip: true });
        var highlightAxisGroups = svg.selectAll("g.axis-highlight").data(highlightData, function(highlightData2) {
          return highlightData2.axisPosition;
        });
        highlightAxisGroups.exit().attr("opacity", 0).remove();
        var highlightAxisGroupsEnter = highlightAxisGroups.enter().append("g");
        var highlightAxisGroupsMerge = highlightAxisGroupsEnter.merge(highlightAxisGroups);
        highlightAxisGroupsMerge.attr("class", function(d) {
          return "axis-highlight " + d.axisPosition;
        });
        var highlightGroups = highlightAxisGroupsMerge.selectAll("g.highlight-group").data(function(d) {
          return d.highlight.map(function(highlight) {
            highlight.axisPosition = d.axisPosition;
            highlight.highlightStartMapsTo = d.highlightStartMapsTo;
            highlight.labelMapsTo = d.labelMapsTo;
            highlight.color = d.color;
            highlight.highlightEndMapsTo = d.highlightEndMapsTo;
            return highlight;
          });
        });
        highlightGroups.exit().attr("opacity", 0).remove();
        var highlightGroupsEnter = highlightGroups.enter().append("g");
        highlightGroupsEnter.append("rect").attr("class", "highlight-bar");
        highlightGroupsEnter.append("line").attr("class", "highlight-line");
        var highlightGroupsMerge = highlightGroupsEnter.merge(highlightGroups);
        highlightGroupsMerge.attr("class", "highlight-group");
        var self2 = this;
        highlightAxisGroupsMerge.each(function(_a22) {
          var axisPosition = _a22.axisPosition;
          var mainXScale = self2.services.cartesianScales.getMainXScale();
          var mainYScale = self2.services.cartesianScales.getMainYScale();
          var _b = mainXScale.range(), xScaleStart = _b[0], xScaleEnd = _b[1];
          var _c = mainYScale.range(), yScaleEnd = _c[0], yScaleStart = _c[1];
          var cartesianScales = self2.services.cartesianScales;
          var orientation = cartesianScales.getOrientation();
          var getDomainValue = function(d) {
            return cartesianScales.getDomainValue(d);
          };
          var getRangeValue = function(d) {
            return cartesianScales.getRangeValue(d);
          };
          var _d = Tools.flipDomainAndRangeBasedOnOrientation(getDomainValue, getRangeValue, orientation), getXValue = _d[0], getYValue = _d[1];
          var group = select_default2(this);
          if (axisPosition === AxisPositions.TOP || axisPosition === AxisPositions.BOTTOM) {
            group.selectAll("rect.highlight-bar").transition().call(function(t) {
              return self2.services.transitions.setupTransition({
                transition: t,
                name: "highlight-bar-update",
                animate
              });
            }).attr("y", Math.max(yScaleStart + self2.highlightStrokeWidth, 0)).attr("height", Math.max(yScaleEnd - 2 * self2.highlightStrokeWidth, 0)).attr("x", function(_a3) {
              var highlightStartMapsTo = _a3.highlightStartMapsTo, d = __rest3(_a3, ["highlightStartMapsTo"]);
              return getXValue(d[highlightStartMapsTo]);
            }).attr("width", function(_a3) {
              var highlightStartMapsTo = _a3.highlightStartMapsTo, highlightEndMapsTo = _a3.highlightEndMapsTo, d = __rest3(_a3, ["highlightStartMapsTo", "highlightEndMapsTo"]);
              return Math.max(getXValue(d[highlightEndMapsTo]) - getXValue(d[highlightStartMapsTo]), 0);
            }).style("stroke", function(_a3) {
              var color22 = _a3.color, labelMapsTo = _a3.labelMapsTo, data = __rest3(_a3, ["color", "labelMapsTo"]);
              return color22 && color22.scale[data[labelMapsTo]] ? color22.scale[data[labelMapsTo]] : null;
            }).style("stroke-dasharray", "2, 2").attr("stroke-width", self2.highlightStrokeWidth + "px").style("fill-opacity", 0.1).style("fill", function(_a3) {
              var color22 = _a3.color, labelMapsTo = _a3.labelMapsTo, data = __rest3(_a3, ["color", "labelMapsTo"]);
              return color22 && color22.scale[data[labelMapsTo]] ? color22.scale[data[labelMapsTo]] : null;
            });
          } else {
            group.selectAll("rect.highlight-bar").transition().call(function(t) {
              return self2.services.transitions.setupTransition({
                transition: t,
                name: "highlight-bar-update",
                animate
              });
            }).attr("x", xScaleStart).attr("width", Math.max(xScaleEnd - xScaleStart, 0)).attr("y", function(_a3) {
              var highlightEndMapsTo = _a3.highlightEndMapsTo, d = __rest3(_a3, ["highlightEndMapsTo"]);
              return getYValue(d[highlightEndMapsTo]);
            }).attr("height", function(_a3) {
              var highlightStartMapsTo = _a3.highlightStartMapsTo, highlightEndMapsTo = _a3.highlightEndMapsTo, d = __rest3(_a3, ["highlightStartMapsTo", "highlightEndMapsTo"]);
              return Math.max(getYValue(d[highlightStartMapsTo]) - getYValue(d[highlightEndMapsTo]), 0);
            }).style("stroke", function(_a3) {
              var color22 = _a3.color, labelMapsTo = _a3.labelMapsTo, data = __rest3(_a3, ["color", "labelMapsTo"]);
              return color22 && color22.scale[data[labelMapsTo]] ? color22.scale[data[labelMapsTo]] : null;
            }).style("stroke-dasharray", "2, 2").attr("stroke-width", self2.highlightStrokeWidth + "px").style("fill-opacity", 0.1).style("fill", function(_a3) {
              var color22 = _a3.color, labelMapsTo = _a3.labelMapsTo, data = __rest3(_a3, ["color", "labelMapsTo"]);
              return color22 && color22.scale[data[labelMapsTo]] ? color22.scale[data[labelMapsTo]] : null;
            });
          }
        });
      };
      return Highlight2;
    }(Component);
    __extends$1e = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Area = function(_super) {
      __extends$1e(Area2, _super);
      function Area2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "area";
        _this.renderType = RenderTypes.SVG;
        _this.gradient_id = "gradient-id-" + Math.floor(Math.random() * 99999999999);
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          _this.parent.selectAll("path.area").transition("legend-hover-area").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-area"
            });
          }).attr("opacity", function(group) {
            if (group.name !== hoveredElement.datum()["name"]) {
              return area.opacity.unselected;
            }
            return area.opacity.selected;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.area").transition("legend-mouseout-area").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-area"
            });
          }).attr("opacity", area.opacity.selected);
        };
        return _this;
      }
      Area2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Area2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var svg = this.getComponentContainer({ withinChartClip: true });
        var options2 = this.getOptions();
        var domain = [0, 0];
        var cartesianScales = this.services.cartesianScales;
        var orientation = cartesianScales.getOrientation();
        var areaGenerator = area_default().curve(this.services.curves.getD3Curve()).defined(function(datum2, i) {
          var rangeIdentifier = cartesianScales.getRangeIdentifier();
          var value2 = datum2[rangeIdentifier];
          if (value2 === null || value2 === void 0) {
            return false;
          }
          return true;
        });
        var groupedData = this.model.getGroupedData(this.configs.groups);
        var bounds = Tools.getProperty(options2, "bounds");
        var boundsEnabled = bounds && groupedData && groupedData.length === 1;
        if (!boundsEnabled && bounds) {
          console.warn("Bounds can only be shown when having 1 single datagroup, you've supplied " + groupedData.length);
        }
        var upperBoundRangeValue = 0;
        var includeZeroInRangeValue = function(position2, domain2) {
          if (Tools.getProperty(options2, "axes", position2, "includeZero") === false) {
            if (domain2[0] > 0 && domain2[1] > 0) {
              upperBoundRangeValue = domain2[0];
            }
          }
        };
        var upperBound = function(d, i) {
          return boundsEnabled ? cartesianScales.getBoundedScaledValues(d, i)[0] : cartesianScales.getRangeValue(upperBoundRangeValue);
        };
        var lowerBound = function(d, i) {
          return boundsEnabled ? cartesianScales.getBoundedScaledValues(d, i)[1] : cartesianScales.getRangeValue(d, i);
        };
        if (orientation === CartesianOrientations.VERTICAL) {
          domain = cartesianScales.getMainYScale().domain();
          includeZeroInRangeValue(cartesianScales.getMainYAxisPosition(), domain);
          areaGenerator.x(function(d, i) {
            return cartesianScales.getDomainValue(d, i);
          }).y0(function(d, i) {
            return upperBound(d, i);
          }).y1(function(d, i) {
            return lowerBound(d, i);
          });
        } else {
          domain = cartesianScales.getMainXScale().domain();
          includeZeroInRangeValue(cartesianScales.getMainXAxisPosition(), domain);
          areaGenerator.x0(function(d, i) {
            return upperBound(d, i);
          }).x1(function(d, i) {
            return lowerBound(d, i);
          }).y(function(d, i) {
            return cartesianScales.getDomainValue(d, i);
          });
        }
        var isGradientEnabled = Tools.getProperty(options2, "color", "gradient", "enabled");
        var isGradientAllowed = groupedData && groupedData.length === 1 && isGradientEnabled;
        if (groupedData.length > 1 && isGradientEnabled) {
          console.error("Gradients can only be enabled when having 1 single dataset");
        }
        var areas = svg.selectAll("path.area").data(groupedData, function(group) {
          return group.name;
        });
        var chartMainContainer = select_default2(this.services.domUtils.getMainContainer());
        areas.exit().attr("opacity", 0).remove();
        if (!groupedData.length) {
          return;
        }
        if (isGradientAllowed) {
          var strokePathElement = chartMainContainer.select("path." + this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            dataGroupName: groupedData[0].name
          })).node();
          var colorValue = void 0;
          if (strokePathElement) {
            colorValue = getComputedStyle(strokePathElement, null).getPropertyValue("stroke");
          } else {
            var sparklineColorObject = Tools.getProperty(this.model.getOptions(), "color", "scale");
            if (sparklineColorObject !== null) {
              var sparklineColorObjectKeys = Object.keys(sparklineColorObject);
              colorValue = sparklineColorObject[sparklineColorObjectKeys[0]];
            }
          }
          GradientUtils.appendOrUpdateLinearGradient({
            svg: this.parent,
            id: this.services.domUtils.generateElementIDString(groupedData[0].name.replace(" ", "") + "_" + this.gradient_id),
            x1: "0%",
            x2: "0%",
            y1: "0%",
            y2: "100%",
            stops: GradientUtils.getStops(domain, colorValue)
          });
        } else {
          if (!this.parent.selectAll("defs linearGradient").empty()) {
            this.parent.selectAll("defs linearGradient").each(function() {
              this.parentNode.remove();
            });
          }
        }
        var self2 = this;
        var enteringAreas = areas.enter().append("path");
        if (isGradientAllowed) {
          enteringAreas.merge(areas).style("fill", function(group) {
            return "url(#" + _this.services.domUtils.generateElementIDString(group.name.replace(" ", "") + "_" + _this.gradient_id) + ")";
          }).attr("class", "area").attr("class", function(group) {
            return _this.model.getColorClassName({
              classNameTypes: [ColorClassNameTypes.FILL],
              dataGroupName: group.name,
              originalClassName: "area"
            });
          }).attr("d", function(group) {
            var data = group.data;
            return areaGenerator(data);
          });
        } else {
          enteringAreas.attr("opacity", 0).merge(areas).attr("class", "area").attr("class", function(group) {
            return _this.model.getColorClassName({
              classNameTypes: [
                ColorClassNameTypes.FILL,
                ColorClassNameTypes.STROKE
              ],
              dataGroupName: group.name,
              originalClassName: "area"
            });
          }).style("fill", function(group) {
            return self2.model.getFillColor(group.name);
          }).transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "area-update-enter",
              animate
            });
          }).attr("opacity", boundsEnabled ? 1 : area.opacity.selected).attr("d", function(group) {
            var data = group.data;
            return areaGenerator(data);
          });
          if (boundsEnabled) {
            enteringAreas.attr("fill-opacity", area.opacity.selected).style("stroke", function(group) {
              return self2.model.getStrokeColor(group.name);
            }).style("stroke-dasharray", "2, 2").attr("stroke-width", 0.7 + "px");
          }
        }
      };
      Area2.prototype.destroy = function() {
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      return Area2;
    }(Component);
    __extends$1d = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    StackedArea = function(_super) {
      __extends$1d(StackedArea2, _super);
      function StackedArea2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "area-stacked";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var options2 = _this.getOptions();
          var groupMapsTo = options2.data.groupMapsTo;
          _this.parent.selectAll("path.area").transition("legend-hover-area").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-area"
            });
          }).attr("opacity", function(d) {
            if (Tools.getProperty(d, 0, groupMapsTo) !== hoveredElement.datum().name) {
              return area.opacity.unselected;
            }
            return area.opacity.selected;
          });
        };
        _this.handleLegendMouseOut = function() {
          _this.parent.selectAll("path.area").transition("legend-mouseout-area").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-area"
            });
          }).attr("opacity", area.opacity.selected);
        };
        return _this;
      }
      StackedArea2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      StackedArea2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var svg = this.getComponentContainer({ withinChartClip: true });
        var self2 = this;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var percentage = Object.keys(options2.axes).some(function(axis22) {
          return options2.axes[axis22].percentage;
        });
        var stackedData = this.model.getStackedData({
          percentage,
          groups: this.configs.groups
        });
        var firstDatum = Tools.getProperty(stackedData, 0, 0);
        var domainAxisPosition = this.services.cartesianScales.getDomainAxisPosition({ firstDatum });
        var rangeAxisPosition = this.services.cartesianScales.getRangeAxisPosition({ firstDatum });
        var mainYScale = this.services.cartesianScales.getScaleByPosition(rangeAxisPosition);
        var areas = svg.selectAll("path.area").data(stackedData, function(d) {
          return Tools.getProperty(d, 0, groupMapsTo);
        });
        this.areaGenerator = area_default().x(function(d, i) {
          return _this.services.cartesianScales.getValueThroughAxisPosition(domainAxisPosition, d.data.sharedStackKey, i);
        }).y0(function(d) {
          return mainYScale(d[0]);
        }).y1(function(d) {
          return mainYScale(d[1]);
        }).curve(this.services.curves.getD3Curve());
        areas.exit().attr("opacity", 0).remove();
        var enteringAreas = areas.enter().append("path").attr("opacity", 0);
        enteringAreas.merge(areas).data(stackedData, function(d) {
          return Tools.getProperty(d, 0, groupMapsTo);
        }).attr("class", "area").attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: Tools.getProperty(d, 0, groupMapsTo),
            originalClassName: "area"
          });
        }).style("fill", function(d) {
          return self2.model.getFillColor(Tools.getProperty(d, 0, groupMapsTo));
        }).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "area").attr("aria-label", function(d) {
          return Tools.getProperty(d, 0, groupMapsTo);
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "area-update-enter",
            animate
          });
        }).attr("opacity", area.opacity.selected).attr("d", this.areaGenerator);
      };
      return StackedArea2;
    }(Component);
    __extends$1c = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Bar = function(_super) {
      __extends$1c(Bar2, _super);
      function Bar2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Bar2.prototype.getBarWidth = function(allDataLabels) {
        var options2 = this.getOptions();
        if (options2.bars.width) {
          return options2.bars.width;
        }
        var numberOfDatapoints = this.model.getDisplayData().length;
        var mainXScale = this.services.cartesianScales.getMainXScale();
        var chartWidth = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }).width;
        if (!mainXScale.step) {
          var spacingFactor = Tools.getProperty(options2, "bars", "spacingFactor");
          return Math.min(options2.bars.maxWidth, chartWidth * spacingFactor / numberOfDatapoints);
        }
        return Math.min(options2.bars.maxWidth, mainXScale.step() / 2);
      };
      Bar2.prototype.isOutsideZoomedDomain = function(x0, x1) {
        var dataCount = this.model.getDisplayData().length;
        if (dataCount <= 1) {
          return false;
        }
        var zoomDomain = this.model.get("zoomDomain");
        if (zoomDomain !== void 0) {
          var domainScale = this.services.cartesianScales.getDomainScale();
          return x0 < domainScale(zoomDomain[0]) || x1 > domainScale(zoomDomain[1]);
        }
        return false;
      };
      return Bar2;
    }(Component);
    __extends$1b = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    SimpleBar = function(_super) {
      __extends$1b(SimpleBar2, _super);
      function SimpleBar2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "simple-bar";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var groupMapsTo = _this.getOptions().data.groupMapsTo;
          _this.parent.selectAll("path.bar").transition("legend-hover-simple-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-simple-bar"
            });
          }).attr("opacity", function(d) {
            return d[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.bar").transition("legend-mouseout-simple-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-simple-bar"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      SimpleBar2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      SimpleBar2.prototype.render = function(animate) {
        var _this = this;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var svg = this.getComponentContainer({ withinChartClip: true });
        var data = this.model.getDisplayData(this.configs.groups);
        var orientation = this.services.cartesianScales.getOrientation();
        var bars = svg.selectAll("path.bar").data(data, function(datum2) {
          return datum2[groupMapsTo];
        });
        bars.exit().attr("opacity", 0).remove();
        var barsEnter = bars.enter().append("path").attr("opacity", 0);
        barsEnter.merge(bars).classed("bar", true).attr("width", this.getBarWidth.bind(this)).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "bar-update-enter",
            animate
          });
        }).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d[groupMapsTo],
            originalClassName: "bar"
          });
        }).style("fill", function(d) {
          return _this.model.getFillColor(d[groupMapsTo]);
        }).attr("d", function(d, i) {
          var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier();
          var barWidth = _this.getBarWidth();
          var value2 = d[rangeIdentifier];
          var x0 = _this.services.cartesianScales.getDomainValue(d, i) - barWidth / 2;
          var x1 = x0 + barWidth;
          var y0, y1;
          if (Array.isArray(value2) && value2.length === 2) {
            y0 = _this.services.cartesianScales.getRangeValue(value2[0]);
            y1 = _this.services.cartesianScales.getRangeValue(value2[1], i);
          } else {
            var rangeScale = _this.services.cartesianScales.getRangeScale();
            var yScaleDomainStart = rangeScale.domain()[0];
            y0 = _this.services.cartesianScales.getRangeValue(Math.max(0, yScaleDomainStart));
            y1 = _this.services.cartesianScales.getRangeValue(d, i);
          }
          var difference = Math.abs(y1 - y0);
          if (difference !== 0 && difference < 2) {
            if (value2 > 0 && orientation === CartesianOrientations.VERTICAL || value2 < 0 && orientation === CartesianOrientations.HORIZONTAL) {
              y1 = y0 - 2;
            } else {
              y1 = y0 + 2;
            }
          }
          if (_this.isOutsideZoomedDomain(x0, x1)) {
            return;
          }
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        }).attr("opacity", 1).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", function(d) {
          return d.value;
        });
        this.addEventListeners();
      };
      SimpleBar2.prototype.addEventListeners = function() {
        var self2 = this;
        this.parent.selectAll("path.bar").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            data: [datum2]
          });
        }).on("mousemove", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEMOVE, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      SimpleBar2.prototype.destroy = function() {
        this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      return SimpleBar2;
    }(Bar);
    __extends$1a = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    GroupedBar = function(_super) {
      __extends$1a(GroupedBar2, _super);
      function GroupedBar2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "grouped-bar";
        _this.renderType = RenderTypes.SVG;
        _this.padding = 5;
        _this.defaultStepFactor = 70;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var groupMapsTo = _this.getOptions().data.groupMapsTo;
          _this.parent.selectAll("path.bar").transition("legend-hover-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-bar"
            });
          }).attr("opacity", function(d) {
            return d[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-bar"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      GroupedBar2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      GroupedBar2.prototype.render = function(animate) {
        var _this = this;
        var displayData = this.model.getDisplayData(this.configs.groups);
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        this.setGroupScale();
        var svg = this.getComponentContainer({ withinChartClip: true });
        var allDataLabels = Tools.removeArrayDuplicates(displayData.map(function(datum2) {
          var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(datum2);
          return datum2[domainIdentifier] && typeof datum2[domainIdentifier].toString === "function" ? datum2[domainIdentifier].toString() : datum2[domainIdentifier];
        }));
        var barGroups = svg.selectAll("g.bars").data(allDataLabels, function(label) {
          return label;
        });
        barGroups.exit().attr("opacity", 0).remove();
        var barGroupsEnter = barGroups.enter().append("g").classed("bars", true).attr("role", Roles.GROUP).attr("data-name", "bars");
        var allBarGroups = barGroupsEnter.merge(barGroups);
        allBarGroups.transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "bar-group-update-enter",
            animate
          });
        }).attr("transform", function(label, i) {
          var scaleValue = _this.services.cartesianScales.getDomainValue(label, i);
          var translateBy = scaleValue - _this.getGroupWidth() / 2;
          if (_this.services.cartesianScales.getOrientation() === CartesianOrientations.VERTICAL) {
            return "translate(" + translateBy + ", 0)";
          } else {
            return "translate(0, " + translateBy + ")";
          }
        });
        var bars = allBarGroups.selectAll("path.bar").data(function(label) {
          return _this.getDataCorrespondingToLabel(label);
        }, function(d) {
          return d[groupMapsTo];
        });
        bars.exit().attr("opacity", 0).remove();
        var barsEnter = bars.enter().append("path").attr("opacity", 0);
        barsEnter.merge(bars).classed("bar", true).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "bar-update-enter",
            animate
          });
        }).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d[groupMapsTo],
            originalClassName: "bar"
          });
        }).style("fill", function(d) {
          return _this.model.getFillColor(d[groupMapsTo]);
        }).attr("d", function(d, i) {
          var startX = _this.groupScale(d[groupMapsTo]);
          var barWidth = _this.getBarWidth();
          var x0 = startX;
          var x1 = startX + barWidth;
          var rangeAxis = _this.services.cartesianScales.getRangeAxisPosition({ datum: d });
          var y0 = _this.services.cartesianScales.getValueThroughAxisPosition(rangeAxis, 0);
          var y1 = _this.services.cartesianScales.getRangeValue(d);
          var zoomx0 = _this.services.cartesianScales.getDomainValue(d, i) - barWidth / 2;
          var zoomx1 = zoomx0 + barWidth;
          if (_this.isOutsideZoomedDomain(zoomx0, zoomx1)) {
            return;
          }
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, _this.services.cartesianScales.getOrientation());
        }).attr("opacity", 1).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", function(d) {
          return d.value;
        });
        this.addEventListeners();
      };
      GroupedBar2.prototype.addEventListeners = function() {
        var self2 = this;
        this.parent.selectAll("path.bar").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            data: [datum2]
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      GroupedBar2.prototype.destroy = function() {
        this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      GroupedBar2.prototype.getDataCorrespondingToLabel = function(label) {
        var _this = this;
        var displayData = this.model.getDisplayData(this.configs.groups);
        return displayData.filter(function(datum2) {
          var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(datum2);
          return datum2[domainIdentifier].toString() === label;
        });
      };
      GroupedBar2.prototype.getGroupWidth = function() {
        var activeData = this.model.getGroupedData(this.configs.groups);
        var totalGroupPadding = this.getTotalGroupPadding();
        return this.getBarWidth() * activeData.length + totalGroupPadding;
      };
      GroupedBar2.prototype.getDomainScaleStep = function() {
        var domainScale = this.services.cartesianScales.getDomainScale();
        var activeData = this.model.getGroupedData(this.configs.groups);
        var step = this.defaultStepFactor;
        if (typeof domainScale.step === "function") {
          step = domainScale.step();
        } else if (activeData.length > 0) {
          var ref = activeData.find(function(d) {
            var _a22;
            return ((_a22 = d.data) === null || _a22 === void 0 ? void 0 : _a22.length) > 1;
          });
          if (ref) {
            var domainIdentifier = this.services.cartesianScales.getDomainIdentifier(ref.data[0]);
            step = Math.abs(domainScale(ref.data[1][domainIdentifier]) - domainScale(ref.data[0][domainIdentifier]));
          }
        }
        return step;
      };
      GroupedBar2.prototype.getTotalGroupPadding = function() {
        var activeData = this.model.getGroupedData(this.configs.groups);
        if (activeData.length === 1) {
          return 0;
        }
        var padding = Math.min(5, 5 * (this.getDomainScaleStep() / this.defaultStepFactor));
        return padding * (activeData.length - 1);
      };
      GroupedBar2.prototype.getBarWidth = function() {
        var options2 = this.getOptions();
        var providedWidth = Tools.getProperty(options2, "bars", "width");
        var providedMaxWidth = Tools.getProperty(options2, "bars", "maxWidth");
        if (providedWidth !== null) {
          if (providedMaxWidth === null || providedWidth <= providedMaxWidth) {
            return providedWidth;
          }
        }
        var activeData = this.model.getGroupedData(this.configs.groups);
        var numOfActiveDataGroups = activeData.length;
        var totalGroupPadding = this.getTotalGroupPadding();
        return Math.min(providedMaxWidth, (this.getDomainScaleStep() - totalGroupPadding) / numOfActiveDataGroups);
      };
      GroupedBar2.prototype.setGroupScale = function() {
        var activeData = this.model.getActiveDataGroupNames(this.configs.groups);
        this.groupScale = band().domain(activeData).rangeRound([0, this.getGroupWidth()]);
      };
      return GroupedBar2;
    }(Bar);
    __extends$19 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    StackedBar = function(_super) {
      __extends$19(StackedBar2, _super);
      function StackedBar2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "stacked-bar";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var groupMapsTo = _this.model.getOptions().data.groupMapsTo;
          _this.parent.selectAll("path.bar").transition("legend-hover-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-bar"
            });
          }).attr("opacity", function(d) {
            return d[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-bar"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      StackedBar2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      StackedBar2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer({ withinChartClip: true });
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var stackData = this.model.getStackedData({
          groups: this.configs.groups,
          divergent: true
        });
        var activeDataGroupNames = this.model.getActiveDataGroupNames();
        var barGroups = svg.selectAll("g.bars").data(stackData, function(d) {
          return Tools.getProperty(d, 0, groupMapsTo);
        });
        barGroups.exit().attr("opacity", 0).remove();
        barGroups.enter().append("g").classed("bars", true).attr("role", Roles.GROUP).attr("data-name", "bars");
        var bars = svg.selectAll("g.bars").selectAll("path.bar").data(function(d) {
          return d;
        }, function(d) {
          return d.data.sharedStackKey;
        });
        bars.exit().remove();
        bars.enter().append("path").merge(bars).classed("bar", true).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "bar-update-enter",
            animate
          });
        }).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d[groupMapsTo],
            originalClassName: "bar"
          });
        }).style("fill", function(d) {
          return _this.model.getFillColor(d[groupMapsTo]);
        }).attr("d", function(d, i) {
          var key2 = d.data.sharedStackKey;
          var barWidth = _this.getBarWidth();
          var x0 = _this.services.cartesianScales.getDomainValue(key2, i) - barWidth / 2;
          var x1 = x0 + barWidth;
          var y0 = _this.services.cartesianScales.getRangeValue(d[0], i);
          var y1 = _this.services.cartesianScales.getRangeValue(d[1], i);
          if (_this.isOutsideZoomedDomain(x0, x1)) {
            return;
          }
          if (Math.abs(y1 - y0) > 0 && Math.abs(y1 - y0) > options2.bars.dividerSize) {
            var barIsNegative = d[0] < 0 && d[1] <= 0;
            if (barIsNegative && activeDataGroupNames.length > 1) {
              if (_this.services.cartesianScales.getOrientation() === CartesianOrientations.VERTICAL) {
                y1 += d[1] === 0 ? 2 : 1;
              } else {
                y1 -= 1;
              }
            } else if (!barIsNegative) {
              if (_this.services.cartesianScales.getOrientation() === CartesianOrientations.VERTICAL) {
                y1 += 1;
              } else {
                y1 -= 1;
              }
            }
          }
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, _this.services.cartesianScales.getOrientation());
        }).attr("opacity", 1).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", function(d) {
          return d[1] - d[0];
        });
        this.addEventListeners();
      };
      StackedBar2.prototype.addEventListeners = function() {
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var self2 = this;
        this.parent.selectAll("path.bar").on("mouseover", function(event, datum2) {
          var _a22;
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          var displayData = self2.model.getDisplayData(self2.configs.groups);
          var matchingDataPoint = displayData.find(function(d) {
            var domainIdentifier2 = self2.services.cartesianScales.getDomainIdentifier(d);
            var rangeIdentifier2 = self2.services.cartesianScales.getRangeIdentifier(d);
            return d[rangeIdentifier2] === datum2.data[datum2[groupMapsTo]] && d[domainIdentifier2].toString() === datum2.data.sharedStackKey && d[groupMapsTo] === datum2[groupMapsTo];
          });
          if (matchingDataPoint === void 0) {
            var domainIdentifier = self2.services.cartesianScales.getDomainIdentifier();
            var rangeIdentifier = self2.services.cartesianScales.getRangeIdentifier();
            matchingDataPoint = (_a22 = {}, _a22[domainIdentifier] = datum2.data.sharedStackKey, _a22[rangeIdentifier] = datum2.data[datum2[groupMapsTo]], _a22[groupMapsTo] = datum2[groupMapsTo], _a22);
          }
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            data: [matchingDataPoint]
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      StackedBar2.prototype.getBarWidth = function() {
        var options2 = this.getOptions();
        if (Tools.getProperty(options2, "bars", "width")) {
          return options2.bars.width;
        }
        var mainXScale = this.services.cartesianScales.getMainXScale();
        var chartWidth = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }).width;
        var numberOfDomainValues = this.model.getStackKeys().length;
        var spacingFactor = Tools.getProperty(options2, "bars", "spacingFactor");
        if (!mainXScale.step) {
          return Math.min(options2.bars.maxWidth, chartWidth * spacingFactor / numberOfDomainValues);
        }
        return Math.min(options2.bars.maxWidth, mainXScale.step() / 2);
      };
      StackedBar2.prototype.destroy = function() {
        this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      return StackedBar2;
    }(Bar);
    __extends$18 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Boxplot = function(_super) {
      __extends$18(Boxplot2, _super);
      function Boxplot2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "boxplot";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      Boxplot2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer({ withinChartClip: true });
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var dataGroupNames = this.model.getDataGroupNames();
        var mainXScale = this.services.cartesianScales.getMainXScale();
        var mainYScale = this.services.cartesianScales.getMainYScale();
        var _a22 = mainXScale.range(), xScaleStart = _a22[0], xScaleEnd = _a22[1];
        var _b = mainYScale.range(), yScaleEnd = _b[0], yScaleStart = _b[1];
        var width = xScaleEnd - xScaleStart;
        var height = yScaleEnd - yScaleStart;
        if (width === 0) {
          return;
        }
        var cartesianScales = this.services.cartesianScales;
        var orientation = cartesianScales.getOrientation();
        var isInVerticalOrientation = orientation === CartesianOrientations.VERTICAL;
        var _c = Tools.flipDomainAndRangeBasedOnOrientation(function(d, i) {
          return _this.services.cartesianScales.getDomainValue(d, i);
        }, function(d, i) {
          return _this.services.cartesianScales.getRangeValue(d, i);
        }, orientation), getXValue = _c[0], getYValue = _c[1];
        var gridSize = Math.floor((isInVerticalOrientation ? width : height) / dataGroupNames.length);
        var boxWidth = Math.min(gridSize / 2, 16);
        var boxplotData = this.model.getBoxplotData();
        var boxGroups = svg.selectAll(".box-group").data(boxplotData);
        boxGroups.exit().remove();
        var boxGroupsEnter = boxGroups.enter().append("g").attr("class", "box-group");
        var allBoxGroups = boxGroups.merge(boxGroupsEnter);
        boxGroupsEnter.append("path").merge(boxGroups.select("path.vertical-line.start")).attr("class", function() {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            originalClassName: "vertical-line start"
          });
        }).attr("stroke-width", boxplot.strokeWidth.default).attr("fill", "none").transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "boxplot-update-verticalstartline",
            animate
          });
        }).attr("d", function(d) {
          var x0 = cartesianScales.getDomainValue(d[groupMapsTo]);
          var x1 = x0;
          var y0 = cartesianScales.getRangeValue(d.whiskers.min);
          var y1 = cartesianScales.getRangeValue(d.quartiles.q_25);
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        });
        boxGroupsEnter.append("path").merge(boxGroups.select("path.vertical-line.end")).attr("class", function() {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            originalClassName: "vertical-line end"
          });
        }).attr("stroke-width", boxplot.strokeWidth.default).attr("fill", "none").transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "boxplot-update-verticalendline",
            animate
          });
        }).attr("d", function(d) {
          var x0 = cartesianScales.getDomainValue(d[groupMapsTo]);
          var x1 = x0;
          var y0 = cartesianScales.getRangeValue(d.whiskers.max);
          var y1 = cartesianScales.getRangeValue(d.quartiles.q_75);
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        });
        boxGroupsEnter.append("path").merge(boxGroups.select("path.box")).attr("class", function() {
          return _this.model.getColorClassName({
            classNameTypes: [
              ColorClassNameTypes.FILL,
              ColorClassNameTypes.STROKE
            ],
            originalClassName: "box"
          });
        }).attr("fill-opacity", boxplot.box.opacity.default).attr("stroke-width", boxplot.strokeWidth.default).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "box").attr("aria-label", function(d) {
          return d[groupMapsTo];
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "boxplot-update-quartiles",
            animate
          });
        }).attr("d", function(d) {
          var x0 = cartesianScales.getDomainValue(d[groupMapsTo]) - boxWidth / 2;
          var x1 = x0 + boxWidth;
          var y0 = cartesianScales.getRangeValue(Math[isInVerticalOrientation ? "max" : "min"](d.quartiles.q_75, d.quartiles.q_25));
          var y1 = y0 + Math.abs(cartesianScales.getRangeValue(d.quartiles.q_75) - cartesianScales.getRangeValue(d.quartiles.q_25));
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        });
        boxGroupsEnter.append("path").merge(boxGroups.select("path.highlight-area")).attr("class", "highlight-area").attr("opacity", 0).attr("d", function(d) {
          var x0 = cartesianScales.getDomainValue(d[groupMapsTo]) - boxWidth / 2;
          var x1 = x0 + boxWidth;
          var y0 = cartesianScales.getRangeValue(d.whiskers.min);
          var y1 = cartesianScales.getRangeValue(d.whiskers.max);
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        });
        boxGroupsEnter.append("path").merge(boxGroups.select("path.whisker.start")).attr("class", function() {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            originalClassName: "whisker start"
          });
        }).attr("stroke-width", boxplot.strokeWidth.thicker).attr("fill", "none").transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "boxplot-update-startingwhisker",
            animate
          });
        }).attr("d", function(d) {
          var x0 = cartesianScales.getDomainValue(d[groupMapsTo]) - boxWidth / 4;
          var x1 = x0 + boxWidth / 2;
          var y0 = cartesianScales.getRangeValue(d.whiskers.min);
          var y1 = cartesianScales.getRangeValue(d.whiskers.min);
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        });
        boxGroupsEnter.append("path").merge(boxGroups.select("path.median")).attr("fill", "none").attr("class", function() {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            originalClassName: "median"
          });
        }).attr("stroke-width", 2).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "boxplot-update-median",
            animate
          });
        }).attr("d", function(d) {
          var x0 = cartesianScales.getDomainValue(d[groupMapsTo]) - boxWidth / 2;
          var x1 = x0 + boxWidth;
          var y0 = cartesianScales.getRangeValue(d.quartiles.q_50);
          var y1 = y0;
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        });
        boxGroupsEnter.append("path").merge(boxGroups.select("path.whisker.end")).attr("class", function() {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            originalClassName: "whisker end"
          });
        }).attr("stroke-width", boxplot.strokeWidth.thicker).attr("fill", "none").transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "boxplot-update-endingwhisker",
            animate
          });
        }).attr("d", function(d) {
          var x0 = cartesianScales.getDomainValue(d[groupMapsTo]) - boxWidth / 4;
          var x1 = x0 + boxWidth / 2;
          var y0 = cartesianScales.getRangeValue(d.whiskers.max);
          var y1 = cartesianScales.getRangeValue(d.whiskers.max);
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, orientation);
        });
        var circles = allBoxGroups.selectAll("circle.outlier").data(function(d) {
          return d.outliers.map(function(outlier) {
            var _a3;
            return _a3 = {
              min: d.whiskers.min,
              max: d.whiskers.max
            }, _a3[groupMapsTo] = d[groupMapsTo], _a3.value = outlier, _a3;
          });
        });
        circles.exit().remove();
        var circlesEnter = circles.enter().append("circle");
        circles.merge(circlesEnter).attr("r", boxplot.circle.radius).attr("class", function() {
          return _this.model.getColorClassName({
            classNameTypes: [
              ColorClassNameTypes.FILL,
              ColorClassNameTypes.STROKE
            ],
            originalClassName: "outlier"
          });
        }).attr("fill-opacity", boxplot.circle.opacity.default).attr("cx", getXValue).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "boxplot-update-circles",
            animate
          });
        }).attr("cy", getYValue);
        this.addBoxEventListeners();
        this.addCircleEventListeners();
      };
      Boxplot2.prototype.addBoxEventListeners = function() {
        var self2 = this;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        this.parent.selectAll("path.highlight-area").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          var parentElement = select_default2(this.parentNode);
          parentElement.select("path.box").classed("hovered", true).attr("fill-opacity", boxplot.box.opacity.hovered);
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                label: options2.tooltip.groupLabel,
                value: datum2[groupMapsTo],
                class: self2.model.getColorClassName({
                  classNameTypes: [ColorClassNameTypes.TOOLTIP]
                })
              },
              {
                label: "Minimum",
                value: datum2.whiskers.min
              },
              {
                label: "Q1",
                value: datum2.quartiles.q_25
              },
              {
                label: "Median",
                value: datum2.quartiles.q_50
              },
              {
                label: "Q3",
                value: datum2.quartiles.q_75
              },
              {
                label: "Maximum",
                value: datum2.whiskers.max
              },
              {
                label: "IQR",
                value: datum2.quartiles.q_75 - datum2.quartiles.q_25
              }
            ]
          });
          self2.services.events.dispatchEvent(Events$1.Boxplot.BOX_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Boxplot.BOX_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Boxplot.BOX_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          var parentElement = select_default2(this.parentNode);
          parentElement.select("path.box").classed("hovered", false).attr("fill-opacity", boxplot.box.opacity.default);
          self2.services.events.dispatchEvent(Events$1.Boxplot.BOX_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      Boxplot2.prototype.addCircleEventListeners = function() {
        var self2 = this;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();
        this.parent.selectAll("circle").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true).attr("fill-opacity", boxplot.circle.opacity.hovered).classed("unfilled", false);
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                label: options2.tooltip.groupLabel,
                value: datum2[groupMapsTo],
                class: self2.model.getColorClassName({
                  classNameTypes: [ColorClassNameTypes.TOOLTIP]
                })
              },
              {
                label: "Outlier",
                value: datum2[rangeIdentifier]
              }
            ]
          });
          self2.services.events.dispatchEvent(Events$1.Boxplot.OUTLIER_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Boxplot.OUTLIER_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Boxplot.OUTLIER_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false).attr("fill-opacity", boxplot.circle.opacity.default);
          self2.services.events.dispatchEvent(Events$1.Boxplot.OUTLIER_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      return Boxplot2;
    }(Component);
    __extends$17 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Scatter = function(_super) {
      __extends$17(Scatter2, _super);
      function Scatter2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "scatter";
        _this.renderType = RenderTypes.SVG;
        _this.handleChartHolderOnHover = function(event) {
          _this.parent.selectAll("circle.dot").transition("chart-holder-hover-scatter").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "chart-holder-hover-scatter"
            });
          }).attr("opacity", 1);
        };
        _this.handleChartHolderOnMouseOut = function(event) {
          _this.parent.selectAll("circle.dot").transition("chart-holder-mouseout-scatter").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "chart-holder-mouseout-scatter"
            });
          }).attr("opacity", 0);
        };
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var groupMapsTo = _this.getOptions().data.groupMapsTo;
          _this.parent.selectAll("circle.dot").transition("legend-hover-scatter").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-scatter"
            });
          }).attr("opacity", function(d) {
            return d[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("circle.dot").transition("legend-mouseout-scatter").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-scatter"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      Scatter2.prototype.init = function() {
        var events = this.services.events;
        events.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        events.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
        var fadeInOnChartHolderMouseover = this.configs.fadeInOnChartHolderMouseover;
        if (fadeInOnChartHolderMouseover) {
          events.addEventListener(Events$1.Chart.MOUSEOVER, this.handleChartHolderOnHover);
          events.addEventListener(Events$1.Chart.MOUSEOUT, this.handleChartHolderOnMouseOut);
        }
      };
      Scatter2.prototype.filterBasedOnZoomDomain = function(data) {
        var domainIdentifier = this.services.cartesianScales.getDomainIdentifier(data);
        var zoomDomain = this.model.get("zoomDomain");
        if (zoomDomain !== void 0) {
          return data.filter(function(d) {
            return d[domainIdentifier].getTime() >= zoomDomain[0].getTime() && d[domainIdentifier].getTime() <= zoomDomain[1].getTime();
          });
        }
        return data;
      };
      Scatter2.prototype.getScatterData = function() {
        var _this = this;
        var options2 = this.getOptions();
        var stacked = this.configs.stacked;
        var scatterData;
        if (stacked) {
          var percentage = Object.keys(options2.axes).some(function(axis22) {
            return options2.axes[axis22].percentage;
          });
          scatterData = this.model.getStackedData({
            groups: this.configs.groups,
            percentage
          });
        } else {
          scatterData = this.model.getDisplayData(this.configs.groups).filter(function(d) {
            var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(d);
            return d[rangeIdentifier] !== void 0 && d[rangeIdentifier] !== null;
          });
        }
        return this.filterBasedOnZoomDomain(scatterData);
      };
      Scatter2.prototype.render = function(animate) {
        var isScatterEnabled = Tools.getProperty(this.getOptions(), "points", "enabled") || Tools.getProperty(this.getOptions(), "bubble", "enabled");
        if (!isScatterEnabled) {
          return;
        }
        var svg = this.getComponentContainer({ withinChartClip: true });
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var domainIdentifier = this.services.cartesianScales.getDomainIdentifier();
        var circles = svg.selectAll("circle.dot").data(this.getScatterData(), function(datum2) {
          return datum2[groupMapsTo] + "-" + datum2[domainIdentifier];
        });
        circles.exit().attr("opacity", 0).remove();
        var enteringCircles = circles.enter().append("circle").classed("dot", true).attr("opacity", 0);
        var circlesToStyle = enteringCircles.merge(circles);
        this.styleCircles(circlesToStyle, animate);
        this.addEventListeners();
      };
      Scatter2.prototype.isDatapointThresholdAnomaly = function(datum2, index5) {
        var _this = this;
        var handleThresholds = this.configs.handleThresholds;
        if (!handleThresholds) {
          return false;
        }
        var cartesianScales = this.services.cartesianScales;
        var orientation = cartesianScales.getOrientation();
        var _a22 = Tools.flipDomainAndRangeBasedOnOrientation(this.services.cartesianScales.getHighestDomainThreshold(), this.services.cartesianScales.getHighestRangeThreshold(), orientation), xThreshold = _a22[0], yThreshold = _a22[1];
        var _b = Tools.flipDomainAndRangeBasedOnOrientation(function(d, i) {
          return _this.services.cartesianScales.getDomainValue(d, i);
        }, function(d, i) {
          return _this.services.cartesianScales.getRangeValue(d, i);
        }, orientation), getXValue = _b[0], getYValue = _b[1];
        var xValue = getXValue(datum2, index5);
        var yValue = getYValue(datum2, index5);
        if (yThreshold && xThreshold) {
          return yValue <= yThreshold.scaleValue && xValue >= xThreshold.scaleValue;
        }
        if (yThreshold) {
          return yValue <= yThreshold.scaleValue;
        }
        if (xThreshold) {
          return xValue >= xThreshold.scaleValue;
        }
      };
      Scatter2.prototype.styleCircles = function(selection2, animate) {
        var _this = this;
        var options2 = this.getOptions();
        var _a22 = options2.points, filled = _a22.filled, fillOpacity = _a22.fillOpacity;
        var _b = this.services, cartesianScales = _b.cartesianScales;
        _b.transitions;
        var groupMapsTo = options2.data.groupMapsTo;
        var getDomainValue = function(d, i) {
          return cartesianScales.getDomainValue(d, i);
        };
        var getRangeValue = function(d, i) {
          return cartesianScales.getRangeValue(d, i);
        };
        var _c = Tools.flipDomainAndRangeBasedOnOrientation(getDomainValue, getRangeValue, cartesianScales.getOrientation()), getXValue = _c[0], getYValue = _c[1];
        var fadeInOnChartHolderMouseover = this.configs.fadeInOnChartHolderMouseover;
        selection2.raise().classed("dot", true).attr("class", function(d) {
          var domainIdentifier = cartesianScales.getDomainIdentifier(d);
          var isFilled = _this.model.getIsFilled(d[groupMapsTo], d[domainIdentifier], d, filled);
          var classNamesNeeded = isFilled ? [ColorClassNameTypes.FILL, ColorClassNameTypes.STROKE] : [ColorClassNameTypes.STROKE];
          return _this.model.getColorClassName({
            classNameTypes: classNamesNeeded,
            dataGroupName: d[groupMapsTo],
            originalClassName: "dot"
          });
        }).classed("threshold-anomaly", function(d, i) {
          return _this.isDatapointThresholdAnomaly(d, i);
        }).classed("filled", function(d) {
          var domainIdentifier = cartesianScales.getDomainIdentifier(d);
          return _this.model.getIsFilled(d[groupMapsTo], d[domainIdentifier], d, filled);
        }).classed("unfilled", function(d) {
          var domainIdentifier = cartesianScales.getDomainIdentifier(d);
          return !_this.model.getIsFilled(d[groupMapsTo], d[domainIdentifier], d, filled);
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "scatter-update-enter",
            animate
          });
        }).attr("cx", getXValue).attr("cy", getYValue).attr("r", options2.points.radius).style("fill", function(d) {
          var domainIdentifier = cartesianScales.getDomainIdentifier(d);
          if (_this.model.getIsFilled(d[groupMapsTo], d[domainIdentifier], d, filled)) {
            return _this.model.getFillColor(d[groupMapsTo], d[domainIdentifier], d);
          }
        }).style("stroke", function(d) {
          var domainIdentifier = cartesianScales.getDomainIdentifier(d);
          return _this.model.getStrokeColor(d[groupMapsTo], d[domainIdentifier], d);
        }).attr("fill-opacity", filled ? fillOpacity : 1).attr("opacity", fadeInOnChartHolderMouseover ? 0 : 1).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "point").attr("aria-label", function(d) {
          var rangeIdentifier = cartesianScales.getRangeIdentifier(d);
          return d[rangeIdentifier];
        });
        this.addEventListeners();
      };
      Scatter2.prototype.getTooltipAdditionalItems = function(datum2) {
        return null;
      };
      Scatter2.prototype.addEventListeners = function() {
        var self2 = this;
        var groupMapsTo = self2.getOptions().data.groupMapsTo;
        this.parent.selectAll("circle").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true).attr("class", function(d) {
            return self2.model.getColorClassName({
              classNameTypes: [ColorClassNameTypes.FILL],
              dataGroupName: d[groupMapsTo],
              originalClassName: hoveredElement.attr("class")
            });
          }).style("fill", function(d) {
            var domainIdentifier = self2.services.cartesianScales.getDomainIdentifier(d);
            return self2.model.getFillColor(d[groupMapsTo], d[domainIdentifier], d);
          }).classed("unfilled", false);
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            data: [datum2],
            additionalItems: self2.getTooltipAdditionalItems(datum2)
          });
          self2.services.events.dispatchEvent(Events$1.Scatter.SCATTER_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Scatter.SCATTER_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Scatter.SCATTER_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          if (!self2.configs.filled) {
            var filled_1 = self2.getOptions().points.filled;
            var domainIdentifier_1 = self2.services.cartesianScales.getDomainIdentifier(datum2);
            var isFilled_1 = self2.model.getIsFilled(datum2[groupMapsTo], datum2[domainIdentifier_1], datum2, filled_1);
            hoveredElement.classed("unfilled", !isFilled_1).style("fill", function(d) {
              if (isFilled_1 || filled_1) {
                return self2.model.getFillColor(d[groupMapsTo], d[domainIdentifier_1], d);
              }
              return null;
            });
          }
          self2.services.events.dispatchEvent(Events$1.Scatter.SCATTER_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      Scatter2.prototype.destroy = function() {
        this.parent.selectAll("circle").on("mousemove", null).on("mouseout", null);
        var events = this.services.events;
        events.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        events.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
        events.removeEventListener(Events$1.Chart.MOUSEOVER, this.handleChartHolderOnHover);
        events.removeEventListener(Events$1.Chart.MOUSEOUT, this.handleChartHolderOnMouseOut);
      };
      return Scatter2;
    }(Component);
    __extends$16 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Bubble = function(_super) {
      __extends$16(Bubble2, _super);
      function Bubble2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "bubble";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      Bubble2.prototype.getRadiusScale = function(selection2) {
        var options2 = this.getOptions();
        var radiusMapsTo = options2.bubble.radiusMapsTo;
        var data = selection2.data();
        var allRadii = data.map(function(d) {
          return d[radiusMapsTo];
        }).filter(function(radius) {
          return radius;
        });
        var chartSize = DOMUtils.getHTMLElementSize(this.services.domUtils.getMainContainer());
        var radiusDataIsValid = allRadii.length > 0;
        var domain = radiusDataIsValid ? extent(allRadii) : [1, 1];
        return linear3().domain(domain).range(radiusDataIsValid ? options2.bubble.radiusRange(chartSize, data) : [4, 4]);
      };
      Bubble2.prototype.styleCircles = function(selection2, animate) {
        var _this = this;
        var options2 = this.getOptions();
        var radiusMapsTo = options2.bubble.radiusMapsTo;
        var radiusScale = this.getRadiusScale(selection2);
        var groupMapsTo = options2.data.groupMapsTo;
        var cartesianScales = this.services.cartesianScales;
        var getDomainValue = function(d, i) {
          return cartesianScales.getDomainValue(d, i);
        };
        var getRangeValue = function(d, i) {
          return cartesianScales.getRangeValue(d, i);
        };
        var _a22 = Tools.flipDomainAndRangeBasedOnOrientation(getDomainValue, getRangeValue, cartesianScales.getOrientation()), getXValue = _a22[0], getYValue = _a22[1];
        selection2.raise().classed("dot", true).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-label", function(d) {
          var rangeIdentifier = cartesianScales.getRangeIdentifier(d);
          return d[rangeIdentifier];
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "bubble-update-enter",
            animate
          });
        }).attr("cx", getXValue).attr("cy", getYValue).attr("r", function(d) {
          return radiusScale(d[radiusMapsTo] || 1);
        }).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [
              ColorClassNameTypes.FILL,
              ColorClassNameTypes.STROKE
            ],
            dataGroupName: d[groupMapsTo],
            originalClassName: "dot"
          });
        }).style("fill", function(d) {
          var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(d);
          return _this.model.getFillColor(d[groupMapsTo], d[domainIdentifier], d);
        }).style("stroke", function(d) {
          var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(d);
          return _this.model.getStrokeColor(d[groupMapsTo], d[domainIdentifier], d);
        }).attr("fill-opacity", options2.bubble.fillOpacity).attr("opacity", 1);
      };
      Bubble2.prototype.getTooltipAdditionalItems = function(datum2) {
        var bubbleOptions = Tools.getProperty(this.getOptions(), "bubble");
        return [
          {
            label: Tools.getProperty(bubbleOptions, "radiusLabel"),
            value: datum2[Tools.getProperty(bubbleOptions, "radiusMapsTo")]
          }
        ];
      };
      return Bubble2;
    }(Scatter);
    __extends$15 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Bullet = function(_super) {
      __extends$15(Bullet2, _super);
      function Bullet2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "bullet";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var groupMapsTo = _this.getOptions().data.groupMapsTo;
          _this.parent.selectAll("path.bar").transition("legend-hover-simple-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-simple-bar"
            });
          }).attr("opacity", function(d) {
            return d[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.bar").transition("legend-mouseout-simple-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-simple-bar"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      Bullet2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Bullet2.prototype.render = function(animate) {
        var _this = this;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var svg = this.getComponentContainer({ withinChartClip: true });
        var data = this.model.getDisplayData(this.configs.groups);
        var rangeScale = this.services.cartesianScales.getRangeScale();
        var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();
        var _a22 = rangeScale.range(), rangeScaleStart = _a22[0], rangeScaleEnd = _a22[1];
        var _b = rangeScale.domain();
        _b[0];
        var rangeScaleDomainMax = _b[1];
        var renderRangeBoxes = function() {
          var rangeBoxData = [];
          data.forEach(function(datum2) {
            if (datum2.ranges) {
              datum2.ranges.forEach(function(range2, i) {
                if (range2 !== null && range2 !== void 0 && range2 < rangeScaleDomainMax) {
                  rangeBoxData.push({
                    datum: datum2,
                    value: range2,
                    order: i + 1
                  });
                }
              });
            } else {
              rangeBoxData.push({
                datum: datum2,
                order: 1
              });
            }
          });
          var rangeBoxes = DOMUtils.appendOrSelect(svg, "g.range-boxes").selectAll("path.range-box").data(rangeBoxData, function(datum2) {
            return datum2[groupMapsTo] + "-" + datum2.order;
          });
          rangeBoxes.exit().attr("opacity", 0).remove();
          var rangeBoxesEnter = rangeBoxes.enter().append("path").attr("opacity", 0);
          rangeBoxesEnter.merge(rangeBoxes).attr("class", function(d) {
            return "range-box order-" + d.order;
          }).transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "bullet-range-box-update-enter",
              animate
            });
          }).attr("d", function(d, i) {
            var lineHeight = 16;
            var x0, x1, y0, y1;
            if (d.order === 1) {
              x0 = _this.services.cartesianScales.getDomainValue(d.datum, i) - lineHeight / 2;
              x1 = x0 + lineHeight;
              y0 = rangeScaleEnd - 2;
              y1 = rangeScaleStart + 1;
            } else {
              x0 = _this.services.cartesianScales.getDomainValue(d.datum, i) - lineHeight / 2;
              x1 = x0 + lineHeight;
              y0 = _this.services.cartesianScales.getRangeValue(d.value, i);
              y1 = rangeScaleEnd;
            }
            return Tools.generateSVGPathString({ x0, x1, y0, y1 }, _this.services.cartesianScales.getOrientation());
          }).attr("opacity", 1);
        };
        var renderBars = function() {
          var bars = DOMUtils.appendOrSelect(svg, "g.bars").selectAll("path.bar").data(data, function(datum2) {
            return datum2[groupMapsTo];
          });
          bars.exit().attr("opacity", 0).remove();
          var barsEnter = bars.enter().append("path").attr("opacity", 0);
          barsEnter.merge(bars).classed("bar", true).transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "bullet-bar-update-enter",
              animate
            });
          }).attr("class", function(d) {
            return _this.model.getColorClassName({
              classNameTypes: [ColorClassNameTypes.FILL],
              dataGroupName: d[groupMapsTo],
              originalClassName: "bar"
            });
          }).style("fill", function(d) {
            return _this.model.getFillColor(d[groupMapsTo]);
          }).attr("d", function(d, i) {
            var barWidth = 8;
            var x0 = _this.services.cartesianScales.getDomainValue(d, i) - barWidth / 2;
            var x1 = x0 + barWidth;
            var y0 = _this.services.cartesianScales.getRangeValue(0) + 1;
            var y1 = _this.services.cartesianScales.getRangeValue(d, i);
            return Tools.generateSVGPathString({ x0, x1, y0, y1 }, _this.services.cartesianScales.getOrientation());
          }).attr("opacity", 1).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", function(d) {
            return d.value;
          });
        };
        var renderTargetLines = function() {
          var lines2 = DOMUtils.appendOrSelect(svg, "g.markers").selectAll("path.marker").data(data.filter(function(d) {
            return Tools.getProperty(d, "marker") !== null;
          }), function(datum2) {
            return datum2[groupMapsTo];
          });
          lines2.exit().attr("opacity", 0).remove();
          var linesEnter = lines2.enter().append("path").attr("opacity", 0);
          linesEnter.merge(lines2).classed("marker", true).transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "bullet-marker-update-enter",
              animate
            });
          }).attr("d", function(d, i) {
            var lineHeight = 24;
            var x0 = _this.services.cartesianScales.getDomainValue(d, i) - lineHeight / 2;
            var x1 = x0 + lineHeight;
            var y0 = _this.services.cartesianScales.getRangeValue(d.marker, i);
            var y1 = y0;
            return Tools.generateSVGPathString({ x0, x1, y0, y1 }, _this.services.cartesianScales.getOrientation());
          }).attr("opacity", 1);
        };
        var renderTargetQuartiles = function() {
          var quartilesData = [];
          data.filter(function(d) {
            return Tools.getProperty(d, "marker") !== null;
          }).forEach(function(d) {
            var value2 = d.marker;
            var barValue = d[rangeIdentifier];
            quartilesData = quartilesData.concat([
              { datum: d, value: value2 * 0.25, barValue },
              { datum: d, value: value2 * 0.5, barValue },
              { datum: d, value: value2 * 0.75, barValue }
            ]);
          });
          var lines2 = DOMUtils.appendOrSelect(svg, "g.quartiles").selectAll("path.quartile").data(quartilesData, function(datum2) {
            return datum2[groupMapsTo];
          });
          lines2.exit().attr("opacity", 0).remove();
          var linesEnter = lines2.enter().append("path").attr("opacity", 0);
          linesEnter.merge(lines2).attr("class", function(d) {
            return "quartile " + (d.value <= d.barValue ? "over-bar" : "");
          }).transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "bullet-quartile-update-enter",
              animate
            });
          }).attr("d", function(_a3, i) {
            var d = _a3.datum, value2 = _a3.value;
            var lineHeight = 4;
            if (d.ranges && d.ranges.indexOf(value2) !== -1) {
              lineHeight = 8;
            }
            var x0 = _this.services.cartesianScales.getDomainValue(d, i) - lineHeight / 2;
            var x1 = x0 + lineHeight;
            var y0 = _this.services.cartesianScales.getRangeValue(value2, i);
            var y1 = y0;
            return Tools.generateSVGPathString({ x0, x1, y0, y1 }, _this.services.cartesianScales.getOrientation());
          }).attr("opacity", 1);
        };
        renderRangeBoxes();
        renderBars();
        renderTargetLines();
        renderTargetQuartiles();
        this.addEventListeners();
      };
      Bullet2.prototype.addEventListeners = function() {
        var self2 = this;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();
        this.parent.selectAll("path.bar").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          var performanceAreaTitles = Tools.getProperty(options2, "bullet", "performanceAreaTitles");
          var matchingRangeIndex = self2.model.getMatchingRangeIndexForDatapoint(datum2);
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                label: options2.tooltip.groupLabel || "Group",
                value: datum2[groupMapsTo],
                class: self2.model.getColorClassName({
                  classNameTypes: [ColorClassNameTypes.TOOLTIP],
                  dataGroupName: datum2[groupMapsTo]
                })
              },
              {
                label: "Value",
                value: datum2[rangeIdentifier]
              },
              {
                label: "Target",
                value: datum2.marker
              },
              {
                label: "Percentage",
                value: Math.floor(datum2[rangeIdentifier] / datum2.marker * 100) + "%"
              },
              {
                label: "Performance",
                value: performanceAreaTitles[matchingRangeIndex]
              }
            ]
          });
        }).on("mousemove", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEMOVE, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          self2.services.events.dispatchEvent(Events$1.Bar.BAR_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      Bullet2.prototype.destroy = function() {
        this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      return Bullet2;
    }(Component);
    __extends$14 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Histogram = function(_super) {
      __extends$14(Histogram2, _super);
      function Histogram2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "histogram";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var options2 = _this.getOptions();
          var groupMapsTo = options2.data.groupMapsTo;
          _this.parent.selectAll("path.bar").transition("legend-hover-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-bar"
            });
          }).attr("opacity", function(d) {
            return d[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-bar"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      Histogram2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Histogram2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer();
        var options2 = this.model.getOptions();
        var groupIdentifier = options2.groupIdentifier;
        var groupMapsTo = options2.data.groupMapsTo;
        var binnedStackedData = this.model.getBinnedStackedData();
        var x3 = this.services.cartesianScales.getMainXScale();
        var barGroups = svg.selectAll("g.bars").data(binnedStackedData, function(d) {
          return get_default(d, "0." + groupMapsTo);
        });
        barGroups.exit().attr("opacity", 0).remove();
        barGroups.enter().append("g").classed("bars", true).attr("role", Roles.GROUP);
        var bars = svg.selectAll("g.bars").selectAll("path.bar").data(function(data) {
          return data;
        });
        bars.exit().remove();
        bars.enter().append("path").merge(bars).classed("bar", true).attr(groupIdentifier, function(d, i) {
          return i;
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "histogram-bar-update-enter",
            animate
          });
        }).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d[groupMapsTo],
            originalClassName: "bar"
          });
        }).style("fill", function(d) {
          return _this.model.getFillColor(d[groupMapsTo]);
        }).attr("d", function(d, i) {
          var bin2 = get_default(d, "data");
          if (!bin2) {
            return;
          }
          var barWidth = x3(bin2.x1) - x3(bin2.x0) - 1;
          var x0 = _this.services.cartesianScales.getDomainValue(bin2.x0, i);
          var x1 = x0 + barWidth;
          var y0 = _this.services.cartesianScales.getRangeValue(d[0], i);
          var y1 = _this.services.cartesianScales.getRangeValue(d[1], i);
          if (Math.abs(y1 - y0) > 0 && Math.abs(y1 - y0) > options2.bars.dividerSize) {
            if (_this.services.cartesianScales.getOrientation() === CartesianOrientations.VERTICAL) {
              y1 += 1;
            } else {
              y1 -= 1;
            }
          }
          return Tools.generateSVGPathString({ x0, x1, y0, y1 }, _this.services.cartesianScales.getOrientation());
        }).attr("opacity", 1).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", function(d) {
          return Tools.getProperty(d, "data", d[groupMapsTo]);
        });
        this.addEventListeners();
      };
      Histogram2.prototype.addEventListeners = function() {
        var options2 = this.model.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var self2 = this;
        this.parent.selectAll("path.bar").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true);
          var x0 = parseFloat(get_default(datum2, "data.x0"));
          var x1 = parseFloat(get_default(datum2, "data.x1"));
          var rangeAxisPosition = self2.services.cartesianScales.getRangeAxisPosition();
          var rangeScaleLabel = self2.services.cartesianScales.getScaleLabel(rangeAxisPosition);
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                label: get_default(options2, "bins.rangeLabel") || "Range",
                value: x0 + " \u2013 " + x1
              },
              {
                label: options2.tooltip.groupLabel || "Group",
                value: datum2[groupMapsTo],
                class: self2.model.getColorClassName({
                  classNameTypes: [ColorClassNameTypes.TOOLTIP],
                  dataGroupName: datum2[groupMapsTo]
                })
              },
              {
                label: rangeScaleLabel,
                value: get_default(datum2, "data." + datum2[groupMapsTo])
              }
            ]
          });
        }).on("mousemove", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
        });
      };
      Histogram2.prototype.destroy = function() {
        this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      return Histogram2;
    }(Component);
    __extends$13 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Line = function(_super) {
      __extends$13(Line2, _super);
      function Line2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "line";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          _this.parent.selectAll("path.line").transition("legend-hover-line").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-line"
            });
          }).attr("opacity", function(group) {
            if (group.name !== hoveredElement.datum()["name"]) {
              return lines.opacity.unselected;
            }
            return lines.opacity.selected;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.line").transition("legend-mouseout-line").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-line"
            });
          }).attr("opacity", lines.opacity.selected);
        };
        return _this;
      }
      Line2.prototype.init = function() {
        var events = this.services.events;
        events.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        events.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Line2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var svg = this.getComponentContainer({ withinChartClip: true });
        var _a22 = this.services, cartesianScales = _a22.cartesianScales, curves = _a22.curves;
        var getDomainValue = function(d, i) {
          return cartesianScales.getDomainValue(d, i);
        };
        var getRangeValue = function(d, i) {
          return cartesianScales.getRangeValue(d, i);
        };
        var _b = Tools.flipDomainAndRangeBasedOnOrientation(getDomainValue, getRangeValue, cartesianScales.getOrientation()), getXValue = _b[0], getYValue = _b[1];
        var options2 = this.getOptions();
        var lineGenerator = line_default().x(getXValue).y(getYValue).curve(curves.getD3Curve()).defined(function(datum2, i) {
          var rangeIdentifier = cartesianScales.getRangeIdentifier(datum2);
          var value2 = datum2[rangeIdentifier];
          if (value2 === null || value2 === void 0) {
            return false;
          }
          return true;
        });
        var data = [];
        if (this.configs.stacked) {
          var percentage = Object.keys(options2.axes).some(function(axis22) {
            return options2.axes[axis22].percentage;
          });
          var groupMapsTo_1 = options2.data.groupMapsTo;
          var stackedData = this.model.getStackedData({
            groups: this.configs.groups,
            percentage
          });
          data = stackedData.map(function(d) {
            var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(d);
            var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(d);
            return {
              name: Tools.getProperty(d, 0, groupMapsTo_1),
              data: d.map(function(datum2) {
                var _a3;
                return _a3 = {}, _a3[domainIdentifier] = datum2.data.sharedStackKey, _a3[groupMapsTo_1] = datum2[groupMapsTo_1], _a3[rangeIdentifier] = datum2[1], _a3;
              }),
              hidden: !Tools.some(d, function(datum2) {
                return datum2[0] !== datum2[1];
              })
            };
          });
        } else {
          data = this.model.getGroupedData(this.configs.groups);
        }
        var lines2 = svg.selectAll("path.line").data(data, function(group) {
          return group.name;
        });
        lines2.exit().attr("opacity", 0).remove();
        var enteringLines = lines2.enter().append("path").classed("line", true).attr("opacity", 0);
        enteringLines.merge(lines2).data(data, function(group) {
          return group.name;
        }).attr("class", function(group) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            dataGroupName: group.name,
            originalClassName: "line"
          });
        }).style("stroke", function(group) {
          return _this.model.getStrokeColor(group.name);
        }).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "line").attr("aria-label", function(group) {
          var groupData = group.data;
          return groupData.map(function(datum2) {
            var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(datum2);
            return datum2[rangeIdentifier];
          }).join(",");
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "line-update-enter",
            animate
          });
        }).attr("opacity", function(d) {
          return d.hidden ? 0 : 1;
        }).attr("d", function(group) {
          var groupData = group.data;
          return lineGenerator(groupData);
        });
      };
      Line2.prototype.destroy = function() {
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      return Line2;
    }(Component);
    __extends$12 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Lollipop = function(_super) {
      __extends$12(Lollipop2, _super);
      function Lollipop2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "lollipop";
        _this.renderType = RenderTypes.SVG;
        _this.handleScatterOnHover = function(event) {
          var hoveredElement = event.detail;
          var options2 = _this.getOptions();
          var groupMapsTo = options2.data.groupMapsTo;
          _this.parent.selectAll("line.line").attr("stroke-width", function(d) {
            if (d[groupMapsTo] !== hoveredElement.datum[groupMapsTo]) {
              return lines.weight.unselected;
            }
            return lines.weight.selected;
          });
        };
        _this.handleScatterOnMouseOut = function(event) {
          _this.parent.selectAll("line.line").attr("stroke-width", lines.weight.unselected);
        };
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var options2 = _this.getOptions();
          var groupMapsTo = options2.data.groupMapsTo;
          _this.parent.selectAll("line.line").transition("legend-hover-line").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-line"
            });
          }).attr("opacity", function(d) {
            if (d[groupMapsTo] !== hoveredElement.datum()["name"]) {
              return lines.opacity.unselected;
            }
            return lines.opacity.selected;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("line.line").transition("legend-mouseout-line").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-line"
            });
          }).attr("opacity", lines.opacity.selected);
        };
        return _this;
      }
      Lollipop2.prototype.init = function() {
        var events = this.services.events;
        events.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        events.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Lollipop2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer({ withinChartClip: true });
        var options2 = this.model.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var cartesianScales = this.services.cartesianScales;
        var mainXScale = cartesianScales.getMainXScale();
        var mainYScale = cartesianScales.getMainYScale();
        var domainIdentifier = cartesianScales.getDomainIdentifier();
        var getDomainValue = function(d, i) {
          return cartesianScales.getDomainValue(d, i);
        };
        var getRangeValue = function(d, i) {
          return cartesianScales.getRangeValue(d, i);
        };
        var orientation = cartesianScales.getOrientation();
        var _a22 = Tools.flipDomainAndRangeBasedOnOrientation(getDomainValue, getRangeValue, orientation), getXValue = _a22[0], getYValue = _a22[1];
        var lines2 = svg.selectAll("line.line").data(this.getScatterData(), function(datum2) {
          return datum2[groupMapsTo] + "-" + datum2[domainIdentifier];
        });
        lines2.exit().attr("opacity", 0).remove();
        var enteringLines = lines2.enter().append("line").attr("opacity", 0);
        var allLines = enteringLines.merge(lines2).classed("line", true).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            dataGroupName: d[groupMapsTo],
            originalClassName: "line"
          });
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "lollipop-line-update-enter",
            animate
          });
        }).style("stroke", function(d) {
          return _this.model.getFillColor(d[groupMapsTo], d[domainIdentifier], d);
        }).attr("opacity", 1);
        if (orientation === CartesianOrientations.HORIZONTAL) {
          allLines.attr("y1", getYValue).attr("y2", getYValue).attr("x1", mainXScale.range()[0]).attr("x2", function(d, i) {
            return getXValue(d, i) - options2.points.radius;
          });
        } else {
          allLines.attr("x1", getXValue).attr("x2", getXValue).attr("y1", mainYScale.range()[0]).attr("y2", function(d, i) {
            return getYValue(d, i) + options2.points.radius;
          });
        }
        this.addScatterPointEventListeners();
      };
      Lollipop2.prototype.addScatterPointEventListeners = function() {
        this.services.events.addEventListener(Events$1.Scatter.SCATTER_MOUSEOVER, this.handleScatterOnHover);
        this.services.events.addEventListener(Events$1.Scatter.SCATTER_MOUSEOUT, this.handleScatterOnMouseOut);
      };
      Lollipop2.prototype.destroy = function() {
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
        eventsFragment.removeEventListener(Events$1.Scatter.SCATTER_MOUSEOVER, this.handleScatterOnHover);
        eventsFragment.removeEventListener(Events$1.Scatter.SCATTER_MOUSEOUT, this.handleScatterOnMouseOut);
      };
      return Lollipop2;
    }(Scatter);
    __extends$11 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    StackedScatter = function(_super) {
      __extends$11(StackedScatter2, _super);
      function StackedScatter2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "scatter-stacked";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      StackedScatter2.prototype.render = function(animate) {
        var _this = this;
        var isScatterEnabled = Tools.getProperty(this.getOptions(), "points", "enabled");
        if (!isScatterEnabled) {
          return;
        }
        var svg = this.getComponentContainer({ withinChartClip: true });
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var percentage = Object.keys(options2.axes).some(function(axis22) {
          return options2.axes[axis22].percentage;
        });
        var stackedData = this.model.getStackedData({
          groups: this.configs.groups,
          percentage
        });
        var circleGroups = svg.selectAll("g.dots").data(stackedData, function(d) {
          return Tools.getProperty(d, 0, groupMapsTo);
        });
        circleGroups.exit().attr("opacity", 0).remove();
        var circleGroupsEnter = circleGroups.enter().append("g").classed("dots", true).attr("role", Roles.GROUP);
        var circles = circleGroupsEnter.merge(circleGroups).selectAll("circle.dot").data(function(d) {
          return d;
        });
        circles.exit().attr("opacity", 0).remove();
        var enteringCircles = circles.enter().append("circle").classed("dot", true).attr("opacity", 0);
        var circlesToStyle = enteringCircles.merge(circles).datum(function(d) {
          var _a22;
          var group = d[groupMapsTo];
          var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(d);
          var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(d);
          return _a22 = {}, _a22[groupMapsTo] = group, _a22[domainIdentifier] = d["data"]["sharedStackKey"], _a22[rangeIdentifier] = d[1], _a22;
        });
        this.styleCircles(circlesToStyle, animate);
        this.addEventListeners();
      };
      StackedScatter2.prototype.getTooltipData = function(hoveredX, hoveredY) {
        var _this = this;
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var percentage = Object.keys(options2.axes).some(function(axis22) {
          return options2.axes[axis22].percentage;
        });
        var stackedData = this.model.getStackedData({
          groups: this.configs.groups,
          percentage
        });
        var tooltipData = [];
        stackedData.forEach(function(groupData, groupDataIndex) {
          groupData.forEach(function(datum2, dataIndex) {
            var _a22;
            var group = datum2[groupMapsTo];
            var domainValue = datum2["data"]["sharedStackKey"];
            var rangeValue = datum2["data"][group];
            var stackedRangeValue = datum2[1];
            var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(datum2);
            var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(datum2);
            if (rangeValue !== null && rangeValue !== void 0 && hoveredX === _this.services.cartesianScales.getDomainValue(domainValue) && hoveredY === _this.services.cartesianScales.getRangeValue(stackedRangeValue)) {
              if (percentage) {
                rangeValue = _this.model.getStackedData({
                  groups: _this.configs.groups
                })[groupDataIndex][dataIndex]["data"][group];
              }
              if (rangeValue !== null) {
                tooltipData.push((_a22 = {}, _a22[groupMapsTo] = group, _a22[domainIdentifier] = domainValue, _a22[rangeIdentifier] = rangeValue, _a22));
              }
            }
          });
        });
        return this.model.getDisplayData(this.configs.groups).filter(function(datapoint) {
          var domainIdentifier = _this.services.cartesianScales.getDomainIdentifier(datapoint);
          var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(datapoint);
          return tooltipData.find(function(tooltipDatapoint) {
            return tooltipDatapoint[groupMapsTo] == datapoint[groupMapsTo] && tooltipDatapoint[domainIdentifier] == datapoint[domainIdentifier] && tooltipDatapoint[rangeIdentifier] == datapoint[rangeIdentifier];
          }) !== void 0;
        });
      };
      return StackedScatter2;
    }(Scatter);
    __extends$10 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Pie = function(_super) {
      __extends$10(Pie2, _super);
      function Pie2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "pie";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var groupMapsTo = _this.getOptions().data.groupMapsTo;
          _this.parent.selectAll("path.slice").transition("legend-hover-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-bar"
            });
          }).attr("opacity", function(d) {
            return d.data[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("path.slice").transition("legend-mouseout-bar").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-bar"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      Pie2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Pie2.prototype.getInnerRadius = function() {
        return pie.innerRadius;
      };
      Pie2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var self2 = this;
        var svg = this.getComponentContainer();
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var valueMapsTo = options2.pie.valueMapsTo;
        var displayData = this.model.getDisplayData().filter(function(data) {
          return data[valueMapsTo] > 0;
        });
        var radius = this.computeRadius();
        this.arc = arc_default().innerRadius(this.getInnerRadius()).outerRadius(radius);
        this.hoverArc = arc_default().innerRadius(this.getInnerRadius()).outerRadius(radius + pie.hoverArc.outerRadiusOffset);
        var pieLayout = pie_default().value(function(d) {
          return d[valueMapsTo];
        }).sort(Tools.getProperty(options2, "pie", "sortFunction")).padAngle(pie.padAngle);
        var pieLayoutData = pieLayout(displayData);
        var slicesGroup = DOMUtils.appendOrSelect(svg, "g.slices").attr("role", Roles.GROUP).attr("data-name", "slices");
        var paths = slicesGroup.selectAll("path.slice").data(pieLayoutData, function(d) {
          return d.data[groupMapsTo];
        });
        paths.exit().attr("opacity", 0).remove();
        var enteringPaths = paths.enter().append("path").classed("slice", true).attr("opacity", 0);
        var allPaths = enteringPaths.merge(paths).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d.data[groupMapsTo],
            originalClassName: "slice"
          });
        }).style("fill", function(d) {
          return self2.model.getFillColor(d.data[groupMapsTo]);
        }).attr("d", this.arc);
        allPaths.transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "pie_slice_enter_update",
            animate
          });
        }).attr("opacity", 1).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "slice").attr("aria-label", function(d) {
          return d[valueMapsTo] + ", " + (Tools.convertValueToPercentage(d.data[valueMapsTo], displayData, valueMapsTo) + "%");
        }).attrTween("d", function(a2) {
          return arcTween.bind(this)(a2, self2.arc);
        });
        var renderLabels = options2.pie.labels.enabled;
        var labelData = renderLabels ? pieLayoutData.filter(function(x3) {
          return x3.data[valueMapsTo] > 0;
        }) : [];
        var labelsGroup = DOMUtils.appendOrSelect(svg, "g.labels").attr("role", Roles.GROUP).attr("data-name", "labels");
        var labels = labelsGroup.selectAll("text.pie-label").data(labelData, function(d) {
          return d.data[groupMapsTo];
        });
        labels.exit().attr("opacity", 0).remove();
        var enteringLabels = labels.enter().append("text").classed("pie-label", true);
        var calloutData = [];
        enteringLabels.merge(labels).style("text-anchor", "middle").text(function(d) {
          if (options2.pie.labels.formatter) {
            return options2.pie.labels.formatter(d);
          }
          return Tools.convertValueToPercentage(d.data[valueMapsTo], displayData, valueMapsTo) + "%";
        }).datum(function(d) {
          var marginedRadius = radius + 7;
          var theta = (d.endAngle - d.startAngle) / 2 + d.startAngle;
          var deg = theta / Math.PI * 180;
          var textLength = this.getComputedTextLength();
          d.textOffsetX = textLength / 2;
          d.textOffsetY = deg > 90 && deg < 270 ? 10 : 0;
          d.xPosition = (d.textOffsetX + marginedRadius) * Math.sin(theta);
          d.yPosition = (d.textOffsetY + marginedRadius) * -Math.cos(theta);
          return d;
        }).attr("transform", function(d, i) {
          var totalSlices = labelData.length;
          var sliceAngleDeg = (d.endAngle - d.startAngle) * (180 / Math.PI);
          if (i >= totalSlices - 2) {
            if (sliceAngleDeg < pie.callout.minSliceDegree) {
              var labelTranslateX = void 0, labelTranslateY = void 0;
              if (d.index === totalSlices - 1) {
                labelTranslateX = d.xPosition + pie.callout.offsetX + pie.callout.textMargin + d.textOffsetX;
                labelTranslateY = d.yPosition - pie.callout.offsetY;
                d.direction = CalloutDirections.RIGHT;
                calloutData.push(d);
              } else {
                labelTranslateX = d.xPosition - pie.callout.offsetX - d.textOffsetX - pie.callout.textMargin;
                labelTranslateY = d.yPosition - pie.callout.offsetY;
                d.direction = CalloutDirections.LEFT;
                calloutData.push(d);
              }
              return "translate(" + labelTranslateX + ", " + labelTranslateY + ")";
            }
          }
          return "translate(" + d.xPosition + ", " + d.yPosition + ")";
        });
        this.renderCallouts(calloutData);
        var optionName = Tools.getProperty(options2, "donut") ? "donut" : "pie";
        var alignment = Tools.getProperty(options2, optionName, "alignment");
        var width = DOMUtils.getSVGElementSize(this.getParent(), {
          useAttrs: true
        }).width;
        var xOffset = renderLabels ? pie.xOffset : 0;
        var yOffset = renderLabels ? pie.yOffset : 0;
        var pieTranslateX = radius + xOffset;
        if (alignment === Alignments.CENTER) {
          pieTranslateX = width / 2;
        } else if (alignment === Alignments.RIGHT) {
          pieTranslateX = width - radius - pie.xOffset;
        }
        var pieTranslateY = radius + yOffset;
        if (calloutData.length > 0) {
          pieTranslateY += pie.yOffsetCallout;
        }
        svg.attr("x", pieTranslateX + 7).attr("y", pieTranslateY);
        this.addEventListeners();
      };
      Pie2.prototype.renderCallouts = function(calloutData) {
        var svg = DOMUtils.appendOrSelect(this.getComponentContainer(), "g.callouts").attr("role", Roles.GROUP).attr("data-name", "callouts");
        var callouts = svg.selectAll("g.callout").data(calloutData);
        callouts.exit().remove();
        var enteringCallouts = callouts.enter().append("g").classed("callout", true).attr("role", Roles.GROUP).attr("aria-roledescription", "label callout");
        enteringCallouts.merge(callouts).datum(function(d) {
          var xPosition = d.xPosition, yPosition = d.yPosition, direction = d.direction;
          if (direction === CalloutDirections.RIGHT) {
            d.startPos = {
              x: xPosition,
              y: yPosition + d.textOffsetY
            };
            d.endPos = {
              x: xPosition + pie.callout.offsetX,
              y: yPosition - pie.callout.offsetY + d.textOffsetY
            };
            d.intersectPointX = d.endPos.x - pie.callout.horizontalLineLength;
          } else {
            d.startPos = {
              x: xPosition,
              y: yPosition + d.textOffsetY
            };
            d.endPos = {
              x: xPosition - pie.callout.offsetX,
              y: yPosition - pie.callout.offsetY + d.textOffsetY
            };
            d.intersectPointX = d.endPos.x + pie.callout.horizontalLineLength;
          }
          return d;
        });
        var enteringVerticalLines = enteringCallouts.append("line").classed("vertical-line", true);
        enteringVerticalLines.merge(svg.selectAll("line.vertical-line")).datum(function(d) {
          return select_default2(this.parentNode).datum();
        }).style("stroke-width", "1px").attr("x1", function(d) {
          return d.startPos.x;
        }).attr("y1", function(d) {
          return d.startPos.y;
        }).attr("x2", function(d) {
          return d.intersectPointX;
        }).attr("y2", function(d) {
          return d.endPos.y;
        });
        var enteringHorizontalLines = enteringCallouts.append("line").classed("horizontal-line", true);
        enteringHorizontalLines.merge(svg.selectAll("line.horizontal-line")).datum(function(d) {
          return select_default2(this.parentNode).datum();
        }).style("stroke-width", "1px").attr("x1", function(d) {
          return d.intersectPointX;
        }).attr("y1", function(d) {
          return d.endPos.y;
        }).attr("x2", function(d) {
          return d.endPos.x;
        }).attr("y2", function(d) {
          return d.endPos.y;
        });
      };
      Pie2.prototype.addEventListeners = function() {
        var self2 = this;
        this.parent.selectAll("path.slice").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true).transition("pie_slice_mouseover").call(function(t) {
            return self2.services.transitions.setupTransition({
              transition: t,
              name: "pie_slice_mouseover"
            });
          }).attr("d", self2.hoverArc);
          self2.services.events.dispatchEvent(Events$1.Pie.SLICE_MOUSEOVER, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          var groupMapsTo = self2.getOptions().data.groupMapsTo;
          var valueMapsTo = self2.getOptions().pie.valueMapsTo;
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                label: datum2.data[groupMapsTo],
                value: datum2.data[valueMapsTo]
              }
            ]
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Pie.SLICE_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Pie.SLICE_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false).transition("pie_slice_mouseout").call(function(t) {
            return self2.services.transitions.setupTransition({
              transition: t,
              name: "pie_slice_mouseout"
            });
          }).attr("d", self2.arc);
          self2.services.events.dispatchEvent(Events$1.Pie.SLICE_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      Pie2.prototype.computeRadius = function() {
        var _a22 = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var options2 = this.getOptions();
        var radius = Math.min(width, height) / 2;
        var renderLabels = options2.pie.labels.enabled;
        return renderLabels ? radius + pie.radiusOffset : radius;
      };
      return Pie2;
    }(Component);
    __extends$$ = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ARROW_UP_PATH_STRING = "4,10 8,6 12,10";
    ARROW_DOWN_PATH_STRING = "12,6 8,10 4,6";
    Gauge = function(_super) {
      __extends$$(Gauge2, _super);
      function Gauge2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "gauge";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      Gauge2.prototype.getValue = function() {
        var _a22, _b;
        var data = this.model.getData();
        var value2 = (_b = (_a22 = data.find(function(d) {
          return d.group === "value";
        })) === null || _a22 === void 0 ? void 0 : _a22.value, _b !== null && _b !== void 0 ? _b : null);
        return value2;
      };
      Gauge2.prototype.getValueRatio = function() {
        var value2 = Tools.clamp(this.getValue(), 0, 100);
        return value2 / 100;
      };
      Gauge2.prototype.getDelta = function() {
        var _a22, _b;
        var data = this.model.getData();
        var delta = (_b = (_a22 = data.find(function(d) {
          return d.group === "delta";
        })) === null || _a22 === void 0 ? void 0 : _a22.value, _b !== null && _b !== void 0 ? _b : null);
        return delta;
      };
      Gauge2.prototype.getArcRatio = function() {
        var options2 = this.getOptions();
        var type2 = Tools.getProperty(options2, "gauge", "type");
        var arcRatio = type2 === GaugeTypes.FULL ? 1 : 0.5;
        return arcRatio;
      };
      Gauge2.prototype.getArcSize = function() {
        return this.getArcRatio() * Math.PI * 2;
      };
      Gauge2.prototype.getStartAngle = function() {
        var arcSize = this.getArcSize();
        if (arcSize === 2 * Math.PI) {
          return 0;
        }
        return -arcSize / 2;
      };
      Gauge2.prototype.getArrow = function(delta) {
        var options2 = this.getOptions();
        var arrowDirection = Tools.getProperty(options2, "gauge", "deltaArrow", "direction");
        switch (arrowDirection) {
          case ArrowDirections.UP:
            return ARROW_UP_PATH_STRING;
          case ArrowDirections.DOWN:
            return ARROW_DOWN_PATH_STRING;
          default:
            return delta > 0 ? ARROW_UP_PATH_STRING : ARROW_DOWN_PATH_STRING;
        }
      };
      Gauge2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer().attr("width", "100%").attr("height", "100%");
        var options2 = this.getOptions();
        var value2 = this.getValue();
        var valueRatio = this.getValueRatio();
        var arcSize = this.getArcSize();
        var startAngle = this.getStartAngle();
        var rotationAngle = valueRatio * arcSize;
        var currentAngle = startAngle + rotationAngle;
        var endAngle = startAngle + arcSize;
        var radius = this.computeRadius();
        var innerRadius = this.getInnerRadius();
        this.backgroundArc = arc_default().innerRadius(innerRadius).outerRadius(radius).startAngle(currentAngle).endAngle(endAngle);
        this.arc = arc_default().innerRadius(innerRadius).outerRadius(radius).startAngle(startAngle).endAngle(currentAngle);
        DOMUtils.appendOrSelect(svg, "path.arc-background").attr("d", this.backgroundArc);
        var arcValue = svg.selectAll("path.arc-foreground").data([value2]);
        var arcEnter = arcValue.enter().append("path");
        arcEnter.merge(arcValue).attr("class", this.model.getColorClassName({
          classNameTypes: [ColorClassNameTypes.FILL],
          dataGroupName: "value",
          originalClassName: "arc-foreground"
        })).style("fill", function(d) {
          return Tools.getProperty(_this.getOptions(), "color", "scale", "value");
        }).attr("d", this.arc).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "value").attr("aria-label", function(d) {
          return d;
        });
        this.drawValueNumber();
        this.drawDelta();
        arcValue.exit().remove();
        var alignment = Tools.getProperty(options2, "gauge", "alignment");
        var width = DOMUtils.getSVGElementSize(this.getParent(), {
          useAttrs: true
        }).width;
        var gaugeTranslateX = radius;
        if (alignment === Alignments.CENTER) {
          gaugeTranslateX = width / 2;
        } else if (alignment === Alignments.RIGHT) {
          gaugeTranslateX = width - radius;
        }
        svg.attr("x", gaugeTranslateX).attr("y", radius);
        this.addEventListeners();
      };
      Gauge2.prototype.drawValueNumber = function() {
        var svg = this.getComponentContainer();
        var options2 = this.getOptions();
        var arcType = Tools.getProperty(options2, "gauge", "type");
        var value2 = this.getValue();
        var delta = this.getDelta();
        var radius = this.computeRadius();
        var valueFontSize = Tools.getProperty(options2, "gauge", "valueFontSize");
        var deltaFontSize = Tools.getProperty(options2, "gauge", "deltaFontSize");
        var numberSpacing = Tools.getProperty(options2, "gauge", "numberSpacing");
        var showPercentageSymbol = Tools.getProperty(options2, "gauge", "showPercentageSymbol");
        var numbersYPosition = 0;
        if (arcType === GaugeTypes.FULL && !delta) {
          numbersYPosition = deltaFontSize(radius);
        } else if (arcType === GaugeTypes.SEMI && delta) {
          numbersYPosition = -(deltaFontSize(radius) + numberSpacing);
        }
        var numbersGroup = DOMUtils.appendOrSelect(svg, "g.gauge-numbers").attr("transform", "translate(0, " + numbersYPosition + ")");
        var fontSize = valueFontSize(radius);
        var valueNumberGroup = DOMUtils.appendOrSelect(numbersGroup, "g.gauge-value-number");
        var numberFormatter = Tools.getProperty(options2, "gauge", "numberFormatter");
        var valueNumber = valueNumberGroup.selectAll("text.gauge-value-number").data([value2]);
        valueNumber.enter().append("text").attr("class", "gauge-value-number").merge(valueNumber).style("font-size", fontSize + "px").attr("text-anchor", "middle").text(function(d) {
          return numberFormatter(d);
        });
        var valueNumberWidth = DOMUtils.getSVGElementSize(DOMUtils.appendOrSelect(svg, "text.gauge-value-number"), { useBBox: true }).width;
        var symbolFontSize = fontSize / 2;
        var gaugeSymbol = showPercentageSymbol ? "%" : "";
        var symbol = DOMUtils.appendOrSelect(valueNumberGroup, "text.gauge-value-symbol").style("font-size", symbolFontSize + "px").attr("x", valueNumberWidth / 2).text(gaugeSymbol);
        var _a22 = DOMUtils.getSVGElementSize(symbol, { useBBox: true }), symbolWidth = _a22.width, symbolHeight = _a22.height;
        symbol.attr("y", "-" + symbolHeight / 2 + "px");
        valueNumberGroup.attr("transform", "translate(-" + symbolWidth / 2 + ", 0)");
      };
      Gauge2.prototype.drawDelta = function() {
        var self2 = this;
        var svg = this.getComponentContainer();
        var options2 = this.getOptions();
        var delta = this.getDelta();
        var radius = this.computeRadius();
        var deltaFontSize = delta ? Tools.getProperty(options2, "gauge", "deltaFontSize") : function() {
          return 0;
        };
        var numberFormatter = delta ? Tools.getProperty(options2, "gauge", "numberFormatter") : function() {
          return null;
        };
        var arrowSize = Tools.getProperty(options2, "gauge", "deltaArrow", "size");
        var numberSpacing = Tools.getProperty(options2, "gauge", "numberSpacing");
        var showPercentageSymbol = Tools.getProperty(options2, "gauge", "showPercentageSymbol");
        var numbersGroup = DOMUtils.appendOrSelect(svg, "g.gauge-numbers");
        var deltaGroup = DOMUtils.appendOrSelect(numbersGroup, "g.gauge-delta").attr("transform", "translate(0, " + (deltaFontSize(radius) + numberSpacing) + ")");
        var deltaNumber = DOMUtils.appendOrSelect(deltaGroup, "text.gauge-delta-number");
        var gaugeSymbol = showPercentageSymbol ? "%" : "";
        deltaNumber.data(delta === null ? [] : [delta]);
        deltaNumber.enter().append("text").classed("gauge-delta-number", true).merge(deltaNumber).attr("text-anchor", "middle").style("font-size", deltaFontSize(radius) + "px").text(function(d) {
          return "" + numberFormatter(d) + gaugeSymbol;
        });
        var deltaNumberWidth = DOMUtils.getSVGElementSize(DOMUtils.appendOrSelect(svg, ".gauge-delta-number"), { useBBox: true }).width;
        var arrowEnabled = Tools.getProperty(options2, "gauge", "deltaArrow", "enabled");
        var deltaArrow = deltaGroup.selectAll("svg.gauge-delta-arrow").data(delta !== null && arrowEnabled ? [delta] : []);
        deltaArrow.enter().append("svg").merge(deltaArrow).attr("class", "gauge-delta-arrow").attr("x", -arrowSize(radius) - deltaNumberWidth / 2).attr("y", -arrowSize(radius) / 2 - deltaFontSize(radius) * 0.35).attr("width", arrowSize(radius)).attr("height", arrowSize(radius)).attr("viewBox", "0 0 16 16").each(function() {
          var deltaArrowSelection = select_default2(this);
          DOMUtils.appendOrSelect(deltaArrowSelection, "rect.gauge-delta-arrow-backdrop").attr("width", "16").attr("height", "16").attr("fill", "none");
          var status = Tools.getProperty(options2, "gauge", "status");
          DOMUtils.appendOrSelect(deltaArrowSelection, "polygon.gauge-delta-arrow").attr("class", status !== null ? "gauge-delta-arrow status--" + status : "").attr("points", self2.getArrow(delta));
        });
        deltaArrow.exit().remove();
        deltaNumber.exit().remove();
      };
      Gauge2.prototype.getInnerRadius = function() {
        var radius = this.computeRadius();
        var arcWidth = Tools.getProperty(this.getOptions(), "gauge", "arcWidth");
        return radius - arcWidth;
      };
      Gauge2.prototype.addEventListeners = function() {
        var self2 = this;
        this.parent.selectAll("path.arc-foreground").on("mouseover", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Gauge.ARC_MOUSEOVER, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Gauge.ARC_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Gauge.ARC_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Gauge.ARC_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        });
      };
      Gauge2.prototype.computeRadius = function() {
        var options2 = this.getOptions();
        var arcType = Tools.getProperty(options2, "gauge", "type");
        var _a22 = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var radius = arcType === GaugeTypes.SEMI ? Math.min(width / 2, height) : Math.min(width / 2, height / 2);
        return radius;
      };
      return Gauge2;
    }(Component);
    __extends$_ = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Donut = function(_super) {
      __extends$_(Donut2, _super);
      function Donut2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "donut";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      Donut2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        _super.prototype.render.call(this, animate);
        var self2 = this;
        if (this.model.isDataEmpty()) {
          this.getComponentContainer().select("g.center").remove();
          return;
        }
        var svg = DOMUtils.appendOrSelect(this.getComponentContainer(), "g.center");
        var options2 = this.getOptions();
        var radius = this.computeRadius();
        var donutTitle = Tools.getProperty(options2, "donut", "center", "label");
        DOMUtils.appendOrSelect(svg, "text.donut-figure").attr("text-anchor", "middle").style("dominant-baseline", function() {
          if (donutTitle === null || donutTitle === "") {
            return "central";
          }
          return "initial";
        }).style("font-size", function() {
          return options2.donut.center.numberFontSize(radius);
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "donut-figure-enter-update",
            animate
          });
        }).tween("text", function() {
          return self2.centerNumberTween(select_default2(this));
        });
        if (donutTitle !== null && donutTitle !== "") {
          DOMUtils.appendOrSelect(svg, "text.donut-title").attr("text-anchor", "middle").style("font-size", function() {
            return options2.donut.center.titleFontSize(radius);
          }).attr("y", options2.donut.center.titleYPosition(radius)).text(donutTitle);
        }
      };
      Donut2.prototype.getInnerRadius = function() {
        var radius = this.computeRadius();
        return radius * (3 / 4);
      };
      Donut2.prototype.centerNumberTween = function(d3Ref) {
        var options2 = this.getOptions();
        var donutCenterFigure = Tools.getProperty(options2, "donut", "center", "number");
        if (donutCenterFigure === null) {
          donutCenterFigure = this.model.getDisplayData().reduce(function(accumulator, d) {
            return accumulator + d[options2.pie.valueMapsTo];
          }, 0);
        }
        var currentValue = parseInt(d3Ref.text().replace(/[, ]+/g, ""), 10) || 0;
        var interpolateFunction;
        if (currentValue % 1 === 0 && donutCenterFigure % 1 === 0) {
          interpolateFunction = round_default;
        } else {
          interpolateFunction = number_default;
        }
        var i = interpolateFunction(currentValue, donutCenterFigure);
        return function(t) {
          var numberFormatter = options2.donut.center.numberFormatter;
          d3Ref.text(numberFormatter(i(t)));
        };
      };
      return Donut2;
    }(Pie);
    __extends$Z = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Skeleton = function(_super) {
      __extends$Z(Skeleton2, _super);
      function Skeleton2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "skeleton";
        return _this;
      }
      Skeleton2.prototype.render = function() {
        var isDataLoading = Tools.getProperty(this.getOptions(), "data", "loading");
        if (isDataLoading) {
          this.renderSkeleton(isDataLoading);
        } else {
          this.removeSkeleton();
        }
      };
      Skeleton2.prototype.renderSkeleton = function(showShimmerEffect) {
        if (this.configs.skeleton === Skeletons.GRID) {
          this.renderGridSkeleton(showShimmerEffect);
        } else if (this.configs.skeleton === Skeletons.VERT_OR_HORIZ) {
          this.renderVertOrHorizSkeleton(showShimmerEffect);
        } else if (this.configs.skeleton === Skeletons.PIE) {
          this.renderPieSkeleton(showShimmerEffect);
        } else if (this.configs.skeleton === Skeletons.DONUT) {
          this.renderDonutSkeleton(showShimmerEffect);
        } else {
          throw new Error('"' + this.configs.skeleton + '" is not a valid Skeleton type.');
        }
      };
      Skeleton2.prototype.renderGridSkeleton = function(showShimmerEffect) {
        this.setScales();
        this.drawBackdrop(showShimmerEffect);
        this.drawXGrid(showShimmerEffect);
        this.drawYGrid(showShimmerEffect);
        if (showShimmerEffect) {
          this.setShimmerEffect("shimmer-lines");
        }
      };
      Skeleton2.prototype.renderVertOrHorizSkeleton = function(showShimmerEffect) {
        var orientation = this.services.cartesianScales.getOrientation();
        this.setScales();
        this.drawBackdrop(showShimmerEffect);
        if (orientation === CartesianOrientations.VERTICAL) {
          this.drawYGrid(showShimmerEffect);
        }
        if (orientation === CartesianOrientations.HORIZONTAL) {
          this.drawXGrid(showShimmerEffect);
        }
        this.setShimmerEffect("shimmer-lines");
      };
      Skeleton2.prototype.renderPieSkeleton = function(showShimmerEffect) {
        var outerRadius = this.computeOuterRadius();
        var innerRadius = 0;
        this.drawRing(outerRadius, innerRadius, showShimmerEffect);
        if (showShimmerEffect) {
          this.setShimmerEffect("shimmer-areas");
        }
      };
      Skeleton2.prototype.renderDonutSkeleton = function(showShimmerEffect) {
        var outerRadius = this.computeOuterRadius();
        var innerRadius = this.computeInnerRadius();
        this.drawRing(outerRadius, innerRadius, showShimmerEffect);
        if (showShimmerEffect) {
          this.setShimmerEffect("shimmer-areas");
        }
      };
      Skeleton2.prototype.setScales = function() {
        var xRange = this.services.cartesianScales.getMainXScale().range();
        var yRange = this.services.cartesianScales.getMainYScale().range();
        this.xScale = linear3().domain([0, 1]).range(xRange);
        this.yScale = linear3().domain([0, 1]).range(yRange);
      };
      Skeleton2.prototype.drawBackdrop = function(showShimmerEffect) {
        var svg = this.parent;
        var _a22 = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        this.backdrop = DOMUtils.appendOrSelect(svg, "svg.chart-skeleton.DAII").attr("width", width).attr("height", height);
        var backdropRect = DOMUtils.appendOrSelect(this.backdrop, "rect.chart-skeleton-backdrop");
        backdropRect.attr("width", "100%").attr("height", "100%");
        var _b = this.xScale.range(), xScaleStart = _b[0];
        _b[1];
        var _c = this.yScale.range();
        _c[0];
        var yScaleStart = _c[1];
        this.backdrop.merge(backdropRect).attr("x", xScaleStart).attr("y", yScaleStart);
        backdropRect.classed("shimmer-effect-lines", showShimmerEffect).classed("empty-state-lines", !showShimmerEffect).style("stroke", showShimmerEffect ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-lines") + ")" : null);
      };
      Skeleton2.prototype.drawXGrid = function(showShimmerEffect) {
        var width = this.backdrop.attr("width");
        var ticksNumber = Tools.getProperty(this.getOptions(), "grid", "x", "numberOfTicks");
        var ticksValues = this.xScale.ticks(ticksNumber).map(function(d) {
          return d * width;
        });
        var xGridG = DOMUtils.appendOrSelect(this.backdrop, "g.x.skeleton");
        var update = xGridG.selectAll("line").data(ticksValues);
        update.enter().append("line").merge(update).attr("x1", function(d) {
          return d;
        }).attr("x2", function(d) {
          return d;
        }).attr("y1", 0).attr("y2", "100%");
        xGridG.selectAll("line").classed("shimmer-effect-lines", showShimmerEffect).classed("empty-state-lines", !showShimmerEffect).style("stroke", showShimmerEffect ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-lines") + ")" : null);
      };
      Skeleton2.prototype.drawYGrid = function(showShimmerEffect) {
        var height = this.backdrop.attr("height");
        var width = this.backdrop.attr("width");
        var ticksNumber = Tools.getProperty(this.getOptions(), "grid", "y", "numberOfTicks");
        var ticksValues = this.xScale.ticks(ticksNumber).map(function(d) {
          return d * height;
        });
        var yGridG = DOMUtils.appendOrSelect(this.backdrop, "g.y.skeleton");
        var update = yGridG.selectAll("line").data(ticksValues);
        update.enter().append("line").merge(update).attr("x1", 0).attr("x2", width).attr("y1", function(d) {
          return d;
        }).attr("y2", function(d) {
          return d;
        });
        yGridG.selectAll("line").classed("shimmer-effect-lines", showShimmerEffect).classed("empty-state-lines", !showShimmerEffect).style("stroke", showShimmerEffect ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-lines") + ")" : null);
      };
      Skeleton2.prototype.drawRing = function(outerRadius, innerRadius, shimmer) {
        if (shimmer === void 0) {
          shimmer = true;
        }
        var svg = this.parent;
        var _a22 = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var container = DOMUtils.appendOrSelect(svg, "svg.chart-skeleton").attr("width", width).attr("height", height);
        var optionName = innerRadius === 0 ? "pie" : "donut";
        var alignment = Tools.getProperty(this.getOptions(), optionName, "alignment");
        DOMUtils.appendOrSelect(container, "rect.chart-skeleton-area-container").attr("width", width).attr("height", height).attr("fill", "none");
        var arcPathGenerator = arc_default().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(0).endAngle(Math.PI * 2);
        var tcx = outerRadius + Math.abs(pie.radiusOffset);
        var tcy = outerRadius + (Math.min(width, height) - outerRadius * 2) / 2;
        var skeletonAreaShape = DOMUtils.appendOrSelect(container, "path").attr("class", "skeleton-area-shape").attr("transform", "translate(" + tcx + ", " + tcy + ")").attr("d", arcPathGenerator).classed("shimmer-effect-areas", shimmer).classed("empty-state-areas", !shimmer).style("fill", shimmer ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-areas") + ")" : null);
        var translateX2 = outerRadius + pie.xOffset;
        if (alignment === Alignments.CENTER) {
          translateX2 = width / 2;
        } else if (alignment === Alignments.RIGHT) {
          translateX2 = width - outerRadius - pie.xOffset;
        }
        var translateY2 = outerRadius + pie.yOffset;
        skeletonAreaShape.attr("transform", "translate(" + translateX2 + ", " + translateY2 + ")");
      };
      Skeleton2.prototype.computeOuterRadius = function() {
        var _a22 = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var radius = Math.min(width, height) / 2;
        return radius + pie.radiusOffset;
      };
      Skeleton2.prototype.computeInnerRadius = function() {
        return this.computeOuterRadius() * (3 / 4);
      };
      Skeleton2.prototype.setShimmerEffect = function(gradientId) {
        var animationDuration = 2e3;
        var delay = 1e3;
        var shimmerWidth = 0.2;
        var stopBgShimmerClass = "stop-bg-shimmer";
        var stopShimmerClass = "stop-shimmer";
        var container = this.parent.select(".chart-skeleton");
        var width = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }).width;
        var startPoint = 0;
        var endPoint = width;
        var defs = DOMUtils.appendOrSelect(container, "defs").lower();
        var linearGradient = DOMUtils.appendOrSelect(defs, "linearGradient").attr("id", this.services.domUtils.generateElementIDString(gradientId)).attr("class", gradientId).attr("x1", startPoint - 3 * shimmerWidth * width).attr("x2", endPoint).attr("y1", 0).attr("y2", 0).attr("gradientUnits", "userSpaceOnUse").attr("gradientTransform", "translate(0, 0)");
        var stops = '\n			<stop class="' + stopBgShimmerClass + '" offset="' + startPoint + '"></stop>\n			<stop class="' + stopShimmerClass + '" offset="' + (startPoint + shimmerWidth) + '"></stop>\n			<stop class="' + stopBgShimmerClass + '" offset="' + (startPoint + 2 * shimmerWidth) + '"></stop>\n		';
        linearGradient.html(stops);
        repeat();
        function repeat() {
          linearGradient.attr("gradientTransform", "translate(" + (startPoint - 3 * shimmerWidth * width) + ", 0)").transition().duration(animationDuration).delay(delay).ease(linear).attr("gradientTransform", "translate(" + (endPoint + 3 * shimmerWidth * width) + ", 0)").on("end", repeat);
        }
      };
      Skeleton2.prototype.removeSkeleton = function() {
        var container = this.parent.select(".chart-skeleton");
        container.remove();
      };
      return Skeleton2;
    }(Component);
    __extends$Y = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    SkeletonLines = function(_super) {
      __extends$Y(SkeletonLines2, _super);
      function SkeletonLines2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "skeleton-lines";
        return _this;
      }
      SkeletonLines2.prototype.render = function() {
        var isDataLoading = Tools.getProperty(this.getOptions(), "data", "loading");
        var isSparkline = !Tools.getProperty(this.getOptions(), "grid", "x", "enabled") && !Tools.getProperty(this.getOptions(), "grid", "y", "enabled") && !Tools.getProperty(this.getOptions(), "axes", "bottom", "visible") && !Tools.getProperty(this.getOptions(), "axes", "left", "visible");
        if (isDataLoading && !isSparkline) {
          _super.prototype.renderGridSkeleton.call(this, isDataLoading);
        } else if (isDataLoading && isSparkline) {
          this.renderSparklineSkeleton(isDataLoading);
        } else {
          this.removeSkeleton();
        }
      };
      SkeletonLines2.prototype.renderSparklineSkeleton = function(showShimmerEffect) {
        this.setScales();
        this.drawBackdrop(showShimmerEffect);
        this.drawSparkline(showShimmerEffect);
        this.updateBackdropStyle();
        if (showShimmerEffect) {
          this.setShimmerEffect("shimmer-lines");
        }
      };
      SkeletonLines2.prototype.drawSparkline = function(showShimmerEffect) {
        var width = this.backdrop.attr("width");
        var ticksValues = [100];
        var sparklineSkeleton = DOMUtils.appendOrSelect(this.backdrop, "g.y.skeleton");
        var update = sparklineSkeleton.selectAll("line").data(ticksValues);
        update.enter().append("line").merge(update).attr("x1", 0).attr("x2", width).attr("y1", function(d) {
          return d;
        }).attr("y2", function(d) {
          return d;
        });
        sparklineSkeleton.selectAll("line").classed("shimmer-effect-lines", showShimmerEffect).classed("empty-state-lines", !showShimmerEffect).style("stroke", showShimmerEffect ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-lines") + ")" : null);
      };
      SkeletonLines2.prototype.updateBackdropStyle = function() {
        var svg = this.parent;
        this.backdrop = DOMUtils.appendOrSelect(svg, "svg.chart-skeleton.DAII");
        var backdropRect = DOMUtils.appendOrSelect(this.backdrop, "rect.chart-skeleton-backdrop");
        backdropRect.classed("shimmer-effect-lines", false).classed("shimmer-effect-sparkline", true).style("stroke", null);
      };
      return SkeletonLines2;
    }(Skeleton);
    __extends$X = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    NODE_OFFSET = 6;
    Tree = function(_super) {
      __extends$X(Tree2, _super);
      function Tree2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "tree";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      Tree2.prototype.getLongestLabel = function(data) {
        var _this = this;
        var longestLabel = "";
        data.forEach(function(d) {
          var longestLabelInChildren = d.children ? _this.getLongestLabel(d.children) : "";
          if (longestLabelInChildren.length > longestLabel.length || d.name.length > longestLabel.length) {
            longestLabel = longestLabelInChildren.length > d.name.length ? longestLabelInChildren : d.name;
          }
        });
        return longestLabel;
      };
      Tree2.prototype.getMockLabelWidth = function(svg, label) {
        var mockLabel = svg.append("text").attr("dy", "0.31em").attr("x", 0).attr("text-anchor", "end").text(label);
        var mockLabelWidth = DOMUtils.getSVGElementSize(mockLabel.node(), {
          useBBox: true
        }).width;
        mockLabel.remove();
        return mockLabelWidth;
      };
      Tree2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer();
        svg.html("");
        var _a22 = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        if (width < 1 || height < 1) {
          return;
        }
        var options2 = this.model.getOptions();
        var displayData = this.model.getDisplayData();
        var rootTitle = Tools.getProperty(options2, "tree", "rootTitle") || "Tree";
        var mockRootTitleWidth = this.getMockLabelWidth(svg, rootTitle);
        var longestLabel = this.getLongestLabel(displayData);
        var mockLongestLabelWidth = this.getMockLabelWidth(svg, longestLabel);
        var margin = {
          top: 0,
          right: 0,
          bottom: 0,
          left: mockRootTitleWidth > 0 ? mockRootTitleWidth + NODE_OFFSET : 30 - NODE_OFFSET
        };
        var root3 = hierarchy({
          name: rootTitle,
          children: displayData
        });
        var dx = 10;
        var dy = width / 6;
        var update = function(source) {
          var nodes = root3.descendants().reverse();
          var links = root3.links();
          var left3 = root3;
          var right3 = root3;
          root3.eachBefore(function(node) {
            if (node.x < left3.x)
              left3 = node;
            if (node.x > right3.x)
              right3 = node;
          });
          var height2 = right3.x - left3.x;
          var transition2 = svg.transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "tree-update-viewbox",
              animate: true
            });
          }).attr("viewBox", [-margin.left, left3.x, width, height2]);
          var nodeGroups = nodeGroup.selectAll("g").data(nodes, function(d) {
            return d.id;
          });
          var self2 = _this;
          var nodeGroupsEnter = nodeGroups.enter().append("g").attr("transform", function() {
            return "translate(" + source.y0 + "," + source.x0 + ")";
          }).attr("class", function(d) {
            return d.depth !== 0 && d.children && d.children.length > 0 ? "clickable" : null;
          }).on("mouseover", function(event, d) {
            self2.services.events.dispatchEvent(Events$1.Tree.NODE_MOUSEOVER, {
              event,
              element: select_default2(this),
              datum: d
            });
          }).on("click", function(event, d) {
            if (d.depth !== 0) {
              d.children = d.children ? null : d._children;
              update(d);
            }
            self2.services.events.dispatchEvent(Events$1.Tree.NODE_CLICK, {
              event,
              element: select_default2(this),
              datum: d
            });
          }).on("mouseout", function(event, d) {
            self2.services.events.dispatchEvent(Events$1.Tree.NODE_MOUSEOUT, {
              event,
              element: select_default2(this),
              datum: d
            });
          });
          nodeGroupsEnter.append("circle").attr("r", 2.5).attr("class", function(d) {
            return d._children ? "parent" : "child";
          }).attr("stroke-width", 10);
          nodeGroupsEnter.append("text").attr("dy", "0.31em").attr("x", function(d) {
            return d._children ? -NODE_OFFSET : NODE_OFFSET;
          }).attr("text-anchor", function(d) {
            return d._children ? "end" : "start";
          }).text(function(d) {
            return d.data.name;
          }).clone(true).attr("class", "text-stroke").lower();
          nodeGroups.merge(nodeGroupsEnter).transition(transition2).attr("transform", function(d) {
            return "translate(" + d.y + "," + d.x + ")";
          }).attr("fill-opacity", 1).attr("stroke-opacity", 1);
          nodeGroups.exit().transition(transition2).remove().attr("transform", function() {
            return "translate(" + source.y + "," + source.x + ")";
          }).attr("fill-opacity", 0).attr("stroke-opacity", 0);
          var linkPaths = linkGroup.selectAll("path").data(links, function(d) {
            return d.target.id;
          });
          var linkPathsEnter = linkPaths.enter().append("path").attr("d", function(d) {
            var o = { x: source.x0, y: source.y0 };
            return diagonal({ source: o, target: o });
          });
          linkPaths.merge(linkPathsEnter).transition(transition2).attr("d", diagonal);
          linkPaths.exit().transition(transition2).remove().attr("d", function() {
            var o = { x: source.x, y: source.y };
            return diagonal({ source: o, target: o });
          });
          root3.eachBefore(function(d) {
            d.x0 = d.x;
            d.y0 = d.y;
          });
        };
        var descendants = root3.descendants();
        var maxDepth = descendants[descendants.length - 1].depth;
        var tree$1 = Tools.getProperty(options2, "tree", "type") === TreeTypes.DENDROGRAM ? cluster_default().size([
          height,
          width - mockLongestLabelWidth - maxDepth * NODE_OFFSET - mockRootTitleWidth
        ]) : tree_default().nodeSize([dx, dy]).size([
          height,
          width - mockLongestLabelWidth - maxDepth * NODE_OFFSET - mockRootTitleWidth
        ]);
        var diagonal = linkHorizontal().x(function(d) {
          return d.y;
        }).y(function(d) {
          return d.x;
        });
        root3.x0 = dy / 2;
        root3.y0 = 0;
        root3.descendants().forEach(function(d, i) {
          d.id = i;
          d._children = d.children;
        });
        tree$1(root3);
        svg.attr("viewBox", [-margin.left, -margin.top, width, dx]).style("user-select", "none");
        var linkGroup = svg.append("g").attr("class", "links");
        var nodeGroup = svg.append("g").attr("class", "nodes");
        update(root3);
      };
      return Tree2;
    }(Component);
    __extends$W = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    findColorShade = function(hex2) {
      if (!hex2) {
        return null;
      }
      for (var _i = 0, _a22 = Object.keys(colors); _i < _a22.length; _i++) {
        var colorName = _a22[_i];
        var colorShades = colors[colorName];
        for (var _b = 0, _c = Object.keys(colorShades); _b < _c.length; _b++) {
          var colorShadeLevel = _c[_b];
          var colorShade = colorShades[colorShadeLevel];
          if (colorShade === hex2) {
            return colorShadeLevel;
          }
        }
      }
      return null;
    };
    textFillColor = function() {
      var correspondingLeaf = select_default2(this.parentNode).select("rect.leaf");
      var correspondingLeafFill = getComputedStyle(correspondingLeaf.node(), null).getPropertyValue("fill");
      var cl = color(correspondingLeafFill);
      var colorShade;
      if (cl) {
        colorShade = findColorShade(cl ? cl.hex() : null);
      }
      if (colorShade === null || colorShade === void 0) {
        var lightness = hsl(cl).l;
        colorShade = Math.abs(lightness * 100 - 100);
      }
      return colorShade > 50 ? "white" : "black";
    };
    uidCounter = 0;
    Treemap = function(_super) {
      __extends$W(Treemap2, _super);
      function Treemap2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "treemap";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          _this.parent.selectAll("g[data-name='leaf']").transition("legend-hover-treemap").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-treemap"
            });
          }).attr("opacity", function(d) {
            return d.parent.data.name === hoveredElement.datum()["name"] ? 1 : 0.3;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("g[data-name='leaf']").transition("legend-mouseout-treemap").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-treemap"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      Treemap2.prototype.init = function() {
        var events = this.services.events;
        events.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        events.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Treemap2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var svg = this.getComponentContainer();
        this.model.getData();
        var displayData = this.model.getDisplayData();
        var options2 = this.model.getOptions();
        var windowLocation = Tools.getProperty(window, "location");
        var _a22 = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var hierarchy$1 = hierarchy({
          name: options2.title || "Treemap",
          children: displayData
        }).sum(function(d) {
          return d.value;
        }).sort(function(a2, b) {
          return b.value - a2.value;
        });
        var root3 = treemap_default().size([width, height]).paddingInner(1).paddingOuter(0).round(true)(hierarchy$1);
        this.services.transitions;
        var leafGroups = svg.selectAll("g[data-name='leaf']").data(root3.leaves(), function(leaf) {
          return leaf.data.name;
        });
        leafGroups.exit().attr("opacity", 0).remove();
        var enteringLeafGroups = leafGroups.enter().append("g").attr("data-name", "leaf").attr("data-uid", function() {
          return uidCounter++;
        });
        var allLeafGroups = enteringLeafGroups.merge(leafGroups);
        allLeafGroups.attr("data-name", "leaf").transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "treemap-group-update",
            animate
          });
        }).attr("transform", function(d) {
          return "translate(" + d.x0 + "," + d.y0 + ")";
        });
        var rects = allLeafGroups.selectAll("rect.leaf").data(function(d) {
          return [d];
        });
        rects.exit().attr("width", 0).attr("height", 0).remove();
        var enteringRects = rects.enter().append("rect").classed("leaf", true);
        enteringRects.merge(rects).attr("width", 0).attr("height", 0).attr("id", function() {
          var uid = select_default2(this.parentNode).attr("data-uid");
          return options2.style.prefix + "-leaf-" + uid;
        }).attr("class", function(d) {
          while (d.depth > 1)
            d = d.parent;
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d.data.name,
            originalClassName: "leaf"
          });
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "treemap-leaf-update-enter",
            animate
          });
        }).attr("width", function(d) {
          return d.x1 - d.x0;
        }).attr("height", function(d) {
          return d.y1 - d.y0;
        }).style("fill", function(d) {
          while (d.depth > 1)
            d = d.parent;
          return _this.model.getFillColor(d.data.name);
        });
        allLeafGroups.selectAll("clipPath").data(function(d) {
          if (d.data.showLabel !== true) {
            return [];
          }
          return [1];
        }, function(d) {
          return d;
        }).join(function(enter) {
          enter.append("clipPath").attr("id", function() {
            var uid = select_default2(this.parentNode).attr("data-uid");
            return options2.style.prefix + "-clip-" + uid;
          }).append("use").attr("xlink:href", function() {
            var uid = select_default2(this.parentNode.parentNode).attr("data-uid");
            var leafID = options2.style.prefix + "-leaf-" + uid;
            return new URL("#" + leafID, windowLocation) + "";
          });
        }, function(update) {
          return null;
        }, function(exit) {
          return exit.remove();
        });
        allLeafGroups.selectAll("text").data(function(d) {
          if (d.data.showLabel !== true) {
            return [];
          }
          var parent = d;
          while (parent.depth > 1)
            parent = parent.parent;
          var color22 = hsl(_this.model.getFillColor(parent.data.name));
          return [
            {
              text: d.data.name,
              color: color22.l < 0.5 ? "white" : "black"
            }
          ];
        }, function(d) {
          return d;
        }).join(function(enter) {
          var addedText = enter.append("text").text(function(d) {
            return d.text;
          }).style("fill", textFillColor).attr("x", 7).attr("y", 18);
          if (windowLocation) {
            addedText.attr("clip-path", function() {
              var uid = select_default2(this.parentNode).attr("data-uid");
              var clipPathID = options2.style.prefix + "-clip-" + uid;
              return "url(" + (new URL("#" + clipPathID, windowLocation) + "") + ")";
            });
          }
        }, function(update) {
          return update.text(function(d) {
            return d.text;
          }).style("fill", textFillColor);
        }, function(exit) {
          return exit.remove();
        });
        this.addEventListeners();
      };
      Treemap2.prototype.addEventListeners = function() {
        var self2 = this;
        this.parent.selectAll("rect.leaf").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          var fillColor = getComputedStyle(this, null).getPropertyValue("fill");
          var parent = datum2;
          while (parent.depth > 1)
            parent = parent.parent;
          hoveredElement.transition("graph_element_mouseover_fill_update").call(function(t) {
            return self2.services.transitions.setupTransition({
              transition: t,
              name: "graph_element_mouseover_fill_update"
            });
          }).style("fill", function(d) {
            var customColor = self2.model.getFillColor(d.parent.data.name);
            if (customColor) {
              fillColor = customColor;
            }
            return color(fillColor).darker(0.7).toString();
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                color: fillColor,
                label: parent.data.name,
                bold: true
              },
              {
                label: datum2.data.name,
                value: datum2.data.value
              }
            ]
          });
          self2.services.events.dispatchEvent(Events$1.Treemap.LEAF_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Treemap.LEAF_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Treemap.LEAF_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          var parent = datum2;
          while (parent.depth > 1)
            parent = parent.parent;
          hoveredElement.transition().call(function(t) {
            return self2.services.transitions.setupTransition({
              transition: t,
              name: "graph_element_mouseout_fill_update"
            });
          }).style("fill", function(d) {
            return self2.model.getFillColor(d.parent.data.name);
          });
          self2.services.events.dispatchEvent(Events$1.Treemap.LEAF_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      return Treemap2;
    }(Component);
    __extends$V = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Radar = function(_super) {
      __extends$V(Radar2, _super);
      function Radar2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "radar";
        _this.renderType = RenderTypes.SVG;
        _this.getLabelDimensions = function(label) {
          var tmpTick = DOMUtils.appendOrSelect(_this.getComponentContainer(), "g.tmp-tick");
          var tmpTickText = DOMUtils.appendOrSelect(tmpTick, "text").text(label);
          var _a22 = DOMUtils.getSVGElementSize(tmpTickText.node(), { useBBox: true }), width = _a22.width, height = _a22.height;
          tmpTick.remove();
          return { width, height };
        };
        _this.normalizeFlatData = function(dataset) {
          var options2 = _this.getOptions();
          var _a22 = Tools.getProperty(options2, "radar", "axes"), angle = _a22.angle, value2 = _a22.value;
          var groupMapsTo = Tools.getProperty(options2, "data", "groupMapsTo");
          var completeBlankData = Tools.flatMapDeep(_this.uniqueKeys.map(function(key2) {
            return _this.uniqueGroups.map(function(group) {
              var _a3;
              return _a3 = {}, _a3[angle] = key2, _a3[groupMapsTo] = group, _a3[value2] = null, _a3;
            });
          }));
          return Tools.merge(completeBlankData, dataset);
        };
        _this.normalizeGroupedData = function(dataset) {
          var options2 = _this.getOptions();
          var _a22 = Tools.getProperty(options2, "radar", "axes"), angle = _a22.angle, value2 = _a22.value;
          var groupMapsTo = Tools.getProperty(options2, "data", "groupMapsTo");
          return dataset.map(function(_a3) {
            var name = _a3.name, data = _a3.data;
            var completeBlankData = _this.uniqueKeys.map(function(k) {
              var _a4;
              return _a4 = {}, _a4[groupMapsTo] = name, _a4[angle] = k, _a4[value2] = null, _a4;
            });
            return { name, data: Tools.merge(completeBlankData, data) };
          });
        };
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          _this.parent.selectAll("g.blobs path").transition("legend-hover-blob").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-blob"
            });
          }).style("fill-opacity", function(group) {
            if (group.name !== hoveredElement.datum().name) {
              return radar.opacity.unselected;
            }
            return radar.opacity.selected;
          }).style("stroke-opacity", function(group) {
            if (group.name !== hoveredElement.datum().name) {
              return radar.opacity.unselected;
            }
            return 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("g.blobs path").transition("legend-mouseout-blob").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-blob"
            });
          }).style("fill-opacity", radar.opacity.selected).style("stroke-opacity", 1);
        };
        return _this;
      }
      Radar2.prototype.init = function() {
        var events = this.services.events;
        events.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        events.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Radar2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var svg = this.getComponentContainer();
        var _a22 = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var data = this.model.getData();
        var groupedData = this.model.getGroupedData();
        var options2 = this.getOptions();
        var groupMapsTo = Tools.getProperty(options2, "data", "groupMapsTo");
        var valueMapsTo = Tools.getProperty(options2, "radar", "axes", "value");
        var _b = Tools.getProperty(options2, "radar", "axes"), angle = _b.angle, value2 = _b.value;
        var _c = radar, xLabelPadding = _c.xLabelPadding, yLabelPadding = _c.yLabelPadding, yTicksNumber = _c.yTicksNumber, minRange = _c.minRange, xAxisRectHeight = _c.xAxisRectHeight;
        this.uniqueKeys = Array.from(new Set(data.map(function(d) {
          return d[angle];
        })));
        this.uniqueGroups = Array.from(new Set(data.map(function(d) {
          return d[groupMapsTo];
        })));
        this.fullDataNormalized = this.normalizeFlatData(data);
        this.groupedDataNormalized = this.normalizeGroupedData(groupedData);
        var labelHeight = this.getLabelDimensions(this.uniqueKeys[0]).height;
        var margin = 2 * (labelHeight + yLabelPadding);
        var size = Math.min(width, height);
        var diameter = size - margin;
        var radius = diameter / 2;
        if (radius <= 0) {
          return;
        }
        var xScale = band().domain(this.fullDataNormalized.map(function(d) {
          return d[angle];
        })).range([0, 2 * Math.PI].map(function(a2) {
          return a2 - Math.PI / 2;
        }));
        var centerPointMinValue = min(this.fullDataNormalized.map(function(d) {
          return d[value2];
        }));
        var yScale = linear3().domain([
          centerPointMinValue >= 0 ? 0 : centerPointMinValue,
          max(this.fullDataNormalized.map(function(d) {
            return d[value2];
          }))
        ]).range([minRange, radius]).nice(yTicksNumber);
        var yTicks = yScale.ticks(yTicksNumber);
        var colorScale = function(group) {
          return _this.model.getFillColor(group);
        };
        var radialLineGenerator = lineRadial_default().angle(function(d) {
          return xScale(d[angle]) + Math.PI / 2;
        }).radius(function(d) {
          return yScale(d[value2]);
        }).curve(linearClosed_default);
        var horizSpaceNeededByEachXLabel = this.uniqueKeys.map(function(key2) {
          var tickWidth = _this.getLabelDimensions(key2).width;
          var distanceFromDiameter = distanceBetweenPointOnCircAndVerticalDiameter(xScale(key2), radius);
          return tickWidth + distanceFromDiameter;
        });
        var leftPadding = max(horizSpaceNeededByEachXLabel);
        var c2 = {
          x: leftPadding + xLabelPadding,
          y: height / 2
        };
        var yAxes = DOMUtils.appendOrSelect(svg, "g.y-axes").attr("role", Roles.GROUP);
        var yAxisUpdate = yAxes.selectAll("path").data(yTicks, function(tick) {
          return tick;
        });
        var shapeData = function(tick) {
          return _this.uniqueKeys.map(function(key2) {
            var _a3;
            return _a3 = {}, _a3[angle] = key2, _a3[value2] = tick, _a3;
          });
        };
        yAxisUpdate.join(function(enter) {
          return enter.append("path").attr("opacity", 0).attr("transform", "translate(" + c2.x + ", " + c2.y + ")").attr("fill", "none").call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_y_axes_enter",
                animate
              });
            }).attr("opacity", 1).attr("d", function(tick) {
              return radialLineGenerator(shapeData(tick));
            });
          });
        }, function(update) {
          return update.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_y_axes_update",
                animate
              });
            }).attr("opacity", 1).attr("transform", "translate(" + c2.x + ", " + c2.y + ")").attr("d", function(tick) {
              return radialLineGenerator(shapeData(tick));
            });
          });
        }, function(exit) {
          return exit.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_y_axes_exit",
                animate
              });
            }).attr("d", function(tick) {
              return radialLineGenerator(shapeData(tick));
            }).attr("opacity", 0).remove();
          });
        });
        var xAxes = DOMUtils.appendOrSelect(svg, "g.x-axes").attr("role", Roles.GROUP);
        var xAxisUpdate = xAxes.selectAll("line").data(this.uniqueKeys, function(key2) {
          return key2;
        });
        xAxisUpdate.join(function(enter) {
          return enter.append("line").attr("opacity", 0).attr("class", function(key2) {
            return "x-axis-" + Tools.kebabCase(key2);
          }).attr("stroke-dasharray", "0").attr("x1", function(key2) {
            return polarToCartesianCoords(xScale(key2), 0, c2).x;
          }).attr("y1", function(key2) {
            return polarToCartesianCoords(xScale(key2), 0, c2).y;
          }).attr("x2", function(key2) {
            return polarToCartesianCoords(xScale(key2), 0, c2).x;
          }).attr("y2", function(key2) {
            return polarToCartesianCoords(xScale(key2), 0, c2).y;
          }).call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_x_axes_enter",
                animate
              });
            }).attr("opacity", 1).attr("x1", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[0], c2).x;
            }).attr("y1", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[0], c2).y;
            }).attr("x2", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[1], c2).x;
            }).attr("y2", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[1], c2).y;
            });
          });
        }, function(update) {
          return update.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_x_axes_update",
                animate
              });
            }).attr("opacity", 1).attr("x1", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[0], c2).x;
            }).attr("y1", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[0], c2).y;
            }).attr("x2", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[1], c2).x;
            }).attr("y2", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[1], c2).y;
            });
          });
        }, function(exit) {
          return exit.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_x_axes_exit",
                animate
              });
            }).attr("opacity", 0).remove();
          });
        });
        var xLabels = DOMUtils.appendOrSelect(svg, "g.x-labels").attr("role", Roles.GROUP);
        var xLabelUpdate = xLabels.selectAll("text").data(this.uniqueKeys);
        xLabelUpdate.join(function(enter) {
          return enter.append("text").text(function(key2) {
            return key2;
          }).attr("opacity", 0).attr("x", function(key2) {
            return polarToCartesianCoords(xScale(key2), yScale.range()[1] + xLabelPadding, c2).x;
          }).attr("y", function(key2) {
            return polarToCartesianCoords(xScale(key2), yScale.range()[1] + xLabelPadding, c2).y;
          }).style("text-anchor", function(key2) {
            return radialLabelPlacement(xScale(key2)).textAnchor;
          }).style("dominant-baseline", function(key2) {
            return radialLabelPlacement(xScale(key2)).dominantBaseline;
          }).call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_x_labels_enter",
                animate
              });
            }).attr("opacity", 1);
          });
        }, function(update) {
          return update.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_x_labels_update",
                animate
              });
            }).attr("opacity", 1).attr("x", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[1] + xLabelPadding, c2).x;
            }).attr("y", function(key2) {
              return polarToCartesianCoords(xScale(key2), yScale.range()[1] + xLabelPadding, c2).y;
            }).end().finally(function() {
              var alignment = Tools.getProperty(options2, "radar", "alignment");
              var alignmentXOffset = _this.getAlignmentXOffset(alignment, svg, _this.getParent());
              svg.attr("x", alignmentXOffset);
            });
          });
        }, function(exit) {
          return exit.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_x_labels_exit",
                animate
              });
            }).attr("opacity", 0).remove();
          });
        });
        var blobs = DOMUtils.appendOrSelect(svg, "g.blobs").attr("role", Roles.GROUP);
        var blobUpdate = blobs.selectAll("path").data(this.groupedDataNormalized, function(group) {
          return group.name;
        });
        blobUpdate.join(function(enter) {
          return enter.append("path").attr("class", function(group) {
            return _this.model.getColorClassName({
              classNameTypes: [
                ColorClassNameTypes.FILL,
                ColorClassNameTypes.STROKE
              ],
              dataGroupName: group.name,
              originalClassName: "blob"
            });
          }).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-label", function(d) {
            return d["name"];
          }).attr("opacity", 0).attr("transform", animate ? function() {
            return "translate(" + c2.x + ", " + c2.y + ") scale(" + (1 + Math.random() * 0.35) + ")";
          } : "translate(" + c2.x + ", " + c2.y + ")").style("fill", function(group) {
            return colorScale(group.name);
          }).style("fill-opacity", radar.opacity.selected).style("stroke", function(group) {
            return colorScale(group.name);
          }).call(function(selection2) {
            var selectionUpdate = selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_blobs_enter",
                animate
              });
            });
            if (animate) {
              selectionUpdate.delay(function() {
                return Math.random() * 30;
              }).attr("transform", "translate(" + c2.x + ", " + c2.y + ")");
            }
            selectionUpdate.attr("opacity", 1).attr("d", function(group) {
              return radialLineGenerator(group.data);
            });
          });
        }, function(update) {
          update.attr("class", function(group) {
            return _this.model.getColorClassName({
              classNameTypes: [
                ColorClassNameTypes.FILL,
                ColorClassNameTypes.STROKE
              ],
              dataGroupName: group.name,
              originalClassName: "blob"
            });
          }).style("fill", function(group) {
            return colorScale(group.name);
          }).style("stroke", function(group) {
            return colorScale(group.name);
          });
          update.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_blobs_update",
                animate
              });
            }).attr("opacity", 1).attr("transform", "translate(" + c2.x + ", " + c2.y + ")").attr("d", function(group) {
              return radialLineGenerator(group.data);
            });
          });
        }, function(exit) {
          return exit.call(function(selection2) {
            var selectionUpdate = selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_blobs_exit",
                animate
              });
            });
            if (animate) {
              selectionUpdate.delay(function() {
                return Math.random() * 30;
              }).attr("transform", function() {
                return "translate(" + c2.x + ", " + c2.y + ") scale(" + (1 + Math.random() * 0.35) + ")";
              });
            }
            selectionUpdate.attr("opacity", 0).remove();
          });
        });
        var dots = DOMUtils.appendOrSelect(svg, "g.dots").attr("role", Roles.GROUP);
        var dotsUpdate = dots.selectAll("circle").data(this.fullDataNormalized.filter(function(d) {
          return Tools.getProperty(d, value2) !== null;
        }));
        dotsUpdate.join(function(enter) {
          return enter.append("circle").attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-label", function(d) {
            return d[valueMapsTo];
          });
        }, function(update) {
          return update;
        }, function(exit) {
          return exit.remove();
        }).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d[groupMapsTo],
            originalClassName: Tools.kebabCase(d[angle])
          });
        }).attr("cx", function(d) {
          return polarToCartesianCoords(xScale(d[angle]), yScale(d[value2]), c2).x;
        }).attr("cy", function(d) {
          return polarToCartesianCoords(xScale(d[angle]), yScale(d[value2]), c2).y;
        }).attr("r", 0).attr("opacity", 0).style("fill", function(d) {
          return colorScale(d[groupMapsTo]);
        });
        var xAxesRect = DOMUtils.appendOrSelect(svg, "g.x-axes-rect").attr("role", Roles.GROUP);
        var xAxisRectUpdate = xAxesRect.selectAll("rect").data(this.uniqueKeys);
        xAxisRectUpdate.join(function(enter) {
          return enter.append("rect");
        }, function(update) {
          return update;
        }, function(exit) {
          return exit.remove();
        }).attr("x", c2.x).attr("y", c2.y - xAxisRectHeight / 2).attr("width", yScale.range()[1]).attr("height", xAxisRectHeight).style("fill", "red").style("fill-opacity", 0).attr("transform", function(key2) {
          return "rotate(" + radToDeg(xScale(key2)) + ", " + c2.x + ", " + c2.y + ")";
        });
        var yLabels = DOMUtils.appendOrSelect(svg, "g.y-labels").attr("role", Roles.GROUP);
        var yLabelUpdate = yLabels.selectAll("text").data(extent(yTicks));
        yLabelUpdate.join(function(enter) {
          return enter.append("text").attr("opacity", 0).text(function(tick) {
            return tick;
          }).attr("x", function(tick) {
            return polarToCartesianCoords(-Math.PI / 2, yScale(tick), c2).x + yLabelPadding;
          }).attr("y", function(tick) {
            return polarToCartesianCoords(-Math.PI / 2, yScale(tick), c2).y;
          }).style("text-anchor", "start").style("dominant-baseline", "middle").call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_y_labels_enter",
                animate
              });
            }).attr("opacity", 1);
          });
        }, function(update) {
          return update.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_y_labels_update",
                animate
              });
            }).text(function(tick) {
              return tick;
            }).attr("opacity", 1).attr("x", function(tick) {
              return polarToCartesianCoords(-Math.PI / 2, yScale(tick), c2).x + yLabelPadding;
            }).attr("y", function(tick) {
              return polarToCartesianCoords(-Math.PI / 2, yScale(tick), c2).y;
            });
          });
        }, function(exit) {
          return exit.call(function(selection2) {
            return selection2.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "radar_y_labels_exit",
                animate
              });
            }).attr("opacity", 0).remove();
          });
        });
        this.addEventListeners();
      };
      Radar2.prototype.getAlignmentXOffset = function(alignment, svg, parent) {
        var svgDimensions = DOMUtils.getSVGElementSize(svg, {
          useBBox: true
        });
        var width = DOMUtils.getSVGElementSize(parent, {
          useAttrs: true
        }).width;
        var alignmentOffset = 0;
        if (alignment === Alignments.CENTER) {
          alignmentOffset = Math.floor((width - svgDimensions.width) / 2);
        } else if (alignment === Alignments.RIGHT) {
          alignmentOffset = width - svgDimensions.width;
        }
        return alignmentOffset;
      };
      Radar2.prototype.destroy = function() {
        this.parent.selectAll(".x-axes-rect > rect").on("mouseover", null).on("mousemove", null).on("mouseout", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      Radar2.prototype.addEventListeners = function() {
        var self2 = this;
        var angle = Tools.getProperty(this.getOptions(), "radar").axes.angle;
        this.parent.selectAll(".x-axes-rect > rect").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Radar.X_AXIS_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          var axisLine = self2.parent.select(".x-axes .x-axis-" + Tools.kebabCase(datum2));
          var dots = self2.parent.selectAll(".dots circle." + Tools.kebabCase(datum2));
          var activeDataGroupNames = self2.model.getActiveDataGroupNames();
          var options2 = self2.getOptions();
          var groupMapsTo = options2.data.groupMapsTo;
          var valueMapsTo = Tools.getProperty(options2, "radar", "axes", "value");
          axisLine.classed("hovered", true).attr("stroke-dasharray", "4 4");
          dots.classed("hovered", true).attr("opacity", function(d) {
            return activeDataGroupNames.indexOf(d[groupMapsTo]) !== -1 ? 1 : 0;
          }).attr("r", radar.dotsRadius);
          var itemsToHighlight = self2.fullDataNormalized.filter(function(d) {
            return d[angle] === datum2 && activeDataGroupNames.indexOf(d[groupMapsTo]) !== -1;
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: itemsToHighlight.filter(function(datum22) {
              return typeof datum22[valueMapsTo] === "number";
            }).map(function(datum22) {
              return {
                label: datum22[groupMapsTo],
                value: datum22[valueMapsTo],
                color: self2.model.getFillColor(datum22[groupMapsTo]),
                class: self2.model.getColorClassName({
                  classNameTypes: [ColorClassNameTypes.TOOLTIP],
                  dataGroupName: datum22[groupMapsTo]
                })
              };
            })
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Radar.X_AXIS_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Radar.X_AXIS_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          var axisLine = self2.parent.select(".x-axes .x-axis-" + Tools.kebabCase(datum2));
          var dots = self2.parent.selectAll(".dots circle." + Tools.kebabCase(datum2));
          axisLine.classed("hovered", false).attr("stroke-dasharray", "0");
          dots.classed("hovered", false).attr("opacity", 0).attr("r", 0);
          self2.services.events.dispatchEvent(Events$1.Radar.X_AXIS_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
        });
      };
      return Radar2;
    }(Component);
    __extends$U = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$h = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    CirclePack = function(_super) {
      __extends$U(CirclePack2, _super);
      function CirclePack2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "circle-pack";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          _this.parent.selectAll("circle.node").transition("legend-hover-circlepack").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-circlepack"
            });
          }).attr("opacity", function(d) {
            return d.data.dataGroupName === hoveredElement.datum()["name"] ? 1 : circlePack.circles.fillOpacity;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("circle.node").transition("legend-mouseout-circlepack").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-circlepack"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      CirclePack2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer({ withinChartClip: true });
        var _a22 = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        if (width < 1 || height < 1) {
          return;
        }
        var displayData = this.model.getDisplayData();
        var parentNode = this.model.hasParentNode();
        var hierarchyLevel = this.model.getHierarchyLevel();
        var options2 = this.getOptions();
        var canvasZoomEnabled = Tools.getProperty(options2, "canvasZoom", "enabled");
        if (parentNode && Tools.getProperty(displayData, 0, "children")) {
          displayData = Tools.getProperty(displayData, 0, "children");
        }
        var root3 = hierarchy({ children: displayData }).sum(function(d) {
          return d.value;
        }).sort(function(a2, b) {
          return b.value - a2.value;
        });
        var packLayout = pack_default().size([width, height]).padding(function(d) {
          return d.depth >= 1 ? circlePack.padding.children + 3 : circlePack.padding.mainGroup + 3;
        });
        var nodeData = packLayout(root3).descendants().splice(1).filter(function(node) {
          return node.depth <= hierarchyLevel;
        });
        var circles = svg.selectAll("circle.node").data(nodeData);
        circles.exit().attr("width", 0).attr("height", 0).remove();
        var enteringCircles = circles.enter().append("circle").classed("node", true);
        enteringCircles.merge(circles).attr("class", function(d) {
          var originalClass = canvasZoomEnabled && hierarchyLevel === 3 ? _this.getZoomClass(d) : "";
          return _this.model.getColorClassName({
            classNameTypes: [
              ColorClassNameTypes.FILL,
              ColorClassNameTypes.STROKE
            ],
            dataGroupName: d.data.dataGroupName,
            originalClassName: d.children ? "node " + originalClass : "node node-leaf " + originalClass
          });
        }).style("fill", function(d) {
          return _this.model.getFillColor(d.data.dataGroupName);
        }).style("stroke", function(d) {
          return _this.model.getFillColor(d.data.dataGroupName);
        }).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        }).transition("circlepack-leaf-update-enter").call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "circlepack-leaf-update-enter"
          });
        }).attr("r", function(d) {
          return d.r;
        }).attr("opacity", 1).attr("fill-opacity", circlePack.circles.fillOpacity);
        if (canvasZoomEnabled === true && this.focal) {
          this.services.canvasZoom.zoomIn(this.focal, enteringCircles, canvasZoomSettings);
          this.setBackgroundListeners();
        }
        if (!parentNode) {
          this.addLegendListeners();
        }
        this.addEventListeners();
      };
      CirclePack2.prototype.unhighlightChildren = function(childData) {
        var _this = this;
        var data = childData.map(function(d) {
          return d.data;
        });
        this.parent.selectAll("circle.node").filter(function(d) {
          return data.some(function(datum2) {
            return datum2 === d.data;
          }) && d.depth > 1;
        }).style("stroke", function(d) {
          return _this.model.getFillColor(d.data.dataGroupName);
        });
      };
      CirclePack2.prototype.highlightChildren = function(childData) {
        var data = childData.map(function(d) {
          return d.data;
        });
        this.parent.selectAll("circle.node").filter(function(d) {
          return data.some(function(datum2) {
            return datum2 === d.data;
          }) && d.depth > 1;
        }).style("stroke", circlePack.circles.hover.stroke);
      };
      CirclePack2.prototype.getZoomClass = function(node) {
        if (this.model.getHierarchyLevel() === 3 && this.focal) {
          if (node.data === this.focal.data || this.focal.children.some(function(d) {
            return d.data === node.data;
          })) {
            return "focal";
          }
        }
        return "non-focal";
      };
      CirclePack2.prototype.addLegendListeners = function() {
        var events = this.services.events;
        events.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        events.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      CirclePack2.prototype.removeBackgroundListeners = function() {
        var chartSvg = select_default2(this.services.domUtils.getMainContainer());
        chartSvg.on("click", function() {
          return null;
        });
      };
      CirclePack2.prototype.setBackgroundListeners = function() {
        var chartSvg = select_default2(this.services.domUtils.getMainContainer());
        var self2 = this;
        var canvasSelection = this.parent.selectAll("circle.node");
        var zoomSetting = Tools.getProperty(Configuration, "canvasZoomSettings");
        chartSvg.on("click", function() {
          self2.focal = null;
          self2.model.updateHierarchyLevel(2);
          chartSvg.classed("zoomed-in", false);
          self2.services.canvasZoom.zoomOut(canvasSelection, zoomSetting);
        });
      };
      CirclePack2.prototype.getZoomIcon = function() {
        return '\n		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10">\n			<polygon points="5.93 3.71 4.45 3.71 4.45 2.23 3.71 2.23 3.71 3.71 2.23 3.71 2.23 4.45 3.71 4.45 3.71 5.93 4.45 5.93 4.45 4.45 5.93 4.45 5.93 3.71"/>\n			<path d="M7.2,6.67a4,4,0,0,0,1-2.59A4.08,4.08,0,1,0,4.07,8.15h0a4,4,0,0,0,2.59-1L9.48,10,10,9.48Zm-3.12.77A3.34,3.34,0,1,1,7.41,4.08,3.34,3.34,0,0,1,4.08,7.44Z"/>\n		</svg>';
      };
      CirclePack2.prototype.addEventListeners = function() {
        var self2 = this;
        this.parent.selectAll("circle.node").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", true);
          var hierarchyLevel = self2.model.getHierarchyLevel();
          var disabled = hierarchyLevel > 2 && !hoveredElement.classed("focal");
          var canvasZoomEnabled = Tools.getProperty(self2.model.getOptions(), "canvasZoom", "enabled");
          var zoomable = false;
          if (!disabled) {
            var childrenData = [];
            var totalValue = [];
            var parentValue = null;
            if (datum2.children) {
              if (datum2.depth > 1 && canvasZoomEnabled) {
                zoomable = true;
                hoveredElement.classed("clickable", true);
              }
              childrenData = datum2.children.map(function(child) {
                if (child !== null) {
                  if (typeof child.data.value === "number") {
                    return {
                      label: child.data.name,
                      value: child.data.value
                    };
                  } else {
                    return {
                      label: child.data.name,
                      labelIcon: canvasZoomEnabled && hierarchyLevel <= 2 ? self2.getZoomIcon() : null,
                      value: child.value
                    };
                  }
                }
              });
              var options2 = self2.model.getOptions();
              totalValue = [
                {
                  label: get_default(options2, "tooltip.totalLabel") || "Total",
                  value: datum2.value,
                  bold: true
                }
              ];
              self2.highlightChildren(datum2.children);
            } else {
              parentValue = datum2.value;
            }
            var fillColor = getComputedStyle(this, null).getPropertyValue("fill");
            self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              hoveredElement,
              items: __spreadArrays$h([
                {
                  color: fillColor,
                  label: datum2.data.name,
                  labelIcon: zoomable && canvasZoomEnabled && hierarchyLevel <= 2 ? self2.getZoomIcon() : null,
                  value: parentValue
                }
              ], childrenData, totalValue)
            });
          }
          self2.services.events.dispatchEvent(Events$1.CirclePack.CIRCLE_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.CirclePack.CIRCLE_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          hoveredElement.classed("hovered", false);
          if (datum2.children) {
            self2.unhighlightChildren(datum2.children);
          }
          self2.services.events.dispatchEvent(Events$1.CirclePack.CIRCLE_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        }).on("click", function(event, datum2) {
          var hoveredElement = select_default2(this);
          var disabled = hoveredElement.classed("non-focal");
          var canvasZoomEnabled = Tools.getProperty(self2.model.getOptions(), "canvasZoom", "enabled");
          if (canvasZoomEnabled && self2.model.getHierarchyLevel() > 2) {
            var canvasSelection = self2.parent.selectAll("circle.node");
            var chartSvg = select_default2(self2.services.domUtils.getMainContainer());
            chartSvg.classed("zoomed-in", false);
            self2.focal = null;
            self2.model.updateHierarchyLevel(2);
            self2.services.canvasZoom.zoomOut(canvasSelection, canvasZoomSettings);
          } else if (datum2.depth === 2 && datum2.children && !disabled && canvasZoomEnabled) {
            var canvasSelection = self2.parent.selectAll("circle.node");
            var chartSvg = select_default2(self2.services.domUtils.getMainContainer());
            chartSvg.classed("zoomed-in", true);
            self2.focal = datum2;
            self2.model.updateHierarchyLevel(3);
            self2.services.canvasZoom.zoomIn(datum2, canvasSelection, canvasZoomSettings);
            event.stopPropagation();
          }
          self2.services.events.dispatchEvent(Events$1.CirclePack.CIRCLE_CLICK, {
            event,
            element: hoveredElement,
            datum: datum2
          });
        });
      };
      CirclePack2.prototype.destroy = function() {
        this.parent.selectAll("circle.node").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("click", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
        this.removeBackgroundListeners();
      };
      return CirclePack2;
    }(Component);
    __extends$T = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    WordCloud = function(_super) {
      __extends$T(WordCloud2, _super);
      function WordCloud2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "wordcloud";
        _this.renderType = RenderTypes.SVG;
        _this.handleLegendOnHover = function(event) {
          var hoveredElement = event.detail.hoveredElement;
          var groupMapsTo = _this.getOptions().data.groupMapsTo;
          _this.parent.selectAll("text.word").transition("legend-hover-wordcloud").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-hover-wordcloud"
            });
          }).attr("opacity", function(d) {
            return d[groupMapsTo] !== hoveredElement.datum()["name"] ? 0.3 : 1;
          });
        };
        _this.handleLegendMouseOut = function(event) {
          _this.parent.selectAll("text.word").transition("legend-mouseout-wordcloud").call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "legend-mouseout-wordcloud"
            });
          }).attr("opacity", 1);
        };
        return _this;
      }
      WordCloud2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.addEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
      };
      WordCloud2.prototype.render = function(animate) {
        if (animate === void 0) {
          animate = true;
        }
        var self2 = this;
        var svg = this.getComponentContainer().attr("width", "100%").attr("height", "100%");
        var displayData = this.model.getDisplayData();
        var fontSizeScale = this.getFontSizeScale(displayData);
        var options2 = this.getOptions();
        var _a22 = options2.wordCloud, fontSizeMapsTo = _a22.fontSizeMapsTo, wordMapsTo = _a22.wordMapsTo;
        var groupMapsTo = options2.data.groupMapsTo;
        var _b = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }), width = _b.width, height = _b.height;
        if (width === 0 || height === 0) {
          return;
        }
        var layout = (0, import_d3_cloud.default)().size([width, height]).words(displayData.map(function(d) {
          var _a3;
          var value2 = d[fontSizeMapsTo];
          if (typeof d[fontSizeMapsTo] !== "number") {
            throw Error("Badly formatted WordCloud data. `value` should only be an integer or float");
          }
          return _a3 = {}, _a3[groupMapsTo] = d[groupMapsTo], _a3.text = d[wordMapsTo], _a3.size = value2, _a3.value = value2, _a3;
        })).padding(5).rotate(0).fontSize(function(d) {
          return fontSizeScale(d.size);
        }).on("end", draw);
        layout.start();
        function draw(words2) {
          var textGroup = DOMUtils.appendOrSelect(svg, "g.words");
          textGroup.attr("transform", "translate(" + layout.size()[0] / 2 + ", " + layout.size()[1] / 2 + ")");
          var allText = textGroup.selectAll("text").data(words2, function(d) {
            return d[groupMapsTo] + "-" + d.text;
          });
          allText.exit().attr("opacity", 0).remove();
          var enteringText = allText.enter().append("text").attr("opacity", 0);
          enteringText.merge(allText).style("font-size", function(d) {
            return d.size + "px";
          }).text(function(d) {
            return d.text;
          }).attr("class", function(d) {
            return self2.model.getColorClassName({
              classNameTypes: [ColorClassNameTypes.FILL],
              dataGroupName: d[groupMapsTo],
              originalClassName: "word " + (d.size > 32 ? "light" : "")
            });
          }).style("fill", function(d) {
            return self2.model.getFillColor(d[groupMapsTo], d.text, d);
          }).attr("text-anchor", "middle").transition().call(function(t) {
            return self2.services.transitions.setupTransition({
              transition: t,
              name: "wordcloud-text-update-enter",
              animate
            });
          }).attr("transform", function(d) {
            return "translate(" + d.x + ", " + d.y + ")";
          }).attr("opacity", 1);
        }
        this.addEventListeners();
      };
      WordCloud2.prototype.getFontSizeScale = function(data) {
        var options2 = this.getOptions();
        var fontSizeMapsTo = options2.wordCloud.fontSizeMapsTo;
        var allOccurences = data.map(function(d) {
          return d[fontSizeMapsTo];
        }).filter(function(size) {
          return size;
        });
        var chartSize = DOMUtils.getHTMLElementSize(this.services.domUtils.getMainContainer());
        var sizeDataIsValid = allOccurences.length > 0;
        var domain = sizeDataIsValid ? extent(allOccurences) : [1, 1];
        return linear3().domain(domain).range(sizeDataIsValid ? options2.wordCloud.fontSizeRange(chartSize, data) : [4, 4]);
      };
      WordCloud2.prototype.addEventListeners = function() {
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var self2 = this;
        var debouncedHighlight = Tools.debounce(function(word) {
          var allWords = self2.parent.selectAll("text.word").transition("wordcloud-word-mouse-highlight").call(function(t) {
            return self2.services.transitions.setupTransition({
              transition: t,
              name: "wordcloud-word-mouse-highlight"
            });
          });
          if (word === null) {
            allWords.attr("opacity", 1);
          } else {
            allWords.attr("opacity", function() {
              if (word === this) {
                return 1;
              }
              return 0.3;
            });
          }
        }, 6);
        this.parent.selectAll("text.word").on("mouseover", function(event, datum2) {
          var hoveredElement = this;
          debouncedHighlight(hoveredElement);
          self2.services.events.dispatchEvent(Events$1.WordCloud.WORD_MOUSEOVER, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                label: options2.tooltip.wordLabel,
                value: datum2.text
              },
              {
                label: options2.tooltip.valueLabel,
                value: datum2.value
              },
              {
                label: options2.tooltip.groupLabel,
                value: datum2[groupMapsTo],
                class: self2.model.getColorClassName({
                  classNameTypes: [ColorClassNameTypes.TOOLTIP],
                  dataGroupName: datum2[groupMapsTo]
                })
              }
            ]
          });
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.WordCloud.WORD_MOUSEMOVE, {
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.WordCloud.WORD_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          debouncedHighlight(null);
          self2.services.events.dispatchEvent(Events$1.WordCloud.WORD_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      return WordCloud2;
    }(Component);
    __extends$S = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Alluvial = function(_super) {
      __extends$S(Alluvial2, _super);
      function Alluvial2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "alluvial";
        _this.renderType = RenderTypes.SVG;
        _this.gradient_id = "gradient-id-" + Math.floor(Math.random() * 99999999999);
        return _this;
      }
      Alluvial2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer({ withinChartClip: true });
        svg.html("");
        var _a22 = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        if (width < 1 || height < 1) {
          return;
        }
        var options2 = this.model.getOptions();
        var data = this.model.getDisplayData();
        var isGradientAllowed = Tools.getProperty(this.getOptions(), "color", "gradient", "enabled");
        var nodePadding = alluvial.minNodePadding;
        if (options2.alluvial.nodePadding > alluvial.minNodePadding) {
          nodePadding = options2.alluvial.nodePadding;
        }
        var alignment = Tools.getProperty(options2, "alluvial", "nodeAlignment");
        var nodeAlignment = justify;
        if (alignment === Alignments.LEFT) {
          nodeAlignment = left2;
        } else if (alignment === Alignments.RIGHT) {
          nodeAlignment = right2;
        }
        var sankey$1 = Sankey().nodeId(function(d) {
          return d.name;
        }).nodeWidth(alluvial.nodeWidth).nodePadding(nodePadding).nodeAlign(nodeAlignment).extent([
          [2, 30],
          [width - 2, height]
        ]);
        this.graph = sankey$1({
          nodes: options2.alluvial.nodes.map(function(d) {
            return Object.assign({}, d);
          }),
          links: data.map(function(d) {
            return Object.assign({}, d);
          })
        });
        this.graph.nodes = this.graph.nodes.filter(function(node2) {
          return node2.value !== 0;
        });
        var nodeCoordinates = {};
        this.graph.nodes.forEach(function(element) {
          var _a3;
          var point6 = element.x0;
          if (element.category) {
            nodeCoordinates[point6] = (_a3 = element) === null || _a3 === void 0 ? void 0 : _a3.category;
          }
        });
        var alluvialCategory = svg.append("g").classed("header-arrows", true).selectAll("g").data(Object.keys(nodeCoordinates)).join("g").attr("transform", function(d) {
          return "translate(" + d + ", 0)";
        });
        alluvialCategory.append("text").attr("id", function(d, i) {
          return _this.services.domUtils.generateElementIDString("alluvial-category-" + i);
        }).style("font-size", "14px").text(function(d) {
          if (nodeCoordinates[d]) {
            return nodeCoordinates[d];
          }
          return "";
        }).attr("y", 20).attr("x", function(d, i) {
          var elementID = _this.services.domUtils.generateElementIDString("alluvial-category-" + i);
          var width2 = DOMUtils.getSVGElementSize(select_default2("text#" + elementID), { useBBox: true }).width;
          var x3 = 0;
          if (d + x3 >= width2) {
            x3 = -width2 + 4;
          }
          return x3;
        });
        var links = svg.append("g").attr("fill", "none").selectAll("g").data(this.graph.links);
        links.exit().remove();
        if (isGradientAllowed) {
          var scale_1 = Tools.getProperty(this.getOptions(), "color", "scale");
          if (scale_1) {
            links.enter().append("linearGradient").attr("id", function(d) {
              return _this.gradient_id + "-link-" + d.index;
            }).attr("gradientUnits", "userSpaceOnUse").call(function(gradient) {
              return gradient.append("stop").attr("offset", "0%").attr("stop-color", function(d) {
                return scale_1[d.source.name];
              });
            }).call(function(gradient) {
              return gradient.append("stop").attr("offset", "100%").attr("stop-color", function(d) {
                return scale_1[d.target.name];
              });
            });
          }
          links.exit().remove();
        }
        links.enter().append("path").classed("link", true).attr("d", sankeyLinkHorizontal_default()).attr("id", function(d) {
          return _this.services.domUtils.generateElementIDString("alluvial-line-" + d.index);
        }).attr("class", function(d) {
          if (options2.alluvial.monochrome) {
            return _this.model.getColorClassName({
              classNameTypes: [ColorClassNameTypes.STROKE],
              dataGroupName: 0,
              originalClassName: "link"
            });
          }
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.STROKE],
            dataGroupName: d.source.index,
            originalClassName: "link"
          });
        }).style("stroke", function(d) {
          if (isGradientAllowed) {
            return "url(#" + _this.gradient_id + "-link-" + d.index + ")";
          }
          return _this.model.getFillColor(d.source.name);
        }).attr("stroke-width", function(d) {
          return Math.max(1, d.width);
        }).style("stroke-opacity", alluvial.opacity.default).attr("aria-label", function(d) {
          return d.source.name + " \u2192 " + d.target.name + " (" + d.value + (options2.alluvial.units ? " " + options2.alluvial.units : "") + ")";
        });
        var node = svg.append("g").selectAll("g").data(this.graph.nodes).enter().append("g").attr("id", function(d) {
          return _this.services.domUtils.generateElementIDString("alluvial-node-" + d.index);
        }).classed("node-group", true).attr("transform", function(d) {
          return "translate(" + d.x0 + ", " + d.y0 + ")";
        });
        node.append("rect").classed("node", true).attr("height", function(d) {
          return d.y1 - d.y0;
        }).attr("width", function(d) {
          return d.x1 - d.x0;
        }).attr("fill", "black");
        var textNode = node.append("g").attr("id", function(d) {
          return _this.services.domUtils.generateElementIDString("alluvial-node-title-" + d.index);
        });
        textNode.append("text").attr("id", function(d) {
          return _this.services.domUtils.generateElementIDString("alluvial-node-text-" + d.index);
        }).attr("class", "node-text").style("font-size", "12px").attr("text-anchor", "start").attr("fill", "white").attr("x", 4).attr("dy", 13).text(function(d) {
          return d.name + " (" + d.value + ")";
        }).attr("aria-label", function(d) {
          return d.name + " (" + d.value + ")";
        });
        textNode.append("rect").classed("node-text-bg", true).attr("width", function(d, i) {
          var elementID = _this.services.domUtils.generateElementIDString("alluvial-node-text-" + i);
          var width2 = DOMUtils.getSVGElementSize(select_default2("text#" + elementID), { useBBox: true }).width;
          return width2 + 8;
        }).attr("height", 18).attr("stroke-width", 2).lower();
        textNode.attr("transform", function(d, i) {
          var elementID = _this.services.domUtils.generateElementIDString("alluvial-node-text-" + i);
          var width2 = DOMUtils.getSVGElementSize(select_default2("text#" + elementID), { useBBox: true }).width;
          var y3 = (d.y1 - d.y0) / 2 - 9;
          var x3 = d.x1 - d.x0;
          if (d.x1 >= width2) {
            x3 = x3 - (width2 + 16);
          } else {
            x3 += 4;
          }
          return "translate(" + x3 + ", " + y3 + ")";
        });
        this.addLineEventListener();
        this.addNodeEventListener();
      };
      Alluvial2.prototype.addLineEventListener = function() {
        var options2 = this.getOptions();
        var self2 = this;
        var debouncedLineHighlight = Tools.debounce(function(link3, event) {
          if (event === void 0) {
            event = "mouseover";
          }
          var allLinks = self2.parent.selectAll("path.link").transition().call(function(t) {
            return self2.services.transitions.setupTransition({
              transition: t,
              name: "alluvial-links-mouse-highlight"
            });
          });
          if (event === "mouseout") {
            select_default2(link3).lower();
            allLinks.style("stroke-opacity", alluvial.opacity.default);
          } else {
            allLinks.style("stroke-opacity", function() {
              if (link3 === this) {
                select_default2(this).raise();
                return alluvial.opacity.selected;
              }
              return alluvial.opacity.unfocus;
            });
          }
        }, 33);
        this.parent.selectAll("path.link").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          debouncedLineHighlight(this, "mouseover");
          hoveredElement.classed("link-hovered", true);
          var strokeColor = getComputedStyle(this).getPropertyValue("stroke");
          self2.services.events.dispatchEvent(Events$1.Alluvial.LINE_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event,
            hoveredElement,
            items: [
              {
                label: datum2.target.name,
                value: datum2.value + (options2.alluvial.units ? " " + options2.alluvial.units : ""),
                color: strokeColor,
                labelIcon: self2.getRightArrowIcon()
              }
            ]
          });
        }).on("mousemove", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Alluvial.LINE_MOUSEMOVE, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Alluvial.LINE_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          debouncedLineHighlight(this, "mouseout");
          hoveredElement.classed("link-hovered", false);
          self2.services.events.dispatchEvent(Events$1.Alluvial.LINE_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            event,
            hoveredElement
          });
        });
      };
      Alluvial2.prototype.addNodeEventListener = function() {
        var _this = this;
        var self2 = this;
        var debouncedLineHighlight = Tools.debounce(function(links, event) {
          if (links === void 0) {
            links = [];
          }
          if (event === void 0) {
            event = "mouseover";
          }
          if (event === "mouseout" || links.length === 0) {
            self2.parent.selectAll("path.link").classed("link-hovered", false).data(_this.graph.links, function(d) {
              return d.index;
            }).order().style("stroke-opacity", alluvial.opacity.default);
            return;
          }
          var allLinks = self2.parent.selectAll("path.link").transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "alluvial-link-mouse-highlight"
            });
          });
          allLinks.style("stroke-opacity", function(d) {
            if (links.some(function(element) {
              return element === d.index;
            })) {
              select_default2(this).classed("link-hovered", true).raise();
              return alluvial.opacity.selected;
            }
            return alluvial.opacity.unfocus;
          });
        }, 66);
        self2.parent.selectAll(".node-group").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          var paths = [];
          self2.traverse({ link: "sourceLinks", node: "target" }, datum2, paths);
          self2.traverse({ link: "targetLinks", node: "source" }, datum2, paths);
          if (paths.length) {
            var nodeMatrix = Tools.getTranformOffsets(hoveredElement.attr("transform"));
            hoveredElement.attr("transform", "translate(" + (nodeMatrix.x - 2) + ", " + nodeMatrix.y + ")");
            hoveredElement.classed("node-hovered", true).selectAll("rect.node").attr("width", 8);
            if (datum2.x0 - 2 === 0) {
              var elementID_1 = self2.services.domUtils.generateElementIDString("alluvial-node-title-" + datum2.index);
              var titleContainer = self2.parent.select("g#" + elementID_1);
              var titleMatrix = Tools.getTranformOffsets(titleContainer.attr("transform"));
              titleContainer.attr("transform", "translate(" + (titleMatrix.x + 4) + "," + titleMatrix.y + ")");
            }
            var elementID = self2.services.domUtils.generateElementIDString("alluvial-node-text-" + datum2.index);
            self2.parent.select("text#" + elementID).style("font-weight", "bold");
            debouncedLineHighlight(paths, "mouseover");
            self2.services.events.dispatchEvent(Events$1.Alluvial.NODE_MOUSEOVER, {
              event,
              element: hoveredElement,
              datum: datum2
            });
          }
        }).on("mousemove", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Alluvial.NODE_MOUSEMOVE, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Alluvial.NODE_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          var nodeMatrix = Tools.getTranformOffsets(hoveredElement.attr("transform"));
          hoveredElement.classed("node-hovered", false).attr("transform", "translate(" + (nodeMatrix.x + 2) + ", " + nodeMatrix.y + ")").select("rect.node").attr("width", alluvial.nodeWidth);
          if (datum2.x0 - 2 === 0) {
            var elementID_2 = self2.services.domUtils.generateElementIDString("alluvial-node-title-" + datum2.index);
            var titleContainer = self2.parent.select("g#" + elementID_2);
            var titleMatrix = Tools.getTranformOffsets(titleContainer.attr("transform"));
            titleContainer.attr("transform", "translate(" + (titleMatrix.x - 4) + "," + titleMatrix.y + ")");
          }
          var elementID = self2.services.domUtils.generateElementIDString("alluvial-node-text-" + datum2.index);
          self2.parent.select("text#" + elementID).style("font-weight", "normal");
          debouncedLineHighlight([], "mouseout");
          self2.services.events.dispatchEvent(Events$1.Alluvial.NODE_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            hoveredElement
          });
        });
      };
      Alluvial2.prototype.traverse = function(direction, node, visited) {
        var _this = this;
        if (visited === void 0) {
          visited = [];
        }
        var links = node[direction.link].map(function(element) {
          visited.push(element.index);
          return element[direction.node];
        });
        links.forEach(function(element) {
          return _this.traverse(direction, element, visited);
        });
      };
      Alluvial2.prototype.getRightArrowIcon = function() {
        return '\n		<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">\n			<polygon points="18 6 16.57 7.393 24.15 15 4 15 4 17 24.15 17 16.57 24.573 18 26 28 16 18 6"/>\n			<rect  data-name="&lt;Transparent Rectangle&gt;" style="fill: none;" width="32" height="32"/>\n		</svg>';
      };
      Alluvial2.prototype.destroy = function() {
        this.parent.selectAll("path.line,.node-group").on("mouseover", null).on("mousemove", null).on("click", null).on("mouseout", null);
      };
      return Alluvial2;
    }(Component);
    __extends$R = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Heatmap = function(_super) {
      __extends$R(Heatmap2, _super);
      function Heatmap2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "heatmap";
        _this.renderType = RenderTypes.SVG;
        _this.matrix = {};
        _this.xBandwidth = 0;
        _this.yBandwidth = 0;
        _this.translationUnits = {
          x: 0,
          y: 0
        };
        _this.handleAxisOnHover = function(event) {
          var detail = event.detail;
          var datum2 = detail.datum;
          var ranges = _this.model.getUniqueRanges();
          var domains = _this.model.getUniqueDomain();
          var domainLabel = _this.services.cartesianScales.getDomainLabel();
          var rangeLabel = _this.services.cartesianScales.getRangeLabel();
          var mainXScale = _this.services.cartesianScales.getMainXScale();
          var mainYScale = _this.services.cartesianScales.getMainYScale();
          var label = "", sum2 = null, minimum = null, maximum = null;
          if (_this.matrix[datum2] !== void 0) {
            label = domainLabel;
            ranges.forEach(function(element) {
              if (typeof _this.matrix[datum2][element].value === "number") {
                var value2 = _this.matrix[datum2][element].value;
                if (sum2 === null) {
                  sum2 = value2;
                  minimum = value2;
                  maximum = value2;
                  return;
                }
                sum2 += value2;
                minimum = value2 < minimum ? value2 : minimum;
                maximum = value2 > maximum ? value2 : maximum;
              }
            });
          } else {
            label = rangeLabel;
            domains.forEach(function(element) {
              if (typeof _this.matrix[element][datum2].value === "number") {
                var value2 = _this.matrix[element][datum2].value;
                if (sum2 === null) {
                  sum2 = value2;
                  minimum = value2;
                  maximum = value2;
                  return;
                }
                sum2 += value2;
                minimum = value2 < minimum ? value2 : minimum;
                maximum = value2 > maximum ? value2 : maximum;
              }
            });
          }
          if (mainXScale(datum2) !== void 0) {
            _this.parent.select("g.multi-cell.column-highlight").classed("highlighter-hidden", false).attr("transform", "translate(" + mainXScale(datum2) + ", " + min(mainYScale.range()) + ")");
          } else if (mainYScale(datum2) !== void 0) {
            _this.parent.select("g.multi-cell.row-highlight").classed("highlighter-hidden", false).attr("transform", "translate(" + min(mainXScale.range()) + "," + mainYScale(datum2) + ")");
          }
          _this.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            event: detail.event,
            hoveredElement: select_default2(event.detail.element),
            items: [
              {
                label,
                value: datum2,
                bold: true
              },
              {
                label: "Min",
                value: minimum !== null ? minimum : "-"
              },
              {
                label: "Max",
                value: maximum !== null ? maximum : "-"
              },
              {
                label: "Average",
                value: sum2 !== null ? sum2 / domains.length : "-"
              }
            ]
          });
        };
        _this.handleAxisMouseOut = function(event) {
          _this.parent.selectAll("g.multi-cell").classed("highlighter-hidden", true);
          _this.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
            event
          });
        };
        return _this;
      }
      Heatmap2.prototype.init = function() {
        var eventsFragment = this.services.events;
        eventsFragment.addEventListener(Events$1.Axis.LABEL_MOUSEOVER, this.handleAxisOnHover);
        eventsFragment.addEventListener(Events$1.Axis.LABEL_MOUSEOUT, this.handleAxisMouseOut);
        eventsFragment.addEventListener(Events$1.Axis.LABEL_FOCUS, this.handleAxisOnHover);
        eventsFragment.addEventListener(Events$1.Axis.LABEL_BLUR, this.handleAxisMouseOut);
      };
      Heatmap2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer({ withinChartClip: true });
        svg.lower();
        var cartesianScales = this.services.cartesianScales;
        this.matrix = this.model.getMatrix();
        svg.html("");
        if (Tools.getProperty(this.getOptions(), "data", "loading")) {
          return;
        }
        var mainXScale = cartesianScales.getMainXScale();
        var mainYScale = cartesianScales.getMainYScale();
        var domainIdentifier = cartesianScales.getDomainIdentifier();
        var rangeIdentifier = cartesianScales.getRangeIdentifier();
        var uniqueDomain = this.model.getUniqueDomain();
        var uniqueRange = this.model.getUniqueRanges();
        var matrixArray = this.model.getMatrixAsArray();
        var xRange = mainXScale.range();
        var yRange = mainYScale.range();
        this.xBandwidth = Math.abs((xRange[1] - xRange[0]) / uniqueDomain.length);
        this.yBandwidth = Math.abs((yRange[1] - yRange[0]) / uniqueRange.length);
        var patternID = this.services.domUtils.generateElementIDString("heatmap-pattern-stripes");
        svg.append("defs").append("pattern").attr("id", patternID).attr("width", 3).attr("height", 3).attr("patternUnits", "userSpaceOnUse").attr("patternTransform", "rotate(45)").append("rect").classed("pattern-fill", true).attr("width", 0.5).attr("height", 8);
        var rectangles = svg.selectAll().data(matrixArray).enter().append("g").attr("class", function(d) {
          return "heat-" + d.index;
        }).classed("cell", true).attr("transform", function(d) {
          return "translate(" + mainXScale(d[domainIdentifier]) + ", " + mainYScale(d[rangeIdentifier]) + ")";
        }).append("rect").attr("class", function(d) {
          return _this.model.getColorClassName({
            value: d.value,
            originalClassName: "heat-" + d.index
          });
        }).classed("heat", true).classed("null-state", function(d) {
          return d.index === -1 || d.value === null ? true : false;
        }).attr("width", this.xBandwidth).attr("height", this.yBandwidth).style("fill", function(d) {
          if (d.index === -1 || d.value === null) {
            return "url(#" + patternID + ")";
          }
          return _this.model.getFillColor(Number(d.value));
        }).attr("aria-label", function(d) {
          return d.value;
        });
        this.createOuterBox("g.cell-highlight", this.xBandwidth, this.yBandwidth);
        this.createOuterBox("g.multi-cell.column-highlight", this.xBandwidth, Math.abs(yRange[1] - yRange[0]));
        this.createOuterBox("g.multi-cell.row-highlight", Math.abs(xRange[1] - xRange[0]), this.yBandwidth);
        if (this.determineDividerStatus()) {
          rectangles.style("stroke-width", "1px");
          this.parent.select("g.cell-highlight").classed("cell-2", true);
        }
        this.addEventListener();
      };
      Heatmap2.prototype.createOuterBox = function(parentTag, xBandwidth, yBandwidth) {
        var highlight = DOMUtils.appendOrSelect(this.parent, parentTag).classed("shadows", true).classed("highlighter-hidden", true);
        DOMUtils.appendOrSelect(highlight, "line.top").attr("x1", -1).attr("x2", xBandwidth + 1);
        DOMUtils.appendOrSelect(highlight, "line.left").attr("x1", 0).attr("y1", -1).attr("x2", 0).attr("y2", yBandwidth + 1);
        DOMUtils.appendOrSelect(highlight, "line.down").attr("x1", -1).attr("x2", xBandwidth + 1).attr("y1", yBandwidth).attr("y2", yBandwidth);
        DOMUtils.appendOrSelect(highlight, "line.right").attr("x1", xBandwidth).attr("x2", xBandwidth).attr("y1", -1).attr("y2", yBandwidth + 1);
      };
      Heatmap2.prototype.determineDividerStatus = function() {
        var dividerStatus = Tools.getProperty(this.getOptions(), "heatmap", "divider", "state");
        if (dividerStatus !== DividerStatus.OFF) {
          if (dividerStatus === DividerStatus.AUTO && heatmap.minCellDividerDimension <= this.xBandwidth && heatmap.minCellDividerDimension <= this.yBandwidth || dividerStatus === DividerStatus.ON) {
            return true;
          }
        }
        return false;
      };
      Heatmap2.prototype.addEventListener = function() {
        var self2 = this;
        var cartesianScales = this.services.cartesianScales;
        var options2 = this.getOptions();
        var totalLabel = get_default(options2, "tooltip.totalLabel");
        var domainIdentifier = cartesianScales.getDomainIdentifier();
        var rangeIdentifier = cartesianScales.getRangeIdentifier();
        var domainLabel = cartesianScales.getDomainLabel();
        var rangeLabel = cartesianScales.getRangeLabel();
        this.parent.selectAll("g.cell").on("mouseover", function(event, datum2) {
          var cell = select_default2(this);
          var hoveredElement = cell.select("rect.heat");
          var nullState = hoveredElement.classed("null-state");
          if (!nullState) {
            var transform = Tools.getTranformOffsets(cell.attr("transform"));
            self2.parent.select("g.cell-highlight").attr("transform", "translate(" + (transform.x + self2.translationUnits.x) + ", " + (transform.y + self2.translationUnits.y) + ")").classed("highlighter-hidden", false);
            self2.services.events.dispatchEvent(Events$1.Heatmap.HEATMAP_MOUSEOVER, {
              event,
              element: hoveredElement,
              datum: datum2
            });
            self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              items: [
                {
                  label: domainLabel,
                  value: datum2[domainIdentifier]
                },
                {
                  label: rangeLabel,
                  value: datum2[rangeIdentifier]
                },
                {
                  label: totalLabel || "Total",
                  value: datum2["value"],
                  color: hoveredElement.style("fill")
                }
              ]
            });
          }
        }).on("mousemove", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Heatmap.HEATMAP_MOUSEMOVE, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Heatmap.HEATMAP_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var cell = select_default2(this);
          var hoveredElement = cell.select("rect.heat");
          var nullState = hoveredElement.classed("null-state");
          self2.parent.select("g.cell-highlight").classed("highlighter-hidden", true);
          if (!nullState) {
            self2.services.events.dispatchEvent(Events$1.Heatmap.HEATMAP_MOUSEOUT, {
              event,
              element: hoveredElement,
              datum: datum2
            });
            self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
              event,
              hoveredElement
            });
          }
        });
      };
      Heatmap2.prototype.destroy = function() {
        this.parent.selectAll("rect.heat").on("mouseover", null).on("mousemove", null).on("click", null).on("mouseout", null);
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_HOVER, this.handleAxisOnHover);
        eventsFragment.removeEventListener(Events$1.Legend.ITEM_MOUSEOUT, this.handleAxisMouseOut);
      };
      return Heatmap2;
    }(Component);
    __extends$Q = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Spacer = function(_super) {
      __extends$Q(Spacer2, _super);
      function Spacer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "spacer";
        return _this;
      }
      Spacer2.prototype.render = function() {
        this.getComponentContainer().style("width", (this.configs.size || spacers.default.size) + "px").style("height", (this.configs.size || spacers.default.size) + "px").attr("opacity", 0);
      };
      return Spacer2;
    }(Component);
    __extends$P = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    LayoutComponent = function(_super) {
      __extends$P(LayoutComponent2, _super);
      function LayoutComponent2(model, services, children2, configs) {
        var _this = _super.call(this, model, services, configs) || this;
        _this.type = "layout";
        _this.configs = configs;
        _this.children = children2;
        _this._instanceID = LayoutComponent2.instanceID++;
        _this.init();
        return _this;
      }
      LayoutComponent2.prototype.init = function() {
        this.children.forEach(function(child) {
          child.components.forEach(function(component4) {
            component4.init();
          });
        });
      };
      LayoutComponent2.prototype.getPreferedAndFixedSizeSum = function() {
        var svg = this.parent;
        var sum2 = 0;
        svg.selectAll("div.layout-child-" + this._instanceID).filter(function(d) {
          var growth = Tools.getProperty(d, "growth");
          return growth === LayoutGrowth.PREFERRED || growth === LayoutGrowth.FIXED;
        }).each(function(d) {
          sum2 += d.size;
        });
        return sum2;
      };
      LayoutComponent2.prototype.getNumOfStretchChildren = function() {
        var svg = this.parent;
        return svg.selectAll("div.layout-child-" + this._instanceID).filter(function(d) {
          return Tools.getProperty(d, "growth") === LayoutGrowth.STRETCH;
        }).size();
      };
      LayoutComponent2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var parent = this.parent;
        var _a22 = DOMUtils.getHTMLElementSize(parent.node()), width = _a22.width, height = _a22.height;
        var horizontal = this.configs.direction === LayoutDirection.ROW || this.configs.direction === LayoutDirection.ROW_REVERSE;
        var chartprefix = Tools.getProperty(this.model.getOptions(), "style", "prefix");
        var updatedBoxes = parent.classed(carbonPrefix + "--" + chartprefix + "--layout-row", this.configs.direction === LayoutDirection.ROW).classed(carbonPrefix + "--" + chartprefix + "--layout-row-reverse", this.configs.direction === LayoutDirection.ROW_REVERSE).classed(carbonPrefix + "--" + chartprefix + "--layout-column", this.configs.direction === LayoutDirection.COLUMN).classed(carbonPrefix + "--" + chartprefix + "--layout-column-reverse", this.configs.direction === LayoutDirection.COLUMN_REVERSE).classed(carbonPrefix + "--" + chartprefix + "--layout-alignitems-center", this.configs.alignItems === LayoutAlignItems.CENTER).selectAll("div.layout-child-" + this._instanceID).data(this.children, function(d) {
          return d.id;
        });
        var enteringBoxes = updatedBoxes.enter().append("div");
        enteringBoxes.merge(parent.selectAll("div.layout-child-" + this._instanceID)).attr("class", function(d) {
          return "layout-child layout-child-" + _this._instanceID + " " + d.id;
        }).each(function(d) {
          var _this2 = this;
          d.components.forEach(function(itemComponent) {
            var selection2 = select_default2(_this2);
            var renderType = Tools.getProperty(d, "renderType");
            var isRenderingSVG = renderType === RenderTypes.SVG;
            itemComponent.setParent(isRenderingSVG ? DOMUtils.appendOrSelect(selection2, "svg.layout-svg-wrapper").attr("width", "100%").attr("height", "100%") : selection2);
            var growth = Tools.getProperty(d, "growth");
            if (growth === LayoutGrowth.PREFERRED || growth === LayoutGrowth.FIXED) {
              itemComponent.render(animate);
            }
          });
        });
        parent.selectAll("div.layout-child-" + this._instanceID).style("height", null).style("width", null).each(function(d) {
          var growth = Tools.getProperty(d, "growth");
          var renderType = Tools.getProperty(d, "renderType");
          var matchingElementDimensions = renderType === RenderTypes.SVG ? DOMUtils.getSVGElementSize(select_default2(this).select("svg.layout-svg-wrapper"), {
            useBBox: true
          }) : DOMUtils.getHTMLElementSize(this);
          if (growth === LayoutGrowth.PREFERRED) {
            var matchingElementWidth = horizontal ? matchingElementDimensions.width : matchingElementDimensions.height;
            var elementWidth = horizontal ? width : height;
            d.size = matchingElementWidth / elementWidth * 100;
          }
        });
        updatedBoxes.exit().remove();
        this.children.filter(function(child) {
          var growth = Tools.getProperty(child, "growth");
          return growth === LayoutGrowth.STRETCH;
        }).forEach(function(child, i) {
          child.size = (100 - +_this.getPreferedAndFixedSizeSum()) / +_this.getNumOfStretchChildren();
        });
        var allUpdatedBoxes = parent.selectAll("div.layout-child-" + this._instanceID).data(this.children, function(d) {
          return d.id;
        });
        if (horizontal) {
          allUpdatedBoxes.style("width", function(d) {
            return d.size / 100 * width + "px";
          }).style("height", "100%");
        } else {
          allUpdatedBoxes.style("height", function(d) {
            return d.size / 100 * height + "px";
          }).style("width", "100%");
        }
        allUpdatedBoxes.each(function(d, i) {
          d.components.forEach(function(itemComponent) {
            var growth = Tools.getProperty(d, "growth");
            if (growth === LayoutGrowth.STRETCH) {
              itemComponent.render(animate);
            }
          });
        });
      };
      LayoutComponent2.prototype.setModel = function(newObj) {
        _super.prototype.setModel.call(this, newObj);
        this.children.forEach(function(child) {
          child.components.forEach(function(component4) {
            return component4.setModel(newObj);
          });
        });
      };
      LayoutComponent2.prototype.setServices = function(newObj) {
        _super.prototype.setServices.call(this, newObj);
        this.children.forEach(function(child) {
          child.components.forEach(function(component4) {
            return component4.setServices(newObj);
          });
        });
      };
      LayoutComponent2.prototype.destroy = function() {
        this.children.forEach(function(child) {
          child.components.forEach(function(component4) {
            return component4.destroy();
          });
        });
      };
      LayoutComponent2.instanceID = Math.floor(Math.random() * 99999999999);
      return LayoutComponent2;
    }(Component);
    __extends$O = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Axis = function(_super) {
      __extends$O(Axis2, _super);
      function Axis2(model, services, configs) {
        var _a22;
        var _this = _super.call(this, model, services, configs) || this;
        _this.type = "axes";
        _this.renderType = RenderTypes.SVG;
        _this.truncation = (_a22 = {}, _a22[AxisPositions.LEFT] = false, _a22[AxisPositions.RIGHT] = false, _a22[AxisPositions.TOP] = false, _a22[AxisPositions.BOTTOM] = false, _a22);
        if (configs) {
          _this.configs = configs;
        }
        _this.margins = _this.configs.margins;
        return _this;
      }
      Axis2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var axisPosition = this.configs.position;
        var options2 = this.getOptions();
        var isAxisVisible = Tools.getProperty(options2, "axes", axisPosition, "visible");
        var svg = this.getComponentContainer();
        var _a22 = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var container = DOMUtils.appendOrSelect(svg, "g.axis." + axisPosition);
        var startPosition, endPosition;
        if (axisPosition === AxisPositions.BOTTOM || axisPosition === AxisPositions.TOP) {
          startPosition = this.configs.axes[AxisPositions.LEFT] ? this.margins.left : 0;
          endPosition = this.configs.axes[AxisPositions.RIGHT] ? width - this.margins.right : width;
        } else {
          startPosition = height - this.margins.bottom;
          endPosition = this.margins.top;
        }
        var scale = this.services.cartesianScales.getScaleByPosition(axisPosition);
        if (this.scaleType === ScaleTypes.LABELS || this.scaleType === ScaleTypes.LABELS_RATIO) {
          scale.rangeRound([startPosition, endPosition]);
        } else {
          scale.range([startPosition, endPosition]);
        }
        var axisFunction;
        switch (axisPosition) {
          case AxisPositions.LEFT:
            axisFunction = axisLeft;
            break;
          case AxisPositions.BOTTOM:
            axisFunction = axisBottom;
            break;
          case AxisPositions.RIGHT:
            axisFunction = axisRight;
            break;
          case AxisPositions.TOP:
            axisFunction = axisTop;
            break;
        }
        container.attr("aria-label", axisPosition + " axis");
        var axisRefExists = !container.select("g.ticks").empty();
        var axisRef = DOMUtils.appendOrSelect(container, "g.ticks");
        if (!axisRefExists) {
          axisRef.attr("role", Roles.GRAPHICS_OBJECT + " " + Roles.GROUP);
          axisRef.attr("aria-label", axisPosition + " ticks");
        }
        var invisibleAxisRef = DOMUtils.appendOrSelect(container, "g.ticks.invisible").style("opacity", "0").style("pointer-events", "none").attr("aria-hidden", true).attr("aria-label", "invisible " + axisPosition + " ticks");
        var axisOptions = Tools.getProperty(options2, "axes", axisPosition);
        var isTimeScaleType = this.scaleType === ScaleTypes.TIME || axisOptions.scaleType === ScaleTypes.TIME;
        var isVerticalAxis = axisPosition === AxisPositions.LEFT || axisPosition === AxisPositions.RIGHT;
        var zoomDomain = this.model.get("zoomDomain");
        if (zoomDomain && isTimeScaleType && !isVerticalAxis) {
          scale.domain(zoomDomain);
        }
        if (!isAxisVisible) {
          axisRef.attr("aria-hidden", true);
          return;
        }
        var axisScaleType = Tools.getProperty(axisOptions, "scaleType");
        var isDataLoading = Tools.getProperty(options2, "data", "loading");
        var numberOfTicksProvided = Tools.getProperty(axisOptions, "ticks", "number");
        var userProvidedTickValues = Tools.getProperty(axisOptions, "ticks", "values");
        var truncationType = Tools.getProperty(axisOptions, "truncation", "type");
        var truncationThreshold = Tools.getProperty(axisOptions, "truncation", "threshold");
        var truncationNumCharacter = Tools.getProperty(axisOptions, "truncation", "numCharacter");
        var isNumberOfTicksProvided = numberOfTicksProvided !== null;
        var timeScaleOptions = Tools.getProperty(options2, "timeScale");
        var fakeTick = DOMUtils.appendOrSelect(invisibleAxisRef, "g.tick");
        var fakeTickText = DOMUtils.appendOrSelect(fakeTick, "text").text("0");
        var tickHeight = DOMUtils.getSVGElementSize(fakeTickText.node(), {
          useBBox: true
        }).height;
        fakeTick.remove();
        var scaleType = this.scaleType || axisOptions.scaleType || ScaleTypes.LINEAR;
        var axis$1 = axisFunction(scale).tickSizeOuter(0);
        if (scale.ticks) {
          var numberOfTicks = void 0;
          if (isNumberOfTicksProvided) {
            numberOfTicks = numberOfTicksProvided;
          } else {
            numberOfTicks = axis2.ticks.number;
            if (isVerticalAxis) {
              numberOfTicks = this.getNumberOfFittingTicks(height, tickHeight, axis2.ticks.verticalSpaceRatio);
            }
          }
          if (scale.ticks().length === 1 && scale.ticks()[0] === 0) {
            numberOfTicks = 0;
          }
          axis$1.ticks(numberOfTicks);
          if (isTimeScaleType) {
            if (!scale.ticks(numberOfTicks).length) {
              axis$1.tickValues([]);
            } else {
              var addSpaceOnEdges = Tools.getProperty(options2, "timeScale", "addSpaceOnEdges");
              var customDomain = Tools.getProperty(options2, "axes", axisPosition, "domain");
              var tickValues = void 0;
              var tempScale = scale.copy();
              if (addSpaceOnEdges && !customDomain) {
                tempScale.nice(numberOfTicks);
              }
              tickValues = tempScale.ticks(numberOfTicks);
              if (addSpaceOnEdges && tickValues.length > 2 && !customDomain) {
                tickValues.splice(tickValues.length - 1, 1);
                tickValues.splice(0, 1);
              }
              axis$1.tickValues(tickValues);
            }
          }
        }
        var formatter;
        var userProvidedFormatter = Tools.getProperty(axisOptions, "ticks", "formatter");
        if (isTimeScaleType) {
          var timeInterval_1 = computeTimeIntervalName(axis$1.tickValues());
          if (userProvidedFormatter === null) {
            formatter = function(t, i) {
              return formatTick(t, i, axis$1.tickValues(), timeInterval_1, timeScaleOptions);
            };
          } else {
            formatter = function(t, i) {
              var defaultFormattedValue = formatTick(t, i, axis$1.tickValues(), timeInterval_1, timeScaleOptions);
              return userProvidedFormatter(t, i, defaultFormattedValue);
            };
          }
        } else {
          if (userProvidedFormatter === null) {
            if (scaleType === ScaleTypes.LINEAR) {
              formatter = function(t) {
                return t.toLocaleString();
              };
            }
          } else {
            formatter = userProvidedFormatter;
          }
        }
        axis$1.tickFormat(formatter);
        var _b = this.services.cartesianScales.getScaleByPosition(axisPosition).domain(), lowerBound = _b[0], upperBound = _b[1];
        var validTicks;
        if (userProvidedTickValues) {
          if (isTimeScaleType) {
            userProvidedTickValues.forEach(function(userProvidedTickValue, i) {
              if (userProvidedTickValue.getTime === void 0) {
                userProvidedTickValues[i] = new Date(userProvidedTickValue);
              }
            });
            validTicks = userProvidedTickValues.filter(function(tick) {
              var tickTimestamp = tick.getTime();
              return tickTimestamp >= new Date(lowerBound).getTime() && tickTimestamp <= new Date(upperBound).getTime();
            });
          } else if (axisScaleType === ScaleTypes.LABELS) {
            var discreteDomain_1 = this.services.cartesianScales.getScaleByPosition(axisPosition).domain();
            validTicks = userProvidedTickValues.filter(function(tick) {
              return discreteDomain_1.includes(tick);
            });
          } else {
            validTicks = userProvidedTickValues.filter(function(tick) {
              return tick >= lowerBound && tick <= upperBound;
            });
          }
          axis$1.tickValues(validTicks);
        }
        switch (axisPosition) {
          case AxisPositions.LEFT:
            axisRef.attr("transform", "translate(" + this.margins.left + ", 0)");
            break;
          case AxisPositions.BOTTOM:
            axisRef.attr("transform", "translate(0, " + (height - this.margins.bottom) + ")");
            break;
          case AxisPositions.RIGHT:
            axisRef.attr("transform", "translate(" + (width - this.margins.right) + ", 0)");
            break;
          case AxisPositions.TOP:
            axisRef.attr("transform", "translate(0, " + this.margins.top + ")");
            break;
        }
        var isDataEmpty = this.model.isDataEmpty();
        if (axisOptions.title) {
          var axisTitleRef = DOMUtils.appendOrSelect(container, "text.axis-title").html(isDataEmpty || isDataLoading ? "" : axisOptions.title);
          var titleOrientation = Tools.getProperty(axisOptions, "titleOrientation");
          switch (axisPosition) {
            case AxisPositions.LEFT:
              if (titleOrientation === AxisTitleOrientations.RIGHT) {
                axisTitleRef.attr("transform", "rotate(90)").attr("y", 0).attr("x", scale.range()[0] / 2).attr("dy", "-0.5em").style("text-anchor", "middle");
              } else {
                axisTitleRef.attr("transform", "rotate(-90)").attr("y", 0).attr("x", -(scale.range()[0] / 2)).attr("dy", "0.75em").style("text-anchor", "middle");
              }
              break;
            case AxisPositions.BOTTOM:
              axisTitleRef.attr("transform", "translate(" + (this.margins.left / 2 + scale.range()[1] / 2) + ", " + (height + 4) + ")").style("text-anchor", "middle");
              break;
            case AxisPositions.RIGHT:
              if (titleOrientation === AxisTitleOrientations.LEFT) {
                axisTitleRef.attr("transform", "rotate(-90)").attr("y", width).attr("x", -(scale.range()[0] / 2)).style("text-anchor", "middle");
              } else {
                axisTitleRef.attr("transform", "rotate(90)").attr("y", -width).attr("x", scale.range()[0] / 2).attr("dy", "0.75em").style("text-anchor", "middle");
              }
              break;
            case AxisPositions.TOP:
              var titleHeight = DOMUtils.getSVGElementSize(axisTitleRef, {
                useBBox: true
              }).height;
              axisTitleRef.attr("transform", "translate(" + (this.margins.left / 2 + scale.range()[1] / 2) + ", " + titleHeight / 2 + ")").style("text-anchor", "middle");
              break;
          }
        }
        if (isTimeScaleType) {
          var timeInterval_2 = computeTimeIntervalName(axis$1.tickValues());
          var showDayName_1 = timeScaleOptions.showDayName;
          var axisRefSelection = axisRef;
          if (animate) {
            axisRef = axisRef.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "axis-update",
                animate
              });
            });
          }
          axisRef = axisRef.call(axis$1);
          var ticks2 = axisRefSelection.selectAll(".tick").data(axis$1.tickValues(), scale).order().select("text");
          ticks2.style("font-weight", function(tick, i) {
            return isTickPrimary(tick, i, axis$1.tickValues(), timeInterval_2, showDayName_1) ? "bold" : "normal";
          });
        } else {
          if (!animate || !axisRefExists) {
            axisRef = axisRef.call(axis$1);
          } else {
            axisRef = axisRef.transition().call(function(t) {
              return _this.services.transitions.setupTransition({
                transition: t,
                name: "axis-update",
                animate
              });
            }).call(axis$1);
          }
        }
        invisibleAxisRef.call(axis$1);
        if (axisPosition === AxisPositions.BOTTOM || axisPosition === AxisPositions.TOP) {
          var shouldRotateTicks_1 = false;
          var tickRotation = Tools.getProperty(axisOptions, "ticks", "rotation");
          if (tickRotation === TickRotations.ALWAYS) {
            shouldRotateTicks_1 = true;
          } else if (tickRotation === TickRotations.NEVER) {
            shouldRotateTicks_1 = false;
          } else if (!tickRotation || tickRotation === TickRotations.AUTO) {
            if (scale.step) {
              var textNodes = invisibleAxisRef.selectAll("g.tick text").nodes();
              shouldRotateTicks_1 = textNodes.some(function(textNode) {
                return DOMUtils.getSVGElementSize(textNode, {
                  useBBox: true
                }).width >= scale.step();
              });
            } else {
              shouldRotateTicks_1 = false;
              var mockTextPiece = invisibleAxisRef.append("text").text("A");
              var averageLetterWidth_1 = DOMUtils.getSVGElementSize(mockTextPiece.node(), {
                useBBox: true
              }).width;
              var lastStartPosition_1;
              invisibleAxisRef.selectAll("g.tick").each(function() {
                var selection2 = select_default2(this);
                var xTransformation = parseFloat(Tools.getProperty(Tools.getTranslationValues(this), "tx"));
                if (xTransformation !== null && lastStartPosition_1 + selection2.text().length * averageLetterWidth_1 * 0.8 >= xTransformation) {
                  shouldRotateTicks_1 = true;
                }
                lastStartPosition_1 = xTransformation;
              });
              mockTextPiece.remove();
            }
          }
          if (shouldRotateTicks_1) {
            if (!isNumberOfTicksProvided) {
              axis$1.ticks(this.getNumberOfFittingTicks(width, tickHeight, axis2.ticks.horizontalSpaceRatio));
              invisibleAxisRef.call(axis$1);
              axisRef.call(axis$1);
            }
            container.selectAll("g.ticks g.tick text").attr("transform", "rotate(-45)").style("text-anchor", axisPosition === AxisPositions.TOP ? "start" : "end");
          } else {
            container.selectAll("g.ticks g.tick text").attr("transform", null).style("text-anchor", null);
          }
        }
        if (isDataLoading) {
          container.attr("opacity", 0);
        } else {
          container.attr("opacity", 1);
        }
        axisRef.selectAll("g.tick").attr("aria-label", function(d) {
          return d;
        });
        invisibleAxisRef.selectAll("g.tick").attr("aria-label", function(d) {
          return d;
        });
        if (truncationType !== TruncationTypes.NONE && axisScaleType === ScaleTypes.LABELS && !userProvidedTickValues) {
          var axisTickLabels = this.services.cartesianScales.getScaleDomain(axisPosition);
          if (axisTickLabels.length > 0) {
            var tick_html = svg.select("g.axis." + axisPosition + " g.ticks g.tick").html();
            container.selectAll("g.ticks g.tick").html(tick_html);
            var self_1 = this;
            container.selectAll("g.tick text").data(axisTickLabels).text(function(d) {
              if (d.length > truncationThreshold) {
                self_1.truncation[axisPosition] = true;
                return Tools.truncateLabel(d, truncationType, truncationNumCharacter);
              } else {
                return d;
              }
            });
            this.getInvisibleAxisRef().selectAll("g.tick text").data(axisTickLabels).text(function(d) {
              if (d.length > truncationThreshold) {
                return Tools.truncateLabel(d, truncationType, truncationNumCharacter);
              } else {
                return d;
              }
            });
            container.selectAll("g.ticks").html(this.getInvisibleAxisRef().html());
            container.selectAll("g.tick text").data(axisTickLabels);
          }
        }
        this.addEventListeners();
      };
      Axis2.prototype.addEventListeners = function() {
        var svg = this.getComponentContainer();
        var axisPosition = this.configs.position;
        var container = DOMUtils.appendOrSelect(svg, "g.axis." + axisPosition);
        var options2 = this.getOptions();
        var axisOptions = Tools.getProperty(options2, "axes", axisPosition);
        var axisScaleType = Tools.getProperty(axisOptions, "scaleType");
        var truncationThreshold = Tools.getProperty(axisOptions, "truncation", "threshold");
        var self2 = this;
        container.selectAll("g.tick text").on("mouseover", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_MOUSEOVER, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          if (axisScaleType === ScaleTypes.LABELS && datum2.length > truncationThreshold) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              hoveredElement: select_default2(this),
              content: datum2
            });
          }
        }).on("mousemove", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_MOUSEMOVE, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          if (axisScaleType === ScaleTypes.LABELS && datum2.length > truncationThreshold) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
              event
            });
          }
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_MOUSEOUT, {
            event,
            element: select_default2(this),
            datum: datum2
          });
          if (axisScaleType === ScaleTypes.LABELS) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
          }
        });
      };
      Axis2.prototype.getInvisibleAxisRef = function() {
        var axisPosition = this.configs.position;
        return this.getComponentContainer().select("g.axis." + axisPosition + " g.ticks.invisible");
      };
      Axis2.prototype.getTitleRef = function() {
        var axisPosition = this.configs.position;
        return this.getComponentContainer().select("g.axis." + axisPosition + " text.axis-title");
      };
      Axis2.prototype.getNumberOfFittingTicks = function(size, tickSize, spaceRatio) {
        var numberOfTicksFit = Math.floor(size / (tickSize * spaceRatio));
        return Tools.clamp(numberOfTicksFit, 2, axis2.ticks.number);
      };
      Axis2.prototype.destroy = function() {
        var svg = this.getComponentContainer();
        var axisPosition = this.configs.position;
        var container = DOMUtils.appendOrSelect(svg, "g.axis." + axisPosition);
        container.selectAll("g.tick text").on("mouseover", null).on("mousemove", null).on("mouseout", null);
      };
      return Axis2;
    }(Component);
    __extends$N = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$2 = globalThis && globalThis.__assign || function() {
      __assign$2 = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      return __assign$2.apply(this, arguments);
    };
    HoverAxis = function(_super) {
      __extends$N(HoverAxis2, _super);
      function HoverAxis2(model, services, configs) {
        return _super.call(this, model, services, configs) || this;
      }
      HoverAxis2.prototype.render = function(animate) {
        if (animate === void 0) {
          animate = true;
        }
        _super.prototype.render.call(this, animate);
        _super.prototype.destroy.call(this);
        var axisPosition = this.configs.position;
        var svg = this.getComponentContainer();
        var container = DOMUtils.appendOrSelect(svg, "g.axis." + axisPosition);
        var self2 = this;
        container.selectAll("g.tick").each(function(_, index5) {
          var g = select_default2(this);
          g.classed("tick-hover", true).attr("tabindex", index5 === 0 ? 0 : -1);
          var textNode = g.select("text");
          var _a22 = DOMUtils.getSVGElementSize(textNode, {
            useBBox: true
          }), width = _a22.width, height = _a22.height;
          var rectangle = DOMUtils.appendOrSelect(g, "rect.axis-holder");
          var x3 = 0, y3 = 0;
          switch (axisPosition) {
            case AxisPositions.LEFT:
              x3 = -width + Number(textNode.attr("x"));
              y3 = -(height / 2);
              break;
            case AxisPositions.RIGHT:
              x3 = Math.abs(Number(textNode.attr("x")));
              y3 = -(height / 2);
              break;
            case AxisPositions.TOP:
              x3 = -(width / 2);
              y3 = -height + Number(textNode.attr("y")) / 2;
              if (self2.truncation[axisPosition]) {
                x3 = 0;
                rectangle.attr("transform", "rotate(-45)");
              }
              break;
            case AxisPositions.BOTTOM:
              x3 = -(width / 2);
              y3 = height / 2 - 2;
              if (self2.truncation[axisPosition]) {
                x3 = -width;
                rectangle.attr("transform", "rotate(-45)");
              }
              break;
          }
          rectangle.attr("x", x3 - axis2.hover.rectanglePadding).attr("y", y3).attr("width", width + axis2.hover.rectanglePadding * 2).attr("height", height).lower();
        });
        this.addEventListeners();
      };
      HoverAxis2.prototype.addEventListeners = function() {
        var svg = this.getComponentContainer();
        var axisPosition = this.configs.position;
        var container = DOMUtils.appendOrSelect(svg, "g.axis." + axisPosition);
        var options2 = this.getOptions();
        var axisOptions = Tools.getProperty(options2, "axes", axisPosition);
        var axisScaleType = Tools.getProperty(axisOptions, "scaleType");
        var truncationThreshold = Tools.getProperty(axisOptions, "truncation", "threshold");
        var self2 = this;
        container.selectAll("g.tick.tick-hover").on("mouseover", function(event) {
          var hoveredElement = select_default2(this).select("text");
          var datum2 = hoveredElement.datum();
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          if (axisScaleType === ScaleTypes.LABELS && datum2.length > truncationThreshold) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              element: hoveredElement,
              datum: datum2
            });
          }
        }).on("mousemove", function(event) {
          var hoveredElement = select_default2(this).select("text");
          var datum2 = hoveredElement.datum();
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            event
          });
        }).on("click", function(event) {
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_CLICK, {
            event,
            element: select_default2(this).select("text"),
            datum: select_default2(this).select("text").datum()
          });
        }).on("mouseout", function(event) {
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_MOUSEOUT, {
            event,
            element: select_default2(this).select("text"),
            datum: select_default2(this).select("text").datum()
          });
          if (axisScaleType === ScaleTypes.LABELS) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
          }
        }).on("focus", function(event) {
          var coordinates = { clientX: 0, clientY: 0 };
          if (event.target) {
            event.target.focus();
            var boundingRect = event.target.getBoundingClientRect();
            coordinates.clientX = boundingRect.x;
            coordinates.clientY = boundingRect.y;
          }
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_FOCUS, {
            event: __assign$2(__assign$2({}, event), coordinates),
            element: select_default2(this),
            datum: select_default2(this).select("text").datum()
          });
        }).on("blur", function(event) {
          self2.services.events.dispatchEvent(Events$1.Axis.LABEL_BLUR, {
            event,
            element: select_default2(this),
            datum: select_default2(this).select("text").datum()
          });
        }).on("keydown", function(event) {
          if (event.key && event.key === "Escape") {
            self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
            self2.services.events.dispatchEvent(Events$1.Axis.LABEL_BLUR, {
              event,
              element: select_default2(this),
              datum: select_default2(this).select("text").datum()
            });
          }
          if (axisPosition === AxisPositions.LEFT || axisPosition === AxisPositions.RIGHT) {
            if (event.key && event.key === "ArrowUp") {
              self2.goNext(this, event);
            } else if (event.key && event.key === "ArrowDown") {
              self2.goPrevious(this, event);
            }
          } else {
            if (event.key && event.key === "ArrowLeft") {
              self2.goPrevious(this, event);
            } else if (event.key && event.key === "ArrowRight") {
              self2.goNext(this, event);
            }
          }
        });
      };
      HoverAxis2.prototype.goNext = function(element, event) {
        if (element.nextElementSibling && element.nextElementSibling.tagName !== "path") {
          element.nextElementSibling.dispatchEvent(new Event("focus"));
        }
        event.preventDefault();
      };
      HoverAxis2.prototype.goPrevious = function(element, event) {
        if (element.previousElementSibling && element.previousElementSibling.tagName !== "path") {
          element.previousElementSibling.dispatchEvent(new Event("focus"));
        }
        event.preventDefault();
      };
      HoverAxis2.prototype.destroy = function() {
        var svg = this.getComponentContainer();
        var axisPosition = this.configs.position;
        var container = DOMUtils.appendOrSelect(svg, "g.axis." + axisPosition);
        container.selectAll("g.tick.tick-hover").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("focus", null).on("blur", null);
      };
      return HoverAxis2;
    }(Axis);
    __extends$M = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TwoDimensionalAxes = function(_super) {
      __extends$M(TwoDimensionalAxes2, _super);
      function TwoDimensionalAxes2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "2D-axes";
        _this.renderType = RenderTypes.SVG;
        _this.children = {};
        _this.thresholds = [];
        _this.margins = {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        };
        return _this;
      }
      TwoDimensionalAxes2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = false;
        }
        var axes2 = {};
        var axisPositions = Object.keys(AxisPositions);
        var axesOptions = Tools.getProperty(this.getOptions(), "axes");
        axisPositions.forEach(function(axisPosition) {
          var axisOptions = axesOptions[AxisPositions[axisPosition]];
          if (axisOptions) {
            axes2[AxisPositions[axisPosition]] = true;
          }
        });
        this.configs.axes = axes2;
        axisPositions.forEach(function(axisPositionKey) {
          var axisPosition = AxisPositions[axisPositionKey];
          if (_this.configs.axes[axisPosition] && !_this.children[axisPosition]) {
            var configs = {
              position: axisPosition,
              axes: _this.configs.axes,
              margins: _this.margins
            };
            var axisComponent = _this.model.axisFlavor === AxisFlavor.DEFAULT ? new Axis(_this.model, _this.services, configs) : new HoverAxis(_this.model, _this.services, configs);
            axisComponent.setModel(_this.model);
            axisComponent.setServices(_this.services);
            axisComponent.setParent(_this.parent);
            _this.children[axisPosition] = axisComponent;
          }
        });
        Object.keys(this.children).forEach(function(childKey) {
          var child = _this.children[childKey];
          child.render(animate);
        });
        var margins = {};
        Object.keys(this.children).forEach(function(childKey) {
          var child = _this.children[childKey];
          var axisPosition = child.configs.position;
          var invisibleAxisRef = child.getInvisibleAxisRef();
          var _a22 = DOMUtils.getSVGElementSize(invisibleAxisRef, { useBBox: true }), width = _a22.width, height = _a22.height;
          var offset;
          if (child.getTitleRef().empty()) {
            offset = 0;
          } else {
            offset = DOMUtils.getSVGElementSize(child.getTitleRef(), {
              useBBox: true
            }).height;
            if (axisPosition === AxisPositions.LEFT || axisPosition === AxisPositions.RIGHT) {
              offset += 5;
            }
          }
          switch (axisPosition) {
            case AxisPositions.TOP:
              margins.top = height + offset;
              break;
            case AxisPositions.BOTTOM:
              margins.bottom = height + offset;
              break;
            case AxisPositions.LEFT:
              margins.left = width + offset;
              break;
            case AxisPositions.RIGHT:
              margins.right = width + offset;
              break;
          }
        });
        this.services.events.dispatchEvent(Events$1.Axis.RENDER_COMPLETE);
        var isNotEqual = Object.keys(margins).some(function(marginKey) {
          return _this.margins[marginKey] !== margins[marginKey];
        });
        if (isNotEqual) {
          this.margins = Object.assign(this.margins, margins);
          this.model.set({ axesMargins: this.margins }, { skipUpdate: true });
          this.services.events.dispatchEvent(Events$1.ZoomBar.UPDATE);
          Object.keys(this.children).forEach(function(childKey) {
            var child = _this.children[childKey];
            child.margins = _this.margins;
          });
          this.render(true);
        }
      };
      return TwoDimensionalAxes2;
    }(Component);
    __extends$L = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ChartBrush = function(_super) {
      __extends$L(ChartBrush2, _super);
      function ChartBrush2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "grid-brush";
        _this.renderType = RenderTypes.SVG;
        _this.selectionSelector = "rect.selection";
        _this.frontSelectionSelector = "rect.frontSelection";
        return _this;
      }
      ChartBrush2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.parent;
        var frontSelectionArea = this.getComponentContainer();
        var backdrop = DOMUtils.appendOrSelect(svg, "svg.chart-grid-backdrop");
        var brushArea = DOMUtils.appendOrSelect(backdrop, "g." + this.type);
        var d3Selection = DOMUtils.appendOrSelect(brushArea, this.selectionSelector);
        var _a22 = DOMUtils.getSVGElementSize(backdrop, {
          useAttrs: true
        }), width = _a22.width, height = _a22.height;
        var cartesianScales = this.services.cartesianScales;
        var mainXScaleType = cartesianScales.getMainXScaleType();
        var mainXScale = cartesianScales.getMainXScale();
        var _b = mainXScale.range(), xScaleStart = _b[0];
        _b[1];
        frontSelectionArea.attr("transform", "translate(" + xScaleStart + ",0)");
        var frontSelection = DOMUtils.appendOrSelect(frontSelectionArea, this.frontSelectionSelector);
        if (mainXScale && mainXScaleType === ScaleTypes.TIME) {
          var zoomDomain_1 = this.model.get("zoomDomain");
          if (zoomDomain_1 === void 0) {
            zoomDomain_1 = this.services.zoom.getDefaultZoomBarDomain();
            if (zoomDomain_1) {
              this.model.set({ zoomDomain: zoomDomain_1 }, { animate: false });
            }
          }
          var updateSelectionDash_1 = function(selection2) {
            var selectionWidth = selection2[1] - selection2[0];
            var dashArray = "0," + selectionWidth.toString();
            var dashCount = Math.floor(height / ChartBrush2.DASH_LENGTH);
            var totalRightDash = dashCount * ChartBrush2.DASH_LENGTH;
            for (var i = 0; i < dashCount; i++) {
              dashArray += "," + ChartBrush2.DASH_LENGTH;
            }
            dashArray += "," + (height - totalRightDash);
            if (dashCount % 2 === 1) {
              dashArray += ",0";
            }
            dashArray += "," + selectionWidth.toString();
            dashArray += "," + height.toString();
            frontSelection.attr("stroke-dasharray", dashArray);
          };
          var brushEventHandler = function(event) {
            var selection2 = event.selection;
            if (selection2 === null || selection2[0] === selection2[1]) {
              return;
            }
            frontSelection.attr("x", parseFloat(d3Selection.attr("x")) + parseFloat(backdrop.attr("x"))).attr("y", d3Selection.attr("y")).attr("width", d3Selection.attr("width")).attr("height", d3Selection.attr("height")).style("cursor", "pointer").style("display", null);
            updateSelectionDash_1(selection2);
          };
          var updateZoomDomain_1 = function(startPoint, endPoint) {
            var xScale = time().range([0, width]).domain(zoomDomain_1);
            var newDomain = [
              xScale.invert(startPoint),
              xScale.invert(endPoint)
            ];
            if (newDomain[0].valueOf() === newDomain[1].valueOf()) {
              newDomain = _this.services.zoom.getDefaultZoomBarDomain();
            }
            if (zoomDomain_1[0].valueOf() !== newDomain[0].valueOf() || zoomDomain_1[1].valueOf() !== newDomain[1].valueOf()) {
              _this.services.zoom.handleDomainChange(newDomain);
            }
          };
          var brushed = function(event) {
            var selection2 = event.selection;
            if (selection2 !== null) {
              updateZoomDomain_1(selection2[0], selection2[1]);
              brushArea.call(brush_1.move, null);
              frontSelection.style("display", "none");
            }
          };
          var brush_1 = brushX().extent([
            [0, 0],
            [width - 1, height]
          ]).on("start brush end", brushEventHandler).on("end.brushed", brushed);
          brushArea.call(brush_1);
          var zoomRatio_1 = this.services.zoom.getZoomRatio();
          backdrop.on("click", function(event) {
            if (event.shiftKey) {
              var holder = this.services.domUtils.getHolder();
              var clickedX = pointer_default(brushArea.node(), holder)[0];
              var leftPoint = clickedX - width * zoomRatio_1 / 2;
              if (leftPoint < 0) {
                leftPoint = 0;
              }
              var rightPoint = clickedX + width * zoomRatio_1 / 2;
              if (rightPoint > width) {
                rightPoint = width;
              }
              updateZoomDomain_1(leftPoint, rightPoint);
            }
          });
        }
      };
      ChartBrush2.DASH_LENGTH = 4;
      return ChartBrush2;
    }(Component);
    __extends$K = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Grid2 = function(_super) {
      __extends$K(Grid22, _super);
      function Grid22() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "grid";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      Grid22.prototype.render = function(animate) {
        if (animate === void 0) {
          animate = true;
        }
        var isXGridEnabled = Tools.getProperty(this.getOptions(), "grid", "x", "enabled");
        var isYGridEnabled = Tools.getProperty(this.getOptions(), "grid", "y", "enabled");
        this.drawBackdrop(isXGridEnabled, isYGridEnabled);
        if (!isXGridEnabled && !isYGridEnabled) {
          return;
        }
        if (isXGridEnabled) {
          DOMUtils.appendOrSelect(this.backdrop, "g.x.grid");
          this.drawXGrid(animate);
        }
        if (isYGridEnabled) {
          DOMUtils.appendOrSelect(this.backdrop, "g.y.grid");
          this.drawYGrid(animate);
        }
      };
      Grid22.prototype.drawXGrid = function(animate) {
        var _this = this;
        var svg = this.parent;
        var height = this.backdrop.attr("height");
        var mainXScale = this.services.cartesianScales.getMainXScale();
        var xGrid = axisBottom(mainXScale).tickSizeInner(-height).tickSizeOuter(0);
        var alignToTicks = Tools.getProperty(this.getOptions(), "grid", "x", "alignWithAxisTicks");
        if (alignToTicks) {
          var mainXPosition = this.services.cartesianScales.getDomainAxisPosition();
          var customDomain = Tools.getProperty(this.getOptions(), "axes", mainXPosition, "ticks", "values");
          if (customDomain) {
            xGrid.tickValues(customDomain);
          }
        } else {
          var numberOfTicks = Tools.getProperty(this.getOptions(), "grid", "x", "numberOfTicks");
          xGrid.ticks(numberOfTicks);
        }
        var g = svg.select(".x.grid").attr("transform", "translate(" + -this.backdrop.attr("x") + ", " + height + ")");
        if (animate) {
          g.transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "grid-update",
              animate
            });
          }).call(xGrid);
        } else {
          g.call(xGrid);
        }
        this.cleanGrid(g);
      };
      Grid22.prototype.drawYGrid = function(animate) {
        var _this = this;
        var svg = this.parent;
        var width = this.backdrop.attr("width");
        var mainYScale = this.services.cartesianScales.getMainYScale();
        var yGrid = axisLeft(mainYScale).tickSizeInner(-width).tickSizeOuter(0);
        var alignToTicks = Tools.getProperty(this.getOptions(), "grid", "y", "alignWithAxisTicks");
        if (alignToTicks) {
          var mainYPosition = this.services.cartesianScales.getRangeAxisPosition();
          var customDomain = Tools.getProperty(this.getOptions(), "axes", mainYPosition, "ticks", "values");
          if (customDomain) {
            yGrid.tickValues(customDomain);
          }
        } else {
          var numberOfTicks = Tools.getProperty(this.getOptions(), "grid", "y", "numberOfTicks");
          yGrid.ticks(numberOfTicks);
        }
        var g = svg.select(".y.grid").attr("transform", "translate(0, " + -this.backdrop.attr("y") + ")");
        if (animate) {
          g.transition().call(function(t) {
            return _this.services.transitions.setupTransition({
              transition: t,
              name: "grid-update",
              animate
            });
          }).call(yGrid);
        } else {
          g.call(yGrid);
        }
        this.cleanGrid(g);
      };
      Grid22.prototype.getGridlineThreshold = function(mousePos) {
        var svg = this.parent;
        var gridlinesX = svg.selectAll(".x.grid .tick").nodes().sort(function(a2, b) {
          return Number(Tools.getTranslationValues(a2).tx) - Number(Tools.getTranslationValues(b).tx);
        });
        var floor = -1;
        var ceiling;
        if (!gridlinesX.length) {
          return;
        }
        gridlinesX.forEach(function(line3, i) {
          if (mousePos[0] >= +Tools.getTranslationValues(line3).tx) {
            floor++;
          }
        });
        ceiling = floor + 1 < gridlinesX.length ? floor + 1 : gridlinesX.length;
        var line1 = gridlinesX[floor];
        var line2 = gridlinesX[ceiling];
        var lineSpacing;
        if (!line1) {
          lineSpacing = +Tools.getTranslationValues(line2).tx;
        } else if (!line2) {
          var gridElement = svg.select("rect.chart-grid-backdrop").node();
          var width = DOMUtils.getSVGElementSize(gridElement).width;
          lineSpacing = width - +Tools.getTranslationValues(line1).tx;
        } else {
          lineSpacing = +Tools.getTranslationValues(line2).tx - +Tools.getTranslationValues(line1).tx;
        }
        var threshold = this.getOptions().tooltip.gridline.threshold;
        return lineSpacing * threshold;
      };
      Grid22.prototype.getActiveGridline = function(position2) {
        var userSpecifiedThreshold = Tools.getProperty(this.getOptions, "tooltip", "gridline", "threshold");
        var threshold = userSpecifiedThreshold ? userSpecifiedThreshold : this.getGridlineThreshold(position2);
        var svg = this.parent;
        var xGridlines = svg.selectAll(".x.grid .tick").filter(function() {
          var translations = Tools.getTranslationValues(this);
          var bounds = {
            min: Number(translations.tx) - threshold,
            max: Number(translations.tx) + threshold
          };
          return bounds.min <= position2[0] && position2[0] <= bounds.max;
        });
        return xGridlines;
      };
      Grid22.prototype.drawBackdrop = function(isXGridEnabled, isYGridEnabled) {
        var svg = this.parent;
        var mainXScale = this.services.cartesianScales.getMainXScale();
        var mainYScale = this.services.cartesianScales.getMainYScale();
        var _a22 = mainXScale.range(), xScaleStart = _a22[0], xScaleEnd = _a22[1];
        var _b = mainYScale.range(), yScaleEnd = _b[0], yScaleStart = _b[1];
        this.backdrop = DOMUtils.appendOrSelect(svg, "svg.chart-grid-backdrop");
        var backdropRect = DOMUtils.appendOrSelect(this.backdrop, isXGridEnabled || isYGridEnabled ? "rect.chart-grid-backdrop.stroked" : "rect.chart-grid-backdrop");
        this.backdrop.merge(backdropRect).attr("x", xScaleStart).attr("y", yScaleStart).attr("width", Math.abs(xScaleEnd - xScaleStart)).attr("height", Math.abs(yScaleEnd - yScaleStart)).lower();
        backdropRect.attr("width", "100%").attr("height", "100%");
      };
      Grid22.prototype.cleanGrid = function(g) {
        g.selectAll("text").remove();
        g.select(".domain").remove();
      };
      return Grid22;
    }(Component);
    __extends$J = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    THRESHOLD = 5;
    Ruler = function(_super) {
      __extends$J(Ruler2, _super);
      function Ruler2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "ruler";
        _this.renderType = RenderTypes.SVG;
        _this.isXGridEnabled = Tools.getProperty(_this.getOptions(), "grid", "x", "enabled");
        _this.isYGridEnabled = Tools.getProperty(_this.getOptions(), "grid", "y", "enabled");
        _this.isEventListenerAdded = false;
        return _this;
      }
      Ruler2.prototype.render = function() {
        var isRulerEnabled = Tools.getProperty(this.getOptions(), "ruler", "enabled");
        this.drawBackdrop();
        if (isRulerEnabled && !this.isEventListenerAdded) {
          this.addBackdropEventListeners();
        } else if (!isRulerEnabled && this.isEventListenerAdded) {
          this.removeBackdropEventListeners();
        }
      };
      Ruler2.prototype.removeBackdropEventListeners = function() {
        this.isEventListenerAdded = false;
        this.backdrop.on("mousemove mouseover mouseout", null);
      };
      Ruler2.prototype.formatTooltipData = function(tooltipData) {
        return tooltipData;
      };
      Ruler2.prototype.showRuler = function(event, _a22) {
        var _this = this;
        var x3 = _a22[0], y3 = _a22[1];
        var svg = this.parent;
        var orientation = this.services.cartesianScales.getOrientation();
        var displayData = this.model.getDisplayData();
        var rangeScale = this.services.cartesianScales.getRangeScale();
        var _b = rangeScale.range(), yScaleEnd = _b[0], yScaleStart = _b[1];
        var mouseCoordinate = orientation === CartesianOrientations.HORIZONTAL ? y3 : x3;
        var ruler2 = DOMUtils.appendOrSelect(svg, "g.ruler").attr("aria-label", "ruler");
        var rulerLine = DOMUtils.appendOrSelect(ruler2, "line.ruler-line");
        var dataPointElements = svg.selectAll("[role=graphics-symbol]");
        var pointsWithinLine = displayData.map(function(d) {
          return {
            domainValue: _this.services.cartesianScales.getDomainValue(d),
            originalData: d
          };
        }).filter(function(d) {
          return pointIsWithinThreshold(d.domainValue, mouseCoordinate);
        });
        if (this.pointsWithinLine && pointsWithinLine.length === this.pointsWithinLine.length && pointsWithinLine.map(function(point6) {
          return point6.domainValue;
        }).join() === this.pointsWithinLine.map(function(point6) {
          return point6.domainValue;
        }).join()) {
          this.pointsWithinLine = pointsWithinLine;
          return this.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
            mousePosition: [x3, y3]
          });
        }
        this.pointsWithinLine = pointsWithinLine;
        var dataPointsMatchingRulerLine = this.pointsWithinLine.reduce(function(accum, currentValue) {
          if (accum.length === 0) {
            accum.push(currentValue);
            return accum;
          }
          var sampleAccumValue = accum[0].domainValue;
          var distanceToCurrentValue = Math.abs(mouseCoordinate - currentValue.domainValue);
          var distanceToAccumValue = Math.abs(mouseCoordinate - sampleAccumValue);
          if (distanceToCurrentValue > distanceToAccumValue) {
            return accum;
          } else if (distanceToCurrentValue < distanceToAccumValue) {
            accum = [currentValue];
          } else {
            accum.push(currentValue);
          }
          return accum;
        }, []);
        if (dataPointsMatchingRulerLine.length > 0) {
          var tooltipData = dataPointsMatchingRulerLine.map(function(d) {
            return d.originalData;
          }).filter(function(d) {
            var rangeIdentifier = _this.services.cartesianScales.getRangeIdentifier(d);
            var value2 = d[rangeIdentifier];
            return value2 !== null && value2 !== void 0;
          });
          var domainValuesMatchingRulerLine_1 = dataPointsMatchingRulerLine.map(function(d) {
            return d.domainValue;
          });
          var elementsToHighlight = dataPointElements.filter(function(d) {
            var domainValue = _this.services.cartesianScales.getDomainValue(d);
            return domainValuesMatchingRulerLine_1.includes(domainValue);
          });
          if (this.elementsToHighlight && this.elementsToHighlight.size() > 0 && !Tools.isEqual(this.elementsToHighlight, elementsToHighlight)) {
            this.hideRuler();
          }
          elementsToHighlight.dispatch("mouseover");
          this.elementsToHighlight = elementsToHighlight;
          this.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
            mousePosition: [x3, y3],
            hoveredElement: rulerLine,
            data: this.formatTooltipData(tooltipData)
          });
          ruler2.attr("opacity", 1);
          var sampleMatch = dataPointsMatchingRulerLine[0];
          if (orientation === "horizontal") {
            rulerLine.attr("x1", yScaleStart).attr("x2", yScaleEnd).attr("y1", sampleMatch.domainValue).attr("y2", sampleMatch.domainValue);
          } else {
            rulerLine.attr("y1", yScaleStart).attr("y2", yScaleEnd).attr("x1", sampleMatch.domainValue).attr("x2", sampleMatch.domainValue);
          }
        } else {
          this.hideRuler();
        }
      };
      Ruler2.prototype.hideRuler = function() {
        var svg = this.parent;
        var ruler2 = DOMUtils.appendOrSelect(svg, "g.ruler");
        var dataPointElements = svg.selectAll("[role=graphics-symbol]");
        dataPointElements.dispatch("mouseout");
        this.services.events.dispatchEvent(Events$1.Tooltip.HIDE);
        ruler2.attr("opacity", 0);
      };
      Ruler2.prototype.addBackdropEventListeners = function() {
        this.isEventListenerAdded = true;
        var self2 = this;
        var holder = this.services.domUtils.getHolder();
        var displayData = this.model.getDisplayData();
        var mouseMoveCallback = function(event) {
          var pos = pointer_default(event, self2.parent.node());
          self2.showRuler(event, pos);
        };
        if (displayData.length > 100) {
          var debounceThreshold = displayData.length % 50 * 12.5;
          mouseMoveCallback = Tools.debounceWithD3MousePosition(function(event) {
            var mousePosition = this.mousePosition;
            self2.showRuler(event, mousePosition);
          }, debounceThreshold, holder);
        }
        this.backdrop.on("mousemove mouseover", mouseMoveCallback).on("mouseout", this.hideRuler.bind(this));
      };
      Ruler2.prototype.drawBackdrop = function() {
        var svg = this.parent;
        this.backdrop = DOMUtils.appendOrSelect(svg, "svg.chart-grid-backdrop");
      };
      return Ruler2;
    }(Component);
    __extends$I = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$g = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    BinnedRuler = function(_super) {
      __extends$I(BinnedRuler2, _super);
      function BinnedRuler2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "ruler-binned";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      BinnedRuler2.prototype.showRuler = function(event, _a22) {
        var _this = this;
        var x3 = _a22[0], y3 = _a22[1];
        var svg = this.parent;
        var options2 = this.model.getOptions();
        var orientation = this.services.cartesianScales.getOrientation();
        var rangeScale = this.services.cartesianScales.getRangeScale();
        var _b = rangeScale.range(), yScaleEnd = _b[0], yScaleStart = _b[1];
        var domainScale = this.services.cartesianScales.getDomainScale();
        var correspondingDomainValue = domainScale.invert(orientation === CartesianOrientations.VERTICAL ? x3 : y3);
        var ruler2 = DOMUtils.appendOrSelect(svg, "g.ruler").attr("aria-label", "ruler");
        var rulerLine = DOMUtils.appendOrSelect(ruler2, "line.ruler-line");
        var dataPointElements = svg.selectAll("[role=graphics-symbol]");
        var elementsToHighlight = dataPointElements.filter(function(d) {
          if (parseFloat(get_default(d, "data.x0")) <= correspondingDomainValue && parseFloat(get_default(d, "data.x1")) >= correspondingDomainValue) {
            return true;
          }
        });
        if (elementsToHighlight.size() > 0) {
          if (this.elementsToHighlight && this.elementsToHighlight.size() > 0 && !Tools.isEqual(this.elementsToHighlight, elementsToHighlight)) {
            this.hideRuler();
          }
          elementsToHighlight.dispatch("mouseover");
          this.elementsToHighlight = elementsToHighlight;
          var sampleMatchData_1 = select_default2(elementsToHighlight.nodes()[0]).datum();
          var x0 = parseFloat(get_default(sampleMatchData_1, "data.x0"));
          var x1 = parseFloat(get_default(sampleMatchData_1, "data.x1"));
          var activeDataGroupNames = this.model.getActiveDataGroupNames();
          var tooltipDataGroups = activeDataGroupNames.reverse().map(function(dataGroupName) {
            return {
              label: dataGroupName,
              value: get_default(sampleMatchData_1, "data." + dataGroupName),
              class: _this.model.getColorClassName({
                classNameTypes: [ColorClassNameTypes.TOOLTIP],
                dataGroupName
              })
            };
          }).filter(function(d) {
            return d.value !== 0;
          });
          var thereIsMatchingData = tooltipDataGroups.length > 0;
          if (thereIsMatchingData) {
            this.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              mousePosition: [x3, y3],
              hoveredElement: rulerLine,
              items: __spreadArrays$g([
                {
                  label: get_default(options2, "bins.rangeLabel") || "Range",
                  value: x0 + " \u2013 " + x1
                }
              ], tooltipDataGroups, Tools.getProperty(options2, "tooltip", "showTotal") === true ? [
                {
                  label: get_default(options2, "tooltip.totalLabel") || "Total",
                  value: activeDataGroupNames.reduce(function(accum, currentValue) {
                    return accum + parseFloat(get_default(sampleMatchData_1, "data." + currentValue));
                  }, 0)
                }
              ] : [])
            });
            ruler2.attr("opacity", 1);
            var rulerPosition = domainScale((x0 + x1) / 2);
            if (orientation === "horizontal") {
              rulerLine.attr("x1", yScaleStart).attr("x2", yScaleEnd).attr("y1", rulerPosition).attr("y2", rulerPosition);
            } else {
              rulerLine.attr("y1", yScaleStart).attr("y2", yScaleEnd).attr("x1", rulerPosition).attr("x2", rulerPosition);
            }
          } else {
            this.hideRuler();
          }
        } else {
          this.hideRuler();
        }
      };
      return BinnedRuler2;
    }(Ruler);
    __extends$H = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    StackedRuler = function(_super) {
      __extends$H(StackedRuler2, _super);
      function StackedRuler2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      StackedRuler2.prototype.formatTooltipData = function(tooltipData) {
        return tooltipData.reverse();
      };
      return StackedRuler2;
    }(Ruler);
    __extends$G = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Toolbar = function(_super) {
      __extends$G(Toolbar2, _super);
      function Toolbar2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "toolbar";
        _this.renderType = RenderTypes.HTML;
        return _this;
      }
      Toolbar2.prototype.init = function() {
        var _this = this;
        var bodyOnClickHandler = function() {
          return _this.updateOverflowMenu(false);
        };
        this.services.events.addEventListener(Events$1.Toolbar.SHOW_OVERFLOW_MENU, function() {
          _this.renderOverflowMenu();
          document.body.addEventListener("click", bodyOnClickHandler);
        });
        this.services.events.addEventListener(Events$1.Toolbar.HIDE_OVERFLOW_MENU, function() {
          document.body.removeEventListener("click", bodyOnClickHandler);
        });
      };
      Toolbar2.prototype.render = function(animate) {
        var _this = this;
        var container = this.getComponentContainer().attr("role", "toolbar").attr("aria-label", "chart-" + this.services.domUtils.getChartID() + " toolbar");
        var isDataLoading = Tools.getProperty(this.getOptions(), "data", "loading");
        if (isDataLoading) {
          container.html("");
          this.overflowMenu = null;
        } else {
          if (!this.overflowMenu) {
            this.overflowMenu = container.append("div").attr("class", "cds--overflow-menu-options cds--overflow-menu--flip cds--overflow-menu-options cds--overflow-menu--flip").attr("tabindex", -1).attr("role", "menu").html("<ul></ul>");
          }
          var _a22 = this.getControlConfigs(), buttonList = _a22.buttonList, overflowMenuItemList = _a22.overflowMenuItemList;
          if (!!overflowMenuItemList) {
            buttonList.push(this.getOverflowButtonConfig());
          }
          var toolbarControls = container.selectAll("div.toolbar-control").data(buttonList, function(button) {
            return button.id;
          });
          toolbarControls.exit().remove();
          var enteringToolbarControls = toolbarControls.enter().append("div").attr("class", "toolbar-control cds--overflow-menu cds--overflow-menu").attr("role", "button");
          var self_1 = this;
          enteringToolbarControls.merge(toolbarControls).classed("disabled", function(d) {
            return d.shouldBeDisabled();
          }).attr("aria-disabled", function(d) {
            return d.shouldBeDisabled();
          }).attr("aria-label", function(d) {
            return d.title;
          }).html(function(d) {
            return '\n			<button\n				class="cds--overflow-menu__trigger cds--overflow-menu__trigger"\n				aria-haspopup="true" aria-expanded="false" id="' + _this.services.domUtils.generateElementIDString("control-" + d.id) + '" aria-label="' + d.title + '">\n				<svg focusable="false" preserveAspectRatio="xMidYMid meet" style="will-change: transform; width: ' + (d.iconSVG.width !== void 0 ? d.iconSVG.width : "20px") + "; height: " + (d.iconSVG.height !== void 0 ? d.iconSVG.height : "20px") + '" xmlns="http://www.w3.org/2000/svg" class="cds--overflow-menu__icon cds--overflow-menu__icon" viewBox="0 0 32 32" aria-hidden="true">\n					' + d.iconSVG.content + "\n				</svg>\n			</button>";
          }).each(function(d, index5) {
            var _this2 = this;
            select_default2(this).select("button").on("click", function(event) {
              if (!d.shouldBeDisabled()) {
                self_1.triggerFunctionAndEvent(d, event, _this2);
              }
            }).on("keydown", function(event) {
              if (event.key && event.key === "Enter" || event.key === " ") {
                event.preventDefault();
                self_1.triggerFunctionAndEvent(d, event, _this2);
              } else if (event.key && event.key === "ArrowLeft") {
                self_1.focusOnPreviousEnabledToolbarItem(index5);
              } else if (event.key && event.key === "ArrowRight") {
                self_1.focusOnNextEnabledToolbarItem(index5);
              }
            });
          });
          this.overflowButton = this.getComponentContainer().select("button.cds--overflow-menu__trigger#" + this.services.domUtils.generateElementIDString("control-toolbar-overflow-menu"));
        }
      };
      Toolbar2.prototype.renderOverflowMenu = function() {
        var _this = this;
        var overflowMenuItemList = this.getControlConfigs().overflowMenuItemList;
        var overflowMenuControls = this.overflowMenu.select("ul").selectAll("li.cds--overflow-menu-options__option").data(overflowMenuItemList, function(button) {
          return Tools.getProperty(button, "id");
        });
        overflowMenuControls.exit().remove();
        var enteringOverflowMenuControls = overflowMenuControls.enter().append("li").attr("id", function(d) {
          return _this.services.domUtils.generateElementIDString("control-" + d.id);
        }).attr("class", "cds--overflow-menu-options__option cds--overflow-menu-options__option").attr("role", "menuitem");
        enteringOverflowMenuControls.append("button").attr("class", "cds--overflow-menu-options__btn cds--overflow-menu-options__btn");
        enteringOverflowMenuControls.merge(overflowMenuControls).classed("cds--overflow-menu-options__option--disabled", function(d) {
          return d.shouldBeDisabled();
        }).classed("cds--overflow-menu-options__option--disabled", function(d) {
          return d.shouldBeDisabled();
        }).attr("aria-disabled", function(d) {
          return d.shouldBeDisabled();
        }).selectAll("button").text(function(d) {
          return d.text;
        });
      };
      Toolbar2.prototype.isOverflowMenuOpen = function() {
        return this.overflowMenu.classed("is-open");
      };
      Toolbar2.prototype.updateOverflowMenu = function(show) {
        if (!this.overflowMenu) {
          return;
        }
        this.overflowMenu.classed("is-open", show);
        if (this.overflowButton) {
          this.overflowButton.attr("aria-expanded", show);
          select_default2(this.overflowButton.node().parentNode).classed("cds--overflow-menu--open", show).classed("cds--overflow-menu--open", show);
        }
        if (show) {
          this.services.events.dispatchEvent(Events$1.Toolbar.SHOW_OVERFLOW_MENU);
        } else {
          this.services.events.dispatchEvent(Events$1.Toolbar.HIDE_OVERFLOW_MENU);
        }
      };
      Toolbar2.prototype.focusOnPreviousEnabledToolbarItem = function(currentItemIndex) {
        var buttonList = this.getToolbarButtonItems();
        var previousItemIndex = buttonList.length;
        for (var i = currentItemIndex - 1; i >= 0; i--) {
          var previousButtonItem = buttonList[i];
          if (!previousButtonItem.shouldBeDisabled()) {
            previousItemIndex = i;
            break;
          }
        }
        if (previousItemIndex < buttonList.length) {
          var previousItemNode = select_default2("button#" + this.services.domUtils.generateElementIDString("control-" + buttonList[previousItemIndex].id)).node();
          if ("focus" in previousItemNode) {
            previousItemNode.focus();
          }
        }
      };
      Toolbar2.prototype.focusOnNextEnabledToolbarItem = function(currentItemIndex) {
        var buttonList = this.getToolbarButtonItems();
        var nextItemIndex = -1;
        for (var i = currentItemIndex + 1; i < buttonList.length; i++) {
          var nextOverflowMenuItem = buttonList[i];
          if (!nextOverflowMenuItem.shouldBeDisabled()) {
            nextItemIndex = i;
            break;
          }
        }
        if (nextItemIndex > -1) {
          var nextItemNode = select_default2("button#" + this.services.domUtils.generateElementIDString("control-" + buttonList[nextItemIndex].id)).node();
          if ("focus" in nextItemNode) {
            nextItemNode.focus();
          }
        }
      };
      Toolbar2.prototype.focusOnPreviousEnabledMenuItem = function(currentItemIndex) {
        var overflowMenuItems = this.getOverflowMenuItems();
        var previousItemIndex = overflowMenuItems.length;
        for (var i = currentItemIndex - 1; i >= 0; i--) {
          var previousOverflowMenuItem = overflowMenuItems[i];
          if (!previousOverflowMenuItem.shouldBeDisabled()) {
            previousItemIndex = i;
            break;
          }
        }
        if (previousItemIndex < overflowMenuItems.length) {
          var previousItemNode = select_default2("#" + this.services.domUtils.generateElementIDString("control-" + overflowMenuItems[previousItemIndex].id) + " button").node();
          if ("focus" in previousItemNode) {
            previousItemNode.focus();
          }
        }
      };
      Toolbar2.prototype.focusOnNextEnabledMenuItem = function(currentItemIndex) {
        var overflowMenuItems = this.getOverflowMenuItems();
        var nextItemIndex = -1;
        for (var i = currentItemIndex + 1; i < overflowMenuItems.length; i++) {
          var nextOverflowMenuItem = overflowMenuItems[i];
          if (!nextOverflowMenuItem.shouldBeDisabled()) {
            nextItemIndex = i;
            break;
          }
        }
        if (nextItemIndex > -1) {
          var nextItemNode = select_default2("#" + this.services.domUtils.generateElementIDString("control-" + overflowMenuItems[nextItemIndex].id) + " button").node();
          if ("focus" in nextItemNode) {
            nextItemNode.focus();
          }
        }
      };
      Toolbar2.prototype.toggleOverflowMenu = function(event) {
        var _this = this;
        if (this.isOverflowMenuOpen()) {
          this.updateOverflowMenu(false);
        } else {
          this.updateOverflowMenu(true);
          var self_2 = this;
          var overflowMenuItems = this.getOverflowMenuItems();
          overflowMenuItems.forEach(function(menuItem, index5) {
            var element = select_default2("#" + _this.services.domUtils.generateElementIDString("control-" + menuItem.id));
            if (element !== null) {
              element.on("click", function() {
                self_2.triggerFunctionAndEvent(menuItem, event, element.node());
                self_2.updateOverflowMenu(false);
              });
              element.on("keydown", function(keyEvent) {
                if (keyEvent && keyEvent.key === "Enter") {
                  self_2.triggerFunctionAndEvent(menuItem, event, element.node());
                } else if (keyEvent && keyEvent.key === "ArrowUp") {
                  self_2.focusOnPreviousEnabledMenuItem(index5);
                } else if (keyEvent && keyEvent.key === "ArrowDown") {
                  self_2.focusOnNextEnabledMenuItem(index5);
                } else if (keyEvent && keyEvent.key === "Escape") {
                  self_2.updateOverflowMenu(false);
                }
                keyEvent.preventDefault();
              });
            }
          });
          self_2.focusOnNextEnabledMenuItem(-1);
        }
        if (!!event) {
          event.stopImmediatePropagation();
        }
      };
      Toolbar2.prototype.triggerFunctionAndEvent = function(control, event, element) {
        if (typeof control.shouldBeDisabled === "function" && control.shouldBeDisabled()) {
          return;
        }
        if (typeof control.clickFunction === "function") {
          control.clickFunction(event);
        }
        this.services.events.dispatchEvent(Events$1.Toolbar.BUTTON_CLICK, {
          control,
          event,
          element
        });
      };
      Toolbar2.prototype.getControlConfigs = function() {
        var _this = this;
        var numberOfIcons = Tools.getProperty(this.getOptions(), "toolbar", "numberOfIcons") - 1;
        var controls = Tools.getProperty(this.getOptions(), "toolbar", "controls");
        var overflowSpecificControls = [];
        var buttonList = [];
        var overflowList = [];
        controls.forEach(function(control) {
          var controlConfig = null;
          if (control.type === ToolbarControlTypes.CUSTOM) {
            if (Tools.getProperty(control, "id") === null) {
              control.id = "toolbar-button-" + Toolbar2.buttonID++;
            }
            if (Tools.getProperty(control, "shouldBeDisabled") === null) {
              control.shouldBeDisabled = function() {
                return false;
              };
            }
            controlConfig = control;
          } else {
            controlConfig = _this.getControlConfigByType(control.type);
          }
          if (controlConfig) {
            controlConfig.text = control.text ? control.text : control.type;
            if (controlConfig.id.indexOf("toolbar-export") !== -1) {
              overflowSpecificControls.push(controlConfig);
            } else if (buttonList.length < numberOfIcons) {
              if (Tools.getProperty(controlConfig, "iconSVG", "content") === null) {
                overflowList.push(controlConfig);
              } else {
                buttonList.push(controlConfig);
              }
            } else {
              overflowList.push(controlConfig);
            }
          }
        });
        overflowList.push.apply(overflowList, overflowSpecificControls);
        if (!overflowList.length) {
          return {
            buttonList
          };
        }
        return {
          buttonList,
          overflowMenuItemList: overflowList
        };
      };
      Toolbar2.prototype.getToolbarButtonItems = function() {
        var _a22 = this.getControlConfigs(), buttonList = _a22.buttonList, overflowMenuItemList = _a22.overflowMenuItemList;
        if (!!overflowMenuItemList) {
          buttonList.push(this.getOverflowButtonConfig());
        }
        if (!!buttonList) {
          return buttonList;
        }
        return [];
      };
      Toolbar2.prototype.getOverflowMenuItems = function() {
        var overflowMenuItemList = this.getControlConfigs().overflowMenuItemList;
        if (!!overflowMenuItemList) {
          return overflowMenuItemList;
        } else {
          return [];
        }
      };
      Toolbar2.prototype.getOverflowButtonConfig = function() {
        var _this = this;
        return {
          id: "toolbar-overflow-menu",
          title: "More options",
          shouldBeDisabled: function() {
            return false;
          },
          iconSVG: {
            content: '<circle cx="16" cy="8" r="2"></circle>\n				<circle cx="16" cy="16" r="2"></circle>\n				<circle cx="16" cy="24" r="2"></circle>'
          },
          clickFunction: function(event) {
            return _this.toggleOverflowMenu(event);
          }
        };
      };
      Toolbar2.prototype.getControlConfigByType = function(controlType) {
        var _this = this;
        var isZoomBarEnabled = this.services.zoom && this.services.zoom.isZoomBarEnabled() && !this.services.zoom.isEmptyState();
        var displayData = this.model.getDisplayData();
        var controlConfig;
        switch (controlType) {
          case ToolbarControlTypes.ZOOM_IN:
            if (isZoomBarEnabled) {
              controlConfig = {
                id: "toolbar-zoomIn",
                title: "Zoom in",
                shouldBeDisabled: function() {
                  return _this.services.zoom.isMinZoomDomain();
                },
                iconSVG: {
                  content: this.getControlIconByType(controlType)
                },
                clickFunction: function() {
                  return _this.services.zoom.zoomIn();
                }
              };
            }
            break;
          case ToolbarControlTypes.ZOOM_OUT:
            if (isZoomBarEnabled) {
              controlConfig = {
                id: "toolbar-zoomOut",
                title: "Zoom out",
                shouldBeDisabled: function() {
                  return _this.services.zoom.isMaxZoomDomain();
                },
                iconSVG: {
                  content: this.getControlIconByType(controlType)
                },
                clickFunction: function() {
                  return _this.services.zoom.zoomOut();
                }
              };
            }
            break;
          case ToolbarControlTypes.RESET_ZOOM:
            if (isZoomBarEnabled) {
              controlConfig = {
                id: "toolbar-resetZoom",
                title: "Reset zoom",
                shouldBeDisabled: function() {
                  return _this.services.zoom.isMaxZoomDomain();
                },
                iconSVG: {
                  content: this.getControlIconByType(controlType)
                },
                clickFunction: function() {
                  return _this.services.zoom.resetZoomDomain();
                }
              };
            }
            break;
          case ToolbarControlTypes.MAKE_FULLSCREEN:
            controlConfig = {
              id: "toolbar-makefullscreen",
              iconSVG: {
                content: this.getControlIconByType(controlType),
                width: "15px",
                height: "15px"
              },
              title: "Make fullscreen",
              shouldBeDisabled: function() {
                return false;
              },
              clickFunction: function() {
                _this.services.domUtils.toggleFullscreen();
              }
            };
            break;
          case ToolbarControlTypes.SHOW_AS_DATATABLE:
            controlConfig = {
              id: "toolbar-showasdatatable",
              iconSVG: {
                content: this.getControlIconByType(controlType)
              },
              title: "Show as table",
              shouldBeDisabled: function() {
                return displayData.length === 0;
              },
              clickFunction: function() {
                return _this.services.events.dispatchEvent(Events$1.Modal.SHOW);
              }
            };
            break;
          case ToolbarControlTypes.EXPORT_CSV:
            controlConfig = {
              id: "toolbar-export-CSV",
              title: "Export as CSV",
              shouldBeDisabled: function() {
                return false;
              },
              iconSVG: {
                content: this.getControlIconByType(controlType)
              },
              clickFunction: function() {
                return _this.model.exportToCSV();
              }
            };
            break;
          case ToolbarControlTypes.EXPORT_PNG:
            controlConfig = {
              id: "toolbar-export-PNG",
              title: "Export as PNG",
              shouldBeDisabled: function() {
                return false;
              },
              iconSVG: {
                content: this.getControlIconByType(controlType)
              },
              clickFunction: function() {
                return _this.services.domUtils.exportToPNG();
              }
            };
            break;
          case ToolbarControlTypes.EXPORT_JPG:
            controlConfig = {
              id: "toolbar-export-JPG",
              title: "Export as JPG",
              shouldBeDisabled: function() {
                return false;
              },
              iconSVG: {
                content: this.getControlIconByType(controlType)
              },
              clickFunction: function() {
                return _this.services.domUtils.exportToJPG();
              }
            };
            break;
          default:
            throw Error("Not supported toolbar control type: " + controlType);
        }
        return controlConfig;
      };
      Toolbar2.prototype.getControlIconByType = function(controlType) {
        switch (controlType) {
          case ToolbarControlTypes.ZOOM_IN:
            return '<polygon points="19 13 15 13 15 9 13 9 13 13 9 13 9 15 13 15 13 19 15 19 15 15 19 15 19 13"/>\n						<path d="M22.45,21A10.87,10.87,0,0,0,25,14,11,11,0,1,0,14,25a10.87,10.87,0,0,0,7-2.55L28.59,30,30,28.59ZM14,23a9,9,0,1,1,9-9A9,9,0,0,1,14,23Z"/>';
          case ToolbarControlTypes.ZOOM_OUT:
            return '<rect x="9" y="13" width="10" height="2"/>\n						<path d="M22.45,21A10.87,10.87,0,0,0,25,14,11,11,0,1,0,14,25a10.87,10.87,0,0,0,7-2.55L28.59,30,30,28.59ZM14,23a9,9,0,1,1,9-9A9,9,0,0,1,14,23Z"/>';
          case ToolbarControlTypes.RESET_ZOOM:
            return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
          case ToolbarControlTypes.MAKE_FULLSCREEN:
            return '<polygon points="21 2 21 4 26.59 4 17 13.58 18.41 15 28 5.41 28 11 30 11 30 2 21 2"/><polygon points="15 18.42 13.59 17 4 26.59 4 21 2 21 2 30 11 30 11 28 5.41 28 15 18.42"/>';
          case ToolbarControlTypes.SHOW_AS_DATATABLE:
            return '<rect x="4" y="6" width="18" height="2"/><rect x="4" y="12" width="18" height="2"/><rect x="4" y="18" width="18" height="2"/><rect x="4" y="24" width="18" height="2"/><rect x="26" y="6" width="2" height="2"/><rect x="26" y="12" width="2" height="2"/><rect x="26" y="18" width="2" height="2"/><rect x="26" y="24" width="2" height="2"/>';
          case ToolbarControlTypes.EXPORT_CSV:
            return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
          case ToolbarControlTypes.EXPORT_JPG:
            return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
          case ToolbarControlTypes.EXPORT_PNG:
            return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
          default:
            throw Error("Not supported toolbar control type: " + controlType);
        }
      };
      Toolbar2.buttonID = 0;
      return Toolbar2;
    }(Component);
    __extends$F = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ZeroLine = function(_super) {
      __extends$F(ZeroLine2, _super);
      function ZeroLine2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "zero-line";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      ZeroLine2.prototype.render = function(animate) {
        var _this = this;
        var axisPosition = this.services.cartesianScales.getRangeAxisPosition({ groups: this.configs.groups });
        var rangeScale = this.services.cartesianScales.getScaleByPosition(axisPosition);
        var _a22 = rangeScale.domain(), minDomainValue = _a22[0], maxDomainValue = _a22[1];
        var drawZeroLine = minDomainValue > 0 && maxDomainValue < 0 || minDomainValue < 0 && maxDomainValue > 0;
        var svg = this.getComponentContainer();
        if (!drawZeroLine) {
          svg.selectAll("line.domain").remove();
          return;
        }
        var _b = this.services.cartesianScales.getDomainScale().range(), x0 = _b[0], x1 = _b[1];
        var yPosition = +rangeScale(0) + 0.5;
        if (!yPosition) {
          yPosition = rangeScale.range()[0];
        }
        var lineCoordinates = Tools.flipSVGCoordinatesBasedOnOrientation({
          x0,
          x1,
          y0: yPosition,
          y1: yPosition
        }, this.services.cartesianScales.getOrientation());
        var line2 = DOMUtils.appendOrSelect(svg, "line.domain");
        line2.transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "zero-line-update",
            animate
          });
        }).attr("y1", lineCoordinates.y0).attr("y2", lineCoordinates.y1).attr("x1", lineCoordinates.x0).attr("x2", lineCoordinates.x1);
      };
      return ZeroLine2;
    }(Component);
    __extends$E = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ZoomBar = function(_super) {
      __extends$E(ZoomBar2, _super);
      function ZoomBar2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "zoom-bar";
        _this.renderType = RenderTypes.SVG;
        _this.MIN_SELECTION_DIFF = 9e-10;
        _this.brushSelector = "g.zoom-bar-brush";
        _this.clipId = "zoomBarClip-" + Math.floor(Math.random() * 99999999999);
        _this.brush = brushX();
        _this.highlightStrokeWidth = 1;
        return _this;
      }
      ZoomBar2.prototype.init = function() {
        this.services.events.addEventListener(Events$1.ZoomBar.UPDATE, this.render.bind(this));
        var definedZoomBarData = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "data");
        this.model.setZoomBarData(definedZoomBarData);
      };
      ZoomBar2.prototype.render = function(animate) {
        var _this = this;
        var svg = this.getComponentContainer();
        var isTopZoomBarLoading = this.services.zoom.isZoomBarLoading(AxisPositions.TOP);
        var isTopZoomBarLocked = this.services.zoom.isZoomBarLocked(AxisPositions.TOP);
        var zoombarType = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "type");
        var highlight = Tools.getProperty(this.getOptions(), "axes", AxisPositions.BOTTOM, "highlights");
        var zoombarHeight = zoomBar.height[zoombarType];
        var width = DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }).width;
        if (width === 0) {
          return;
        }
        var axesLeftMargin = 0;
        var axesMargins = this.model.get("axesMargins");
        if (axesMargins && axesMargins.left) {
          axesLeftMargin = axesMargins.left;
        }
        var container = DOMUtils.appendOrSelect(svg, "svg.zoom-container").attr("width", "100%").attr("height", zoombarHeight).attr("opacity", 1);
        DOMUtils.appendOrSelect(svg, "rect.zoom-spacer").attr("x", 0).attr("y", zoombarHeight).attr("width", "100%").attr("height", zoomBar.spacerHeight).attr("opacity", 1).attr("fill", "none");
        if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {
          DOMUtils.appendOrSelect(container, "rect.zoom-bg").attr("x", axesLeftMargin).attr("y", 0).attr("width", width - axesLeftMargin).attr("height", "100%").classed("zoom-bg-skeleton", isTopZoomBarLoading).style("stroke", isTopZoomBarLoading ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-lines") + ")" : null);
        } else if (zoombarType === ZoomBarTypes.SLIDER_VIEW) {
          DOMUtils.appendOrSelect(container, "rect.zoom-slider-bg").attr("x", axesLeftMargin).attr("y", zoombarHeight / 2 - 1).attr("width", width - axesLeftMargin).attr("height", 2).classed("zoom-slider-bg-skeleton", isTopZoomBarLoading).style("stroke", isTopZoomBarLoading ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-lines") + ")" : null);
        }
        if (isTopZoomBarLoading) {
          this.renderSkeleton(container, axesLeftMargin, width);
          return;
        }
        var cartesianScales = this.services.cartesianScales;
        var mainXScale = cartesianScales.getMainXScale();
        var mainYScale = cartesianScales.getMainYScale();
        var mainXScaleType = cartesianScales.getMainXScaleType();
        if (mainXScale && mainXScaleType === ScaleTypes.TIME) {
          var zoomBarData = this.services.zoom.getZoomBarData();
          if (Tools.isEmpty(zoomBarData) || zoomBarData.length === 1) {
            return;
          }
          this.xScale = mainXScale.copy();
          this.yScale = mainYScale.copy();
          var defaultDomain = this.services.zoom.getDefaultZoomBarDomain(zoomBarData);
          zoomBarData = this.compensateDataForDefaultDomain(zoomBarData, defaultDomain);
          var oldInitialZoomDomain = this.model.get("initialZoomDomain");
          var newInitialZoomDomain = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "initialZoomDomain");
          if (newInitialZoomDomain && newInitialZoomDomain[0] && newInitialZoomDomain[1]) {
            newInitialZoomDomain[0] = new Date(newInitialZoomDomain[0]);
            newInitialZoomDomain[1] = new Date(newInitialZoomDomain[1]);
          }
          if (newInitialZoomDomain && !(oldInitialZoomDomain && oldInitialZoomDomain[0].valueOf() === newInitialZoomDomain[0].valueOf() && oldInitialZoomDomain[1].valueOf() === newInitialZoomDomain[1].valueOf())) {
            this.model.set({
              initialZoomDomain: Tools.merge([], newInitialZoomDomain),
              zoomDomain: newInitialZoomDomain ? Tools.merge([], newInitialZoomDomain) : defaultDomain
            }, { skipUpdate: true });
          } else if (newInitialZoomDomain === null && oldInitialZoomDomain !== null) {
            this.model.set({
              initialZoomDomain: null,
              zoomDomain: Tools.merge([], defaultDomain)
            }, { skipUpdate: true });
          }
          this.xScale.range([axesLeftMargin, width]).domain(defaultDomain);
          this.maxSelectionRange = this.xScale.range();
          this.yScale.range([0, zoombarHeight - 6]).domain(extent(zoomBarData, function(d) {
            return d.value;
          }));
          var zoomDomain = this.model.get("zoomDomain");
          if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {
            this.renderZoomBarArea(container, "path.zoom-graph-area-unselected", zoomBarData, null);
            this.updateClipPath(svg, this.clipId, 0, 0, 0, 0);
            this.renderZoomBarArea(container, "path.zoom-graph-area", zoomBarData, this.clipId);
            this.renderZoomBarBaseline(container, axesLeftMargin, width);
            if (highlight) {
              var startHighlight_1 = highlight.highlightStartMapsTo;
              var endHighlight_1 = highlight.highlightEndMapsTo;
              var color_1 = highlight.color;
              var labelMapTo_1 = highlight.labelMapsTo;
              highlight.data.forEach(function(element, index5) {
                DOMUtils.appendOrSelect(container, "rect.highlight-" + index5).attr("height", zoombarHeight - 2 * _this.highlightStrokeWidth).attr("y", _this.highlightStrokeWidth).attr("x", _this.xScale(element[startHighlight_1])).attr("width", _this.xScale(element[endHighlight_1]) - _this.xScale(element[startHighlight_1])).style("fill", color_1 && color_1.scale[element[labelMapTo_1]] ? color_1.scale[element[labelMapTo_1]] : null).style("fill-opacity", 0.1).style("stroke", color_1 && color_1.scale[element[labelMapTo_1]] ? color_1.scale[element[labelMapTo_1]] : null).style("stroke-dasharray", "2, 2").attr("stroke-width", 1 + "px");
              });
            }
          }
          this.addBrushEventListener(zoomDomain, axesLeftMargin, width);
          var brushArea = DOMUtils.appendOrSelect(svg, this.brushSelector).call(this.brush);
          if (zoomDomain === void 0)
            ;
          else if (zoomDomain[0].valueOf() === zoomDomain[1].valueOf()) {
            brushArea.call(this.brush.move, this.xScale.range());
            this.updateBrushHandle(this.getComponentContainer(), this.xScale.range(), this.xScale.domain());
          } else {
            var selected = zoomDomain.map(function(domain) {
              return _this.xScale(domain);
            });
            if (selected[1] - selected[0] < this.MIN_SELECTION_DIFF)
              ;
            else {
              brushArea.call(this.brush.move, selected);
              this.updateBrushHandle(this.getComponentContainer(), selected, zoomDomain);
            }
          }
          if (isTopZoomBarLocked) {
            this.brush.filter(function() {
              return false;
            });
            brushArea.selectAll("rect").attr("cursor", "auto");
          }
        }
      };
      ZoomBar2.prototype.addBrushEventListener = function(zoomDomain, axesLeftMargin, width) {
        var _this = this;
        var brushEventListener = function(event) {
          var selection2 = event.selection;
          if (selection2 === null) {
            _this.handleBrushedEvent(event, zoomDomain, _this.xScale, _this.xScale.range());
          } else if (selection2[0] === selection2[1])
            ;
          else {
            _this.handleBrushedEvent(event, zoomDomain, _this.xScale, selection2);
          }
        };
        var zoombarType = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "type");
        var zoombarHeight = zoomBar.height[zoombarType];
        this.brush.extent([
          [axesLeftMargin, 0],
          [width, zoombarHeight]
        ]).on("start brush end", null).on("start brush end", brushEventListener);
      };
      ZoomBar2.prototype.handleBrushedEvent = function(event, zoomDomain, scale, selection2) {
        var newDomain = [
          scale.invert(selection2[0]),
          scale.invert(selection2[1])
        ];
        this.updateBrushHandle(this.getComponentContainer(), selection2, newDomain);
        if (event.sourceEvent != null && (event.sourceEvent.type === "mousemove" || event.sourceEvent.type === "mouseup" || event.sourceEvent.type === "mousedown" || event.sourceEvent.type === "touchstart" || event.sourceEvent.type === "touchmove" || event.sourceEvent.type === "touchend")) {
          if (zoomDomain === void 0 || zoomDomain[0] !== newDomain[0] || zoomDomain[1] !== newDomain[1]) {
            this.services.zoom.handleDomainChange(newDomain, {
              dispatchEvent: false
            });
          }
          var zoomBarEventType = void 0;
          if (event.type === "start") {
            zoomBarEventType = Events$1.ZoomBar.SELECTION_START;
          } else if (event.type === "brush") {
            zoomBarEventType = Events$1.ZoomBar.SELECTION_IN_PROGRESS;
          } else if (event.type === "end") {
            zoomBarEventType = Events$1.ZoomBar.SELECTION_END;
            this.services.events.dispatchEvent(Events$1.ZoomDomain.CHANGE, {
              newDomain
            });
          }
          this.services.events.dispatchEvent(zoomBarEventType, {
            selection: selection2,
            newDomain
          });
        }
      };
      ZoomBar2.prototype.updateBrushHandle = function(svg, selection2, domain) {
        var self2 = this;
        var handleWidth = zoomBar.handleWidth;
        var zoombarType = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "type");
        var handleHeight = zoomBar.height[zoombarType];
        var handleXDiff = -handleWidth / 2;
        var handleBarWidth = zoomBar.handleBarWidth;
        var handleBarHeight = zoombarType === ZoomBarTypes.GRAPH_VIEW ? zoomBar.handleBarHeight : 6;
        var handleBarXDiff = -handleBarWidth / 2;
        var handleYBarDiff = (handleHeight - handleBarHeight) / 2;
        svg.select(this.brushSelector).selectAll("rect.handle").data([{ type: "w" }, { type: "e" }]).attr("x", function(d) {
          if (d.type === "w") {
            return Math.max(selection2[0] + handleXDiff, self2.maxSelectionRange[0]);
          } else if (d.type === "e") {
            return Math.min(selection2[1] + handleXDiff, self2.maxSelectionRange[1] - handleWidth);
          }
        }).attr("y", 0).attr("width", handleWidth).attr("height", handleHeight).attr("cursor", "ew-resize").style("display", null);
        var handleBars = svg.select(this.brushSelector).selectAll("rect.handle-bar").data([{ type: "w" }, { type: "e" }]);
        handleBars.enter().append("rect").attr("class", function(d) {
          return "handle-bar handle-bar--" + d.type;
        });
        handleBars.attr("x", function(d) {
          if (d.type === "w") {
            return Math.max(selection2[0] + handleBarXDiff, self2.maxSelectionRange[0] - handleXDiff + handleBarXDiff);
          } else if (d.type === "e") {
            return Math.min(selection2[1] + handleBarXDiff, self2.maxSelectionRange[1] + handleXDiff + handleBarXDiff);
          }
        }).attr("y", handleYBarDiff).attr("width", handleBarWidth).attr("height", handleBarHeight).attr("cursor", "ew-resize");
        if (zoombarType === ZoomBarTypes.SLIDER_VIEW) {
          this.updateSliderSelectedArea(selection2);
        }
        this.updateClipPath(svg, this.clipId, selection2[0], 0, selection2[1] - selection2[0], handleHeight);
      };
      ZoomBar2.prototype.updateSliderSelectedArea = function(selection2) {
        var zoombarType = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "type");
        var zoombarHeight = zoomBar.height[zoombarType];
        DOMUtils.getSVGElementSize(this.parent, {
          useAttrs: true
        }).width;
        var axesMargins = this.model.get("axesMargins");
        if (axesMargins && axesMargins.left) {
          axesMargins.left;
        }
        var svg = this.getComponentContainer();
        var container = svg.select("svg.zoom-container");
        DOMUtils.appendOrSelect(container, "rect.zoom-slider-selected-area").attr("x", selection2[0]).attr("y", zoombarHeight / 2 - 1).attr("width", selection2[1] - selection2[0]).attr("height", 2);
      };
      ZoomBar2.prototype.renderZoomBarArea = function(container, querySelector, data, clipId) {
        var cartesianScales = this.services.cartesianScales;
        var mainXAxisPosition = cartesianScales.getMainXAxisPosition();
        var mainYAxisPosition = cartesianScales.getMainYAxisPosition();
        var mainXScaleType = cartesianScales.getMainXScaleType();
        var mainYScaleType = cartesianScales.getMainYScaleType();
        var accessorFunction = function(scale, scaleType, axisPosition) {
          return function(d, i) {
            return cartesianScales.getValueFromScale(scale, scaleType, axisPosition, d, i);
          };
        };
        var xAccessor = accessorFunction(this.xScale, mainXScaleType, mainXAxisPosition);
        var yAccessor = accessorFunction(this.yScale, mainYScaleType, mainYAxisPosition);
        var zoombarType = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "type");
        var zoombarHeight = zoomBar.height[zoombarType];
        var areaGenerator = area_default().x(function(d, i) {
          return xAccessor(d, i);
        }).y0(zoombarHeight).y1(function(d, i) {
          return zoombarHeight - yAccessor(d, i);
        });
        var areaGraph = DOMUtils.appendOrSelect(container, querySelector).datum(data).attr("d", areaGenerator);
        if (clipId) {
          areaGraph.attr("clip-path", "url(#" + clipId + ")");
        }
      };
      ZoomBar2.prototype.updateClipPath = function(svg, clipId, x3, y3, width, height) {
        var zoomBarClipPath = DOMUtils.appendOrSelect(svg, "clipPath").attr("id", clipId);
        DOMUtils.appendOrSelect(zoomBarClipPath, "rect").attr("x", x3).attr("y", y3).attr("width", width).attr("height", height);
      };
      ZoomBar2.prototype.compensateDataForDefaultDomain = function(data, defaultDomain) {
        if (!data || data.length < 2) {
          return;
        }
        var zoomBarData = Tools.clone(data);
        var domainIdentifier = this.services.cartesianScales.getDomainIdentifier();
        var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();
        if (Number(defaultDomain[0]) < Number(zoomBarData[0][domainIdentifier])) {
          var newDatum = {};
          newDatum[domainIdentifier] = defaultDomain[0];
          newDatum[rangeIdentifier] = 0;
          zoomBarData.unshift(newDatum);
        }
        if (Number(defaultDomain[1]) > Number(zoomBarData[zoomBarData.length - 1][domainIdentifier])) {
          var newDatum = {};
          newDatum[domainIdentifier] = defaultDomain[1];
          newDatum[rangeIdentifier] = 0;
          zoomBarData.push(newDatum);
        }
        return zoomBarData;
      };
      ZoomBar2.prototype.renderZoomBarBaseline = function(container, startX, endX, skeletonClass) {
        if (skeletonClass === void 0) {
          skeletonClass = false;
        }
        var zoombarType = Tools.getProperty(this.model.getOptions(), "zoomBar", AxisPositions.TOP, "type");
        var zoombarHeight = zoomBar.height[zoombarType];
        var baselineGenerator = line_default()([
          [startX, zoombarHeight],
          [endX, zoombarHeight]
        ]);
        DOMUtils.appendOrSelect(container, "path.zoom-bg-baseline").attr("d", baselineGenerator).classed("zoom-bg-baseline-skeleton", skeletonClass).style("stroke", skeletonClass ? "url(#" + this.services.domUtils.generateElementIDString("shimmer-lines") + ")" : null);
      };
      ZoomBar2.prototype.renderSkeleton = function(container, startX, endX) {
        this.renderZoomBarArea(container, "path.zoom-graph-area-unselected", [], null);
        this.renderZoomBarArea(container, "path.zoom-graph-area", [], this.clipId);
        this.brush.on("start brush end", null);
        DOMUtils.appendOrSelect(this.getComponentContainer(), this.brushSelector).html(null);
        var zoombarType = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "type");
        if (zoombarType === ZoomBarTypes.GRAPH_VIEW) {
          this.renderZoomBarBaseline(container, startX, endX, true);
        }
      };
      ZoomBar2.prototype.destroy = function() {
        this.brush.on("start brush end", null);
        this.services.events.removeEventListener(Events$1.ZoomBar.UPDATE, this.render.bind(this));
      };
      return ZoomBar2;
    }(Component);
    __spreadArrays$f = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    Chart = function() {
      function Chart2(holder, chartConfigs) {
        this.services = {
          domUtils: DOMUtils,
          files: Files,
          events: Events,
          gradientUtils: GradientUtils,
          transitions: Transitions,
          canvasZoom: CanvasZoom
        };
        this.model = new ChartModel(this.services);
      }
      Chart2.prototype.init = function(holder, chartConfigs) {
        var _this = this;
        this.model.set({ holder }, { skipUpdate: true });
        Object.keys(this.services).forEach(function(serviceName) {
          var serviceObj = _this.services[serviceName];
          _this.services[serviceName] = new serviceObj(_this.model, _this.services);
        });
        this.services.events.addEventListener(Events$1.Model.UPDATE, function(e) {
          var animate = !!Tools.getProperty(e, "detail", "animate");
          _this.update(animate);
        });
        this.model.setData(chartConfigs.data);
        this.services.events.addEventListener(Events$1.Chart.RESIZE, function() {
          _this.update(false);
        });
        this.components = this.getComponents();
        this.update();
      };
      Chart2.prototype.getComponents = function() {
        console.error("getComponents() method is not implemented");
        return null;
      };
      Chart2.prototype.update = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        if (!this.components) {
          return;
        }
        Object.keys(this.services).forEach(function(serviceName) {
          var serviceObj = _this.services[serviceName];
          serviceObj.update();
        });
        this.components.forEach(function(component4) {
          return component4.render(animate);
        });
        var pendingTransitions = this.services.transitions.getPendingTransitions();
        var promises = Object.keys(pendingTransitions).map(function(transitionID) {
          var transition2 = pendingTransitions[transitionID];
          return transition2.end().catch(function(e) {
            return e;
          });
        });
        Promise.all(promises).then(function() {
          return _this.services.events.dispatchEvent(Events$1.Chart.RENDER_FINISHED);
        });
      };
      Chart2.prototype.destroy = function() {
        this.components.forEach(function(component4) {
          return component4.destroy();
        });
        this.services.domUtils.getHolder().remove();
        this.model.set({ destroyed: true }, { skipUpdate: true });
      };
      Chart2.prototype.getChartComponents = function(graphFrameComponents, configs) {
        var options2 = this.model.getOptions();
        var toolbarEnabled = Tools.getProperty(options2, "toolbar", "enabled");
        var legendComponent = {
          id: "legend",
          components: [new Legend(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED
        };
        var isZoomEnabled = Tools.getProperty(options2, "canvasZoom", "enabled");
        if (isZoomEnabled && isZoomEnabled === true) {
          graphFrameComponents.push(new CanvasChartClip(this.model, this.services));
        }
        var titleAvailable = !!this.model.getOptions().title;
        var titleComponent = {
          id: "title",
          components: [new Title(this.model, this.services)],
          growth: LayoutGrowth.STRETCH
        };
        var toolbarComponent = {
          id: "toolbar",
          components: [new Toolbar(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED
        };
        var headerComponent = {
          id: "header",
          components: [
            new LayoutComponent(this.model, this.services, __spreadArrays$f([
              titleComponent
            ], toolbarEnabled ? [toolbarComponent] : []), {
              direction: LayoutDirection.ROW,
              alignItems: LayoutAlignItems.CENTER
            })
          ],
          growth: LayoutGrowth.PREFERRED
        };
        var graphFrameComponent = {
          id: "graph-frame",
          components: graphFrameComponents,
          growth: LayoutGrowth.STRETCH,
          renderType: Tools.getProperty(configs, "graphFrameRenderType") || RenderTypes.SVG
        };
        var isLegendEnabled = Tools.getProperty(configs, "excludeLegend") !== true && options2.legend.enabled !== false;
        var fullFrameComponentDirection = LayoutDirection.COLUMN;
        if (isLegendEnabled) {
          var legendPosition = Tools.getProperty(options2, "legend", "position");
          if (legendPosition === "left") {
            fullFrameComponentDirection = LayoutDirection.ROW;
            if (!options2.legend.orientation) {
              options2.legend.orientation = LegendOrientations.VERTICAL;
            }
          } else if (legendPosition === "right") {
            fullFrameComponentDirection = LayoutDirection.ROW_REVERSE;
            if (!options2.legend.orientation) {
              options2.legend.orientation = LegendOrientations.VERTICAL;
            }
          } else if (legendPosition === "bottom") {
            fullFrameComponentDirection = LayoutDirection.COLUMN_REVERSE;
          }
        }
        var legendSpacerComponent = {
          id: "spacer",
          components: [new Spacer(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED
        };
        var fullFrameComponent = {
          id: "full-frame",
          components: [
            new LayoutComponent(this.model, this.services, __spreadArrays$f(isLegendEnabled ? [legendComponent] : [], isLegendEnabled ? [legendSpacerComponent] : [], [
              graphFrameComponent
            ]), {
              direction: fullFrameComponentDirection
            })
          ],
          growth: LayoutGrowth.STRETCH
        };
        var topLevelLayoutComponents = [];
        if (titleAvailable || toolbarEnabled) {
          topLevelLayoutComponents.push(headerComponent);
          var titleSpacerComponent = {
            id: "spacer",
            components: [
              new Spacer(this.model, this.services, toolbarEnabled ? { size: 15 } : void 0)
            ],
            growth: LayoutGrowth.PREFERRED
          };
          topLevelLayoutComponents.push(titleSpacerComponent);
        }
        topLevelLayoutComponents.push(fullFrameComponent);
        return [
          new Tooltip(this.model, this.services),
          new Modal(this.model, this.services),
          new LayoutComponent(this.model, this.services, topLevelLayoutComponents, {
            direction: LayoutDirection.COLUMN
          })
        ];
      };
      return Chart2;
    }();
    __extends$D = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$e = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    ChartModelCartesian = function(_super) {
      __extends$D(ChartModelCartesian2, _super);
      function ChartModelCartesian2(services) {
        var _this = _super.call(this, services) || this;
        _this.axisFlavor = AxisFlavor.DEFAULT;
        return _this;
      }
      ChartModelCartesian2.prototype.assignRangeAndDomains = function() {
        var cartesianScales = this.services.cartesianScales;
        var options2 = this.getOptions();
        var isDualAxes = cartesianScales.isDualAxes();
        var scales = {
          primaryDomain: cartesianScales.domainAxisPosition,
          primaryRange: cartesianScales.rangeAxisPosition,
          secondaryDomain: null,
          secondaryRange: null
        };
        if (isDualAxes) {
          scales.secondaryDomain = cartesianScales.secondaryDomainAxisPosition;
          scales.secondaryRange = cartesianScales.secondaryRangeAxisPosition;
        }
        Object.keys(scales).forEach(function(scale) {
          var position2 = scales[scale];
          if (cartesianScales.scales[position2]) {
            scales[scale] = {
              position: position2,
              label: cartesianScales.getScaleLabel(position2),
              identifier: Tools.getProperty(options2, "axes", position2, "mapsTo")
            };
          } else {
            scales[scale] = null;
          }
        });
        return scales;
      };
      ChartModelCartesian2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var cartesianScales = this.services.cartesianScales;
        var _a22 = this.assignRangeAndDomains(), primaryDomain = _a22.primaryDomain, primaryRange = _a22.primaryRange, secondaryDomain = _a22.secondaryDomain, secondaryRange = _a22.secondaryRange;
        var domainScaleType = cartesianScales.getDomainAxisScaleType();
        var domainValueFormatter;
        if (domainScaleType === ScaleTypes.TIME) {
          domainValueFormatter = function(d) {
            return format2(d, "MMM d, yyyy");
          };
        }
        var result = __spreadArrays$e([
          __spreadArrays$e([
            "Group",
            primaryDomain.label,
            primaryRange.label
          ], secondaryDomain ? [secondaryDomain.label] : [], secondaryRange ? [secondaryRange.label] : [])
        ], displayData.map(function(datum2) {
          return __spreadArrays$e([
            datum2[groupMapsTo],
            datum2[primaryDomain.identifier] === null ? "&ndash;" : domainValueFormatter ? domainValueFormatter(datum2[primaryDomain.identifier]) : datum2[primaryDomain.identifier],
            datum2[primaryRange.identifier] === null || isNaN(datum2[primaryRange.identifier]) ? "&ndash;" : datum2[primaryRange.identifier].toLocaleString()
          ], secondaryDomain ? [
            datum2[secondaryDomain.identifier] === null ? "&ndash;" : datum2[secondaryDomain.identifier]
          ] : [], secondaryRange ? [
            datum2[secondaryRange.identifier] === null || isNaN(datum2[secondaryRange.identifier]) ? "&ndash;" : datum2[secondaryRange.identifier]
          ] : []);
        }));
        return result;
      };
      ChartModelCartesian2.prototype.setData = function(newData) {
        var data;
        if (newData) {
          data = _super.prototype.setData.call(this, newData);
          if (Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "enabled")) {
            var definedZoomBarData = Tools.getProperty(this.getOptions(), "zoomBar", AxisPositions.TOP, "data");
            this.setZoomBarData(definedZoomBarData);
          }
        }
        return data;
      };
      ChartModelCartesian2.prototype.setZoomBarData = function(newZoomBarData) {
        var sanitizedData = newZoomBarData ? this.sanitize(Tools.clone(newZoomBarData)) : this.getDisplayData();
        var zoomBarNormalizedValues = sanitizedData;
        var cartesianScales = this.services.cartesianScales;
        if (sanitizedData && cartesianScales.domainAxisPosition && cartesianScales.rangeAxisPosition) {
          var domainIdentifier_1 = cartesianScales.getDomainIdentifier();
          var rangeIdentifier_1 = cartesianScales.getRangeIdentifier();
          var allDates = sanitizedData.map(function(datum2) {
            return datum2[domainIdentifier_1].getTime();
          });
          allDates = Tools.removeArrayDuplicates(allDates).sort();
          zoomBarNormalizedValues = allDates.map(function(date2) {
            var sum2 = 0;
            var datum2 = {};
            sanitizedData.forEach(function(data) {
              if (data[domainIdentifier_1].getTime() === date2) {
                sum2 += data[rangeIdentifier_1];
              }
            });
            datum2[domainIdentifier_1] = new Date(date2);
            datum2[rangeIdentifier_1] = sum2;
            return datum2;
          });
        }
        this.set({ zoomBarData: zoomBarNormalizedValues });
      };
      ChartModelCartesian2.prototype.getZoomBarData = function() {
        return this.get("zoomBarData");
      };
      ChartModelCartesian2.prototype.sanitizeDateValues = function(data) {
        var options2 = this.getOptions();
        if (!options2.axes) {
          return data;
        }
        var keysToCheck = [];
        Object.keys(AxisPositions).forEach(function(axisPositionKey) {
          var axisPosition = AxisPositions[axisPositionKey];
          var axisOptions = options2.axes[axisPosition];
          if (axisOptions && axisOptions.scaleType === ScaleTypes.TIME) {
            var axisMapsTo = axisOptions.mapsTo;
            if (axisMapsTo !== null || axisMapsTo !== void 0) {
              keysToCheck.push(axisMapsTo);
            }
          }
        });
        if (keysToCheck.length > 0) {
          data.forEach(function(datum2) {
            keysToCheck.forEach(function(key2) {
              if (Tools.getProperty(datum2, key2, "getTime") === null) {
                datum2[key2] = new Date(datum2[key2]);
              }
            });
          });
        }
        return data;
      };
      ChartModelCartesian2.prototype.sanitize = function(data) {
        data = _super.prototype.sanitize.call(this, data);
        data = this.sanitizeDateValues(data);
        return data;
      };
      return ChartModelCartesian2;
    }(ChartModel);
    __extends$C = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$d = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    AxisChart = function(_super) {
      __extends$C(AxisChart2, _super);
      function AxisChart2(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.services = Object.assign(_this.services, {
          cartesianScales: CartesianScales,
          curves: Curves,
          zoom: Zoom
        });
        _this.model = new ChartModelCartesian(_this.services);
        return _this;
      }
      AxisChart2.prototype.getAxisChartComponents = function(graphFrameComponents, configs) {
        var options2 = this.model.getOptions();
        var isZoomBarEnabled = Tools.getProperty(options2, "zoomBar", AxisPositions.TOP, "enabled");
        var toolbarEnabled = Tools.getProperty(options2, "toolbar", "enabled");
        this.services.cartesianScales.determineAxisDuality();
        this.services.cartesianScales.findDomainAndRangeAxes();
        this.services.cartesianScales.determineOrientation();
        var mainXAxisPosition = this.services.cartesianScales.getMainXAxisPosition();
        var mainXScaleType = Tools.getProperty(options2, "axes", mainXAxisPosition, "scaleType");
        var zoomBarEnabled = isZoomBarEnabled && mainXAxisPosition === AxisPositions.BOTTOM && mainXScaleType === ScaleTypes.TIME;
        var isZoomBarLocked = this.services.zoom.isZoomBarLocked(AxisPositions.TOP);
        var titleAvailable = !!this.model.getOptions().title;
        var titleComponent = {
          id: "title",
          components: [new Title(this.model, this.services)],
          growth: LayoutGrowth.STRETCH
        };
        var toolbarComponent = {
          id: "toolbar",
          components: [new Toolbar(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED
        };
        var headerComponent = {
          id: "header",
          components: [
            new LayoutComponent(this.model, this.services, __spreadArrays$d([
              titleComponent
            ], toolbarEnabled ? [toolbarComponent] : []), {
              direction: LayoutDirection.ROW,
              alignItems: LayoutAlignItems.CENTER
            })
          ],
          growth: LayoutGrowth.PREFERRED
        };
        var legendComponent = {
          id: "legend",
          components: [new Legend(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED
        };
        if (zoomBarEnabled && !isZoomBarLocked) {
          graphFrameComponents.push(new ChartClip(this.model, this.services), new ChartBrush(this.model, this.services));
        }
        graphFrameComponents.push(new Threshold(this.model, this.services));
        graphFrameComponents.push(new Highlight(this.model, this.services));
        var graphFrameComponent = {
          id: "graph-frame",
          components: graphFrameComponents,
          growth: LayoutGrowth.STRETCH,
          renderType: RenderTypes.SVG
        };
        var isLegendEnabled = Tools.getProperty(configs, "legend", "enabled") !== false && this.model.getOptions().legend.enabled !== false;
        var fullFrameComponentDirection = LayoutDirection.COLUMN;
        if (isLegendEnabled) {
          var legendPosition = Tools.getProperty(this.model.getOptions(), "legend", "position");
          if (legendPosition === LegendPositions.LEFT) {
            fullFrameComponentDirection = LayoutDirection.ROW;
            if (!this.model.getOptions().legend.orientation) {
              this.model.getOptions().legend.orientation = LegendOrientations.VERTICAL;
            }
          } else if (legendPosition === LegendPositions.RIGHT) {
            fullFrameComponentDirection = LayoutDirection.ROW_REVERSE;
            if (!this.model.getOptions().legend.orientation) {
              this.model.getOptions().legend.orientation = LegendOrientations.VERTICAL;
            }
          } else if (legendPosition === LegendPositions.BOTTOM) {
            fullFrameComponentDirection = LayoutDirection.COLUMN_REVERSE;
          }
        }
        var legendSpacerComponent = {
          id: "spacer",
          components: [new Spacer(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED
        };
        var fullFrameComponent = {
          id: "full-frame",
          components: [
            new LayoutComponent(this.model, this.services, __spreadArrays$d(isLegendEnabled ? [legendComponent] : [], isLegendEnabled ? [legendSpacerComponent] : [], [
              graphFrameComponent
            ]), {
              direction: fullFrameComponentDirection
            })
          ],
          growth: LayoutGrowth.STRETCH
        };
        var zoomBarComponent = {
          id: "zoom-bar",
          components: [new ZoomBar(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED,
          renderType: RenderTypes.SVG
        };
        var topLevelLayoutComponents = [];
        if (titleAvailable || toolbarEnabled) {
          topLevelLayoutComponents.push(headerComponent);
          var titleSpacerComponent = {
            id: "spacer",
            components: [
              new Spacer(this.model, this.services, toolbarEnabled ? { size: 15 } : void 0)
            ],
            growth: LayoutGrowth.PREFERRED
          };
          topLevelLayoutComponents.push(titleSpacerComponent);
        }
        if (zoomBarEnabled) {
          topLevelLayoutComponents.push(zoomBarComponent);
        }
        topLevelLayoutComponents.push(fullFrameComponent);
        return [
          new AxisChartsTooltip(this.model, this.services),
          new Modal(this.model, this.services),
          new LayoutComponent(this.model, this.services, topLevelLayoutComponents, {
            direction: LayoutDirection.COLUMN
          })
        ];
      };
      return AxisChart2;
    }(Chart);
    __extends$B = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$B(AreaChart, _super);
      function AreaChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(Tools.clone(options.areaChart), chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      AreaChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Ruler(this.model, this.services),
          new Line(this.model, this.services),
          new Area(this.model, this.services),
          new Scatter(this.model, this.services, {
            fadeInOnChartHolderMouseover: true,
            handleThresholds: true
          }),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.GRID
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return AreaChart;
    })(AxisChart);
    __extends$A = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$A(StackedAreaChart, _super);
      function StackedAreaChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.stackedAreaChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      StackedAreaChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new StackedRuler(this.model, this.services),
          new StackedArea(this.model, this.services),
          new Line(this.model, this.services, { stacked: true }),
          new StackedScatter(this.model, this.services, {
            fadeInOnChartHolderMouseover: true,
            handleThresholds: true,
            stacked: true
          }),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.GRID
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return StackedAreaChart;
    })(AxisChart);
    __extends$z = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$z(SimpleBarChart, _super);
      function SimpleBarChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.simpleBarChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      SimpleBarChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new SimpleBar(this.model, this.services),
          new ZeroLine(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.VERT_OR_HORIZ
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return SimpleBarChart;
    })(AxisChart);
    __extends$y = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$y(GroupedBarChart, _super);
      function GroupedBarChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.groupedBarChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      GroupedBarChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new GroupedBar(this.model, this.services),
          new ZeroLine(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.VERT_OR_HORIZ
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return GroupedBarChart;
    })(AxisChart);
    __extends$x = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$x(StackedBarChart, _super);
      function StackedBarChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.stackedBarChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      StackedBarChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new StackedRuler(this.model, this.services),
          new StackedBar(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.VERT_OR_HORIZ
          }),
          new ZeroLine(this.model, this.services)
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return StackedBarChart;
    })(AxisChart);
    __extends$w = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$c = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    BoxplotChartModel = function(_super) {
      __extends$w(BoxplotChartModel2, _super);
      function BoxplotChartModel2(services) {
        return _super.call(this, services) || this;
      }
      BoxplotChartModel2.prototype.getBoxQuartiles = function(d) {
        return {
          q_25: quantile(d, 0.25),
          q_50: quantile(d, 0.5),
          q_75: quantile(d, 0.75)
        };
      };
      BoxplotChartModel2.prototype.getBoxplotData = function() {
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var groupedData = this.getGroupedData();
        var boxplotData = [];
        var _loop_1 = function(group2, data2) {
          var _a3;
          var rangeIdentifier = this_1.services.cartesianScales.getRangeIdentifier();
          var values = data2.map(function(d) {
            return d[rangeIdentifier];
          }).sort(ascending2);
          var record = (_a3 = {}, _a3[groupMapsTo] = group2, _a3.counts = values, _a3.quartiles = this_1.getBoxQuartiles(values), _a3.outliers = null, _a3.whiskers = null, _a3);
          var q1 = record.quartiles.q_25;
          var q3 = record.quartiles.q_75;
          var iqr = (q3 - q1) * 1.5;
          var irq1 = q1 - iqr;
          var irq3 = q3 + iqr;
          var outliers = [];
          var normalValues = [];
          for (var _i2 = 0, values_1 = values; _i2 < values_1.length; _i2++) {
            var value2 = values_1[_i2];
            if (value2 < irq1) {
              outliers.push(value2);
            } else if (value2 > irq3) {
              outliers.push(value2);
            } else {
              normalValues.push(value2);
            }
          }
          record.outliers = outliers;
          var minNormalValue = min(normalValues);
          var maxNormalValue = max(normalValues);
          record.whiskers = {
            min: minNormalValue ? minNormalValue : min([
              record.quartiles.q_25,
              record.quartiles.q_50,
              record.quartiles.q_75
            ]),
            max: maxNormalValue ? maxNormalValue : max([
              record.quartiles.q_25,
              record.quartiles.q_50,
              record.quartiles.q_75
            ])
          };
          boxplotData.push(record);
        };
        var this_1 = this;
        for (var _i = 0, groupedData_1 = groupedData; _i < groupedData_1.length; _i++) {
          var _a22 = groupedData_1[_i], group = _a22.name, data = _a22.data;
          _loop_1(group, data);
        }
        return boxplotData;
      };
      BoxplotChartModel2.prototype.getTabularDataArray = function() {
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var boxplotData = this.getBoxplotData();
        var result = __spreadArrays$c([
          [
            "Group",
            "Minimum",
            "Q1",
            "Median",
            "Q3",
            "Maximum",
            "IQR",
            "Outlier(s)"
          ]
        ], boxplotData.map(function(datum2) {
          var outliers = Tools.getProperty(datum2, "outliers");
          if (outliers === null || outliers.length === 0) {
            outliers = ["&ndash;"];
          }
          return [
            datum2[groupMapsTo],
            Tools.getProperty(datum2, "whiskers", "min") !== null ? Tools.getProperty(datum2, "whiskers", "min").toLocaleString() : "&ndash;",
            Tools.getProperty(datum2, "quartiles", "q_25") !== null ? Tools.getProperty(datum2, "quartiles", "q_25").toLocaleString() : "&ndash;",
            Tools.getProperty(datum2, "quartiles", "q_50") !== null ? Tools.getProperty(datum2, "quartiles", "q_50").toLocaleString() : "&ndash;",
            Tools.getProperty(datum2, "quartiles", "q_75") !== null ? Tools.getProperty(datum2, "quartiles", "q_75").toLocaleString() : "&ndash;",
            Tools.getProperty(datum2, "whiskers", "max") !== null ? Tools.getProperty(datum2, "whiskers", "max").toLocaleString() : "&ndash;",
            Tools.getProperty(datum2, "quartiles", "q_75") !== null && Tools.getProperty(datum2, "quartiles", "q_25") !== null ? (Tools.getProperty(datum2, "quartiles", "q_75") - Tools.getProperty(datum2, "quartiles", "q_25")).toLocaleString() : "&ndash;",
            outliers.map(function(d) {
              return d.toLocaleString();
            }).join(",")
          ];
        }));
        return result;
      };
      BoxplotChartModel2.prototype.setColorClassNames = function() {
        var numberOfColors = 1;
        var colorPairingOptions = Tools.getProperty(this.getOptions(), "color", "pairing");
        var pairingOption = Tools.getProperty(colorPairingOptions, "option");
        var colorPairingCounts = color2.pairingOptions;
        pairingOption = pairingOption <= colorPairingCounts[numberOfColors + "-color"] ? pairingOption : 1;
        var colorPairing = this.allDataGroups.map(function(dataGroup, index5) {
          return numberOfColors + "-" + pairingOption + "-1";
        });
        this.colorClassNames = ordinal().range(colorPairing).domain(this.allDataGroups);
      };
      return BoxplotChartModel2;
    }(ChartModelCartesian);
    __extends$v = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$v(BoxplotChart, _super);
      function BoxplotChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new BoxplotChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.boxplotChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      BoxplotChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Boxplot(this.model, this.services),
          new ZeroLine(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.VERT_OR_HORIZ
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents, {
          legend: {
            enabled: false
          }
        });
        return components;
      };
      return BoxplotChart;
    })(AxisChart);
    __extends$u = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$u(BubbleChart, _super);
      function BubbleChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.bubbleChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      BubbleChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Ruler(this.model, this.services),
          new Bubble(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.GRID
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return BubbleChart;
    })(AxisChart);
    __extends$t = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$b = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    BulletChartModel = function(_super) {
      __extends$t(BulletChartModel2, _super);
      function BulletChartModel2(services) {
        return _super.call(this, services) || this;
      }
      BulletChartModel2.prototype.getMatchingRangeIndexForDatapoint = function(datum2) {
        var matchingRangeIndex;
        for (var i = datum2.ranges.length - 1; i > 0; i--) {
          var range2 = datum2.ranges[i];
          if (datum2.value >= range2) {
            matchingRangeIndex = i;
            return matchingRangeIndex;
          }
        }
        return 0;
      };
      BulletChartModel2.prototype.getTabularDataArray = function() {
        var _this = this;
        var displayData = this.getDisplayData();
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();
        var performanceAreaTitles = Tools.getProperty(options2, "bullet", "performanceAreaTitles");
        var result = __spreadArrays$b([
          ["Title", "Group", "Value", "Target", "Percentage", "Performance"]
        ], displayData.map(function(datum2) {
          return [
            datum2["title"],
            datum2[groupMapsTo],
            datum2["value"] === null ? "&ndash;" : datum2["value"],
            Tools.getProperty(datum2, "marker") === null ? "&ndash;" : datum2["marker"],
            Tools.getProperty(datum2, "marker") === null ? "&ndash;" : Math.floor(datum2[rangeIdentifier] / datum2.marker * 100) + "%",
            performanceAreaTitles[_this.getMatchingRangeIndexForDatapoint(datum2)]
          ];
        }));
        return result;
      };
      return BulletChartModel2;
    }(ChartModelCartesian);
    __extends$s = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$s(BulletChart, _super);
      function BulletChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new BulletChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.bulletChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      BulletChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Bullet(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.GRID
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return BulletChart;
    })(AxisChart);
    __extends$r = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$a = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    ChartModelBinned = function(_super) {
      __extends$r(ChartModelBinned2, _super);
      function ChartModelBinned2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ChartModelBinned2.prototype.getTabularDataArray = function() {
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var binnedStackedData = this.getBinnedStackedData();
        var result = __spreadArrays$a([
          __spreadArrays$a([
            get_default(options2, "bins.rangeLabel") || "Range"
          ], binnedStackedData.map(function(datum2) {
            return get_default(datum2, "0." + groupMapsTo);
          }))
        ], get_default(binnedStackedData, 0).map(function(d, i) {
          return __spreadArrays$a([
            get_default(d, "data.x0") + " \u2013 " + get_default(d, "data.x1")
          ], binnedStackedData.map(function(datum2) {
            return get_default(datum2[i], "data." + get_default(datum2[i], groupMapsTo));
          }));
        }));
        return result;
      };
      return ChartModelBinned2;
    }(ChartModelCartesian);
    __extends$q = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$q(HistogramChart, _super);
      function HistogramChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new ChartModelBinned(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.histogramChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        _this.update();
        return _this;
      }
      HistogramChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new BinnedRuler(this.model, this.services),
          new Histogram(this.model, this.services)
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return HistogramChart;
    })(AxisChart);
    __extends$p = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    LineChart = function(_super) {
      __extends$p(LineChart2, _super);
      function LineChart2(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.lineChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      LineChart2.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Ruler(this.model, this.services),
          new Line(this.model, this.services),
          new Scatter(this.model, this.services, { handleThresholds: true }),
          new SkeletonLines(this.model, this.services),
          new ZeroLine(this.model, this.services)
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return LineChart2;
    }(AxisChart);
    __extends$o = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$o(LollipopChart, _super);
      function LollipopChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.lollipopChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      LollipopChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Ruler(this.model, this.services),
          new Lollipop(this.model, this.services),
          new Scatter(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.GRID
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return LollipopChart;
    })(AxisChart);
    __extends$n = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$n(ScatterChart, _super);
      function ScatterChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.scatterChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      ScatterChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Ruler(this.model, this.services),
          new Scatter(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.GRID
          })
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return ScatterChart;
    })(AxisChart);
    __extends$m = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$9 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    PieChartModel = function(_super) {
      __extends$m(PieChartModel2, _super);
      function PieChartModel2(services) {
        return _super.call(this, services) || this;
      }
      PieChartModel2.prototype.getTabularData = function(data) {
        var tabularData = _super.prototype.getTabularData.call(this, data);
        if (data !== tabularData) {
          tabularData.forEach(function(d) {
            if (d.key && d.key !== d.group) {
              d.group = d.key;
            }
          });
        }
        return tabularData;
      };
      PieChartModel2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var result = __spreadArrays$9([
          ["Group", "Value"]
        ], displayData.map(function(datum2) {
          return [
            datum2[groupMapsTo],
            datum2["value"] === null ? "&ndash;" : datum2["value"].toLocaleString()
          ];
        }));
        return result;
      };
      PieChartModel2.prototype.sanitize = function(data) {
        var tabularData = this.getTabularData(data);
        return tabularData.sort(function(a2, b) {
          return b.value - a2.value;
        });
      };
      return PieChartModel2;
    }(ChartModel);
    __extends$l = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    PieChart = function(_super) {
      __extends$l(PieChart2, _super);
      function PieChart2(holder, chartConfigs, extending) {
        if (extending === void 0) {
          extending = false;
        }
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new PieChartModel(_this.services);
        if (extending) {
          return _this;
        }
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.pieChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      PieChart2.prototype.getComponents = function() {
        var graphFrameComponents = [
          new Pie(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.PIE
          })
        ];
        var components = this.getChartComponents(graphFrameComponents);
        return components;
      };
      return PieChart2;
    }(Chart);
    __extends$k = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$k(DonutChart, _super);
      function DonutChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs, true) || this;
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.donutChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      DonutChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new Donut(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.DONUT
          })
        ];
        var components = this.getChartComponents(graphFrameComponents);
        return components;
      };
      return DonutChart;
    })(PieChart);
    __extends$j = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$8 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    MeterChartModel = function(_super) {
      __extends$j(MeterChartModel2, _super);
      function MeterChartModel2(services) {
        return _super.call(this, services) || this;
      }
      MeterChartModel2.prototype.getMaximumDomain = function(data) {
        var max22 = data.reduce(function(accumulator, datum2) {
          return accumulator + datum2.value;
        }, 0);
        return max22;
      };
      MeterChartModel2.prototype.getFillColor = function(group) {
        var options2 = this.getOptions();
        var userProvidedScale = Tools.getProperty(options2, "color", "scale");
        var status = this.getStatus();
        if (userProvidedScale || !status) {
          return _super.prototype.getFillColor.call(this, group);
        } else {
          return null;
        }
      };
      MeterChartModel2.prototype.getStatus = function() {
        var options2 = this.getOptions();
        var dataValues = Tools.getProperty(this.getDisplayData());
        var totalValue = (dataValues ? dataValues.reduce(function(previous, current) {
          return { value: previous.value + current.value };
        }) : 0).value;
        var boundedValue = Tools.getProperty(options2, "meter", "proportional") ? totalValue : totalValue > 100 ? 100 : totalValue;
        var allRanges = Tools.getProperty(options2, "meter", "status", "ranges");
        if (allRanges) {
          var result = allRanges.filter(function(step) {
            return step.range[0] <= boundedValue && boundedValue <= step.range[1];
          });
          if (result.length > 0) {
            return result[0].status;
          }
        }
        return null;
      };
      MeterChartModel2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var status = this.getStatus();
        var proportional = Tools.getProperty(options2, "meter", "proportional");
        var result = [];
        var domainMax;
        if (proportional === null) {
          domainMax = 100;
          var datum2 = displayData[0];
          result = [
            __spreadArrays$8(["Group", "Value"], status ? ["Status"] : []),
            __spreadArrays$8([
              datum2[groupMapsTo],
              datum2["value"]
            ], status ? [status] : [])
          ];
        } else {
          var total = Tools.getProperty(proportional, "total");
          domainMax = total ? total : this.getMaximumDomain(displayData);
          result = __spreadArrays$8([
            ["Group", "Value", "Percentage of total"]
          ], displayData.map(function(datum22) {
            return [
              datum22[groupMapsTo],
              datum22["value"],
              (datum22["value"] / domainMax * 100).toFixed(2) + " %"
            ];
          }));
        }
        return result;
      };
      return MeterChartModel2;
    }(ChartModel);
    __extends$i = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$1 = globalThis && globalThis.__assign || function() {
      __assign$1 = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      return __assign$1.apply(this, arguments);
    };
    Meter = function(_super) {
      __extends$i(Meter2, _super);
      function Meter2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "meter";
        _this.renderType = RenderTypes.SVG;
        return _this;
      }
      Meter2.prototype.getStackedBounds = function(data, scale) {
        var prevX = 0;
        var stackedData = data.map(function(d, i) {
          if (i !== 0) {
            prevX += scale(d.value);
            return __assign$1(__assign$1({}, d), { width: Math.abs(scale(d.value) - meter.dividerWidth), x: prevX - scale(d.value) });
          } else {
            prevX = scale(d.value);
            return __assign$1(__assign$1({}, d), { width: Math.abs(scale(d.value) - meter.dividerWidth), x: 0 });
          }
        });
        return stackedData;
      };
      Meter2.prototype.render = function(animate) {
        var _this = this;
        if (animate === void 0) {
          animate = true;
        }
        var self2 = this;
        var svg = this.getComponentContainer();
        var options2 = this.getOptions();
        var proportional = Tools.getProperty(options2, "meter", "proportional");
        var data = this.model.getDisplayData();
        var status = this.model.getStatus();
        var width = DOMUtils.getSVGElementSize(svg, {
          useAttrs: true
        }).width;
        var groupMapsTo = options2.data.groupMapsTo;
        var domainMax;
        if (Tools.getProperty(options2, "meter", "proportional") === null) {
          domainMax = 100;
        } else {
          var total = Tools.getProperty(options2, "meter", "proportional", "total");
          domainMax = total ? total : this.model.getMaximumDomain(this.model.getDisplayData());
        }
        var xScale = linear3().domain([0, domainMax]).range([0, width]);
        var stackedData = this.getStackedBounds(data, xScale);
        var userProvidedHeight = Tools.getProperty(options2, "meter", "height");
        DOMUtils.appendOrSelect(svg, "rect.container").attr("x", 0).attr("y", 0).attr("width", width).attr("height", userProvidedHeight ? userProvidedHeight : proportional ? meter.height.proportional : meter.height.default);
        DOMUtils.appendOrSelect(svg, "line.rangeIndicator").attr("x1", width).attr("x2", width).attr("y1", 0).attr("y2", userProvidedHeight ? userProvidedHeight : proportional ? meter.height.proportional : meter.height.default);
        var valued = svg.selectAll("rect.value").data(stackedData);
        var className = status != null && !self2.model.isUserProvidedColorScaleValid() && !proportional ? "value status--" + status : "value";
        valued.enter().append("rect").classed("value", true).merge(valued).attr("x", function(d) {
          return d.x;
        }).attr("y", 0).attr("height", function() {
          var userProvidedHeight2 = Tools.getProperty(options2, "meter", "height");
          return userProvidedHeight2 ? userProvidedHeight2 : proportional ? meter.height.proportional : meter.height.default;
        }).attr("class", function(d) {
          return _this.model.getColorClassName({
            classNameTypes: [ColorClassNameTypes.FILL],
            dataGroupName: d[groupMapsTo],
            originalClassName: className
          });
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "meter-bar-update",
            animate
          });
        }).attr("width", function(d, i) {
          return d.value > domainMax ? xScale(domainMax) : d.width;
        }).style("fill", function(d) {
          return self2.model.getFillColor(d[groupMapsTo]);
        }).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "value").attr("aria-label", function(d) {
          return d.value;
        });
        valued.exit().remove();
        var peakValue = Tools.getProperty(options2, "meter", "peak");
        var peakData = peakValue;
        if (peakValue !== null) {
          if (peakValue > domainMax) {
            peakData = domainMax;
          } else if (peakValue < data[0].value) {
            peakData = data[0].value > domainMax ? domainMax : data[0].value;
          }
        }
        var peak = svg.selectAll("line.peak").data(peakData == null ? [] : [peakData]);
        peak.enter().append("line").classed("peak", true).merge(peak).attr("y1", 0).attr("y2", function() {
          var userProvidedHeight2 = Tools.getProperty(options2, "meter", "height");
          return userProvidedHeight2 ? userProvidedHeight2 : proportional ? meter.height.proportional : meter.height.default;
        }).transition().call(function(t) {
          return _this.services.transitions.setupTransition({
            transition: t,
            name: "peak-line-update",
            animate
          });
        }).attr("x1", function(d) {
          return xScale(d);
        }).attr("x2", function(d) {
          return xScale(d);
        }).attr("role", Roles.GRAPHICS_SYMBOL).attr("aria-roledescription", "peak").attr("aria-label", function(d) {
          return d;
        });
        peak.exit().remove();
        this.services.domUtils.setSVGMaxHeight();
        this.addEventListeners();
      };
      Meter2.prototype.addEventListeners = function() {
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var self2 = this;
        var proportional = Tools.getProperty(options2, "meter", "proportional");
        this.parent.selectAll("rect.value").on("mouseover", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Meter.METER_MOUSEOVER, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          if (proportional) {
            hoveredElement.classed("hovered", true);
            self2.services.events.dispatchEvent(Events$1.Tooltip.SHOW, {
              event,
              hoveredElement,
              items: [
                {
                  label: datum2[groupMapsTo],
                  value: datum2.value
                }
              ]
            });
          }
        }).on("mousemove", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Meter.METER_MOUSEMOVE, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          if (proportional) {
            self2.services.events.dispatchEvent(Events$1.Tooltip.MOVE, {
              event
            });
          }
        }).on("click", function(event, datum2) {
          self2.services.events.dispatchEvent(Events$1.Meter.METER_CLICK, {
            event,
            element: select_default2(this),
            datum: datum2
          });
        }).on("mouseout", function(event, datum2) {
          var hoveredElement = select_default2(this);
          self2.services.events.dispatchEvent(Events$1.Meter.METER_MOUSEOUT, {
            event,
            element: hoveredElement,
            datum: datum2
          });
          if (proportional) {
            hoveredElement.classed("hovered", false);
            self2.services.events.dispatchEvent(Events$1.Tooltip.HIDE, {
              hoveredElement
            });
          }
        });
      };
      Meter2.prototype.destroy = function() {
        this.parent.selectAll("rect.value").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("click", null);
      };
      return Meter2;
    }(Component);
    __extends$h = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$7 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    (function(_super) {
      __extends$h(MeterChart, _super);
      function MeterChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new MeterChartModel(_this.services);
        var options$1 = chartConfigs.options.meter.proportional ? Tools.merge(Tools.clone(options.proportionalMeterChart), chartConfigs.options) : Tools.merge(Tools.clone(options.meterChart), chartConfigs.options);
        _this.model.setOptions(options$1);
        _this.init(holder, chartConfigs);
        return _this;
      }
      MeterChart.prototype.getComponents = function() {
        var showLabels = Tools.getProperty(this.model.getOptions(), "meter", "showLabels");
        var meterComponents = __spreadArrays$7(showLabels ? [
          {
            id: "meter-title",
            components: [
              new MeterTitle(this.model, this.services)
            ],
            growth: LayoutGrowth.STRETCH,
            renderType: RenderTypes.SVG
          },
          {
            id: "spacer",
            components: [
              new Spacer(this.model, this.services, {
                size: 8
              })
            ],
            growth: LayoutGrowth.STRETCH
          }
        ] : [], [
          {
            id: "meter-graph",
            components: [new Meter(this.model, this.services)],
            growth: LayoutGrowth.STRETCH,
            renderType: RenderTypes.SVG
          }
        ]);
        var graphFrame = [
          new LayoutComponent(this.model, this.services, meterComponents, {
            direction: LayoutDirection.COLUMN
          })
        ];
        var components = this.getChartComponents(graphFrame, {
          graphFrameRenderType: RenderTypes.HTML
        });
        return components;
      };
      return MeterChart;
    })(Chart);
    __extends$g = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$6 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    RadarChartModel = function(_super) {
      __extends$g(RadarChartModel2, _super);
      function RadarChartModel2(services) {
        return _super.call(this, services) || this;
      }
      RadarChartModel2.prototype.getTabularDataArray = function() {
        var options2 = this.getOptions();
        var groupedData = this.getGroupedData();
        var _a22 = Tools.getProperty(options2, "radar", "axes"), angle = _a22.angle, value2 = _a22.value;
        var additionalHeaders = Tools.getProperty(groupedData, "0", "data").map(function(d) {
          return d[angle];
        });
        var result = __spreadArrays$6([
          __spreadArrays$6(["Group"], additionalHeaders)
        ], groupedData.map(function(datum2) {
          return __spreadArrays$6([
            datum2["name"]
          ], additionalHeaders.map(function(additionalHeader, i) {
            return Tools.getProperty(datum2, "data", i, value2) !== null ? Tools.getProperty(datum2, "data", i, value2).toLocaleString() : "&ndash;";
          }));
        }));
        return result;
      };
      return RadarChartModel2;
    }(ChartModelCartesian);
    __extends$f = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$f(RadarChart, _super);
      function RadarChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new RadarChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.radarChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      RadarChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new Radar(this.model, this.services)
        ];
        var components = this.getChartComponents(graphFrameComponents);
        return components;
      };
      return RadarChart;
    })(Chart);
    __extends$e = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$5 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    GaugeChartModel = function(_super) {
      __extends$e(GaugeChartModel2, _super);
      function GaugeChartModel2(services) {
        return _super.call(this, services) || this;
      }
      GaugeChartModel2.prototype.getDataGroups = function() {
        return _super.prototype.getDataGroups.call(this).filter(function(item) {
          return item.name !== "delta";
        });
      };
      GaugeChartModel2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var result = __spreadArrays$5([
          ["Group", "Value"]
        ], displayData.map(function(datum2) {
          return [
            datum2[groupMapsTo],
            datum2["value"] === null ? "&ndash;" : datum2["value"].toLocaleString()
          ];
        }));
        return result;
      };
      return GaugeChartModel2;
    }(ChartModel);
    __extends$d = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$d(GaugeChart, _super);
      function GaugeChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new GaugeChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.gaugeChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      GaugeChart.prototype.getComponents = function() {
        var graphFrameComponents = [new Gauge(this.model, this.services)];
        var components = this.getChartComponents(graphFrameComponents);
        return components;
      };
      return GaugeChart;
    })(Chart);
    __extends$c = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$4 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    graphComponentsMap = (_a2 = {}, _a2[ChartTypes.LINE] = [Line, Scatter], _a2[ChartTypes.SCATTER] = [Scatter], _a2[ChartTypes.AREA] = [Area, Line, Scatter], _a2[ChartTypes.STACKED_AREA] = [
      StackedArea,
      Line,
      StackedScatter,
      StackedRuler
    ], _a2[ChartTypes.SIMPLE_BAR] = [SimpleBar], _a2[ChartTypes.GROUPED_BAR] = [GroupedBar, ZeroLine], _a2[ChartTypes.STACKED_BAR] = [StackedBar, StackedRuler], _a2);
    (function(_super) {
      __extends$c(ComboChart, _super);
      function ComboChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        var chartOptions = Tools.mergeDefaultChartOptions(options.comboChart, chartConfigs.options);
        if (!chartConfigs.options.comboChartTypes) {
          console.error("No comboChartTypes defined for the Combo Chart!");
          chartOptions.comboChartTypes = [
            { type: ChartTypes.LINE, correspondingDatasets: [] }
          ];
        }
        _this.model.setOptions(chartOptions);
        _this.init(holder, chartConfigs);
        return _this;
      }
      ComboChart.prototype.getGraphComponents = function() {
        var _this = this;
        var comboChartTypes = this.model.getOptions().comboChartTypes;
        var counter = 0;
        var graphComponents = comboChartTypes.map(function(graph) {
          var type2 = graph.type;
          var options$1;
          if (typeof graph.type === "string") {
            if (!Object.keys(graphComponentsMap).includes(graph.type)) {
              console.error('Invalid chart type "' + graph.type + '" specified for combo chart. Please refer to the ComboChart tutorial for more guidance.');
              return null;
            }
            var stacked_1;
            options$1 = Tools.merge({}, options[Tools.camelCase(graph.type) + "Chart"], _this.model.getOptions(), graph.options);
            if (graph.type === ChartTypes.STACKED_AREA) {
              stacked_1 = true;
            }
            return graphComponentsMap[graph.type].map(function(Component2, i) {
              return new Component2(_this.model, _this.services, {
                groups: graph.correspondingDatasets,
                id: counter++,
                options: options$1,
                stacked: stacked_1
              });
            });
          } else {
            options$1 = Tools.merge({}, _this.model.getOptions(), graph.options);
            return new type2(_this.model, _this.services, {
              groups: graph.correspondingDatasets,
              id: counter++,
              options: options$1
            });
          }
        }).filter(function(item) {
          return item !== null;
        });
        return Tools.flatten(graphComponents);
      };
      ComboChart.prototype.getComponents = function() {
        var comboChartTypes = this.model.getOptions().comboChartTypes;
        var stackedRulerEnabled = comboChartTypes.some(function(chartObject) {
          return chartObject.type === ChartTypes.STACKED_BAR || chartObject.type === ChartTypes.STACKED_AREA;
        });
        var graphFrameComponents = __spreadArrays$4([
          new TwoDimensionalAxes(this.model, this.services),
          new Grid2(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.GRID
          })
        ], stackedRulerEnabled ? [] : [new Ruler(this.model, this.services)], this.getGraphComponents());
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return ComboChart;
    })(AxisChart);
    __extends$b = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TreeChartModel = function(_super) {
      __extends$b(TreeChartModel2, _super);
      function TreeChartModel2(services) {
        return _super.call(this, services) || this;
      }
      TreeChartModel2.prototype.getTabularDataArray = function() {
        var _this = this;
        var displayData = this.getDisplayData();
        var result = [["Child", "Parent"]];
        displayData.forEach(function(datum2) {
          _this.getChildrenDatums(datum2, result);
          result.push([datum2.name, "&ndash;"]);
        });
        return result;
      };
      TreeChartModel2.prototype.getChildrenDatums = function(datum2, result) {
        var _this = this;
        if (result === void 0) {
          result = [];
        }
        if (datum2.children) {
          if (datum2.children.length > 0) {
            datum2.children.forEach(function(child) {
              _this.getChildrenDatums(child, result);
              result.push([child.name, datum2.name]);
            });
          }
        }
      };
      return TreeChartModel2;
    }(ChartModel);
    __extends$a = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$a(TreeChart, _super);
      function TreeChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new TreeChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.treeChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      TreeChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new Tree(this.model, this.services)
        ];
        var components = this.getChartComponents(graphFrameComponents, {
          excludeLegend: true
        });
        return components;
      };
      return TreeChart;
    })(Chart);
    __extends$9 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TreemapChartModel = function(_super) {
      __extends$9(TreemapChartModel2, _super);
      function TreemapChartModel2(services) {
        return _super.call(this, services) || this;
      }
      TreemapChartModel2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        var result = [["Child", "Group", "Value"]];
        displayData.forEach(function(datum2) {
          if (Array.isArray(datum2.children)) {
            datum2.children.forEach(function(child) {
              result.push([child.name, datum2.name, child.value]);
            });
          } else if (Tools.getProperty(datum2.name) !== null && Tools.getProperty(datum2.value)) {
            result.push(["\u2013", datum2.name, datum2.value]);
          }
        });
        return result;
      };
      return TreemapChartModel2;
    }(ChartModel);
    __extends$8 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$8(TreemapChart, _super);
      function TreemapChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new TreemapChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.treemapChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      TreemapChart.prototype.getComponents = function() {
        var graphFrameComponents = [new Treemap(this.model, this.services)];
        var components = this.getChartComponents(graphFrameComponents);
        return components;
      };
      return TreemapChart;
    })(Chart);
    __extends$7 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign = globalThis && globalThis.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    CirclePackChartModel = function(_super) {
      __extends$7(CirclePackChartModel2, _super);
      function CirclePackChartModel2(services) {
        var _this = _super.call(this, services) || this;
        _this.parentNode = false;
        _this.set({ depth: 2 }, { skipUpdate: true });
        return _this;
      }
      CirclePackChartModel2.prototype.setData = function(newData) {
        _super.prototype.setData.call(this, newData);
        this.setDataGroups();
        if (newData.length === 1) {
          this.parentNode = true;
        }
        this.setZoom();
      };
      CirclePackChartModel2.prototype.setOptions = function(newOptions) {
        var options2 = this.getOptions();
        var zoomOptions = Tools.merge({}, newOptions, this.getZoomOptions(newOptions));
        Tools.updateLegendAdditionalItems(options2, zoomOptions);
        var depth = this.getHierarchyLevel();
        var userProvidedDepth = Tools.getProperty(options2, "circlePack", "hierarchyLevel");
        this.set({
          options: Tools.merge(options2, zoomOptions),
          depth: userProvidedDepth && userProvidedDepth < 4 ? userProvidedDepth : depth
        });
      };
      CirclePackChartModel2.prototype.getZoomOptions = function(options2) {
        if (!this.getDisplayData()) {
          return {};
        }
        var displayData = this.getDisplayData();
        var zoomOptions = options2 ? options2 : this.getOptions();
        var data = displayData.length === 1 && Tools.getProperty(displayData, 0, "children") ? Tools.getProperty(displayData, 0, "children") : displayData;
        var depth = this.getHierarchyLevel();
        data.some(function(datum2) {
          if (datum2.children) {
            if (datum2.children.some(function(item) {
              return item.children;
            })) {
              depth = 3;
              return false;
            }
          }
        });
        if (Tools.getProperty(zoomOptions, "canvasZoom", "enabled") === true && depth > 2) {
          return {
            legend: {
              additionalItems: [
                {
                  type: LegendItemType.ZOOM,
                  name: "Click to zoom"
                }
              ]
            }
          };
        }
        return null;
      };
      CirclePackChartModel2.prototype.setZoom = function(options2) {
        this.setOptions(this.getZoomOptions(options2));
      };
      CirclePackChartModel2.prototype.updateHierarchyLevel = function(depth) {
        this.set({ depth });
      };
      CirclePackChartModel2.prototype.getHierarchyLevel = function() {
        return this.get("depth");
      };
      CirclePackChartModel2.prototype.hasParentNode = function() {
        return this.parentNode;
      };
      CirclePackChartModel2.prototype.setDataGroups = function() {
        var _this = this;
        var data = this.getData();
        var options2 = this.getOptions();
        var groupMapsTo = options2.data.groupMapsTo;
        var newData = data.map(function(depthOne) {
          var groupName = depthOne[groupMapsTo];
          return _this.setChildrenDataGroup(depthOne, groupName);
        });
        this.set({
          data: newData
        }, { skipUpdate: true });
      };
      CirclePackChartModel2.prototype.setChildrenDataGroup = function(node, name) {
        var _this = this;
        if (node.children) {
          return __assign(__assign({}, node), { dataGroupName: name, children: node.children.map(function(child, i) {
            return _this.setChildrenDataGroup(child, name);
          }) });
        } else {
          return __assign(__assign({}, node), { dataGroupName: name });
        }
      };
      CirclePackChartModel2.prototype.getTabularDataArray = function() {
        var _this = this;
        var displayData = this.getDisplayData();
        var result = [["Child", "Parent", "Value"]];
        displayData.forEach(function(datum2) {
          var value2 = datum2.value ? datum2.value : 0;
          if (datum2.children) {
            value2 += _this.getChildrenDatums(datum2.children, datum2.name, result, 0);
          }
          result.push(["&ndash;", datum2.name, value2]);
        });
        return result;
      };
      CirclePackChartModel2.prototype.getChildrenDatums = function(children2, parent, result, totalSum) {
        var _this = this;
        if (result === void 0) {
          result = [];
        }
        if (totalSum === void 0) {
          totalSum = 0;
        }
        var grandParent = parent;
        children2.forEach(function(child) {
          var parent2 = child.name;
          var sum2 = 0;
          if (child.children) {
            if (child.children.length > 0) {
              if (typeof child.value === "number") {
                totalSum += child.value;
              }
              sum2 += _this.getChildrenDatums(child.children, parent2, result, sum2);
              result.push([parent2, grandParent, sum2]);
              totalSum += sum2;
            }
          } else {
            var value2 = 0;
            if (typeof child.value === "number") {
              value2 = child.value;
              totalSum += child.value;
            }
            result.push([child.name, grandParent, value2]);
          }
        });
        return totalSum;
      };
      return CirclePackChartModel2;
    }(ChartModel);
    __extends$6 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$6(CirclePackChart, _super);
      function CirclePackChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new CirclePackChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.circlePackChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      CirclePackChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new CirclePack(this.model, this.services)
        ];
        var components = this.getChartComponents(graphFrameComponents);
        return components;
      };
      return CirclePackChart;
    })(Chart);
    __extends$5 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$3 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    WordCloudModel = function(_super) {
      __extends$5(WordCloudModel2, _super);
      function WordCloudModel2(services) {
        return _super.call(this, services) || this;
      }
      WordCloudModel2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        var options2 = this.getOptions();
        var _a22 = options2.wordCloud, fontSizeMapsTo = _a22.fontSizeMapsTo, wordMapsTo = _a22.wordMapsTo;
        var groupMapsTo = options2.data.groupMapsTo;
        var result = __spreadArrays$3([
          [options2.tooltip.wordLabel, "Group", options2.tooltip.valueLabel]
        ], displayData.map(function(datum2) {
          return [
            datum2[wordMapsTo],
            datum2[groupMapsTo],
            datum2[fontSizeMapsTo]
          ];
        }));
        return result;
      };
      return WordCloudModel2;
    }(ChartModel);
    __extends$4 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$4(WordCloudChart, _super);
      function WordCloudChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new WordCloudModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.wordCloudChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      WordCloudChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new WordCloud(this.model, this.services),
          new Skeleton(this.model, this.services, {
            skeleton: Skeletons.PIE
          })
        ];
        var components = this.getChartComponents(graphFrameComponents);
        return components;
      };
      return WordCloudChart;
    })(Chart);
    __extends$3 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$2 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    AlluvialChartModel = function(_super) {
      __extends$3(AlluvialChartModel2, _super);
      function AlluvialChartModel2(services) {
        return _super.call(this, services) || this;
      }
      AlluvialChartModel2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        displayData.sort(function(a2, b) {
          return a2["source"].localeCompare(b["source"]);
        });
        var result = __spreadArrays$2([
          ["Source", "Target", "Value"]
        ], displayData.map(function(datum2) {
          return [
            datum2["source"],
            datum2["target"],
            datum2["value"]
          ];
        }));
        return result;
      };
      return AlluvialChartModel2;
    }(ChartModelCartesian);
    __extends$2 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    (function(_super) {
      __extends$2(AlluvialChart, _super);
      function AlluvialChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new AlluvialChartModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.alluvialChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      AlluvialChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new Alluvial(this.model, this.services)
        ];
        var components = this.getChartComponents(graphFrameComponents, {
          excludeLegend: true
        });
        return components;
      };
      return AlluvialChart;
    })(Chart);
    __extends$1 = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays$1 = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    HeatmapModel = function(_super) {
      __extends$1(HeatmapModel2, _super);
      function HeatmapModel2(services) {
        var _this = _super.call(this, services) || this;
        _this.axisFlavor = AxisFlavor.HOVERABLE;
        _this._colorScale = void 0;
        _this._domains = [];
        _this._ranges = [];
        _this._matrix = {};
        var axis22 = Tools.getProperty(_this.getOptions(), "axes");
        if (!!Tools.getProperty(axis22, "left", "scaleType") && Tools.getProperty(axis22, "left", "scaleType") !== ScaleTypes.LABELS || !!Tools.getProperty(axis22, "right", "scaleType") && Tools.getProperty(axis22, "right", "scaleType") !== ScaleTypes.LABELS || !!Tools.getProperty(axis22, "top", "scaleType") && Tools.getProperty(axis22, "top", "scaleType") !== ScaleTypes.LABELS || !!Tools.getProperty(axis22, "bottom", "scaleType") && Tools.getProperty(axis22, "bottom", "scaleType") !== ScaleTypes.LABELS) {
          throw Error("Heatmap only supports label scaletypes.");
        }
        return _this;
      }
      HeatmapModel2.prototype.getValueDomain = function() {
        var limits = extent(this.getDisplayData(), function(d) {
          return d.value;
        });
        var domain = linear3().domain(limits).nice().domain();
        if (domain[0] > 0) {
          domain[0] = 0;
        } else if (domain[0] === 0 && domain[1] === 0) {
          return [0, 1];
        }
        if (domain[0] < 0 && domain[1] > 0) {
          if (Math.abs(domain[0]) > domain[1]) {
            domain[1] = Math.abs(domain[0]);
          } else {
            domain[0] = -domain[1];
          }
        }
        return domain;
      };
      HeatmapModel2.prototype.getFillColor = function(value2) {
        return this._colorScale(value2);
      };
      HeatmapModel2.prototype.getUniqueDomain = function() {
        if (Tools.isEmpty(this._domains)) {
          var displayData = this.getDisplayData();
          var cartesianScales = this.services.cartesianScales;
          var domainIdentifier_1 = cartesianScales.getDomainIdentifier();
          var mainXAxisPosition = cartesianScales.getMainXAxisPosition();
          var customDomain = cartesianScales.getCustomDomainValuesByposition(mainXAxisPosition);
          if (!!customDomain) {
            return customDomain;
          }
          this._domains = Array.from(new Set(displayData.map(function(d) {
            return d[domainIdentifier_1];
          })));
        }
        return this._domains;
      };
      HeatmapModel2.prototype.getUniqueRanges = function() {
        if (Tools.isEmpty(this._ranges)) {
          var displayData = this.getDisplayData();
          var cartesianScales = this.services.cartesianScales;
          var rangeIdentifier_1 = cartesianScales.getRangeIdentifier();
          var mainYAxisPosition = cartesianScales.getMainYAxisPosition();
          var customDomain = cartesianScales.getCustomDomainValuesByposition(mainYAxisPosition);
          if (!!customDomain) {
            return customDomain;
          }
          this._ranges = Array.from(new Set(displayData.map(function(d) {
            return d[rangeIdentifier_1];
          })));
        }
        return this._ranges;
      };
      HeatmapModel2.prototype.getMatrix = function() {
        var _this = this;
        if (Tools.isEmpty(this._matrix)) {
          var uniqueDomain = this.getUniqueDomain();
          var uniqueRange = this.getUniqueRanges();
          var domainIdentifier_2 = this.services.cartesianScales.getDomainIdentifier();
          var rangeIdentifier_2 = this.services.cartesianScales.getRangeIdentifier();
          var range_1 = {};
          uniqueRange.forEach(function(ran) {
            range_1[ran] = {
              value: null,
              index: -1
            };
          });
          uniqueDomain.forEach(function(dom) {
            _this._matrix[dom] = Tools.clone(range_1);
          });
          this.getDisplayData().forEach(function(d, i) {
            _this._matrix[d[domainIdentifier_2]][d[rangeIdentifier_2]] = {
              value: d["value"],
              index: i
            };
          });
        }
        return this._matrix;
      };
      HeatmapModel2.prototype.setData = function(newData) {
        var sanitizedData = this.sanitize(Tools.clone(newData));
        var dataGroups = this.generateDataGroups(sanitizedData);
        this.set({
          data: sanitizedData,
          dataGroups
        });
        this._domains = [];
        this._ranges = [];
        this._matrix = {};
        return sanitizedData;
      };
      HeatmapModel2.prototype.getMatrixAsArray = function() {
        var _this = this;
        if (Tools.isEmpty(this._matrix)) {
          this.getMatrix();
        }
        var uniqueDomain = this.getUniqueDomain();
        var uniqueRange = this.getUniqueRanges();
        var domainIdentifier = this.services.cartesianScales.getDomainIdentifier();
        var rangeIdentifier = this.services.cartesianScales.getRangeIdentifier();
        var arr = [];
        uniqueDomain.forEach(function(domain) {
          uniqueRange.forEach(function(range2) {
            var element = {
              value: _this._matrix[domain][range2].value,
              index: _this._matrix[domain][range2].index
            };
            element[domainIdentifier] = domain;
            element[rangeIdentifier] = range2;
            arr.push(element);
          });
        });
        return arr;
      };
      HeatmapModel2.prototype.getTabularDataArray = function() {
        var displayData = this.getDisplayData();
        var _a22 = this.assignRangeAndDomains(), primaryDomain = _a22.primaryDomain, primaryRange = _a22.primaryRange;
        var result = __spreadArrays$1([
          [primaryDomain.label, primaryRange.label, "Value"]
        ], displayData.map(function(datum2) {
          return [
            datum2[primaryDomain.identifier] === null ? "&ndash;" : datum2[primaryDomain.identifier],
            datum2[primaryRange.identifier] === null ? "&ndash;" : datum2[primaryRange.identifier].toLocaleString(),
            datum2["value"]
          ];
        }));
        return result;
      };
      HeatmapModel2.prototype.getColorClassName = function(configs) {
        return configs.originalClassName + " " + this._colorScale(configs.value);
      };
      HeatmapModel2.prototype.setColorClassNames = function() {
        var options2 = this.getOptions();
        var customColors = Tools.getProperty(options2, "color", "gradient", "colors");
        var customColorsEnabled = !Tools.isEmpty(customColors);
        var colorPairingOption = Tools.getProperty(options2, "color", "pairing", "option");
        var domain = this.getValueDomain();
        var colorScheme = domain[0] < 0 && domain[1] > 0 ? "diverge" : "mono";
        if (colorPairingOption < 1 && colorPairingOption > 4 && colorScheme === "mono") {
          colorPairingOption = 1;
        } else if (colorPairingOption < 1 && colorPairingOption > 2 && colorScheme === "diverge") {
          colorPairingOption = 1;
        }
        var colorPairing = customColorsEnabled ? customColors : [];
        if (!customColorsEnabled) {
          var colorGroupingLength = colorScheme === "diverge" ? 17 : 11;
          for (var i = 1; i < colorGroupingLength + 1; i++) {
            colorPairing.push("fill-" + colorScheme + "-" + colorPairingOption + "-" + i);
          }
        }
        this._colorScale = quantize().domain(domain).range(colorPairing);
      };
      return HeatmapModel2;
    }(ChartModelCartesian);
    __extends = globalThis && globalThis.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __spreadArrays = globalThis && globalThis.__spreadArrays || function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a2 = arguments[i], j = 0, jl = a2.length; j < jl; j++, k++)
          r[k] = a2[j];
      return r;
    };
    (function(_super) {
      __extends(HeatmapChart, _super);
      function HeatmapChart(holder, chartConfigs) {
        var _this = _super.call(this, holder, chartConfigs) || this;
        _this.model = new HeatmapModel(_this.services);
        _this.model.setOptions(Tools.mergeDefaultChartOptions(options.heatmapChart, chartConfigs.options));
        _this.init(holder, chartConfigs);
        return _this;
      }
      HeatmapChart.prototype.getAxisChartComponents = function(graphFrameComponents, configs) {
        var options2 = this.model.getOptions();
        var toolbarEnabled = Tools.getProperty(options2, "toolbar", "enabled");
        this.services.cartesianScales.determineAxisDuality();
        this.services.cartesianScales.findDomainAndRangeAxes();
        this.services.cartesianScales.determineOrientation();
        var titleAvailable = !!this.model.getOptions().title;
        var titleComponent = {
          id: "title",
          components: [new Title(this.model, this.services)],
          growth: LayoutGrowth.STRETCH
        };
        var toolbarComponent = {
          id: "toolbar",
          components: [new Toolbar(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED
        };
        var headerComponent = {
          id: "header",
          components: [
            new LayoutComponent(this.model, this.services, __spreadArrays([
              titleComponent
            ], toolbarEnabled ? [toolbarComponent] : []), {
              direction: LayoutDirection.ROW,
              alignItems: LayoutAlignItems.CENTER
            })
          ],
          growth: LayoutGrowth.PREFERRED
        };
        var legendComponent = {
          id: "legend",
          components: [new ColorScaleLegend(this.model, this.services)],
          growth: LayoutGrowth.PREFERRED,
          renderType: RenderTypes.SVG
        };
        var graphFrameComponent = {
          id: "graph-frame",
          components: graphFrameComponents,
          growth: LayoutGrowth.STRETCH,
          renderType: RenderTypes.SVG
        };
        var isLegendEnabled = Tools.getProperty(configs, "legend", "enabled") !== false && this.model.getOptions().legend.enabled !== false;
        var fullFrameComponentDirection = LayoutDirection.COLUMN_REVERSE;
        var legendSpacerComponent = {
          id: "spacer",
          components: [new Spacer(this.model, this.services, { size: 15 })],
          growth: LayoutGrowth.PREFERRED
        };
        var fullFrameComponent = {
          id: "full-frame",
          components: [
            new LayoutComponent(this.model, this.services, __spreadArrays(isLegendEnabled ? [legendComponent] : [], isLegendEnabled ? [legendSpacerComponent] : [], [
              graphFrameComponent
            ]), {
              direction: fullFrameComponentDirection
            })
          ],
          growth: LayoutGrowth.STRETCH
        };
        var topLevelLayoutComponents = [];
        if (titleAvailable || toolbarEnabled) {
          topLevelLayoutComponents.push(headerComponent);
          var titleSpacerComponent = {
            id: "spacer",
            components: [
              new Spacer(this.model, this.services, toolbarEnabled ? { size: 15 } : void 0)
            ],
            growth: LayoutGrowth.PREFERRED
          };
          topLevelLayoutComponents.push(titleSpacerComponent);
        }
        topLevelLayoutComponents.push(fullFrameComponent);
        return [
          new AxisChartsTooltip(this.model, this.services),
          new Modal(this.model, this.services),
          new LayoutComponent(this.model, this.services, topLevelLayoutComponents, {
            direction: LayoutDirection.COLUMN
          })
        ];
      };
      HeatmapChart.prototype.getComponents = function() {
        var graphFrameComponents = [
          new TwoDimensionalAxes(this.model, this.services),
          new Heatmap(this.model, this.services)
        ];
        var components = this.getAxisChartComponents(graphFrameComponents);
        return components;
      };
      return HeatmapChart;
    })(AxisChart);
    BaseChart = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["Chart", "chart", "data", "options", "theme", "id", "ref"]);
      let { Chart: Chart2 = void 0 } = $$props;
      let { chart: chart2 = null } = $$props;
      let { data = [] } = $$props;
      let { options: options2 = {} } = $$props;
      let { theme = "white" } = $$props;
      let { id: id2 = "chart-" + Math.random().toString(36) } = $$props;
      let { ref = null } = $$props;
      const dispatch2 = createEventDispatcher();
      if ($$props.Chart === void 0 && $$bindings.Chart && Chart2 !== void 0)
        $$bindings.Chart(Chart2);
      if ($$props.chart === void 0 && $$bindings.chart && chart2 !== void 0)
        $$bindings.chart(chart2);
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      if ($$props.options === void 0 && $$bindings.options && options2 !== void 0)
        $$bindings.options(options2);
      if ($$props.theme === void 0 && $$bindings.theme && theme !== void 0)
        $$bindings.theme(theme);
      if ($$props.id === void 0 && $$bindings.id && id2 !== void 0)
        $$bindings.id(id2);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      {
        if (chart2) {
          chart2.model.setData(data);
          chart2.model.setOptions({ theme, ...options2 });
          dispatch2("update", { data, options: options2 });
        }
      }
      return `<div${spread(
        [
          escape_object($$restProps),
          {
            "data-carbon-theme": escape_attribute_value(theme)
          },
          { id: escape_attribute_value(id2) }
        ],
        {}
      )}${add_attribute("this", ref, 0)}></div>`;
    });
    LineChart_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $$restProps = compute_rest_props($$props, ["chart", "ref"]);
      let { chart: chart2 = null } = $$props;
      let { ref = null } = $$props;
      if ($$props.chart === void 0 && $$bindings.chart && chart2 !== void 0)
        $$bindings.chart(chart2);
      if ($$props.ref === void 0 && $$bindings.ref && ref !== void 0)
        $$bindings.ref(ref);
      let $$settled;
      let $$rendered;
      do {
        $$settled = true;
        $$rendered = `${validate_component(BaseChart, "BaseChart").$$render(
          $$result,
          Object.assign($$restProps, { Chart: LineChart }, { ref }, { chart: chart2 }),
          {
            ref: ($$value) => {
              ref = $$value;
              $$settled = false;
            },
            chart: ($$value) => {
              chart2 = $$value;
              $$settled = false;
            }
          },
          {}
        )}`;
      } while (!$$settled);
      return $$rendered;
    });
    AppResult = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let $storeUserVal, $$unsubscribe_storeUserVal;
      let $storeTableData, $$unsubscribe_storeTableData;
      $$unsubscribe_storeUserVal = subscribe(storeUserVal, (value2) => $storeUserVal = value2);
      $$unsubscribe_storeTableData = subscribe(storeTableData, (value2) => $storeTableData = value2);
      const tableData = Object.values($storeTableData);
      let sum_year_1 = 0;
      let sum_year_2 = 0;
      let sum_year_3 = 0;
      let sum_year_4 = 0;
      let sum_year_5 = 0;
      let sum_year_6 = 0;
      let sum_year_7 = 0;
      let sum_year_8 = 0;
      let sum_year_9 = 0;
      let sum_year_10 = 0;
      let sum_year_11 = 0;
      let sum_year_12 = 0;
      let sum_year_13 = 0;
      let sum_year_14 = 0;
      let sum_year_15 = 0;
      let sum_year_16 = 0;
      let sum_year_17 = 0;
      let sum_year_18 = 0;
      let sum_year_19 = 0;
      let sum_year_20 = 0;
      console.log("in component", $storeTableData);
      let attorneyfeeval = 0;
      if ($storeUserVal[0].uip_complexity === "quick") {
        attorneyfeeval = 750;
      } else if ($storeUserVal[0].uip_complexity === "normal") {
        attorneyfeeval = 1e3;
      } else {
        attorneyfeeval = 1250;
      }
      let translationFrom = $storeUserVal[0].uip_multiselect_country_filing_Lang;
      function translationgetcost(translationFrom2, translationTo) {
        let translationcosts = 0;
        const uipLanguages = translationFrom2.split(",");
        const nationalLanguages = translationTo.split(",");
        for (const language of nationalLanguages) {
          if (!uipLanguages.includes(language)) {
            translationcosts = ($storeUserVal[0].uip_words_claims + $storeUserVal[0].uip_words) * $storeUserVal[0].uip_translation_fee;
            break;
          }
        }
        return translationcosts;
      }
      tableData.forEach(function(item) {
        sum_year_1 += item.filing_fee + item.maintenance_year_01;
        sum_year_2 += item.publication_fee + item.publication_fee + item.maintenance_year_02;
        sum_year_3 += item.grant_fee + item.maintenance_year_03;
        sum_year_4 += item.maintenance_year_04;
        sum_year_5 += item.maintenance_year_05;
        sum_year_6 += item.maintenance_year_06;
        sum_year_7 += item.maintenance_year_07;
        sum_year_8 += item.maintenance_year_08;
        sum_year_9 += item.maintenance_year_09;
        sum_year_10 += item.maintenance_year_10;
        sum_year_11 += item.maintenance_year_11;
        sum_year_12 += item.maintenance_year_12;
        sum_year_13 += item.maintenance_year_13;
        sum_year_14 += item.maintenance_year_14;
        sum_year_15 += item.maintenance_year_15;
        sum_year_16 += item.maintenance_year_16;
        sum_year_17 += item.maintenance_year_17;
        sum_year_18 += item.maintenance_year_18;
        sum_year_19 += item.maintenance_year_19;
        sum_year_20 += item.maintenance_year_20;
      });
      sum_year_1 = sum_year_1 + attorneyfeeval + 800;
      sum_year_2 = sum_year_2 + attorneyfeeval;
      sum_year_3 = sum_year_3 + attorneyfeeval;
      sum_year_4 = sum_year_4 + attorneyfeeval;
      sum_year_5 = sum_year_5 + attorneyfeeval;
      sum_year_6 = sum_year_6 + attorneyfeeval;
      sum_year_7 = sum_year_7;
      sum_year_8 = sum_year_8;
      sum_year_9 = sum_year_9;
      sum_year_10 = sum_year_10;
      sum_year_11 = sum_year_11;
      sum_year_12 = sum_year_12;
      sum_year_13 = sum_year_13;
      sum_year_14 = sum_year_14;
      sum_year_15 = sum_year_15;
      sum_year_16 = sum_year_16;
      sum_year_17 = sum_year_17;
      sum_year_18 = sum_year_18;
      sum_year_19 = sum_year_19;
      sum_year_20 = sum_year_20;
      let sum_years = [
        {
          "group": "Yearly Cost",
          "key": "Year 1",
          "value": sum_year_1 + translationgetcost(translationFrom, tableData[0].language_requirements_national)
        },
        {
          "group": "Yearly Cost",
          "key": "Year 2",
          "value": sum_year_2
        },
        {
          "group": "Yearly Cost",
          "key": "Year 3",
          "value": sum_year_3
        },
        {
          "group": "Yearly Cost",
          "key": "Year 4",
          "value": sum_year_4
        },
        {
          "group": "Yearly Cost",
          "key": "Year 5",
          "value": sum_year_5
        },
        {
          "group": "Yearly Cost",
          "key": "Year 6",
          "value": sum_year_6
        },
        {
          "group": "Yearly Cost",
          "key": "Year 7",
          "value": sum_year_7
        },
        {
          "group": "Yearly Cost",
          "key": "Year 8",
          "value": sum_year_8
        },
        {
          "group": "Yearly Cost",
          "key": "Year 9",
          "value": sum_year_9
        },
        {
          "group": "Yearly Cost",
          "key": "Year 10",
          "value": sum_year_10
        },
        {
          "group": "Yearly Cost",
          "key": "Year 11",
          "value": sum_year_11
        },
        {
          "group": "Yearly Cost",
          "key": "Year 12",
          "value": sum_year_12
        },
        {
          "group": "Yearly Cost",
          "key": "Year 13",
          "value": sum_year_13
        },
        {
          "group": "Yearly Cost",
          "key": "Year 14",
          "value": sum_year_14
        },
        {
          "group": "Yearly Cost",
          "key": "Year 15",
          "value": sum_year_15
        },
        {
          "group": "Yearly Cost",
          "key": "Year 16",
          "value": sum_year_16
        },
        {
          "group": "Yearly Cost",
          "key": "Year 17",
          "value": sum_year_17
        },
        {
          "group": "Yearly Cost",
          "key": "Year 18",
          "value": sum_year_18
        },
        {
          "group": "Yearly Cost",
          "key": "Year 19",
          "value": sum_year_19
        },
        {
          "group": "Yearly Cost",
          "key": "Year 20",
          "value": sum_year_20
        }
      ];
      console.log("sum_years", sum_year_1);
      $$unsubscribe_storeUserVal();
      $$unsubscribe_storeTableData();
      return `<h2 style="${"margin-bottom:30px"}">Results</h2>
<div>${validate_component(StructuredList$1, "StructuredList").$$render($$result, { condensed: true }, {}, {
        default: () => {
          return `${validate_component(StructuredListHead$1, "StructuredListHead").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, { head: true }, {}, {
                default: () => {
                  return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Country`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Fee Type`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Language`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Complexity`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 1`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 2`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 3`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 4`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 5`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 6`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 7`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 8`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 9`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 10`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 11`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 12`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 13`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 14`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 15`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 16`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 17`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 18`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 19`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                    default: () => {
                      return `Year 20`;
                    }
                  })}`;
                }
              })}`;
            }
          })}
	${validate_component(StructuredListBody$1, "StructuredListBody").$$render($$result, {}, {}, {
            default: () => {
              return `${each(tableData, (values) => {
                return `${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                  default: () => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.country_name)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `Filing Fee`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape($storeUserVal[0].uip_multiselect_country_filing_Lang)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape($storeUserVal[0].uip_complexity)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.filing_fee)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
			`;
                  }
                })}
      ${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                  default: () => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `Examination Fee`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.examination_fee)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
			`;
                  }
                })}
      ${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                  default: () => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `Publication Fee`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.publication_fee)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
			`;
                  }
                })}
      ${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                  default: () => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `Grant Fee`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.grant_fee)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
			`;
                  }
                })}
			${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                  default: () => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `Maintenance`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_01)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_02)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_03)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_04)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_05)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_06)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_07)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_08)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_09)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_10)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_11)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_12)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_13)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_14)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_15)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_16)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_17)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_18)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_19)}`;
                      }
                    })}
				${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(values.maintenance_year_20)}`;
                      }
                    })}
			`;
                  }
                })}`;
              })}

		${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `Attorney Fees`;
                    }
                  })}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
			${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(attorneyfeeval + 800)}`;
                    }
                  })}

			${$storeUserVal[0].uip_complexity == "quick" ? `${each({ length: 1 }, (_, i) => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(attorneyfeeval)}`;
                      }
                    })}`;
                  })}
				${each({ length: 18 }, (_, i) => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `0`;
                      }
                    })}`;
                  })}` : `${$storeUserVal[0].uip_complexity == "normal" ? `${each({ length: 2 }, (_, i) => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(attorneyfeeval)}`;
                      }
                    })}`;
                  })}
				${each({ length: 17 }, (_, i) => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `0`;
                      }
                    })}`;
                  })}` : `${each({ length: 5 }, (_, i) => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(attorneyfeeval)}`;
                      }
                    })}`;
                  })}
				${each({ length: 14 }, (_, i) => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `0`;
                      }
                    })}`;
                  })}`}`}`;
                }
              })}
    ${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `Sum`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {})}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_1)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_2)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_3)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_4)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_5)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_6)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_7)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_8)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_9)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_10)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_11)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_12)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_13)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_14)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_15)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_16)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_17)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_18)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_19)}`;
                    }
                  })}
      ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                    default: () => {
                      return `${escape(sum_year_20)}`;
                    }
                  })}`;
                }
              })}`;
            }
          })}`;
        }
      })}

<h2 style="${"margin-bottom:30px"}">Translation Fees</h2>
<div style="${"width:100%"}">${validate_component(StructuredList$1, "StructuredList").$$render(
        $$result,
        {
          id: "sl2",
          condensed: true,
          width: "bind:clientWidth"
        },
        {},
        {
          default: () => {
            return `${validate_component(StructuredListHead$1, "StructuredListHead").$$render($$result, {}, {}, {
              default: () => {
                return `${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, { head: true }, {}, {
                  default: () => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {})}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                      default: () => {
                        return `Translation from`;
                      }
                    })}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                      default: () => {
                        return `Translation to`;
                      }
                    })}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                      default: () => {
                        return `Translation needed?`;
                      }
                    })}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { head: true }, {}, {
                      default: () => {
                        return `Translation sum`;
                      }
                    })}`;
                  }
                })}`;
              }
            })}
		${validate_component(StructuredListBody$1, "StructuredListBody").$$render($$result, {}, {}, {
              default: () => {
                return `${validate_component(StructuredListRow$1, "StructuredListRow").$$render($$result, {}, {}, {
                  default: () => {
                    return `${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { noWrap: true }, {}, {})}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(translationFrom)}`;
                      }
                    })}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(tableData[0].language_requirements_national)}`;
                      }
                    })}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, {}, {}, {
                      default: () => {
                        return `${escape(compareTranslations(translationFrom, tableData[0].language_requirements_national))}`;
                      }
                    })}
        ${validate_component(StructuredListCell$1, "StructuredListCell").$$render($$result, { noWrap: true }, {}, {
                      default: () => {
                        return `\u20AC ${escape(translationgetcost(translationFrom, tableData[0].language_requirements_national))}`;
                      }
                    })}`;
                  }
                })}`;
              }
            })}`;
          }
        }
      )}

	${validate_component(LineChart_1, "LineChart").$$render(
        $$result,
        {
          data: sum_years,
          options: {
            "title": "Yearly Cost",
            "axes": {
              "bottom": {
                "title": "Years",
                "mapsTo": "key",
                "scaleType": "labels"
              },
              "left": {
                "mapsTo": "value",
                "title": "Cost (\u20AC)",
                "scaleType": "linear"
              }
            },
            "height": "400px"
          }
        },
        {},
        {}
      )}</div></div>`;
    });
    Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
      let showResults;
      let editForm;
      let uip_multiselect_country_filing;
      let uip_multiselect_country_filing_Lang;
      let uip_multiselect_country_filing_subsequent;
      let uip_translation_fee;
      let uip_pages;
      let uip_drawings;
      let uip_claims;
      let uip_words;
      let uip_words_claims;
      let uip_basic_fee;
      let uip_quick_examination;
      let uip_normal_examination;
      let uip_extended_examination;
      let uip_complexity;
      let $$unsubscribe_storeTableData;
      $$unsubscribe_storeTableData = subscribe(storeTableData, (value2) => value2);
      let { data } = $$props;
      const values = Object.values(data);
      console.log(values);
      const transformedvalues = values.map((value2) => {
        return {
          id: value2.country_code,
          text: value2.country_name
        };
      });
      values.map((value2) => {
        return {
          id: value2.country_code,
          text: value2.country_code
        };
      });
      const transformedvaluesForTable = values.map((value2) => {
        return {
          id: value2.country_code,
          name: value2.country_name,
          filing_fee: value2.filing_fee,
          publication_fee: value2.publication_fee,
          year_8: value2.maintenance_year_08,
          year_9: value2.maintenance_year_09,
          sum: value2.publication_fee + value2.filing_fee + value2.maintenance_year_08 + value2.maintenance_year_09
        };
      });
      console.log("Tabledata", transformedvaluesForTable);
      if ($$props.data === void 0 && $$bindings.data && data !== void 0)
        $$bindings.data(data);
      let $$settled;
      let $$rendered;
      do {
        $$settled = true;
        showResults = false;
        editForm = true;
        uip_multiselect_country_filing = "DE, CH";
        uip_multiselect_country_filing_Lang = "DE";
        uip_multiselect_country_filing_subsequent = "";
        uip_translation_fee = 0.15;
        uip_pages = 22;
        uip_drawings = 2;
        uip_claims = 12;
        uip_words = 15e3;
        uip_words_claims = 2275;
        uip_basic_fee = 800;
        uip_quick_examination = 750;
        uip_normal_examination = 1e3;
        uip_extended_examination = 1250;
        uip_complexity = "quick";
        $$rendered = `<div class="${"container m-8"}"><h1 class="${"text-2xl"}">Patscenario</h1>
	${editForm ? `<form><h2 style="${"margin-bottom:30px"}">Base Config</h2>
			${validate_component(MultiSelect$1, "MultiSelect").$$render(
          $$result,
          {
            titleText: "First filing in ",
            label: "(currently only DE possible)",
            name: "uip_multiselect_country_filing",
            required: "true",
            disabled: "true",
            placeholder: "DE",
            items: transformedvalues,
            selectedIds: uip_multiselect_country_filing
          },
          {
            selectedIds: ($$value) => {
              uip_multiselect_country_filing = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(MultiSelect$1, "MultiSelect").$$render(
          $$result,
          {
            titleText: "Languages in which the first filing is available",
            label: "",
            name: "uip_country_filing_lang",
            required: "true",
            items: [
              { id: "DE", text: "German" },
              { id: "EN", text: "English" },
              { id: "ES", text: "Spanish" }
            ],
            selectedIds: uip_multiselect_country_filing_Lang
          },
          {
            selectedIds: ($$value) => {
              uip_multiselect_country_filing_Lang = $$value;
              $$settled = false;
            }
          },
          {}
        )}

			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_translation_fee",
            label: "Translation Fees in \u20AC / Word",
            step: 0.01,
            value: uip_translation_fee
          },
          {
            value: ($$value) => {
              uip_translation_fee = $$value;
              $$settled = false;
            }
          },
          {}
        )}

			<h2 style="${"margin-bottom:20px; margin-top:20px"}">Average Document</h2>
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_pages",
            label: "Pages",
            value: uip_pages
          },
          {
            value: ($$value) => {
              uip_pages = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_drawings",
            label: "Drawings",
            value: uip_drawings
          },
          {
            value: ($$value) => {
              uip_drawings = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_claims",
            label: "Claims",
            value: uip_claims
          },
          {
            value: ($$value) => {
              uip_claims = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_words",
            label: "Words",
            value: uip_words
          },
          {
            value: ($$value) => {
              uip_words = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_words_claims",
            label: "Words in Claims only",
            value: uip_words_claims
          },
          {
            value: ($$value) => {
              uip_words_claims = $$value;
              $$settled = false;
            }
          },
          {}
        )}

			<h2 style="${"margin-bottom:20px; margin-top:20px"}">Patent Attorney Fees for national Applications
			</h2>
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_basic_fee",
            label: "Basic Fee (one time) \u20AC",
            value: uip_basic_fee
          },
          {
            value: ($$value) => {
              uip_basic_fee = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_quick_examination",
            label: "Quick examination (1-2 assesments/per year, 2 years) \u20AC",
            value: uip_quick_examination
          },
          {
            value: ($$value) => {
              uip_quick_examination = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_normal_examination",
            label: "Normal examination (2 assesments/per year, 3 years) \u20AC",
            value: uip_normal_examination
          },
          {
            value: ($$value) => {
              uip_normal_examination = $$value;
              $$settled = false;
            }
          },
          {}
        )}
			${validate_component(NumberInput$1, "NumberInput").$$render(
          $$result,
          {
            name: "uip_extended_examination",
            label: "Extended examination (3-5 assesments/per year, 6 years) \u20AC",
            value: uip_extended_examination
          },
          {
            value: ($$value) => {
              uip_extended_examination = $$value;
              $$settled = false;
            }
          },
          {}
        )}

			<h2 style="${"margin-bottom:20px; margin-top:20px"}">Complexity</h2>

			${validate_component(Select$1, "Select").$$render(
          $$result,
          {
            name: "uip_complexity",
            helperText: "tbd: Estimated date for granting the patent",
            labelText: "Complexity",
            selected: uip_complexity
          },
          {
            selected: ($$value) => {
              uip_complexity = $$value;
              $$settled = false;
            }
          },
          {
            default: () => {
              return `${validate_component(SelectItem$1, "SelectItem").$$render($$result, { value: "quick", text: "quick" }, {}, {})}
				${validate_component(SelectItem$1, "SelectItem").$$render($$result, { value: "normal", text: "normal" }, {}, {})}
				${validate_component(SelectItem$1, "SelectItem").$$render($$result, { value: "extended", text: "extended" }, {}, {})}`;
            }
          }
        )}
			${validate_component(MultiSelect$1, "MultiSelect").$$render(
          $$result,
          {
            titleText: "Subsequent application in the following countries",
            label: "",
            name: "uip_multiselect_country_filing_subsequent",
            required: "true",
            placeholder: "UK",
            items: transformedvalues,
            selectedIds: uip_multiselect_country_filing_subsequent
          },
          {
            selectedIds: ($$value) => {
              uip_multiselect_country_filing_subsequent = $$value;
              $$settled = false;
            }
          },
          {}
        )}

			${validate_component(Button$1, "Button").$$render(
          $$result,
          {
            kind: "secondary",
            type: "submit",
            style: "margin-top:30px; background-color:#890c58"
          },
          {},
          {
            default: () => {
              return `Submit`;
            }
          }
        )}

			<br><br></form>` : ``}
	${showResults == true || editForm == false ? `${validate_component(AppResult, "AppResult").$$render($$result, {}, {}, {})}
		<br>
		${validate_component(Button$1, "Button").$$render($$result, {}, {}, {
          default: () => {
            return `Edit Results`;
          }
        })}` : ``}

	</div>`;
      } while (!$$settled);
      $$unsubscribe_storeTableData();
      return $$rendered;
    });
  }
});

// .svelte-kit/output/server/nodes/2.js
var __exports3 = {};
__export(__exports3, {
  component: () => component3,
  file: () => file3,
  fonts: () => fonts3,
  imports: () => imports3,
  index: () => index4,
  server: () => page_server_ts_exports,
  stylesheets: () => stylesheets3
});
var index4, component3, file3, imports3, stylesheets3, fonts3;
var init__3 = __esm({
  ".svelte-kit/output/server/nodes/2.js"() {
    init_page_server_ts();
    index4 = 2;
    component3 = async () => (await Promise.resolve().then(() => (init_page_svelte(), page_svelte_exports))).default;
    file3 = "_app/immutable/components/pages/_page.svelte-7ddb386d.js";
    imports3 = ["_app/immutable/components/pages/_page.svelte-7ddb386d.js", "_app/immutable/chunks/index-58901655.js", "_app/immutable/chunks/g10-79acc9e0.js", "_app/immutable/chunks/Close-b5e78796.js", "_app/immutable/chunks/index-3832014f.js"];
    stylesheets3 = ["_app/immutable/assets/styles-fed8fea8.css", "_app/immutable/assets/g10-8dd097ea.css"];
    fonts3 = [];
  }
});

// .svelte-kit/output/server/index.js
init_chunks();

// .svelte-kit/output/server/chunks/index2.js
var HttpError = class {
  constructor(status, body) {
    this.status = status;
    if (typeof body === "string") {
      this.body = { message: body };
    } else if (body) {
      this.body = body;
    } else {
      this.body = { message: `Error: ${status}` };
    }
  }
  toString() {
    return JSON.stringify(this.body);
  }
};
var Redirect = class {
  constructor(status, location2) {
    this.status = status;
    this.location = location2;
  }
};
var ActionFailure = class {
  constructor(status, data) {
    this.status = status;
    this.data = data;
  }
};
function error(status, message) {
  if (isNaN(status) || status < 400 || status > 599) {
    throw new Error(`HTTP error status codes must be between 400 and 599 \u2014 ${status} is invalid`);
  }
  return new HttpError(status, message);
}
function json(data, init3) {
  const headers = new Headers(init3?.headers);
  if (!headers.has("content-type")) {
    headers.set("content-type", "application/json");
  }
  return new Response(JSON.stringify(data), {
    ...init3,
    headers
  });
}

// node_modules/devalue/src/utils.js
var escaped = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\u0000",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var DevalueError = class extends Error {
  constructor(message, keys2) {
    super(message);
    this.name = "DevalueError";
    this.path = keys2.join("");
  }
};
function is_primitive(thing) {
  return Object(thing) !== thing;
}
var object_proto_names = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function is_plain_object(thing) {
  const proto = Object.getPrototypeOf(thing);
  return proto === Object.prototype || proto === null || Object.getOwnPropertyNames(proto).sort().join("\0") === object_proto_names;
}
function get_type(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function stringify_string(str) {
  let result = '"';
  for (let i = 0; i < str.length; i += 1) {
    const char = str.charAt(i);
    const code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped) {
      result += escaped[char];
    } else if (code >= 55296 && code <= 57343) {
      const next = str.charCodeAt(i + 1);
      if (code <= 56319 && next >= 56320 && next <= 57343) {
        result += char + str[++i];
      } else {
        result += `\\u${code.toString(16).toUpperCase()}`;
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}

// node_modules/devalue/src/uneval.js
var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
var unsafe_chars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var object_proto_names2 = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function uneval(value2) {
  const counts = /* @__PURE__ */ new Map();
  const keys2 = [];
  function walk(thing) {
    if (typeof thing === "function") {
      throw new DevalueError(`Cannot stringify a function`, keys2);
    }
    if (!is_primitive(thing)) {
      if (counts.has(thing)) {
        counts.set(thing, counts.get(thing) + 1);
        return;
      }
      counts.set(thing, 1);
      const type2 = get_type(thing);
      switch (type2) {
        case "Number":
        case "BigInt":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach((value3, i) => {
            keys2.push(`[${i}]`);
            walk(value3);
            keys2.pop();
          });
          break;
        case "Set":
          Array.from(thing).forEach(walk);
          break;
        case "Map":
          for (const [key2, value3] of thing) {
            keys2.push(
              `.get(${is_primitive(key2) ? stringify_primitive(key2) : "..."})`
            );
            walk(value3);
            keys2.pop();
          }
          break;
        default:
          const proto = Object.getPrototypeOf(thing);
          if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== object_proto_names2) {
            throw new DevalueError(
              `Cannot stringify arbitrary non-POJOs`,
              keys2
            );
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new DevalueError(
              `Cannot stringify POJOs with symbolic keys`,
              keys2
            );
          }
          for (const key2 in thing) {
            keys2.push(`.${key2}`);
            walk(thing[key2]);
            keys2.pop();
          }
      }
    }
  }
  walk(value2);
  const names = /* @__PURE__ */ new Map();
  Array.from(counts).filter((entry) => entry[1] > 1).sort((a2, b) => b[1] - a2[1]).forEach((entry, i) => {
    names.set(entry[0], get_name(i));
  });
  function stringify2(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (is_primitive(thing)) {
      return stringify_primitive(thing);
    }
    const type2 = get_type(thing);
    switch (type2) {
      case "Number":
      case "String":
      case "Boolean":
        return `Object(${stringify2(thing.valueOf())})`;
      case "RegExp":
        return `new RegExp(${stringify_string(thing.source)}, "${thing.flags}")`;
      case "Date":
        return `new Date(${thing.getTime()})`;
      case "Array":
        const members = thing.map(
          (v, i) => i in thing ? stringify2(v) : ""
        );
        const tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return `[${members.join(",")}${tail}]`;
      case "Set":
      case "Map":
        return `new ${type2}([${Array.from(thing).map(stringify2).join(",")}])`;
      default:
        const obj = `{${Object.keys(thing).map((key2) => `${safe_key(key2)}:${stringify2(thing[key2])}`).join(",")}}`;
        const proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? `Object.assign(Object.create(null),${obj})` : `Object.create(null)`;
        }
        return obj;
    }
  }
  const str = stringify2(value2);
  if (names.size) {
    const params = [];
    const statements = [];
    const values = [];
    names.forEach((name, thing) => {
      params.push(name);
      if (is_primitive(thing)) {
        values.push(stringify_primitive(thing));
        return;
      }
      const type2 = get_type(thing);
      switch (type2) {
        case "Number":
        case "String":
        case "Boolean":
          values.push(`Object(${stringify2(thing.valueOf())})`);
          break;
        case "RegExp":
          values.push(thing.toString());
          break;
        case "Date":
          values.push(`new Date(${thing.getTime()})`);
          break;
        case "Array":
          values.push(`Array(${thing.length})`);
          thing.forEach((v, i) => {
            statements.push(`${name}[${i}]=${stringify2(v)}`);
          });
          break;
        case "Set":
          values.push(`new Set`);
          statements.push(
            `${name}.${Array.from(thing).map((v) => `add(${stringify2(v)})`).join(".")}`
          );
          break;
        case "Map":
          values.push(`new Map`);
          statements.push(
            `${name}.${Array.from(thing).map(([k, v]) => `set(${stringify2(k)}, ${stringify2(v)})`).join(".")}`
          );
          break;
        default:
          values.push(
            Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}"
          );
          Object.keys(thing).forEach((key2) => {
            statements.push(
              `${name}${safe_prop(key2)}=${stringify2(thing[key2])}`
            );
          });
      }
    });
    statements.push(`return ${str}`);
    return `(function(${params.join(",")}){${statements.join(
      ";"
    )}}(${values.join(",")}))`;
  } else {
    return str;
  }
}
function get_name(num) {
  let name = "";
  do {
    name = chars[num % chars.length] + name;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name) ? `${name}0` : name;
}
function escape_unsafe_char(c2) {
  return escaped[c2] || c2;
}
function escape_unsafe_chars(str) {
  return str.replace(unsafe_chars, escape_unsafe_char);
}
function safe_key(key2) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? key2 : escape_unsafe_chars(JSON.stringify(key2));
}
function safe_prop(key2) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key2) ? `.${key2}` : `[${escape_unsafe_chars(JSON.stringify(key2))}]`;
}
function stringify_primitive(thing) {
  if (typeof thing === "string")
    return stringify_string(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  const str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  if (typeof thing === "bigint")
    return thing + "n";
  return str;
}

// node_modules/devalue/src/constants.js
var UNDEFINED = -1;
var HOLE = -2;
var NAN = -3;
var POSITIVE_INFINITY = -4;
var NEGATIVE_INFINITY = -5;
var NEGATIVE_ZERO = -6;

// node_modules/devalue/src/stringify.js
function stringify(value2) {
  const stringified = [];
  const indexes = /* @__PURE__ */ new Map();
  const keys2 = [];
  let p = 0;
  function flatten3(thing) {
    if (typeof thing === "function") {
      throw new DevalueError(`Cannot stringify a function`, keys2);
    }
    if (indexes.has(thing))
      return indexes.get(thing);
    if (thing === void 0)
      return UNDEFINED;
    if (Number.isNaN(thing))
      return NAN;
    if (thing === Infinity)
      return POSITIVE_INFINITY;
    if (thing === -Infinity)
      return NEGATIVE_INFINITY;
    if (thing === 0 && 1 / thing < 0)
      return NEGATIVE_ZERO;
    const index6 = p++;
    indexes.set(thing, index6);
    let str = "";
    if (is_primitive(thing)) {
      str = stringify_primitive2(thing);
    } else {
      const type2 = get_type(thing);
      switch (type2) {
        case "Number":
        case "String":
        case "Boolean":
          str = `["Object",${stringify_primitive2(thing)}]`;
          break;
        case "BigInt":
          str = `["BigInt",${thing}]`;
          break;
        case "Date":
          str = `["Date","${thing.toISOString()}"]`;
          break;
        case "RegExp":
          const { source, flags } = thing;
          str = flags ? `["RegExp",${stringify_string(source)},"${flags}"]` : `["RegExp",${stringify_string(source)}]`;
          break;
        case "Array":
          str = "[";
          for (let i = 0; i < thing.length; i += 1) {
            if (i > 0)
              str += ",";
            if (i in thing) {
              keys2.push(`[${i}]`);
              str += flatten3(thing[i]);
              keys2.pop();
            } else {
              str += HOLE;
            }
          }
          str += "]";
          break;
        case "Set":
          str = '["Set"';
          for (const value3 of thing) {
            str += `,${flatten3(value3)}`;
          }
          str += "]";
          break;
        case "Map":
          str = '["Map"';
          for (const [key2, value3] of thing) {
            keys2.push(
              `.get(${is_primitive(key2) ? stringify_primitive2(key2) : "..."})`
            );
            str += `,${flatten3(key2)},${flatten3(value3)}`;
          }
          str += "]";
          break;
        default:
          if (!is_plain_object(thing)) {
            throw new DevalueError(
              `Cannot stringify arbitrary non-POJOs`,
              keys2
            );
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new DevalueError(
              `Cannot stringify POJOs with symbolic keys`,
              keys2
            );
          }
          if (Object.getPrototypeOf(thing) === null) {
            str = '["null"';
            for (const key2 in thing) {
              keys2.push(`.${key2}`);
              str += `,${stringify_string(key2)},${flatten3(thing[key2])}`;
              keys2.pop();
            }
            str += "]";
          } else {
            str = "{";
            let started = false;
            for (const key2 in thing) {
              if (started)
                str += ",";
              started = true;
              keys2.push(`.${key2}`);
              str += `${stringify_string(key2)}:${flatten3(thing[key2])}`;
              keys2.pop();
            }
            str += "}";
          }
      }
    }
    stringified[index6] = str;
    return index6;
  }
  const index5 = flatten3(value2);
  if (index5 < 0)
    return `${index5}`;
  return `[${stringified.join(",")}]`;
}
function stringify_primitive2(thing) {
  const type2 = typeof thing;
  if (type2 === "string")
    return stringify_string(thing);
  if (thing instanceof String)
    return stringify_string(thing.toString());
  if (thing === void 0)
    return UNDEFINED.toString();
  if (thing === 0 && 1 / thing < 0)
    return NEGATIVE_ZERO.toString();
  if (type2 === "bigint")
    return `["BigInt","${thing}"]`;
  return String(thing);
}

// .svelte-kit/output/server/index.js
init_index3();
var import_cookie = __toESM(require_cookie(), 1);
var set_cookie_parser = __toESM(require_set_cookie(), 1);
function afterUpdate() {
}
var DEV = false;
var Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { stores } = $$props;
  let { page: page2 } = $$props;
  let { components } = $$props;
  let { form } = $$props;
  let { data_0 = null } = $$props;
  let { data_1 = null } = $$props;
  {
    setContext("__svelte__", stores);
  }
  afterUpdate(stores.page.notify);
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page2 !== void 0)
    $$bindings.page(page2);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.form === void 0 && $$bindings.form && form !== void 0)
    $$bindings.form(form);
  if ($$props.data_0 === void 0 && $$bindings.data_0 && data_0 !== void 0)
    $$bindings.data_0(data_0);
  if ($$props.data_1 === void 0 && $$bindings.data_1 && data_1 !== void 0)
    $$bindings.data_1(data_1);
  {
    stores.page.set(page2);
  }
  return `


${components[1] ? `${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, { data: data_0 }, {}, {
    default: () => {
      return `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, { data: data_1, form }, {}, {})}`;
    }
  })}` : `${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, { data: data_0, form }, {}, {})}`}

${``}`;
});
function negotiate(accept, types) {
  const parts = [];
  accept.split(",").forEach((str, i) => {
    const match2 = /([^/]+)\/([^;]+)(?:;q=([0-9.]+))?/.exec(str);
    if (match2) {
      const [, type2, subtype, q = "1"] = match2;
      parts.push({ type: type2, subtype, q: +q, i });
    }
  });
  parts.sort((a2, b) => {
    if (a2.q !== b.q) {
      return b.q - a2.q;
    }
    if (a2.subtype === "*" !== (b.subtype === "*")) {
      return a2.subtype === "*" ? 1 : -1;
    }
    if (a2.type === "*" !== (b.type === "*")) {
      return a2.type === "*" ? 1 : -1;
    }
    return a2.i - b.i;
  });
  let accepted;
  let min_priority = Infinity;
  for (const mimetype of types) {
    const [type2, subtype] = mimetype.split("/");
    const priority = parts.findIndex(
      (part) => (part.type === type2 || part.type === "*") && (part.subtype === subtype || part.subtype === "*")
    );
    if (priority !== -1 && priority < min_priority) {
      accepted = mimetype;
      min_priority = priority;
    }
  }
  return accepted;
}
function is_content_type(request, ...types) {
  const type2 = request.headers.get("content-type")?.split(";", 1)[0].trim() ?? "";
  return types.includes(type2);
}
function is_form_content_type(request) {
  return is_content_type(request, "application/x-www-form-urlencoded", "multipart/form-data");
}
function coalesce_to_error(err) {
  return err instanceof Error || err && err.name && err.message ? err : new Error(JSON.stringify(err));
}
function normalize_error(error2) {
  return error2;
}
function normalize_path(path3, trailing_slash) {
  if (path3 === "/" || trailing_slash === "ignore")
    return path3;
  if (trailing_slash === "never") {
    return path3.endsWith("/") ? path3.slice(0, -1) : path3;
  } else if (trailing_slash === "always" && !path3.endsWith("/")) {
    return path3 + "/";
  }
  return path3;
}
function decode_pathname(pathname) {
  return pathname.split("%25").map(decodeURI).join("%25");
}
function decode_params(params) {
  for (const key2 in params) {
    params[key2] = decodeURIComponent(params[key2]);
  }
  return params;
}
var tracked_url_properties = ["href", "pathname", "search", "searchParams", "toString", "toJSON"];
function make_trackable(url, callback) {
  const tracked = new URL(url);
  for (const property2 of tracked_url_properties) {
    let value2 = tracked[property2];
    Object.defineProperty(tracked, property2, {
      get() {
        callback();
        return value2;
      },
      enumerable: true,
      configurable: true
    });
  }
  {
    tracked[Symbol.for("nodejs.util.inspect.custom")] = (depth, opts, inspect) => {
      return inspect(url, opts);
    };
  }
  disable_hash(tracked);
  return tracked;
}
function disable_hash(url) {
  Object.defineProperty(url, "hash", {
    get() {
      throw new Error(
        "Cannot access event.url.hash. Consider using `$page.url.hash` inside a component instead"
      );
    }
  });
}
function disable_search(url) {
  for (const property2 of ["search", "searchParams"]) {
    Object.defineProperty(url, property2, {
      get() {
        throw new Error(`Cannot access url.${property2} on a page with prerendering enabled`);
      }
    });
  }
}
var DATA_SUFFIX = "/__data.json";
function has_data_suffix(pathname) {
  return pathname.endsWith(DATA_SUFFIX);
}
function add_data_suffix(pathname) {
  return pathname.replace(/\/$/, "") + DATA_SUFFIX;
}
function strip_data_suffix(pathname) {
  return pathname.slice(0, -DATA_SUFFIX.length);
}
var GENERIC_ERROR = {
  id: "__error"
};
function method_not_allowed(mod2, method) {
  return new Response(`${method} method not allowed`, {
    status: 405,
    headers: {
      allow: allowed_methods(mod2).join(", ")
    }
  });
}
function allowed_methods(mod2) {
  const allowed = [];
  for (const method in ["GET", "POST", "PUT", "PATCH", "DELETE"]) {
    if (method in mod2)
      allowed.push(method);
  }
  if (mod2.GET || mod2.HEAD)
    allowed.push("HEAD");
  return allowed;
}
function get_option(nodes, option) {
  return nodes.reduce((value2, node) => {
    return node?.universal?.[option] ?? node?.server?.[option] ?? value2;
  }, void 0);
}
function static_error_page(options2, status, message) {
  return new Response(options2.error_template({ status, message }), {
    headers: { "content-type": "text/html; charset=utf-8" },
    status
  });
}
async function handle_fatal_error(event, options2, error2) {
  error2 = error2 instanceof HttpError ? error2 : coalesce_to_error(error2);
  const status = error2 instanceof HttpError ? error2.status : 500;
  const body = await handle_error_and_jsonify(event, options2, error2);
  const type2 = negotiate(event.request.headers.get("accept") || "text/html", [
    "application/json",
    "text/html"
  ]);
  if (has_data_suffix(new URL(event.request.url).pathname) || type2 === "application/json") {
    return new Response(JSON.stringify(body), {
      status,
      headers: { "content-type": "application/json; charset=utf-8" }
    });
  }
  return static_error_page(options2, status, body.message);
}
function handle_error_and_jsonify(event, options2, error2) {
  if (error2 instanceof HttpError) {
    return error2.body;
  } else {
    return options2.handle_error(error2, event);
  }
}
function redirect_response(status, location2) {
  const response = new Response(void 0, {
    status,
    headers: { location: location2 }
  });
  return response;
}
function clarify_devalue_error(event, error2) {
  if (error2.path) {
    return `Data returned from \`load\` while rendering ${event.route.id} is not serializable: ${error2.message} (data${error2.path})`;
  }
  if (error2.path === "") {
    return `Data returned from \`load\` while rendering ${event.route.id} is not a plain object`;
  }
  return error2.message;
}
function serialize_data_node(node) {
  if (!node)
    return "null";
  if (node.type === "error" || node.type === "skip") {
    return JSON.stringify(node);
  }
  const stringified = stringify(node.data);
  const uses = [];
  if (node.uses.dependencies.size > 0) {
    uses.push(`"dependencies":${JSON.stringify(Array.from(node.uses.dependencies))}`);
  }
  if (node.uses.params.size > 0) {
    uses.push(`"params":${JSON.stringify(Array.from(node.uses.params))}`);
  }
  if (node.uses.parent)
    uses.push(`"parent":1`);
  if (node.uses.route)
    uses.push(`"route":1`);
  if (node.uses.url)
    uses.push(`"url":1`);
  return `{"type":"data","data":${stringified},"uses":{${uses.join(",")}}${node.slash ? `,"slash":${JSON.stringify(node.slash)}` : ""}}`;
}
async function render_endpoint(event, mod2, state) {
  const method = event.request.method;
  let handler = mod2[method];
  if (!handler && method === "HEAD") {
    handler = mod2.GET;
  }
  if (!handler) {
    return method_not_allowed(mod2, method);
  }
  const prerender = mod2.prerender ?? state.prerender_default;
  if (prerender && (mod2.POST || mod2.PATCH || mod2.PUT || mod2.DELETE)) {
    throw new Error("Cannot prerender endpoints that have mutative methods");
  }
  if (state.prerendering && !prerender) {
    if (state.initiator) {
      throw new Error(`${event.route.id} is not prerenderable`);
    } else {
      return new Response(void 0, { status: 204 });
    }
  }
  try {
    const response = await handler(
      event
    );
    if (!(response instanceof Response)) {
      throw new Error(
        `Invalid response from route ${event.url.pathname}: handler should return a Response object`
      );
    }
    if (state.prerendering) {
      response.headers.set("x-sveltekit-prerender", String(prerender));
    }
    return response;
  } catch (error2) {
    if (error2 instanceof Redirect) {
      return new Response(void 0, {
        status: error2.status,
        headers: { location: error2.location }
      });
    }
    throw error2;
  }
}
function is_endpoint_request(event) {
  const { method, headers } = event.request;
  if (method === "PUT" || method === "PATCH" || method === "DELETE") {
    return true;
  }
  if (method === "POST" && headers.get("x-sveltekit-action") === "true")
    return false;
  const accept = event.request.headers.get("accept") ?? "*/*";
  return negotiate(accept, ["*", "text/html"]) !== "text/html";
}
function compact(arr) {
  return arr.filter((val) => val != null);
}
function is_action_json_request(event) {
  const accept = negotiate(event.request.headers.get("accept") ?? "*/*", [
    "application/json",
    "text/html"
  ]);
  return accept === "application/json" && event.request.method === "POST";
}
async function handle_action_json_request(event, options2, server2) {
  const actions2 = server2?.actions;
  if (!actions2) {
    if (server2) {
      maybe_throw_migration_error(server2);
    }
    const no_actions_error = error(405, "POST method not allowed. No actions exist for this page");
    return action_json(
      {
        type: "error",
        error: await handle_error_and_jsonify(event, options2, no_actions_error)
      },
      {
        status: no_actions_error.status,
        headers: {
          allow: "GET"
        }
      }
    );
  }
  check_named_default_separate(actions2);
  try {
    const data = await call_action(event, actions2);
    if (data instanceof ActionFailure) {
      return action_json({
        type: "failure",
        status: data.status,
        data: stringify_action_response(data.data, event.route.id)
      });
    } else {
      return action_json({
        type: "success",
        status: data ? 200 : 204,
        data: stringify_action_response(data, event.route.id)
      });
    }
  } catch (e) {
    const error2 = normalize_error(e);
    if (error2 instanceof Redirect) {
      return action_json({
        type: "redirect",
        status: error2.status,
        location: error2.location
      });
    }
    return action_json(
      {
        type: "error",
        error: await handle_error_and_jsonify(event, options2, check_incorrect_fail_use(error2))
      },
      {
        status: error2 instanceof HttpError ? error2.status : 500
      }
    );
  }
}
function check_incorrect_fail_use(error2) {
  return error2 instanceof ActionFailure ? new Error(`Cannot "throw fail()". Use "return fail()"`) : error2;
}
function action_json(data, init22) {
  return json(data, init22);
}
function is_action_request(event, leaf_node) {
  return leaf_node.server && event.request.method !== "GET" && event.request.method !== "HEAD";
}
async function handle_action_request(event, server2) {
  const actions2 = server2.actions;
  if (!actions2) {
    maybe_throw_migration_error(server2);
    event.setHeaders({
      allow: "GET"
    });
    return {
      type: "error",
      error: error(405, "POST method not allowed. No actions exist for this page")
    };
  }
  check_named_default_separate(actions2);
  try {
    const data = await call_action(event, actions2);
    if (data instanceof ActionFailure) {
      return { type: "failure", status: data.status, data: data.data };
    } else {
      return {
        type: "success",
        status: 200,
        data
      };
    }
  } catch (e) {
    const error2 = normalize_error(e);
    if (error2 instanceof Redirect) {
      return {
        type: "redirect",
        status: error2.status,
        location: error2.location
      };
    }
    return {
      type: "error",
      error: check_incorrect_fail_use(error2)
    };
  }
}
function check_named_default_separate(actions2) {
  if (actions2.default && Object.keys(actions2).length > 1) {
    throw new Error(
      `When using named actions, the default action cannot be used. See the docs for more info: https://kit.svelte.dev/docs/form-actions#named-actions`
    );
  }
}
async function call_action(event, actions2) {
  const url = new URL(event.request.url);
  let name = "default";
  for (const param of url.searchParams) {
    if (param[0].startsWith("/")) {
      name = param[0].slice(1);
      if (name === "default") {
        throw new Error('Cannot use reserved action name "default"');
      }
      break;
    }
  }
  const action = actions2[name];
  if (!action) {
    throw new Error(`No action with name '${name}' found`);
  }
  if (!is_form_content_type(event.request)) {
    throw new Error(
      `Actions expect form-encoded data (received ${event.request.headers.get("content-type")}`
    );
  }
  return action(event);
}
function maybe_throw_migration_error(server2) {
  for (const method of ["POST", "PUT", "PATCH", "DELETE"]) {
    if (server2[method]) {
      throw new Error(
        `${method} method no longer allowed in +page.server, use actions instead. See the PR for more info: https://github.com/sveltejs/kit/pull/6469`
      );
    }
  }
}
function uneval_action_response(data, route_id) {
  return try_deserialize(data, uneval, route_id);
}
function stringify_action_response(data, route_id) {
  return try_deserialize(data, stringify, route_id);
}
function try_deserialize(data, fn, route_id) {
  try {
    return fn(data);
  } catch (e) {
    const error2 = e;
    if ("path" in error2) {
      let message = `Data returned from action inside ${route_id} is not serializable: ${error2.message}`;
      if (error2.path !== "")
        message += ` (data.${error2.path})`;
      throw new Error(message);
    }
    throw error2;
  }
}
async function unwrap_promises(object) {
  for (const key2 in object) {
    if (typeof object[key2]?.then === "function") {
      return Object.fromEntries(
        await Promise.all(Object.entries(object).map(async ([key3, value2]) => [key3, await value2]))
      );
    }
  }
  return object;
}
async function load_server_data({ event, options: options2, state, node, parent }) {
  if (!node?.server)
    return null;
  const uses = {
    dependencies: /* @__PURE__ */ new Set(),
    params: /* @__PURE__ */ new Set(),
    parent: false,
    route: false,
    url: false
  };
  const url = make_trackable(event.url, () => {
    uses.url = true;
  });
  if (state.prerendering) {
    disable_search(url);
  }
  const result = await node.server.load?.call(null, {
    ...event,
    depends: (...deps) => {
      for (const dep of deps) {
        const { href } = new URL(dep, event.url);
        uses.dependencies.add(href);
      }
    },
    params: new Proxy(event.params, {
      get: (target, key2) => {
        uses.params.add(key2);
        return target[key2];
      }
    }),
    parent: async () => {
      uses.parent = true;
      return parent();
    },
    route: {
      get id() {
        uses.route = true;
        return event.route.id;
      }
    },
    url
  });
  const data = result ? await unwrap_promises(result) : null;
  if (options2.dev) {
    validate_load_response(data, event.route.id);
  }
  return {
    type: "data",
    data,
    uses,
    slash: node.server.trailingSlash
  };
}
async function load_data({
  event,
  fetched,
  node,
  parent,
  server_data_promise,
  state,
  resolve_opts,
  csr
}) {
  const server_data_node = await server_data_promise;
  if (!node?.universal?.load) {
    return server_data_node?.data ?? null;
  }
  const result = await node.universal.load.call(null, {
    url: event.url,
    params: event.params,
    data: server_data_node?.data ?? null,
    route: event.route,
    fetch: async (input, init22) => {
      const cloned_body = input instanceof Request && input.body ? input.clone().body : null;
      const response = await event.fetch(input, init22);
      const url = new URL(input instanceof Request ? input.url : input, event.url);
      const same_origin = url.origin === event.url.origin;
      let dependency;
      if (same_origin) {
        if (state.prerendering) {
          dependency = { response, body: null };
          state.prerendering.dependencies.set(url.pathname, dependency);
        }
      } else {
        const mode = input instanceof Request ? input.mode : init22?.mode ?? "cors";
        if (mode !== "no-cors") {
          const acao = response.headers.get("access-control-allow-origin");
          if (!acao || acao !== event.url.origin && acao !== "*") {
            throw new Error(
              `CORS error: ${acao ? "Incorrect" : "No"} 'Access-Control-Allow-Origin' header is present on the requested resource`
            );
          }
        }
      }
      const proxy = new Proxy(response, {
        get(response2, key2, _receiver) {
          async function text() {
            const body = await response2.text();
            if (!body || typeof body === "string") {
              const status_number = Number(response2.status);
              if (isNaN(status_number)) {
                throw new Error(
                  `response.status is not a number. value: "${response2.status}" type: ${typeof response2.status}`
                );
              }
              fetched.push({
                url: same_origin ? url.href.slice(event.url.origin.length) : url.href,
                method: event.request.method,
                request_body: input instanceof Request && cloned_body ? await stream_to_string(cloned_body) : init22?.body,
                response_body: body,
                response: response2
              });
            }
            if (dependency) {
              dependency.body = body;
            }
            return body;
          }
          if (key2 === "arrayBuffer") {
            return async () => {
              const buffer = await response2.arrayBuffer();
              if (dependency) {
                dependency.body = new Uint8Array(buffer);
              }
              return buffer;
            };
          }
          if (key2 === "text") {
            return text;
          }
          if (key2 === "json") {
            return async () => {
              return JSON.parse(await text());
            };
          }
          return Reflect.get(response2, key2, response2);
        }
      });
      if (csr) {
        const get5 = response.headers.get;
        response.headers.get = (key2) => {
          const lower2 = key2.toLowerCase();
          const value2 = get5.call(response.headers, lower2);
          if (value2 && !lower2.startsWith("x-sveltekit-")) {
            const included = resolve_opts.filterSerializedResponseHeaders(lower2, value2);
            if (!included) {
              throw new Error(
                `Failed to get response header "${lower2}" \u2014 it must be included by the \`filterSerializedResponseHeaders\` option: https://kit.svelte.dev/docs/hooks#server-hooks-handle (at ${event.route})`
              );
            }
          }
          return value2;
        };
      }
      return proxy;
    },
    setHeaders: event.setHeaders,
    depends: () => {
    },
    parent
  });
  const data = result ? await unwrap_promises(result) : null;
  validate_load_response(data, event.route.id);
  return data;
}
async function stream_to_string(stream) {
  let result = "";
  const reader = stream.getReader();
  const decoder = new TextDecoder();
  while (true) {
    const { done, value: value2 } = await reader.read();
    if (done) {
      break;
    }
    result += decoder.decode(value2);
  }
  return result;
}
function validate_load_response(data, routeId) {
  if (data != null && Object.getPrototypeOf(data) !== Object.prototype) {
    throw new Error(
      `a load function related to route '${routeId}' returned ${typeof data !== "object" ? `a ${typeof data}` : data instanceof Response ? "a Response object" : Array.isArray(data) ? "an array" : "a non-plain object"}, but must return a plain object at the top level (i.e. \`return {...}\`)`
    );
  }
}
function hash(value2) {
  let hash2 = 5381;
  if (typeof value2 === "string") {
    let i = value2.length;
    while (i)
      hash2 = hash2 * 33 ^ value2.charCodeAt(--i);
  } else if (ArrayBuffer.isView(value2)) {
    const buffer = new Uint8Array(value2.buffer, value2.byteOffset, value2.byteLength);
    let i = buffer.length;
    while (i)
      hash2 = hash2 * 33 ^ buffer[--i];
  } else {
    throw new TypeError("value must be a string or TypedArray");
  }
  return (hash2 >>> 0).toString(36);
}
var escape_html_attr_dict = {
  "&": "&amp;",
  '"': "&quot;"
};
var escape_html_attr_regex = new RegExp(
  `[${Object.keys(escape_html_attr_dict).join("")}]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\udc00-\\udfff]`,
  "g"
);
function escape_html_attr(str) {
  const escaped_str = str.replace(escape_html_attr_regex, (match2) => {
    if (match2.length === 2) {
      return match2;
    }
    return escape_html_attr_dict[match2] ?? `&#${match2.charCodeAt(0)};`;
  });
  return `"${escaped_str}"`;
}
var replacements = {
  "<": "\\u003C",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var pattern = new RegExp(`[${Object.keys(replacements).join("")}]`, "g");
function serialize_data(fetched, filter2, prerendering = false) {
  const headers = {};
  let cache_control = null;
  let age = null;
  for (const [key2, value2] of fetched.response.headers) {
    if (filter2(key2, value2)) {
      headers[key2] = value2;
    }
    if (key2 === "cache-control")
      cache_control = value2;
    if (key2 === "age")
      age = value2;
  }
  const payload = {
    status: fetched.response.status,
    statusText: fetched.response.statusText,
    headers,
    body: fetched.response_body
  };
  const safe_payload = JSON.stringify(payload).replace(pattern, (match2) => replacements[match2]);
  const attrs = [
    'type="application/json"',
    "data-sveltekit-fetched",
    `data-url=${escape_html_attr(fetched.url)}`
  ];
  if (fetched.request_body) {
    attrs.push(`data-hash=${escape_html_attr(hash(fetched.request_body))}`);
  }
  if (!prerendering && fetched.method === "GET" && cache_control) {
    const match2 = /s-maxage=(\d+)/g.exec(cache_control) ?? /max-age=(\d+)/g.exec(cache_control);
    if (match2) {
      const ttl = +match2[1] - +(age ?? "0");
      attrs.push(`data-ttl="${ttl}"`);
    }
  }
  return `<script ${attrs.join(" ")}>${safe_payload}<\/script>`;
}
var s = JSON.stringify;
var encoder = new TextEncoder();
function sha256(data) {
  if (!key[0])
    precompute();
  const out = init.slice(0);
  const array22 = encode(data);
  for (let i = 0; i < array22.length; i += 16) {
    const w = array22.subarray(i, i + 16);
    let tmp;
    let a2;
    let b;
    let out0 = out[0];
    let out1 = out[1];
    let out2 = out[2];
    let out3 = out[3];
    let out4 = out[4];
    let out5 = out[5];
    let out6 = out[6];
    let out7 = out[7];
    for (let i2 = 0; i2 < 64; i2++) {
      if (i2 < 16) {
        tmp = w[i2];
      } else {
        a2 = w[i2 + 1 & 15];
        b = w[i2 + 14 & 15];
        tmp = w[i2 & 15] = (a2 >>> 7 ^ a2 >>> 18 ^ a2 >>> 3 ^ a2 << 25 ^ a2 << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i2 & 15] + w[i2 + 9 & 15] | 0;
      }
      tmp = tmp + out7 + (out4 >>> 6 ^ out4 >>> 11 ^ out4 >>> 25 ^ out4 << 26 ^ out4 << 21 ^ out4 << 7) + (out6 ^ out4 & (out5 ^ out6)) + key[i2];
      out7 = out6;
      out6 = out5;
      out5 = out4;
      out4 = out3 + tmp | 0;
      out3 = out2;
      out2 = out1;
      out1 = out0;
      out0 = tmp + (out1 & out2 ^ out3 & (out1 ^ out2)) + (out1 >>> 2 ^ out1 >>> 13 ^ out1 >>> 22 ^ out1 << 30 ^ out1 << 19 ^ out1 << 10) | 0;
    }
    out[0] = out[0] + out0 | 0;
    out[1] = out[1] + out1 | 0;
    out[2] = out[2] + out2 | 0;
    out[3] = out[3] + out3 | 0;
    out[4] = out[4] + out4 | 0;
    out[5] = out[5] + out5 | 0;
    out[6] = out[6] + out6 | 0;
    out[7] = out[7] + out7 | 0;
  }
  const bytes = new Uint8Array(out.buffer);
  reverse_endianness(bytes);
  return base64(bytes);
}
var init = new Uint32Array(8);
var key = new Uint32Array(64);
function precompute() {
  function frac(x3) {
    return (x3 - Math.floor(x3)) * 4294967296;
  }
  let prime = 2;
  for (let i = 0; i < 64; prime++) {
    let is_prime = true;
    for (let factor = 2; factor * factor <= prime; factor++) {
      if (prime % factor === 0) {
        is_prime = false;
        break;
      }
    }
    if (is_prime) {
      if (i < 8) {
        init[i] = frac(prime ** (1 / 2));
      }
      key[i] = frac(prime ** (1 / 3));
      i++;
    }
  }
}
function reverse_endianness(bytes) {
  for (let i = 0; i < bytes.length; i += 4) {
    const a2 = bytes[i + 0];
    const b = bytes[i + 1];
    const c2 = bytes[i + 2];
    const d = bytes[i + 3];
    bytes[i + 0] = d;
    bytes[i + 1] = c2;
    bytes[i + 2] = b;
    bytes[i + 3] = a2;
  }
}
function encode(str) {
  const encoded = encoder.encode(str);
  const length = encoded.length * 8;
  const size = 512 * Math.ceil((length + 65) / 512);
  const bytes = new Uint8Array(size / 8);
  bytes.set(encoded);
  bytes[encoded.length] = 128;
  reverse_endianness(bytes);
  const words2 = new Uint32Array(bytes.buffer);
  words2[words2.length - 2] = Math.floor(length / 4294967296);
  words2[words2.length - 1] = length;
  return words2;
}
var chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
function base64(bytes) {
  const l = bytes.length;
  let result = "";
  let i;
  for (i = 2; i < l; i += 3) {
    result += chars2[bytes[i - 2] >> 2];
    result += chars2[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
    result += chars2[(bytes[i - 1] & 15) << 2 | bytes[i] >> 6];
    result += chars2[bytes[i] & 63];
  }
  if (i === l + 1) {
    result += chars2[bytes[i - 2] >> 2];
    result += chars2[(bytes[i - 2] & 3) << 4];
    result += "==";
  }
  if (i === l) {
    result += chars2[bytes[i - 2] >> 2];
    result += chars2[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
    result += chars2[(bytes[i - 1] & 15) << 2];
    result += "=";
  }
  return result;
}
var array = new Uint8Array(16);
function generate_nonce() {
  crypto.getRandomValues(array);
  return base64(array);
}
var quoted = /* @__PURE__ */ new Set([
  "self",
  "unsafe-eval",
  "unsafe-hashes",
  "unsafe-inline",
  "none",
  "strict-dynamic",
  "report-sample",
  "wasm-unsafe-eval"
]);
var crypto_pattern = /^(nonce|sha\d\d\d)-/;
var _use_hashes, _script_needs_csp, _style_needs_csp, _directives, _script_src, _style_src, _nonce;
var BaseProvider = class {
  constructor(use_hashes, directives, nonce, dev) {
    __privateAdd(this, _use_hashes, void 0);
    __privateAdd(this, _script_needs_csp, void 0);
    __privateAdd(this, _style_needs_csp, void 0);
    __privateAdd(this, _directives, void 0);
    __privateAdd(this, _script_src, void 0);
    __privateAdd(this, _style_src, void 0);
    __privateAdd(this, _nonce, void 0);
    __privateSet(this, _use_hashes, use_hashes);
    __privateSet(this, _directives, dev ? { ...directives } : directives);
    const d = __privateGet(this, _directives);
    if (dev) {
      const effective_style_src2 = d["style-src"] || d["default-src"];
      if (effective_style_src2 && !effective_style_src2.includes("unsafe-inline")) {
        d["style-src"] = [...effective_style_src2, "unsafe-inline"];
      }
    }
    __privateSet(this, _script_src, []);
    __privateSet(this, _style_src, []);
    const effective_script_src = d["script-src"] || d["default-src"];
    const effective_style_src = d["style-src"] || d["default-src"];
    __privateSet(this, _script_needs_csp, !!effective_script_src && effective_script_src.filter((value2) => value2 !== "unsafe-inline").length > 0);
    __privateSet(this, _style_needs_csp, !dev && !!effective_style_src && effective_style_src.filter((value2) => value2 !== "unsafe-inline").length > 0);
    this.script_needs_nonce = __privateGet(this, _script_needs_csp) && !__privateGet(this, _use_hashes);
    this.style_needs_nonce = __privateGet(this, _style_needs_csp) && !__privateGet(this, _use_hashes);
    __privateSet(this, _nonce, nonce);
  }
  add_script(content) {
    if (__privateGet(this, _script_needs_csp)) {
      if (__privateGet(this, _use_hashes)) {
        __privateGet(this, _script_src).push(`sha256-${sha256(content)}`);
      } else if (__privateGet(this, _script_src).length === 0) {
        __privateGet(this, _script_src).push(`nonce-${__privateGet(this, _nonce)}`);
      }
    }
  }
  add_style(content) {
    if (__privateGet(this, _style_needs_csp)) {
      if (__privateGet(this, _use_hashes)) {
        __privateGet(this, _style_src).push(`sha256-${sha256(content)}`);
      } else if (__privateGet(this, _style_src).length === 0) {
        __privateGet(this, _style_src).push(`nonce-${__privateGet(this, _nonce)}`);
      }
    }
  }
  get_header(is_meta = false) {
    const header = [];
    const directives = { ...__privateGet(this, _directives) };
    if (__privateGet(this, _style_src).length > 0) {
      directives["style-src"] = [
        ...directives["style-src"] || directives["default-src"] || [],
        ...__privateGet(this, _style_src)
      ];
    }
    if (__privateGet(this, _script_src).length > 0) {
      directives["script-src"] = [
        ...directives["script-src"] || directives["default-src"] || [],
        ...__privateGet(this, _script_src)
      ];
    }
    for (const key2 in directives) {
      if (is_meta && (key2 === "frame-ancestors" || key2 === "report-uri" || key2 === "sandbox")) {
        continue;
      }
      const value2 = directives[key2];
      if (!value2)
        continue;
      const directive = [key2];
      if (Array.isArray(value2)) {
        value2.forEach((value22) => {
          if (quoted.has(value22) || crypto_pattern.test(value22)) {
            directive.push(`'${value22}'`);
          } else {
            directive.push(value22);
          }
        });
      }
      header.push(directive.join(" "));
    }
    return header.join("; ");
  }
};
_use_hashes = new WeakMap();
_script_needs_csp = new WeakMap();
_style_needs_csp = new WeakMap();
_directives = new WeakMap();
_script_src = new WeakMap();
_style_src = new WeakMap();
_nonce = new WeakMap();
var CspProvider = class extends BaseProvider {
  get_meta() {
    const content = escape_html_attr(this.get_header(true));
    return `<meta http-equiv="content-security-policy" content=${content}>`;
  }
};
var CspReportOnlyProvider = class extends BaseProvider {
  constructor(use_hashes, directives, nonce, dev) {
    super(use_hashes, directives, nonce, dev);
    if (Object.values(directives).filter((v) => !!v).length > 0) {
      const has_report_to = directives["report-to"]?.length ?? 0 > 0;
      const has_report_uri = directives["report-uri"]?.length ?? 0 > 0;
      if (!has_report_to && !has_report_uri) {
        throw Error(
          "`content-security-policy-report-only` must be specified with either the `report-to` or `report-uri` directives, or both"
        );
      }
    }
  }
};
var Csp = class {
  constructor({ mode, directives, reportOnly }, { prerender, dev }) {
    __publicField(this, "nonce", generate_nonce());
    __publicField(this, "csp_provider");
    __publicField(this, "report_only_provider");
    const use_hashes = mode === "hash" || mode === "auto" && prerender;
    this.csp_provider = new CspProvider(use_hashes, directives, this.nonce, dev);
    this.report_only_provider = new CspReportOnlyProvider(use_hashes, reportOnly, this.nonce, dev);
  }
  get script_needs_nonce() {
    return this.csp_provider.script_needs_nonce || this.report_only_provider.script_needs_nonce;
  }
  get style_needs_nonce() {
    return this.csp_provider.style_needs_nonce || this.report_only_provider.style_needs_nonce;
  }
  add_script(content) {
    this.csp_provider.add_script(content);
    this.report_only_provider.add_script(content);
  }
  add_style(content) {
    this.csp_provider.add_style(content);
    this.report_only_provider.add_style(content);
  }
};
var updated = {
  ...readable(false),
  check: () => false
};
async function render_response({
  branch,
  fetched,
  options: options2,
  state,
  page_config,
  status,
  error: error2 = null,
  event,
  resolve_opts,
  action_result
}) {
  if (state.prerendering) {
    if (options2.csp.mode === "nonce") {
      throw new Error('Cannot use prerendering if config.kit.csp.mode === "nonce"');
    }
    if (options2.app_template_contains_nonce) {
      throw new Error("Cannot use prerendering if page template contains %sveltekit.nonce%");
    }
  }
  const { entry } = options2.manifest._;
  const stylesheets4 = new Set(entry.stylesheets);
  const modulepreloads = new Set(entry.imports);
  const fonts4 = new Set(options2.manifest._.entry.fonts);
  const link_header_preloads = /* @__PURE__ */ new Set();
  const inline_styles = /* @__PURE__ */ new Map();
  let rendered;
  const form_value = action_result?.type === "success" || action_result?.type === "failure" ? action_result.data ?? null : null;
  if (page_config.ssr) {
    const props = {
      stores: {
        page: writable(null),
        navigating: writable(null),
        updated
      },
      components: await Promise.all(branch.map(({ node }) => node.component())),
      form: form_value
    };
    let data = {};
    for (let i = 0; i < branch.length; i += 1) {
      data = { ...data, ...branch[i].data };
      props[`data_${i}`] = data;
    }
    props.page = {
      error: error2,
      params: event.params,
      route: event.route,
      status,
      url: event.url,
      data,
      form: form_value
    };
    rendered = options2.root.render(props);
    for (const { node } of branch) {
      if (node.imports) {
        node.imports.forEach((url) => modulepreloads.add(url));
      }
      if (node.stylesheets) {
        node.stylesheets.forEach((url) => stylesheets4.add(url));
      }
      if (node.fonts) {
        node.fonts.forEach((url) => fonts4.add(url));
      }
      if (node.inline_styles) {
        Object.entries(await node.inline_styles()).forEach(([k, v]) => inline_styles.set(k, v));
      }
    }
  } else {
    rendered = { head: "", html: "", css: { code: "", map: null } };
  }
  let head = "";
  let body = rendered.html;
  const csp = new Csp(options2.csp, {
    dev: options2.dev,
    prerender: !!state.prerendering
  });
  const target = hash(body);
  let assets2;
  if (options2.paths.assets) {
    assets2 = options2.paths.assets;
  } else if (state.prerendering?.fallback) {
    assets2 = options2.paths.base;
  } else {
    const segments = event.url.pathname.slice(options2.paths.base.length).split("/").slice(2);
    assets2 = segments.length > 0 ? segments.map(() => "..").join("/") : ".";
  }
  const prefixed = (path3) => path3.startsWith("/") ? path3 : `${assets2}/${path3}`;
  const serialized = { data: "", form: "null" };
  try {
    serialized.data = `[${branch.map(({ server_data }) => {
      if (server_data?.type === "data") {
        const data = uneval(server_data.data);
        const uses = [];
        if (server_data.uses.dependencies.size > 0) {
          uses.push(`dependencies:${s(Array.from(server_data.uses.dependencies))}`);
        }
        if (server_data.uses.params.size > 0) {
          uses.push(`params:${s(Array.from(server_data.uses.params))}`);
        }
        if (server_data.uses.parent)
          uses.push(`parent:1`);
        if (server_data.uses.route)
          uses.push(`route:1`);
        if (server_data.uses.url)
          uses.push(`url:1`);
        return `{type:"data",data:${data},uses:{${uses.join(",")}}${server_data.slash ? `,slash:${s(server_data.slash)}` : ""}}`;
      }
      return s(server_data);
    }).join(",")}]`;
  } catch (e) {
    const error3 = e;
    throw new Error(clarify_devalue_error(event, error3));
  }
  if (form_value) {
    serialized.form = uneval_action_response(form_value, event.route.id);
  }
  if (inline_styles.size > 0) {
    const content = Array.from(inline_styles.values()).join("\n");
    const attributes = [];
    if (options2.dev)
      attributes.push(" data-sveltekit");
    if (csp.style_needs_nonce)
      attributes.push(` nonce="${csp.nonce}"`);
    csp.add_style(content);
    head += `
	<style${attributes.join("")}>${content}</style>`;
  }
  for (const dep of stylesheets4) {
    const path3 = prefixed(dep);
    if (resolve_opts.preload({ type: "css", path: path3 })) {
      const attributes = [];
      if (csp.style_needs_nonce) {
        attributes.push(`nonce="${csp.nonce}"`);
      }
      if (inline_styles.has(dep)) {
        attributes.push("disabled", 'media="(max-width: 0)"');
      } else {
        const preload_atts = ['rel="preload"', 'as="style"'].concat(attributes);
        link_header_preloads.add(`<${encodeURI(path3)}>; ${preload_atts.join(";")}; nopush`);
      }
      attributes.unshift('rel="stylesheet"');
      head += `
		<link href="${path3}" ${attributes.join(" ")}>`;
    }
  }
  for (const dep of fonts4) {
    const path3 = prefixed(dep);
    if (resolve_opts.preload({ type: "font", path: path3 })) {
      const ext = dep.slice(dep.lastIndexOf(".") + 1);
      const attributes = [
        'rel="preload"',
        'as="font"',
        `type="font/${ext}"`,
        `href="${path3}"`,
        "crossorigin"
      ];
      head += `
		<link ${attributes.join(" ")}>`;
    }
  }
  if (page_config.csr) {
    const opts = [
      `env: ${s(options2.public_env)}`,
      `paths: ${s(options2.paths)}`,
      `target: document.querySelector('[data-sveltekit-hydrate="${target}"]').parentNode`,
      `version: ${s(options2.version)}`
    ];
    if (page_config.ssr) {
      const hydrate = [
        `node_ids: [${branch.map(({ node }) => node.index).join(", ")}]`,
        `data: ${serialized.data}`,
        `form: ${serialized.form}`
      ];
      if (status !== 200) {
        hydrate.push(`status: ${status}`);
      }
      if (error2) {
        hydrate.push(`error: ${uneval(error2)}`);
      }
      if (options2.embedded) {
        hydrate.push(`params: ${uneval(event.params)}`, `route: ${s(event.route)}`);
      }
      opts.push(`hydrate: {
					${hydrate.join(",\n					")}
				}`);
    }
    const init_app = `
			import { start } from ${s(prefixed(entry.file))};

			start({
				${opts.join(",\n				")}
			});
		`;
    for (const dep of modulepreloads) {
      const path3 = prefixed(dep);
      if (resolve_opts.preload({ type: "js", path: path3 })) {
        link_header_preloads.add(`<${encodeURI(path3)}>; rel="modulepreload"; nopush`);
        if (state.prerendering) {
          head += `
		<link rel="modulepreload" href="${path3}">`;
        }
      }
    }
    const attributes = ['type="module"', `data-sveltekit-hydrate="${target}"`];
    csp.add_script(init_app);
    if (csp.script_needs_nonce) {
      attributes.push(`nonce="${csp.nonce}"`);
    }
    body += `
		<script ${attributes.join(" ")}>${init_app}<\/script>`;
  }
  if (page_config.ssr && page_config.csr) {
    body += `
	${fetched.map(
      (item) => serialize_data(item, resolve_opts.filterSerializedResponseHeaders, !!state.prerendering)
    ).join("\n	")}`;
  }
  if (options2.service_worker) {
    const opts = options2.dev ? `, { type: 'module' }` : "";
    const init_service_worker = `
			if ('serviceWorker' in navigator) {
				addEventListener('load', function () {
					navigator.serviceWorker.register('${prefixed("service-worker.js")}'${opts});
				});
			}
		`;
    csp.add_script(init_service_worker);
    head += `
		<script${csp.script_needs_nonce ? ` nonce="${csp.nonce}"` : ""}>${init_service_worker}<\/script>`;
  }
  if (state.prerendering) {
    const http_equiv = [];
    const csp_headers = csp.csp_provider.get_meta();
    if (csp_headers) {
      http_equiv.push(csp_headers);
    }
    if (state.prerendering.cache) {
      http_equiv.push(`<meta http-equiv="cache-control" content="${state.prerendering.cache}">`);
    }
    if (http_equiv.length > 0) {
      head = http_equiv.join("\n") + head;
    }
  }
  head += rendered.head;
  const html = await resolve_opts.transformPageChunk({
    html: options2.app_template({ head, body, assets: assets2, nonce: csp.nonce }),
    done: true
  }) || "";
  const headers = new Headers({
    "x-sveltekit-page": "true",
    "content-type": "text/html",
    etag: `"${hash(html)}"`
  });
  if (!state.prerendering) {
    const csp_header = csp.csp_provider.get_header();
    if (csp_header) {
      headers.set("content-security-policy", csp_header);
    }
    const report_only_header = csp.report_only_provider.get_header();
    if (report_only_header) {
      headers.set("content-security-policy-report-only", report_only_header);
    }
    if (link_header_preloads.size) {
      headers.set("link", Array.from(link_header_preloads).join(", "));
    }
  }
  return new Response(html, {
    status,
    headers
  });
}
async function respond_with_error({ event, options: options2, state, status, error: error2, resolve_opts }) {
  const fetched = [];
  try {
    const branch = [];
    const default_layout = await options2.manifest._.nodes[0]();
    const ssr = get_option([default_layout], "ssr") ?? true;
    const csr = get_option([default_layout], "csr") ?? true;
    if (ssr) {
      state.initiator = GENERIC_ERROR;
      const server_data_promise = load_server_data({
        event,
        options: options2,
        state,
        node: default_layout,
        parent: async () => ({})
      });
      const server_data = await server_data_promise;
      const data = await load_data({
        event,
        fetched,
        node: default_layout,
        parent: async () => ({}),
        resolve_opts,
        server_data_promise,
        state,
        csr
      });
      branch.push(
        {
          node: default_layout,
          server_data,
          data
        },
        {
          node: await options2.manifest._.nodes[1](),
          data: null,
          server_data: null
        }
      );
    }
    return await render_response({
      options: options2,
      state,
      page_config: {
        ssr,
        csr: get_option([default_layout], "csr") ?? true
      },
      status,
      error: await handle_error_and_jsonify(event, options2, error2),
      branch,
      fetched,
      event,
      resolve_opts
    });
  } catch (error3) {
    if (error3 instanceof Redirect) {
      return redirect_response(error3.status, error3.location);
    }
    return static_error_page(
      options2,
      error3 instanceof HttpError ? error3.status : 500,
      (await handle_error_and_jsonify(event, options2, error3)).message
    );
  }
}
async function render_page(event, route, page2, options2, state, resolve_opts) {
  if (state.initiator === route) {
    return new Response(`Not found: ${event.url.pathname}`, {
      status: 404
    });
  }
  state.initiator = route;
  if (is_action_json_request(event)) {
    const node = await options2.manifest._.nodes[page2.leaf]();
    return handle_action_json_request(event, options2, node?.server);
  }
  try {
    const nodes = await Promise.all([
      ...page2.layouts.map((n) => n == void 0 ? n : options2.manifest._.nodes[n]()),
      options2.manifest._.nodes[page2.leaf]()
    ]);
    const leaf_node = nodes.at(-1);
    let status = 200;
    let action_result = void 0;
    if (is_action_request(event, leaf_node)) {
      action_result = await handle_action_request(event, leaf_node.server);
      if (action_result?.type === "redirect") {
        return redirect_response(303, action_result.location);
      }
      if (action_result?.type === "error") {
        const error2 = action_result.error;
        status = error2 instanceof HttpError ? error2.status : 500;
      }
      if (action_result?.type === "failure") {
        status = action_result.status;
      }
    }
    const should_prerender_data = nodes.some((node) => node?.server);
    const data_pathname = add_data_suffix(event.url.pathname);
    const should_prerender = get_option(nodes, "prerender");
    if (should_prerender) {
      const mod2 = leaf_node.server;
      if (mod2 && mod2.actions) {
        throw new Error("Cannot prerender pages with actions");
      }
    } else if (state.prerendering) {
      if (should_prerender !== false && get_option(nodes, "ssr") === false && !leaf_node.server?.actions) {
        return await render_response({
          branch: [],
          fetched: [],
          page_config: {
            ssr: false,
            csr: get_option(nodes, "csr") ?? true
          },
          status,
          error: null,
          event,
          options: options2,
          state,
          resolve_opts
        });
      }
      return new Response(void 0, {
        status: 204
      });
    }
    state.prerender_default = should_prerender;
    const fetched = [];
    if (get_option(nodes, "ssr") === false) {
      return await render_response({
        branch: [],
        fetched,
        page_config: {
          ssr: false,
          csr: get_option(nodes, "csr") ?? true
        },
        status,
        error: null,
        event,
        options: options2,
        state,
        resolve_opts
      });
    }
    let branch = [];
    let load_error = null;
    const server_promises = nodes.map((node, i) => {
      if (load_error) {
        throw load_error;
      }
      return Promise.resolve().then(async () => {
        try {
          if (node === leaf_node && action_result?.type === "error") {
            throw action_result.error;
          }
          return await load_server_data({
            event,
            options: options2,
            state,
            node,
            parent: async () => {
              const data = {};
              for (let j = 0; j < i; j += 1) {
                const parent = await server_promises[j];
                if (parent)
                  Object.assign(data, await parent.data);
              }
              return data;
            }
          });
        } catch (e) {
          load_error = e;
          throw load_error;
        }
      });
    });
    const csr = get_option(nodes, "csr") ?? true;
    const load_promises = nodes.map((node, i) => {
      if (load_error)
        throw load_error;
      return Promise.resolve().then(async () => {
        try {
          return await load_data({
            event,
            fetched,
            node,
            parent: async () => {
              const data = {};
              for (let j = 0; j < i; j += 1) {
                Object.assign(data, await load_promises[j]);
              }
              return data;
            },
            resolve_opts,
            server_data_promise: server_promises[i],
            state,
            csr
          });
        } catch (e) {
          load_error = e;
          throw load_error;
        }
      });
    });
    for (const p of server_promises)
      p.catch(() => {
      });
    for (const p of load_promises)
      p.catch(() => {
      });
    for (let i = 0; i < nodes.length; i += 1) {
      const node = nodes[i];
      if (node) {
        try {
          const server_data = await server_promises[i];
          const data = await load_promises[i];
          branch.push({ node, server_data, data });
        } catch (e) {
          const err = normalize_error(e);
          if (err instanceof Redirect) {
            if (state.prerendering && should_prerender_data) {
              const body = JSON.stringify({
                type: "redirect",
                location: err.location
              });
              state.prerendering.dependencies.set(data_pathname, {
                response: new Response(body),
                body
              });
            }
            return redirect_response(err.status, err.location);
          }
          const status2 = err instanceof HttpError ? err.status : 500;
          const error2 = await handle_error_and_jsonify(event, options2, err);
          while (i--) {
            if (page2.errors[i]) {
              const index5 = page2.errors[i];
              const node2 = await options2.manifest._.nodes[index5]();
              let j = i;
              while (!branch[j])
                j -= 1;
              return await render_response({
                event,
                options: options2,
                state,
                resolve_opts,
                page_config: { ssr: true, csr: true },
                status: status2,
                error: error2,
                branch: compact(branch.slice(0, j + 1)).concat({
                  node: node2,
                  data: null,
                  server_data: null
                }),
                fetched
              });
            }
          }
          return static_error_page(options2, status2, error2.message);
        }
      } else {
        branch.push(null);
      }
    }
    if (state.prerendering && should_prerender_data) {
      const body = `{"type":"data","nodes":[${branch.map((node) => serialize_data_node(node?.server_data)).join(",")}]}`;
      state.prerendering.dependencies.set(data_pathname, {
        response: new Response(body),
        body
      });
    }
    return await render_response({
      event,
      options: options2,
      state,
      resolve_opts,
      page_config: {
        csr: get_option(nodes, "csr") ?? true,
        ssr: true
      },
      status,
      error: null,
      branch: compact(branch),
      action_result,
      fetched
    });
  } catch (error2) {
    return await respond_with_error({
      event,
      options: options2,
      state,
      status: 500,
      error: error2,
      resolve_opts
    });
  }
}
function exec(match2, params, matchers) {
  const result = {};
  const values = match2.slice(1);
  let buffered = "";
  for (let i = 0; i < params.length; i += 1) {
    const param = params[i];
    let value2 = values[i];
    if (param.chained && param.rest && buffered) {
      value2 = value2 ? buffered + "/" + value2 : buffered;
    }
    buffered = "";
    if (value2 === void 0) {
      if (param.rest)
        result[param.name] = "";
    } else {
      if (param.matcher && !matchers[param.matcher](value2)) {
        if (param.optional && param.chained) {
          let j = values.indexOf(void 0, i);
          if (j === -1) {
            const next = params[i + 1];
            if (next?.rest && next.chained) {
              buffered = value2;
            } else {
              return;
            }
          }
          while (j >= i) {
            values[j] = values[j - 1];
            j -= 1;
          }
          continue;
        }
        return;
      }
      result[param.name] = value2;
    }
  }
  if (buffered)
    return;
  return result;
}
function once(fn) {
  let done = false;
  let result;
  return () => {
    if (done)
      return result;
    done = true;
    return result = fn();
  };
}
var INVALIDATED_PARAM = "x-sveltekit-invalidated";
async function render_data(event, route, options2, state, invalidated_data_nodes, trailing_slash) {
  if (!route.page) {
    return new Response(void 0, {
      status: 404
    });
  }
  try {
    const node_ids = [...route.page.layouts, route.page.leaf];
    const invalidated = invalidated_data_nodes ?? node_ids.map(() => true);
    let aborted = false;
    const url = new URL(event.url);
    url.pathname = normalize_path(url.pathname, trailing_slash);
    const new_event = { ...event, url };
    const functions = node_ids.map((n, i) => {
      return once(async () => {
        try {
          if (aborted) {
            return {
              type: "skip"
            };
          }
          const node = n == void 0 ? n : await options2.manifest._.nodes[n]();
          return load_server_data({
            event: new_event,
            options: options2,
            state,
            node,
            parent: async () => {
              const data = {};
              for (let j = 0; j < i; j += 1) {
                const parent = await functions[j]();
                if (parent) {
                  Object.assign(data, parent.data);
                }
              }
              return data;
            }
          });
        } catch (e) {
          aborted = true;
          throw e;
        }
      });
    });
    const promises = functions.map(async (fn, i) => {
      if (!invalidated[i]) {
        return {
          type: "skip"
        };
      }
      return fn();
    });
    let length = promises.length;
    const nodes = await Promise.all(
      promises.map(
        (p, i) => p.catch(async (error2) => {
          if (error2 instanceof Redirect) {
            throw error2;
          }
          length = Math.min(length, i + 1);
          return {
            type: "error",
            error: await handle_error_and_jsonify(event, options2, error2),
            status: error2 instanceof HttpError ? error2.status : void 0
          };
        })
      )
    );
    try {
      const stubs = nodes.slice(0, length).map(serialize_data_node);
      const json2 = `{"type":"data","nodes":[${stubs.join(",")}]}`;
      return json_response(json2);
    } catch (e) {
      const error2 = e;
      return json_response(JSON.stringify(clarify_devalue_error(event, error2)), 500);
    }
  } catch (e) {
    const error2 = normalize_error(e);
    if (error2 instanceof Redirect) {
      return redirect_json_response(error2);
    } else {
      return json_response(JSON.stringify(await handle_error_and_jsonify(event, options2, error2)));
    }
  }
}
function json_response(json2, status = 200) {
  return new Response(json2, {
    status,
    headers: {
      "content-type": "application/json",
      "cache-control": "private, no-store"
    }
  });
}
function redirect_json_response(redirect) {
  return json_response(
    JSON.stringify({
      type: "redirect",
      location: redirect.location
    })
  );
}
var cookie_paths = {};
function get_cookies(request, url, dev, trailing_slash) {
  const header = request.headers.get("cookie") ?? "";
  const initial_cookies = (0, import_cookie.parse)(header, { decode: (value2) => value2 });
  const normalized_url = normalize_path(url.pathname, trailing_slash);
  const default_path = normalized_url.split("/").slice(0, -1).join("/") || "/";
  if (dev) {
    const initial_decoded_cookies = (0, import_cookie.parse)(header, { decode: decodeURIComponent });
    for (const name of Object.keys(cookie_paths)) {
      cookie_paths[name] = new Set(
        [...cookie_paths[name]].filter(
          (path3) => !path_matches(normalized_url, path3) || name in initial_decoded_cookies
        )
      );
    }
    for (const name in initial_decoded_cookies) {
      cookie_paths[name] = cookie_paths[name] ?? /* @__PURE__ */ new Set();
      if (![...cookie_paths[name]].some((path3) => path_matches(normalized_url, path3))) {
        cookie_paths[name].add(default_path);
      }
    }
  }
  const new_cookies = {};
  const defaults = {
    httpOnly: true,
    sameSite: "lax",
    secure: url.hostname === "localhost" && url.protocol === "http:" ? false : true
  };
  const cookies = {
    get(name, opts) {
      const c2 = new_cookies[name];
      if (c2 && domain_matches(url.hostname, c2.options.domain) && path_matches(url.pathname, c2.options.path)) {
        return c2.value;
      }
      const decoder = opts?.decode || decodeURIComponent;
      const req_cookies = (0, import_cookie.parse)(header, { decode: decoder });
      const cookie = req_cookies[name];
      if (!dev || cookie) {
        return cookie;
      }
      const paths = /* @__PURE__ */ new Set([...cookie_paths[name] ?? []]);
      if (c2) {
        paths.add(c2.options.path ?? default_path);
      }
      if (paths.size > 0) {
        console.warn(
          `Cookie with name '${name}' was not found at path '${url.pathname}', but a cookie with that name exists at these paths: '${[...paths].join("', '")}'. Did you mean to set its 'path' to '/' instead?`
        );
      }
    },
    set(name, value2, opts = {}) {
      let path3 = opts.path ?? default_path;
      new_cookies[name] = {
        name,
        value: value2,
        options: {
          ...defaults,
          ...opts,
          path: path3
        }
      };
      if (dev) {
        cookie_paths[name] = cookie_paths[name] ?? /* @__PURE__ */ new Set();
        if (!value2) {
          if (!cookie_paths[name].has(path3) && cookie_paths[name].size > 0) {
            const paths = `'${Array.from(cookie_paths[name]).join("', '")}'`;
            console.warn(
              `Trying to delete cookie '${name}' at path '${path3}', but a cookie with that name only exists at these paths: ${paths}.`
            );
          }
          cookie_paths[name].delete(path3);
        } else {
          cookie_paths[name].add(path3);
        }
      }
    },
    delete(name, opts = {}) {
      cookies.set(name, "", {
        ...opts,
        maxAge: 0
      });
    },
    serialize(name, value2, opts) {
      return (0, import_cookie.serialize)(name, value2, {
        ...defaults,
        ...opts
      });
    }
  };
  function get_cookie_header(destination, header2) {
    const combined_cookies = {
      ...initial_cookies
    };
    for (const key2 in new_cookies) {
      const cookie = new_cookies[key2];
      if (!domain_matches(destination.hostname, cookie.options.domain))
        continue;
      if (!path_matches(destination.pathname, cookie.options.path))
        continue;
      const encoder2 = cookie.options.encode || encodeURIComponent;
      combined_cookies[cookie.name] = encoder2(cookie.value);
    }
    if (header2) {
      const parsed = (0, import_cookie.parse)(header2, { decode: (value2) => value2 });
      for (const name in parsed) {
        combined_cookies[name] = parsed[name];
      }
    }
    return Object.entries(combined_cookies).map(([name, value2]) => `${name}=${value2}`).join("; ");
  }
  return { cookies, new_cookies, get_cookie_header };
}
function domain_matches(hostname, constraint) {
  if (!constraint)
    return true;
  const normalized = constraint[0] === "." ? constraint.slice(1) : constraint;
  if (hostname === normalized)
    return true;
  return hostname.endsWith("." + normalized);
}
function path_matches(path3, constraint) {
  if (!constraint)
    return true;
  const normalized = constraint.endsWith("/") ? constraint.slice(0, -1) : constraint;
  if (path3 === normalized)
    return true;
  return path3.startsWith(normalized + "/");
}
function add_cookies_to_headers(headers, cookies) {
  for (const new_cookie of cookies) {
    const { name, value: value2, options: options2 } = new_cookie;
    headers.append("set-cookie", (0, import_cookie.serialize)(name, value2, options2));
  }
}
function create_fetch({ event, options: options2, state, get_cookie_header }) {
  return async (info, init22) => {
    const original_request = normalize_fetch_input(info, init22, event.url);
    const request_body = init22?.body;
    let mode = (info instanceof Request ? info.mode : init22?.mode) ?? "cors";
    let credentials = (info instanceof Request ? info.credentials : init22?.credentials) ?? "same-origin";
    return await options2.hooks.handleFetch({
      event,
      request: original_request,
      fetch: async (info2, init3) => {
        const request = normalize_fetch_input(info2, init3, event.url);
        const url = new URL(request.url);
        if (!request.headers.has("origin")) {
          request.headers.set("origin", event.url.origin);
        }
        if (info2 !== original_request) {
          mode = (info2 instanceof Request ? info2.mode : init3?.mode) ?? "cors";
          credentials = (info2 instanceof Request ? info2.credentials : init3?.credentials) ?? "same-origin";
        }
        if ((request.method === "GET" || request.method === "HEAD") && (mode === "no-cors" && url.origin !== event.url.origin || url.origin === event.url.origin)) {
          request.headers.delete("origin");
        }
        if (url.origin !== event.url.origin) {
          if (`.${url.hostname}`.endsWith(`.${event.url.hostname}`) && credentials !== "omit") {
            const cookie = get_cookie_header(url, request.headers.get("cookie"));
            if (cookie)
              request.headers.set("cookie", cookie);
          }
          let response2 = await fetch(request);
          if (mode === "no-cors") {
            response2 = new Response("", {
              status: response2.status,
              statusText: response2.statusText,
              headers: response2.headers
            });
          }
          return response2;
        }
        let response;
        const prefix = options2.paths.assets || options2.paths.base;
        const decoded = decodeURIComponent(url.pathname);
        const filename = (decoded.startsWith(prefix) ? decoded.slice(prefix.length) : decoded).slice(1);
        const filename_html = `${filename}/index.html`;
        const is_asset = options2.manifest.assets.has(filename);
        const is_asset_html = options2.manifest.assets.has(filename_html);
        if (is_asset || is_asset_html) {
          const file4 = is_asset ? filename : filename_html;
          if (options2.read) {
            const type2 = is_asset ? options2.manifest.mimeTypes[filename.slice(filename.lastIndexOf("."))] : "text/html";
            return new Response(options2.read(file4), {
              headers: type2 ? { "content-type": type2 } : {}
            });
          }
          return await fetch(request);
        }
        if (credentials !== "omit") {
          const cookie = get_cookie_header(url, request.headers.get("cookie"));
          if (cookie) {
            request.headers.set("cookie", cookie);
          }
          const authorization = event.request.headers.get("authorization");
          if (authorization && !request.headers.has("authorization")) {
            request.headers.set("authorization", authorization);
          }
        }
        if (request_body && typeof request_body !== "string" && !ArrayBuffer.isView(request_body)) {
          throw new Error("Request body must be a string or TypedArray");
        }
        if (!request.headers.has("accept")) {
          request.headers.set("accept", "*/*");
        }
        if (!request.headers.has("accept-language")) {
          request.headers.set(
            "accept-language",
            event.request.headers.get("accept-language")
          );
        }
        response = await respond(request, options2, state);
        const set_cookie = response.headers.get("set-cookie");
        if (set_cookie) {
          for (const str of set_cookie_parser.splitCookiesString(set_cookie)) {
            const { name, value: value2, ...options22 } = set_cookie_parser.parseString(str);
            event.cookies.set(
              name,
              value2,
              options22
            );
          }
        }
        return response;
      }
    });
  };
}
function normalize_fetch_input(info, init22, url) {
  if (info instanceof Request) {
    return info;
  }
  return new Request(typeof info === "string" ? new URL(info, url) : info, init22);
}
function validator(expected) {
  const set3 = new Set(expected);
  function validate(module2, route_id) {
    if (!module2)
      return;
    for (const key2 in module2) {
      if (key2[0] !== "_" && !set3.has(key2)) {
        const valid = expected.join(", ");
        throw new Error(
          `Invalid export '${key2}'${route_id ? ` in ${route_id}` : ""} (valid exports are ${valid}, or anything with a '_' prefix)`
        );
      }
    }
  }
  return validate;
}
var validate_common_exports = validator([
  "load",
  "prerender",
  "csr",
  "ssr",
  "trailingSlash"
]);
var validate_page_server_exports = validator([
  "load",
  "prerender",
  "csr",
  "ssr",
  "actions",
  "trailingSlash"
]);
var validate_server_exports = validator([
  "GET",
  "POST",
  "PATCH",
  "PUT",
  "DELETE",
  "prerender",
  "trailingSlash"
]);
var default_transform = ({ html }) => html;
var default_filter = () => false;
var default_preload = ({ type: type2 }) => type2 === "js" || type2 === "css";
async function respond(request, options2, state) {
  let url = new URL(request.url);
  if (options2.csrf.check_origin) {
    const forbidden = request.method === "POST" && request.headers.get("origin") !== url.origin && is_form_content_type(request);
    if (forbidden) {
      const csrf_error = error(403, `Cross-site ${request.method} form submissions are forbidden`);
      if (request.headers.get("accept") === "application/json") {
        return json(csrf_error.body, { status: csrf_error.status });
      }
      return new Response(csrf_error.body.message, { status: csrf_error.status });
    }
  }
  let decoded;
  try {
    decoded = decode_pathname(url.pathname);
  } catch {
    return new Response("Malformed URI", { status: 400 });
  }
  let route = null;
  let params = {};
  if (options2.paths.base && !state.prerendering?.fallback) {
    if (!decoded.startsWith(options2.paths.base)) {
      return new Response("Not found", { status: 404 });
    }
    decoded = decoded.slice(options2.paths.base.length) || "/";
  }
  const is_data_request = has_data_suffix(decoded);
  let invalidated_data_nodes;
  if (is_data_request) {
    decoded = strip_data_suffix(decoded) || "/";
    url.pathname = strip_data_suffix(url.pathname) || "/";
    invalidated_data_nodes = url.searchParams.get(INVALIDATED_PARAM)?.split("_").map(Boolean);
    url.searchParams.delete(INVALIDATED_PARAM);
  }
  if (!state.prerendering?.fallback) {
    const matchers = await options2.manifest._.matchers();
    for (const candidate of options2.manifest._.routes) {
      const match2 = candidate.pattern.exec(decoded);
      if (!match2)
        continue;
      const matched = exec(match2, candidate.params, matchers);
      if (matched) {
        route = candidate;
        params = decode_params(matched);
        break;
      }
    }
  }
  let trailing_slash = void 0;
  const headers = {};
  const event = {
    cookies: null,
    fetch: null,
    getClientAddress: state.getClientAddress || (() => {
      throw new Error(
        `${"@sveltejs/adapter-vercel"} does not specify getClientAddress. Please raise an issue`
      );
    }),
    locals: {},
    params,
    platform: state.platform,
    request,
    route: { id: route?.id ?? null },
    setHeaders: (new_headers) => {
      for (const key2 in new_headers) {
        const lower2 = key2.toLowerCase();
        const value2 = new_headers[key2];
        if (lower2 === "set-cookie") {
          throw new Error(
            `Use \`event.cookies.set(name, value, options)\` instead of \`event.setHeaders\` to set cookies`
          );
        } else if (lower2 in headers) {
          throw new Error(`"${key2}" header is already set`);
        } else {
          headers[lower2] = value2;
          if (state.prerendering && lower2 === "cache-control") {
            state.prerendering.cache = value2;
          }
        }
      }
    },
    url,
    isDataRequest: is_data_request
  };
  let resolve_opts = {
    transformPageChunk: default_transform,
    filterSerializedResponseHeaders: default_filter,
    preload: default_preload
  };
  try {
    if (route && !is_data_request) {
      if (route.page) {
        const nodes = await Promise.all([
          ...route.page.layouts.map((n) => n == void 0 ? n : options2.manifest._.nodes[n]()),
          options2.manifest._.nodes[route.page.leaf]()
        ]);
        if (DEV)
          ;
        trailing_slash = get_option(nodes, "trailingSlash");
      } else if (route.endpoint) {
        const node = await route.endpoint();
        trailing_slash = node.trailingSlash;
        if (DEV)
          ;
      }
      const normalized = normalize_path(url.pathname, trailing_slash ?? "never");
      if (normalized !== url.pathname && !state.prerendering?.fallback) {
        return new Response(void 0, {
          status: 301,
          headers: {
            "x-sveltekit-normalize": "1",
            location: (normalized.startsWith("//") ? url.origin + normalized : normalized) + (url.search === "?" ? "" : url.search)
          }
        });
      }
    }
    const { cookies, new_cookies, get_cookie_header } = get_cookies(
      request,
      url,
      options2.dev,
      trailing_slash ?? "never"
    );
    event.cookies = cookies;
    event.fetch = create_fetch({ event, options: options2, state, get_cookie_header });
    if (state.prerendering && !state.prerendering.fallback)
      disable_search(url);
    const response = await options2.hooks.handle({
      event,
      resolve: (event2, opts) => resolve(event2, opts).then((response2) => {
        for (const key2 in headers) {
          const value2 = headers[key2];
          response2.headers.set(key2, value2);
        }
        add_cookies_to_headers(response2.headers, Object.values(new_cookies));
        if (state.prerendering && event2.route.id !== null) {
          response2.headers.set("x-sveltekit-routeid", encodeURI(event2.route.id));
        }
        return response2;
      })
    });
    if (response.status === 200 && response.headers.has("etag")) {
      let if_none_match_value = request.headers.get("if-none-match");
      if (if_none_match_value?.startsWith('W/"')) {
        if_none_match_value = if_none_match_value.substring(2);
      }
      const etag = response.headers.get("etag");
      if (if_none_match_value === etag) {
        const headers2 = new Headers({ etag });
        for (const key2 of [
          "cache-control",
          "content-location",
          "date",
          "expires",
          "vary",
          "set-cookie"
        ]) {
          const value2 = response.headers.get(key2);
          if (value2)
            headers2.set(key2, value2);
        }
        return new Response(void 0, {
          status: 304,
          headers: headers2
        });
      }
    }
    if (is_data_request && response.status >= 300 && response.status <= 308) {
      const location2 = response.headers.get("location");
      if (location2) {
        return redirect_json_response(new Redirect(response.status, location2));
      }
    }
    return response;
  } catch (error2) {
    if (error2 instanceof Redirect) {
      if (is_data_request) {
        return redirect_json_response(error2);
      } else {
        return redirect_response(error2.status, error2.location);
      }
    }
    return await handle_fatal_error(event, options2, error2);
  }
  async function resolve(event2, opts) {
    try {
      if (opts) {
        if ("ssr" in opts) {
          throw new Error(
            "ssr has been removed, set it in the appropriate +layout.js instead. See the PR for more information: https://github.com/sveltejs/kit/pull/6197"
          );
        }
        resolve_opts = {
          transformPageChunk: opts.transformPageChunk || default_transform,
          filterSerializedResponseHeaders: opts.filterSerializedResponseHeaders || default_filter,
          preload: opts.preload || default_preload
        };
      }
      if (state.prerendering?.fallback) {
        return await render_response({
          event: event2,
          options: options2,
          state,
          page_config: { ssr: false, csr: true },
          status: 200,
          error: null,
          branch: [],
          fetched: [],
          resolve_opts
        });
      }
      if (route) {
        let response;
        if (is_data_request) {
          response = await render_data(
            event2,
            route,
            options2,
            state,
            invalidated_data_nodes,
            trailing_slash ?? "never"
          );
        } else if (route.endpoint && (!route.page || is_endpoint_request(event2))) {
          response = await render_endpoint(event2, await route.endpoint(), state);
        } else if (route.page) {
          response = await render_page(event2, route, route.page, options2, state, resolve_opts);
        } else {
          throw new Error("This should never happen");
        }
        return response;
      }
      if (state.initiator === GENERIC_ERROR) {
        return new Response("Internal Server Error", {
          status: 500
        });
      }
      if (!state.initiator) {
        return await respond_with_error({
          event: event2,
          options: options2,
          state,
          status: 404,
          error: new Error(`Not found: ${event2.url.pathname}`),
          resolve_opts
        });
      }
      if (state.prerendering) {
        return new Response("not found", { status: 404 });
      }
      return await fetch(request);
    } catch (error2) {
      return await handle_fatal_error(event2, options2, error2);
    } finally {
      event2.cookies.set = () => {
        throw new Error("Cannot use `cookies.set(...)` after the response has been generated");
      };
      event2.setHeaders = () => {
        throw new Error("Cannot use `setHeaders(...)` after the response has been generated");
      };
    }
  }
}
var base = "";
var assets = "";
function set_paths(paths) {
  base = paths.base;
  assets = paths.assets || base;
}
var app_template = ({ head, body, assets: assets2, nonce }) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<title>patscenario</title>\n		<meta charset="utf-8" />\n		<link rel="icon" href="' + assets2 + '/mtc_logo_small_32.png" />\n		<meta name="viewport" content="width=device-width" />\n		' + head + '\n	</head>\n	<body data-sveltekit-preload-data="hover">\n		<div style="display: contents">' + body + "</div>\n	</body>\n</html>\n<style>\n	.bx--header {\n		background-color: #890c58!important;\n	}\n	.bx--content {\n		overflow-wrap: anywhere;\n		padding: 1.2rem!important;\n	}\n	@font-face {\n		font-family: 'IBM Plex Sans';\n		\n		src: local(''), url('IBMPlexSans-Light-Latin1.woff2')\n		  format('woff2');\n	}\n	  {# Tabelle 1 #}\n	  .bx--structured-list-th {\n		\n		white-space: nowrap;\n		transform: translate(-0px) rotate(0deg) ;\n		padding-right:0.5rem;\n		height: 2.0rem;\n	}\n	.bx--structured-list-td {\n		white-space: nowrap;\n	}\n\n	{# Tabelle 2 #}\n	#sl2 .bx--structured-list-td {\n		\n		white-space: normal;\n		\n		padding-right:0.5rem;\n		height: 3.5rem;\n	\n	}\n	#sl2 .bx--structured-list-th {\n		\n		white-space: nowrap;\n		transform: translate(0px) rotate(0deg) ;\n		padding-right:0.5rem;\n		height: 2.0rem;\n	\n	}\n	.bx--structured-list .bx--structured-list-row .bx--structured-list-td:first-of-type, .bx--structured-list .bx--structured-list-row .bx--structured-list-th:first-of-type {\n		padding-left: 1rem;\n		font-weight: 600;\n		\n	}\n	.bx--label {\n		margin-bottom: 0.2rem;\n		margin-top: 0.5rem;\n	}\n	.bx--structured-list {\n		display: block;\n		{# width: 100vw; #}\n		overflow-x: auto;\n		white-space: nowrap;\n		\n	}\n	.bx--structured-list::-webkit-scrollbar {\n		-webkit-appearance: none;\n	}\n	\n	.bx--structured-list::-webkit-scrollbar:vertical {\n		width: 11px;\n	}\n	\n	.bx--structured-list::-webkit-scrollbar:horizontal {\n		height: 11px;\n	}\n	\n	.bx--structured-list::-webkit-scrollbar-thumb {\n		border-radius: 8px;\n		border: 2px solid white; /* should match background, can't be transparent */\n		background-color: rgba(0, 0, 0, .5);\n	}\n	\n	.bx--structured-list::-webkit-scrollbar-track { \n		background-color: #fff; \n		border-radius: 8px; \n	} \n	\n</style>";
var error_template = ({ status, message }) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<title>' + message + `</title>

		<style>
			body {
				font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
					Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
				display: flex;
				align-items: center;
				justify-content: center;
				height: 100vh;
			}

			.error {
				display: flex;
				align-items: center;
				max-width: 32rem;
				margin: 0 1rem;
			}

			.status {
				font-weight: 200;
				font-size: 3rem;
				line-height: 1;
				position: relative;
				top: -0.05rem;
			}

			.message {
				border-left: 1px solid #ccc;
				padding: 0 0 0 1rem;
				margin: 0 0 0 1rem;
				min-height: 2.5rem;
				display: flex;
				align-items: center;
			}

			.message h1 {
				font-weight: 400;
				font-size: 1em;
				margin: 0;
			}
		</style>
	</head>
	<body>
		<div class="error">
			<span class="status">` + status + '</span>\n			<div class="message">\n				<h1>' + message + "</h1>\n			</div>\n		</div>\n	</body>\n</html>\n";
var read = null;
set_paths({ "base": "", "assets": "" });
var Server = class {
  constructor(manifest2) {
    this.options = {
      csp: { "mode": "auto", "directives": { "upgrade-insecure-requests": false, "block-all-mixed-content": false }, "reportOnly": { "upgrade-insecure-requests": false, "block-all-mixed-content": false } },
      csrf: {
        check_origin: true
      },
      dev: false,
      embedded: false,
      handle_error: (error2, event) => {
        return this.options.hooks.handleError({ error: error2, event }) ?? {
          message: event.route.id != null ? "Internal Error" : "Not Found"
        };
      },
      hooks: null,
      manifest: manifest2,
      paths: { base, assets },
      public_env: {},
      read,
      root: Root,
      service_worker: false,
      app_template,
      app_template_contains_nonce: false,
      error_template,
      version: "1671545497902"
    };
  }
  async init({ env }) {
    const entries = Object.entries(env);
    Object.fromEntries(entries.filter(([k]) => !k.startsWith("PUBLIC_")));
    const pub = Object.fromEntries(entries.filter(([k]) => k.startsWith("PUBLIC_")));
    this.options.public_env = pub;
    if (!this.options.hooks) {
      const module2 = await Promise.resolve().then(() => (init_hooks(), hooks_exports));
      this.options.hooks = {
        handle: module2.handle || (({ event, resolve }) => resolve(event)),
        handleError: module2.handleError || (({ error: error2 }) => console.error(error2.stack)),
        handleFetch: module2.handleFetch || (({ request, fetch: fetch2 }) => fetch2(request))
      };
    }
  }
  async respond(request, options2 = {}) {
    if (!(request instanceof Request)) {
      throw new Error("The first argument to server.respond must be a Request object. See https://github.com/sveltejs/kit/pull/3384 for details");
    }
    return respond(request, this.options, options2);
  }
};

// .svelte-kit/vercel-tmp/index/manifest.js
var manifest = {
  appDir: "_app",
  appPath: "_app",
  assets: /* @__PURE__ */ new Set(["IBMPlexMono-Light-Latin1.woff2", "IBMPlexSans-Light-Latin1.woff2", "IBMPlexSans-Regular-Latin1.woff2", "IBMPlexSans-SemiBold-Latin1.woff2", "IBMPlexSans-SemiBold.woff2", "favicon.png", "mtc_logo_small_32.png", "robots.txt"]),
  mimeTypes: { ".woff2": "font/woff2", ".png": "image/png", ".txt": "text/plain" },
  _: {
    entry: { "file": "_app/immutable/start-ea8dbb08.js", "imports": ["_app/immutable/start-ea8dbb08.js", "_app/immutable/chunks/index-58901655.js", "_app/immutable/chunks/singletons-ccc596e8.js", "_app/immutable/chunks/index-3832014f.js"], "stylesheets": [], "fonts": [] },
    nodes: [
      () => Promise.resolve().then(() => (init__(), __exports)),
      () => Promise.resolve().then(() => (init__2(), __exports2)),
      () => Promise.resolve().then(() => (init__3(), __exports3))
    ],
    routes: [
      {
        id: "/",
        pattern: /^\/$/,
        params: [],
        page: { layouts: [0], errors: [1], leaf: 2 },
        endpoint: null
      }
    ],
    matchers: async () => {
      return {};
    }
  }
};

// .svelte-kit/vercel-tmp/index/edge.js
var server = new Server(manifest);
var initialized = server.init({
  env: process.env
});
var edge_default = async (request) => {
  await initialized;
  return server.respond(request, {
    getClientAddress() {
      return request.headers.get("x-forwarded-for");
    }
  });
};
export {
  edge_default as default
};
/*! Bundled license information:

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

lodash-es/lodash.js:
  (**
   * @license
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="es" -o ./`
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
//# sourceMappingURL=index.js.map
